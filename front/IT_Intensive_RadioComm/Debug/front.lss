
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d70  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00008d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000840  200001dc  00008f4c  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20000a1c  0000978c  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005a1fd  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000082a6  00000000  00000000  0007a48d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e451  00000000  00000000  00082733  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bf0  00000000  00000000  00090b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001400  00000000  00000000  00091774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021fbb  00000000  00000000  00092b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001bf6d  00000000  00000000  000b4b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a1cd  00000000  00000000  000d0a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cf0  00000000  00000000  0015ac6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 2a 00 20 b9 25 00 00 b5 25 00 00 b5 25 00 00      *. .%...%...%..
	...
      2c:	b5 25 00 00 00 00 00 00 00 00 00 00 b5 25 00 00     .%...........%..
      3c:	b5 25 00 00 b5 25 00 00 b5 25 00 00 b5 25 00 00     .%...%...%...%..
      4c:	b5 25 00 00 f9 08 00 00 b5 25 00 00 b5 25 00 00     .%.......%...%..
      5c:	b5 25 00 00 b5 25 00 00 e5 0e 00 00 f5 0e 00 00     .%...%..........
      6c:	05 0f 00 00 15 0f 00 00 25 0f 00 00 35 0f 00 00     ........%...5...
      7c:	99 03 00 00 a9 03 00 00 b9 03 00 00 95 22 00 00     ............."..
      8c:	a5 22 00 00 b5 22 00 00 00 00 00 00 00 00 00 00     ."..."..........
      9c:	b5 25 00 00 b5 25 00 00 00 00 00 00 b5 25 00 00     .%...%.......%..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00008d70 	.word	0x00008d70

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00008d70 	.word	0x00008d70
     10c:	00008d70 	.word	0x00008d70
     110:	00000000 	.word	0x00000000

00000114 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     114:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     116:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     118:	2300      	movs	r3, #0
     11a:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     11c:	2300      	movs	r3, #0
     11e:	6043      	str	r3, [r0, #4]
}
     120:	4770      	bx	lr
	...

00000124 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     124:	b5f0      	push	{r4, r5, r6, r7, lr}
     126:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     128:	a903      	add	r1, sp, #12
     12a:	2201      	movs	r2, #1
     12c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     12e:	2300      	movs	r3, #0
     130:	708b      	strb	r3, [r1, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     132:	ad02      	add	r5, sp, #8
     134:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     136:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     138:	70ab      	strb	r3, [r5, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     13a:	4668      	mov	r0, sp
     13c:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     13e:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     140:	7083      	strb	r3, [r0, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     142:	ac01      	add	r4, sp, #4
     144:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     146:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     148:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     14a:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     14c:	4f09      	ldr	r7, [pc, #36]	; (174 <artist_ultrasonic_gpio_init+0x50>)
     14e:	33b5      	adds	r3, #181	; 0xb5
     150:	5cf8      	ldrb	r0, [r7, r3]
     152:	4e09      	ldr	r6, [pc, #36]	; (178 <artist_ultrasonic_gpio_init+0x54>)
     154:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     156:	23b4      	movs	r3, #180	; 0xb4
     158:	5cf8      	ldrb	r0, [r7, r3]
     15a:	0029      	movs	r1, r5
     15c:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     15e:	23bc      	movs	r3, #188	; 0xbc
     160:	5cf8      	ldrb	r0, [r7, r3]
     162:	0021      	movs	r1, r4
     164:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     166:	23c4      	movs	r3, #196	; 0xc4
     168:	5cf8      	ldrb	r0, [r7, r3]
     16a:	4669      	mov	r1, sp
     16c:	47b0      	blx	r6
}
     16e:	b005      	add	sp, #20
     170:	bdf0      	pop	{r4, r5, r6, r7, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	200007b4 	.word	0x200007b4
     178:	00000a5d 	.word	0x00000a5d

0000017c <artist_ultrasonic_get_value>:
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
				artist_front.center_distance, 
				artist_front.right_distance);  
}
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     17c:	b5f0      	push	{r4, r5, r6, r7, lr}
     17e:	b083      	sub	sp, #12
     180:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     182:	7842      	ldrb	r2, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     184:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     186:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     188:	2900      	cmp	r1, #0
     18a:	d104      	bne.n	196 <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     18c:	0953      	lsrs	r3, r2, #5
     18e:	01db      	lsls	r3, r3, #7
     190:	495c      	ldr	r1, [pc, #368]	; (304 <artist_ultrasonic_get_value+0x188>)
     192:	468c      	mov	ip, r1
     194:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     196:	211f      	movs	r1, #31
     198:	4011      	ands	r1, r2
     19a:	2201      	movs	r2, #1
     19c:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     19e:	615a      	str	r2, [r3, #20]
	delay_us(40);
     1a0:	2028      	movs	r0, #40	; 0x28
     1a2:	4b59      	ldr	r3, [pc, #356]	; (308 <artist_ultrasonic_get_value+0x18c>)
     1a4:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     1a6:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     1a8:	09d1      	lsrs	r1, r2, #7
		return NULL;
     1aa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     1ac:	2900      	cmp	r1, #0
     1ae:	d104      	bne.n	1ba <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     1b0:	0953      	lsrs	r3, r2, #5
     1b2:	01db      	lsls	r3, r3, #7
     1b4:	4953      	ldr	r1, [pc, #332]	; (304 <artist_ultrasonic_get_value+0x188>)
     1b6:	468c      	mov	ip, r1
     1b8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1ba:	211f      	movs	r1, #31
     1bc:	4011      	ands	r1, r2
     1be:	2201      	movs	r2, #1
     1c0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     1c2:	619a      	str	r2, [r3, #24]
	delay_us(10);
     1c4:	200a      	movs	r0, #10
     1c6:	4b50      	ldr	r3, [pc, #320]	; (308 <artist_ultrasonic_get_value+0x18c>)
     1c8:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     1ca:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     1cc:	09d1      	lsrs	r1, r2, #7
		return NULL;
     1ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     1d0:	2900      	cmp	r1, #0
     1d2:	d104      	bne.n	1de <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     1d4:	0953      	lsrs	r3, r2, #5
     1d6:	01db      	lsls	r3, r3, #7
     1d8:	494a      	ldr	r1, [pc, #296]	; (304 <artist_ultrasonic_get_value+0x188>)
     1da:	468c      	mov	ip, r1
     1dc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1de:	211f      	movs	r1, #31
     1e0:	4011      	ands	r1, r2
     1e2:	2201      	movs	r2, #1
     1e4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     1e6:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     1e8:	4b48      	ldr	r3, [pc, #288]	; (30c <artist_ultrasonic_get_value+0x190>)
     1ea:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     1ec:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     1ee:	b25b      	sxtb	r3, r3
     1f0:	2b00      	cmp	r3, #0
     1f2:	dbfb      	blt.n	1ec <artist_ultrasonic_get_value+0x70>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     1f4:	2300      	movs	r3, #0
     1f6:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     1f8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     1fa:	b25b      	sxtb	r3, r3
     1fc:	2b00      	cmp	r3, #0
     1fe:	dbfb      	blt.n	1f8 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     200:	2340      	movs	r3, #64	; 0x40
     202:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     204:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     206:	221f      	movs	r2, #31
     208:	401a      	ands	r2, r3
     20a:	2001      	movs	r0, #1
     20c:	4090      	lsls	r0, r2
     20e:	09da      	lsrs	r2, r3, #7
     210:	2100      	movs	r1, #0
     212:	2a00      	cmp	r2, #0
     214:	d104      	bne.n	220 <artist_ultrasonic_get_value+0xa4>
     216:	0959      	lsrs	r1, r3, #5
     218:	01c9      	lsls	r1, r1, #7
     21a:	4b3a      	ldr	r3, [pc, #232]	; (304 <artist_ultrasonic_get_value+0x188>)
     21c:	469c      	mov	ip, r3
     21e:	4461      	add	r1, ip
     220:	4b3b      	ldr	r3, [pc, #236]	; (310 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     222:	6a0a      	ldr	r2, [r1, #32]
     224:	4202      	tst	r2, r0
     226:	d105      	bne.n	234 <artist_ultrasonic_get_value+0xb8>
     228:	3b01      	subs	r3, #1
     22a:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     22c:	2b00      	cmp	r3, #0
     22e:	d1f8      	bne.n	222 <artist_ultrasonic_get_value+0xa6>
     230:	6860      	ldr	r0, [r4, #4]
     232:	e062      	b.n	2fa <artist_ultrasonic_get_value+0x17e>
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     234:	4835      	ldr	r0, [pc, #212]	; (30c <artist_ultrasonic_get_value+0x190>)
     236:	4b37      	ldr	r3, [pc, #220]	; (314 <artist_ultrasonic_get_value+0x198>)
     238:	4798      	blx	r3
     23a:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     23c:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     23e:	221f      	movs	r2, #31
     240:	401a      	ands	r2, r3
     242:	2001      	movs	r0, #1
     244:	4090      	lsls	r0, r2
     246:	09da      	lsrs	r2, r3, #7
     248:	2100      	movs	r1, #0
     24a:	2a00      	cmp	r2, #0
     24c:	d104      	bne.n	258 <artist_ultrasonic_get_value+0xdc>
     24e:	0959      	lsrs	r1, r3, #5
     250:	01c9      	lsls	r1, r1, #7
     252:	4b2c      	ldr	r3, [pc, #176]	; (304 <artist_ultrasonic_get_value+0x188>)
     254:	469c      	mov	ip, r3
     256:	4461      	add	r1, ip
     258:	4b2d      	ldr	r3, [pc, #180]	; (310 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     25a:	6a0a      	ldr	r2, [r1, #32]
     25c:	4202      	tst	r2, r0
     25e:	d005      	beq.n	26c <artist_ultrasonic_get_value+0xf0>
     260:	3b01      	subs	r3, #1
     262:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     264:	2b00      	cmp	r3, #0
     266:	d1f8      	bne.n	25a <artist_ultrasonic_get_value+0xde>
     268:	6860      	ldr	r0, [r4, #4]
     26a:	e046      	b.n	2fa <artist_ultrasonic_get_value+0x17e>
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     26c:	4e27      	ldr	r6, [pc, #156]	; (30c <artist_ultrasonic_get_value+0x190>)
     26e:	0030      	movs	r0, r6
     270:	4b28      	ldr	r3, [pc, #160]	; (314 <artist_ultrasonic_get_value+0x198>)
     272:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     274:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     276:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     278:	b25b      	sxtb	r3, r3
     27a:	2b00      	cmp	r3, #0
     27c:	dbfb      	blt.n	276 <artist_ultrasonic_get_value+0xfa>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     27e:	2380      	movs	r3, #128	; 0x80
     280:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     282:	0400      	lsls	r0, r0, #16
     284:	0c00      	lsrs	r0, r0, #16
     286:	042d      	lsls	r5, r5, #16
     288:	0c2d      	lsrs	r5, r5, #16
     28a:	1b40      	subs	r0, r0, r5
     28c:	4f22      	ldr	r7, [pc, #136]	; (318 <artist_ultrasonic_get_value+0x19c>)
     28e:	47b8      	blx	r7
     290:	4b22      	ldr	r3, [pc, #136]	; (31c <artist_ultrasonic_get_value+0x1a0>)
     292:	4798      	blx	r3
     294:	4a22      	ldr	r2, [pc, #136]	; (320 <artist_ultrasonic_get_value+0x1a4>)
     296:	4b23      	ldr	r3, [pc, #140]	; (324 <artist_ultrasonic_get_value+0x1a8>)
     298:	4d23      	ldr	r5, [pc, #140]	; (328 <artist_ultrasonic_get_value+0x1ac>)
     29a:	47a8      	blx	r5
     29c:	4b23      	ldr	r3, [pc, #140]	; (32c <artist_ultrasonic_get_value+0x1b0>)
     29e:	4798      	blx	r3
     2a0:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     2a2:	6865      	ldr	r5, [r4, #4]
	if (new > old * module->filter_large_change_counts ||
     2a4:	78a6      	ldrb	r6, [r4, #2]
     2a6:	0030      	movs	r0, r6
     2a8:	47b8      	blx	r7
     2aa:	1c07      	adds	r7, r0, #0
     2ac:	1c01      	adds	r1, r0, #0
     2ae:	1c28      	adds	r0, r5, #0
     2b0:	4b1f      	ldr	r3, [pc, #124]	; (330 <artist_ultrasonic_get_value+0x1b4>)
     2b2:	4798      	blx	r3
     2b4:	1c01      	adds	r1, r0, #0
     2b6:	9801      	ldr	r0, [sp, #4]
     2b8:	4b1e      	ldr	r3, [pc, #120]	; (334 <artist_ultrasonic_get_value+0x1b8>)
     2ba:	4798      	blx	r3
     2bc:	2800      	cmp	r0, #0
     2be:	d109      	bne.n	2d4 <artist_ultrasonic_get_value+0x158>
	new < old * 1/module->filter_large_change_counts ) {
     2c0:	1c39      	adds	r1, r7, #0
     2c2:	1c28      	adds	r0, r5, #0
     2c4:	4b1c      	ldr	r3, [pc, #112]	; (338 <artist_ultrasonic_get_value+0x1bc>)
     2c6:	4798      	blx	r3
     2c8:	1c01      	adds	r1, r0, #0
	if (new > old * module->filter_large_change_counts ||
     2ca:	9801      	ldr	r0, [sp, #4]
     2cc:	4b1b      	ldr	r3, [pc, #108]	; (33c <artist_ultrasonic_get_value+0x1c0>)
     2ce:	4798      	blx	r3
     2d0:	2800      	cmp	r0, #0
     2d2:	d005      	beq.n	2e0 <artist_ultrasonic_get_value+0x164>
		module->filter_large_change_counts ++;
     2d4:	1c73      	adds	r3, r6, #1
     2d6:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     2d8:	2b03      	cmp	r3, #3
     2da:	d810      	bhi.n	2fe <artist_ultrasonic_get_value+0x182>
		module->filter_large_change_counts ++;
     2dc:	70a3      	strb	r3, [r4, #2]
			new = old;
     2de:	9501      	str	r5, [sp, #4]
	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     2e0:	4f13      	ldr	r7, [pc, #76]	; (330 <artist_ultrasonic_get_value+0x1b4>)
     2e2:	4917      	ldr	r1, [pc, #92]	; (340 <artist_ultrasonic_get_value+0x1c4>)
     2e4:	9801      	ldr	r0, [sp, #4]
     2e6:	47b8      	blx	r7
     2e8:	1c06      	adds	r6, r0, #0
     2ea:	4916      	ldr	r1, [pc, #88]	; (344 <artist_ultrasonic_get_value+0x1c8>)
     2ec:	1c28      	adds	r0, r5, #0
     2ee:	47b8      	blx	r7
     2f0:	1c01      	adds	r1, r0, #0
     2f2:	1c30      	adds	r0, r6, #0
     2f4:	4b14      	ldr	r3, [pc, #80]	; (348 <artist_ultrasonic_get_value+0x1cc>)
     2f6:	4798      	blx	r3
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     2f8:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     2fa:	b003      	add	sp, #12
     2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->filter_large_change_counts = 0;
     2fe:	2300      	movs	r3, #0
     300:	70a3      	strb	r3, [r4, #2]
     302:	e7ed      	b.n	2e0 <artist_ultrasonic_get_value+0x164>
     304:	41004400 	.word	0x41004400
     308:	0000075d 	.word	0x0000075d
     30c:	200007b4 	.word	0x200007b4
     310:	0000ff01 	.word	0x0000ff01
     314:	00002539 	.word	0x00002539
     318:	00006a89 	.word	0x00006a89
     31c:	00008679 	.word	0x00008679
     320:	b020c49c 	.word	0xb020c49c
     324:	3f916872 	.word	0x3f916872
     328:	000079b1 	.word	0x000079b1
     32c:	0000871d 	.word	0x0000871d
     330:	00006849 	.word	0x00006849
     334:	000060c9 	.word	0x000060c9
     338:	00006469 	.word	0x00006469
     33c:	000060a1 	.word	0x000060a1
     340:	3ecccccc 	.word	0x3ecccccc
     344:	3f19999a 	.word	0x3f19999a
     348:	00006145 	.word	0x00006145

0000034c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     34c:	b5f0      	push	{r4, r5, r6, r7, lr}
     34e:	46c6      	mov	lr, r8
     350:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     352:	0080      	lsls	r0, r0, #2
     354:	4b0e      	ldr	r3, [pc, #56]	; (390 <_tcc_interrupt_handler+0x44>)
     356:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     358:	683b      	ldr	r3, [r7, #0]
     35a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     35e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     360:	4013      	ands	r3, r2
     362:	401e      	ands	r6, r3
     364:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     366:	4b0b      	ldr	r3, [pc, #44]	; (394 <_tcc_interrupt_handler+0x48>)
     368:	4698      	mov	r8, r3
     36a:	e002      	b.n	372 <_tcc_interrupt_handler+0x26>
     36c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     36e:	2c30      	cmp	r4, #48	; 0x30
     370:	d00a      	beq.n	388 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     372:	4643      	mov	r3, r8
     374:	58e5      	ldr	r5, [r4, r3]
     376:	4235      	tst	r5, r6
     378:	d0f8      	beq.n	36c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     37a:	193b      	adds	r3, r7, r4
     37c:	685b      	ldr	r3, [r3, #4]
     37e:	0038      	movs	r0, r7
     380:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     382:	683b      	ldr	r3, [r7, #0]
     384:	62dd      	str	r5, [r3, #44]	; 0x2c
     386:	e7f1      	b.n	36c <_tcc_interrupt_handler+0x20>
		}
	}
}
     388:	bc04      	pop	{r2}
     38a:	4690      	mov	r8, r2
     38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	20000894 	.word	0x20000894
     394:	0000886c 	.word	0x0000886c

00000398 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     398:	b510      	push	{r4, lr}
     39a:	2000      	movs	r0, #0
     39c:	4b01      	ldr	r3, [pc, #4]	; (3a4 <TCC0_Handler+0xc>)
     39e:	4798      	blx	r3
     3a0:	bd10      	pop	{r4, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	0000034d 	.word	0x0000034d

000003a8 <TCC1_Handler>:
     3a8:	b510      	push	{r4, lr}
     3aa:	2001      	movs	r0, #1
     3ac:	4b01      	ldr	r3, [pc, #4]	; (3b4 <TCC1_Handler+0xc>)
     3ae:	4798      	blx	r3
     3b0:	bd10      	pop	{r4, pc}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	0000034d 	.word	0x0000034d

000003b8 <TCC2_Handler>:
     3b8:	b510      	push	{r4, lr}
     3ba:	2002      	movs	r0, #2
     3bc:	4b01      	ldr	r3, [pc, #4]	; (3c4 <TCC2_Handler+0xc>)
     3be:	4798      	blx	r3
     3c0:	bd10      	pop	{r4, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	0000034d 	.word	0x0000034d

000003c8 <usart_write_callback>:

}
void usart_write_callback(struct usart_module *const usart_module)
{
	
}
     3c8:	4770      	bx	lr
	...

000003cc <usart_read_callback>:
{
     3cc:	b510      	push	{r4, lr}
     3ce:	0004      	movs	r4, r0
	printf("1test");  
     3d0:	480d      	ldr	r0, [pc, #52]	; (408 <usart_read_callback+0x3c>)
     3d2:	4b0e      	ldr	r3, [pc, #56]	; (40c <usart_read_callback+0x40>)
     3d4:	4798      	blx	r3
	switch(rx_buffer[0]) {
     3d6:	4b0e      	ldr	r3, [pc, #56]	; (410 <usart_read_callback+0x44>)
     3d8:	781b      	ldrb	r3, [r3, #0]
     3da:	b2db      	uxtb	r3, r3
     3dc:	2b20      	cmp	r3, #32
     3de:	d00c      	beq.n	3fa <usart_read_callback+0x2e>
     3e0:	2b77      	cmp	r3, #119	; 0x77
     3e2:	d104      	bne.n	3ee <usart_read_callback+0x22>
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH); 	
     3e4:	2205      	movs	r2, #5
     3e6:	490b      	ldr	r1, [pc, #44]	; (414 <usart_read_callback+0x48>)
     3e8:	0020      	movs	r0, r4
     3ea:	4b0b      	ldr	r3, [pc, #44]	; (418 <usart_read_callback+0x4c>)
     3ec:	4798      	blx	r3
	usart_read_buffer_job( usart_instance,
     3ee:	2205      	movs	r2, #5
     3f0:	4907      	ldr	r1, [pc, #28]	; (410 <usart_read_callback+0x44>)
     3f2:	0020      	movs	r0, r4
     3f4:	4b09      	ldr	r3, [pc, #36]	; (41c <usart_read_callback+0x50>)
     3f6:	4798      	blx	r3
}
     3f8:	bd10      	pop	{r4, pc}
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     3fa:	2205      	movs	r2, #5
     3fc:	4905      	ldr	r1, [pc, #20]	; (414 <usart_read_callback+0x48>)
     3fe:	3108      	adds	r1, #8
     400:	0020      	movs	r0, r4
     402:	4b05      	ldr	r3, [pc, #20]	; (418 <usart_read_callback+0x4c>)
     404:	4798      	blx	r3
		break;
     406:	e7f2      	b.n	3ee <usart_read_callback+0x22>
     408:	000088b0 	.word	0x000088b0
     40c:	00003c49 	.word	0x00003c49
     410:	2000088c 	.word	0x2000088c
     414:	0000889c 	.word	0x0000889c
     418:	0000177d 	.word	0x0000177d
     41c:	0000179d 	.word	0x0000179d

00000420 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     420:	b570      	push	{r4, r5, r6, lr}
     422:	b082      	sub	sp, #8
     424:	0005      	movs	r5, r0
     426:	000e      	movs	r6, r1
	uint16_t temp = 0;
     428:	2200      	movs	r2, #0
     42a:	466b      	mov	r3, sp
     42c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     42e:	4c06      	ldr	r4, [pc, #24]	; (448 <usart_serial_getchar+0x28>)
     430:	466b      	mov	r3, sp
     432:	1d99      	adds	r1, r3, #6
     434:	0028      	movs	r0, r5
     436:	47a0      	blx	r4
     438:	2800      	cmp	r0, #0
     43a:	d1f9      	bne.n	430 <usart_serial_getchar+0x10>

	*c = temp;
     43c:	466b      	mov	r3, sp
     43e:	3306      	adds	r3, #6
     440:	881b      	ldrh	r3, [r3, #0]
     442:	7033      	strb	r3, [r6, #0]
}
     444:	b002      	add	sp, #8
     446:	bd70      	pop	{r4, r5, r6, pc}
     448:	00001669 	.word	0x00001669

0000044c <usart_serial_putchar>:
{
     44c:	b570      	push	{r4, r5, r6, lr}
     44e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     450:	b28c      	uxth	r4, r1
     452:	4e03      	ldr	r6, [pc, #12]	; (460 <usart_serial_putchar+0x14>)
     454:	0021      	movs	r1, r4
     456:	0028      	movs	r0, r5
     458:	47b0      	blx	r6
     45a:	2800      	cmp	r0, #0
     45c:	d1fa      	bne.n	454 <usart_serial_putchar+0x8>
}
     45e:	bd70      	pop	{r4, r5, r6, pc}
     460:	0000163d 	.word	0x0000163d

00000464 <artist_ultrasonic_tc_configure>:
void artist_ultrasonic_tc_configure() {
     464:	b510      	push	{r4, lr}
     466:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     468:	aa01      	add	r2, sp, #4
     46a:	2300      	movs	r3, #0
     46c:	2100      	movs	r1, #0
     46e:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     470:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     472:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     474:	2000      	movs	r0, #0
     476:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     478:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     47a:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     47c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     47e:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     480:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     482:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     484:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     486:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     488:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     48a:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     48c:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     48e:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     490:	8593      	strh	r3, [r2, #44]	; 0x2c
	config.clock_source = GCLK_GENERATOR_3;
     492:	3303      	adds	r3, #3
     494:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     496:	23c0      	movs	r3, #192	; 0xc0
     498:	009b      	lsls	r3, r3, #2
     49a:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     49c:	2301      	movs	r3, #1
     49e:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     4a0:	4c07      	ldr	r4, [pc, #28]	; (4c0 <artist_ultrasonic_tc_configure+0x5c>)
     4a2:	4908      	ldr	r1, [pc, #32]	; (4c4 <artist_ultrasonic_tc_configure+0x60>)
     4a4:	0020      	movs	r0, r4
     4a6:	4b08      	ldr	r3, [pc, #32]	; (4c8 <artist_ultrasonic_tc_configure+0x64>)
     4a8:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     4aa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     4ac:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     4ae:	b25b      	sxtb	r3, r3
     4b0:	2b00      	cmp	r3, #0
     4b2:	dbfb      	blt.n	4ac <artist_ultrasonic_tc_configure+0x48>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     4b4:	8813      	ldrh	r3, [r2, #0]
     4b6:	2102      	movs	r1, #2
     4b8:	430b      	orrs	r3, r1
     4ba:	8013      	strh	r3, [r2, #0]
}
     4bc:	b00e      	add	sp, #56	; 0x38
     4be:	bd10      	pop	{r4, pc}
     4c0:	200007b4 	.word	0x200007b4
     4c4:	42003000 	.word	0x42003000
     4c8:	000022fd 	.word	0x000022fd

000004cc <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     4cc:	b570      	push	{r4, r5, r6, lr}
     4ce:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     4d0:	2200      	movs	r2, #0
     4d2:	4906      	ldr	r1, [pc, #24]	; (4ec <configure_usart_callbacks+0x20>)
     4d4:	4d06      	ldr	r5, [pc, #24]	; (4f0 <configure_usart_callbacks+0x24>)
     4d6:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     4d8:	2201      	movs	r2, #1
     4da:	4906      	ldr	r1, [pc, #24]	; (4f4 <configure_usart_callbacks+0x28>)
     4dc:	0020      	movs	r0, r4
     4de:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     4e0:	2231      	movs	r2, #49	; 0x31
     4e2:	5ca3      	ldrb	r3, [r4, r2]
     4e4:	2103      	movs	r1, #3
     4e6:	430b      	orrs	r3, r1
     4e8:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     4ea:	bd70      	pop	{r4, r5, r6, pc}
     4ec:	000003c9 	.word	0x000003c9
     4f0:	00001765 	.word	0x00001765
     4f4:	000003cd 	.word	0x000003cd

000004f8 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     4f8:	b570      	push	{r4, r5, r6, lr}
     4fa:	b090      	sub	sp, #64	; 0x40
     4fc:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     4fe:	2380      	movs	r3, #128	; 0x80
     500:	05db      	lsls	r3, r3, #23
     502:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     504:	2300      	movs	r3, #0
     506:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     508:	22ff      	movs	r2, #255	; 0xff
     50a:	4669      	mov	r1, sp
     50c:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     50e:	2200      	movs	r2, #0
     510:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     512:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     514:	2196      	movs	r1, #150	; 0x96
     516:	0189      	lsls	r1, r1, #6
     518:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     51a:	2101      	movs	r1, #1
     51c:	2024      	movs	r0, #36	; 0x24
     51e:	466d      	mov	r5, sp
     520:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     522:	3001      	adds	r0, #1
     524:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     526:	3125      	adds	r1, #37	; 0x25
     528:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     52a:	3101      	adds	r1, #1
     52c:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     52e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     530:	3105      	adds	r1, #5
     532:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     534:	3101      	adds	r1, #1
     536:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     538:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     53a:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     53c:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     53e:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     540:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     542:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     544:	2313      	movs	r3, #19
     546:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     548:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     54a:	2380      	movs	r3, #128	; 0x80
     54c:	035b      	lsls	r3, r3, #13
     54e:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     550:	4b1e      	ldr	r3, [pc, #120]	; (5cc <artist_usart_configure+0xd4>)
     552:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     554:	4b1e      	ldr	r3, [pc, #120]	; (5d0 <artist_usart_configure+0xd8>)
     556:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     558:	2301      	movs	r3, #1
     55a:	425b      	negs	r3, r3
     55c:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     55e:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     560:	4e1c      	ldr	r6, [pc, #112]	; (5d4 <artist_usart_configure+0xdc>)
     562:	4d1d      	ldr	r5, [pc, #116]	; (5d8 <artist_usart_configure+0xe0>)
     564:	466a      	mov	r2, sp
     566:	0031      	movs	r1, r6
     568:	0020      	movs	r0, r4
     56a:	47a8      	blx	r5
     56c:	2800      	cmp	r0, #0
     56e:	d1f9      	bne.n	564 <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     570:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     572:	0028      	movs	r0, r5
     574:	4b19      	ldr	r3, [pc, #100]	; (5dc <artist_usart_configure+0xe4>)
     576:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     578:	231f      	movs	r3, #31
     57a:	4018      	ands	r0, r3
     57c:	3b1e      	subs	r3, #30
     57e:	4083      	lsls	r3, r0
     580:	4a17      	ldr	r2, [pc, #92]	; (5e0 <artist_usart_configure+0xe8>)
     582:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     584:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     586:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     588:	2b00      	cmp	r3, #0
     58a:	d1fc      	bne.n	586 <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     58c:	682b      	ldr	r3, [r5, #0]
     58e:	2202      	movs	r2, #2
     590:	4313      	orrs	r3, r2
     592:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     594:	0020      	movs	r0, r4
     596:	4b13      	ldr	r3, [pc, #76]	; (5e4 <artist_usart_configure+0xec>)
     598:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     59a:	4b13      	ldr	r3, [pc, #76]	; (5e8 <artist_usart_configure+0xf0>)
     59c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     59e:	4a13      	ldr	r2, [pc, #76]	; (5ec <artist_usart_configure+0xf4>)
     5a0:	4b13      	ldr	r3, [pc, #76]	; (5f0 <artist_usart_configure+0xf8>)
     5a2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     5a4:	4a13      	ldr	r2, [pc, #76]	; (5f4 <artist_usart_configure+0xfc>)
     5a6:	4b14      	ldr	r3, [pc, #80]	; (5f8 <artist_usart_configure+0x100>)
     5a8:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     5aa:	466a      	mov	r2, sp
     5ac:	4909      	ldr	r1, [pc, #36]	; (5d4 <artist_usart_configure+0xdc>)
     5ae:	0020      	movs	r0, r4
     5b0:	4b09      	ldr	r3, [pc, #36]	; (5d8 <artist_usart_configure+0xe0>)
     5b2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     5b4:	4d11      	ldr	r5, [pc, #68]	; (5fc <artist_usart_configure+0x104>)
     5b6:	682b      	ldr	r3, [r5, #0]
     5b8:	6898      	ldr	r0, [r3, #8]
     5ba:	2100      	movs	r1, #0
     5bc:	4c10      	ldr	r4, [pc, #64]	; (600 <artist_usart_configure+0x108>)
     5be:	47a0      	blx	r4
	setbuf(stdin, NULL);
     5c0:	682b      	ldr	r3, [r5, #0]
     5c2:	6858      	ldr	r0, [r3, #4]
     5c4:	2100      	movs	r1, #0
     5c6:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     5c8:	b010      	add	sp, #64	; 0x40
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	00040003 	.word	0x00040003
     5d0:	00050003 	.word	0x00050003
     5d4:	42000800 	.word	0x42000800
     5d8:	000012fd 	.word	0x000012fd
     5dc:	00000eb5 	.word	0x00000eb5
     5e0:	e000e100 	.word	0xe000e100
     5e4:	000004cd 	.word	0x000004cd
     5e8:	20000910 	.word	0x20000910
     5ec:	0000044d 	.word	0x0000044d
     5f0:	2000090c 	.word	0x2000090c
     5f4:	00000421 	.word	0x00000421
     5f8:	20000908 	.word	0x20000908
     5fc:	2000000c 	.word	0x2000000c
     600:	00003d51 	.word	0x00003d51

00000604 <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     604:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     606:	4e09      	ldr	r6, [pc, #36]	; (62c <artist_ultrasonic_update+0x28>)
     608:	0030      	movs	r0, r6
     60a:	4d09      	ldr	r5, [pc, #36]	; (630 <artist_ultrasonic_update+0x2c>)
     60c:	47a8      	blx	r5
     60e:	0034      	movs	r4, r6
     610:	3cb4      	subs	r4, #180	; 0xb4
     612:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     614:	0020      	movs	r0, r4
     616:	30c4      	adds	r0, #196	; 0xc4
     618:	47a8      	blx	r5
     61a:	23d4      	movs	r3, #212	; 0xd4
     61c:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     61e:	0020      	movs	r0, r4
     620:	30bc      	adds	r0, #188	; 0xbc
     622:	47a8      	blx	r5
     624:	23d0      	movs	r3, #208	; 0xd0
     626:	50e0      	str	r0, [r4, r3]
}
     628:	bd70      	pop	{r4, r5, r6, pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	20000868 	.word	0x20000868
     630:	0000017d 	.word	0x0000017d

00000634 <callbacks>:
	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}

void callbacks (void) {
     634:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter = 0;
	ultrasonic_counter ++;
     636:	4a07      	ldr	r2, [pc, #28]	; (654 <callbacks+0x20>)
     638:	8813      	ldrh	r3, [r2, #0]
     63a:	3301      	adds	r3, #1
     63c:	b29b      	uxth	r3, r3
     63e:	8013      	strh	r3, [r2, #0]
	if (ultrasonic_counter > 20) {
     640:	2b14      	cmp	r3, #20
     642:	d800      	bhi.n	646 <callbacks+0x12>
		artist_ultrasonic_update();
		ultrasonic_counter = 0; 
	}
	// ! [ultra sonic]
}
     644:	bd10      	pop	{r4, pc}
		artist_ultrasonic_update();
     646:	4b04      	ldr	r3, [pc, #16]	; (658 <callbacks+0x24>)
     648:	4798      	blx	r3
		ultrasonic_counter = 0; 
     64a:	2200      	movs	r2, #0
     64c:	4b01      	ldr	r3, [pc, #4]	; (654 <callbacks+0x20>)
     64e:	801a      	strh	r2, [r3, #0]
}
     650:	e7f8      	b.n	644 <callbacks+0x10>
     652:	46c0      	nop			; (mov r8, r8)
     654:	200001f8 	.word	0x200001f8
     658:	00000605 	.word	0x00000605

0000065c <artist_scheduler_tc_configure>:
void artist_scheduler_tc_configure() {
     65c:	b510      	push	{r4, lr}
     65e:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     660:	aa01      	add	r2, sp, #4
     662:	2300      	movs	r3, #0
     664:	2100      	movs	r1, #0
     666:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     668:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     66a:	2000      	movs	r0, #0
     66c:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     66e:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     670:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     672:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     674:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     676:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     678:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     67a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     67c:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     67e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     680:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     682:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     684:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     686:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     688:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     68a:	3304      	adds	r3, #4
     68c:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     68e:	3b01      	subs	r3, #1
     690:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     692:	23e0      	movs	r3, #224	; 0xe0
     694:	00db      	lsls	r3, r3, #3
     696:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     698:	2132      	movs	r1, #50	; 0x32
     69a:	2329      	movs	r3, #41	; 0x29
     69c:	54d1      	strb	r1, [r2, r3]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     69e:	4c08      	ldr	r4, [pc, #32]	; (6c0 <artist_scheduler_tc_configure+0x64>)
     6a0:	4908      	ldr	r1, [pc, #32]	; (6c4 <artist_scheduler_tc_configure+0x68>)
     6a2:	0020      	movs	r0, r4
     6a4:	4b08      	ldr	r3, [pc, #32]	; (6c8 <artist_scheduler_tc_configure+0x6c>)
     6a6:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     6a8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6aa:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     6ac:	b25b      	sxtb	r3, r3
     6ae:	2b00      	cmp	r3, #0
     6b0:	dbfb      	blt.n	6aa <artist_scheduler_tc_configure+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     6b2:	8813      	ldrh	r3, [r2, #0]
     6b4:	2102      	movs	r1, #2
     6b6:	430b      	orrs	r3, r1
     6b8:	8013      	strh	r3, [r2, #0]
}
     6ba:	b00e      	add	sp, #56	; 0x38
     6bc:	bd10      	pop	{r4, pc}
     6be:	46c0      	nop			; (mov r8, r8)
     6c0:	200007d0 	.word	0x200007d0
     6c4:	42003400 	.word	0x42003400
     6c8:	000022fd 	.word	0x000022fd

000006cc <artist_configure_tc_callbacks>:
void artist_configure_tc_callbacks(void)
{
     6cc:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     6ce:	4c0d      	ldr	r4, [pc, #52]	; (704 <artist_configure_tc_callbacks+0x38>)
     6d0:	2200      	movs	r2, #0
     6d2:	490d      	ldr	r1, [pc, #52]	; (708 <artist_configure_tc_callbacks+0x3c>)
     6d4:	0020      	movs	r0, r4
     6d6:	4b0d      	ldr	r3, [pc, #52]	; (70c <artist_configure_tc_callbacks+0x40>)
     6d8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     6da:	6820      	ldr	r0, [r4, #0]
     6dc:	3c1c      	subs	r4, #28
     6de:	4b0c      	ldr	r3, [pc, #48]	; (710 <artist_configure_tc_callbacks+0x44>)
     6e0:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     6e2:	4b0c      	ldr	r3, [pc, #48]	; (714 <artist_configure_tc_callbacks+0x48>)
     6e4:	5c1a      	ldrb	r2, [r3, r0]
     6e6:	231f      	movs	r3, #31
     6e8:	4013      	ands	r3, r2
     6ea:	2201      	movs	r2, #1
     6ec:	0011      	movs	r1, r2
     6ee:	4099      	lsls	r1, r3
     6f0:	4b09      	ldr	r3, [pc, #36]	; (718 <artist_configure_tc_callbacks+0x4c>)
     6f2:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     6f4:	2135      	movs	r1, #53	; 0x35
     6f6:	5c63      	ldrb	r3, [r4, r1]
     6f8:	2001      	movs	r0, #1
     6fa:	4303      	orrs	r3, r0
     6fc:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     6fe:	69e3      	ldr	r3, [r4, #28]
     700:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     702:	bd10      	pop	{r4, pc}
     704:	200007d0 	.word	0x200007d0
     708:	00000635 	.word	0x00000635
     70c:	000021fd 	.word	0x000021fd
     710:	000022c5 	.word	0x000022c5
     714:	000088ac 	.word	0x000088ac
     718:	e000e100 	.word	0xe000e100

0000071c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     71c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     71e:	2000      	movs	r0, #0
     720:	4b08      	ldr	r3, [pc, #32]	; (744 <delay_init+0x28>)
     722:	4798      	blx	r3
     724:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     726:	4c08      	ldr	r4, [pc, #32]	; (748 <delay_init+0x2c>)
     728:	21fa      	movs	r1, #250	; 0xfa
     72a:	0089      	lsls	r1, r1, #2
     72c:	47a0      	blx	r4
     72e:	4b07      	ldr	r3, [pc, #28]	; (74c <delay_init+0x30>)
     730:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     732:	4907      	ldr	r1, [pc, #28]	; (750 <delay_init+0x34>)
     734:	0028      	movs	r0, r5
     736:	47a0      	blx	r4
     738:	4b06      	ldr	r3, [pc, #24]	; (754 <delay_init+0x38>)
     73a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     73c:	2205      	movs	r2, #5
     73e:	4b06      	ldr	r3, [pc, #24]	; (758 <delay_init+0x3c>)
     740:	601a      	str	r2, [r3, #0]
}
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	00001f8d 	.word	0x00001f8d
     748:	00005d15 	.word	0x00005d15
     74c:	20000000 	.word	0x20000000
     750:	000f4240 	.word	0x000f4240
     754:	20000004 	.word	0x20000004
     758:	e000e010 	.word	0xe000e010

0000075c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     75c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     75e:	4b08      	ldr	r3, [pc, #32]	; (780 <delay_cycles_us+0x24>)
     760:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     762:	4a08      	ldr	r2, [pc, #32]	; (784 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     764:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     766:	2180      	movs	r1, #128	; 0x80
     768:	0249      	lsls	r1, r1, #9
	while (n--) {
     76a:	3801      	subs	r0, #1
     76c:	d307      	bcc.n	77e <delay_cycles_us+0x22>
	if (n > 0) {
     76e:	2c00      	cmp	r4, #0
     770:	d0fb      	beq.n	76a <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     772:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     774:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     776:	6813      	ldr	r3, [r2, #0]
     778:	420b      	tst	r3, r1
     77a:	d0fc      	beq.n	776 <delay_cycles_us+0x1a>
     77c:	e7f5      	b.n	76a <delay_cycles_us+0xe>
	}
}
     77e:	bd30      	pop	{r4, r5, pc}
     780:	20000004 	.word	0x20000004
     784:	e000e010 	.word	0xe000e010

00000788 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     788:	4b0c      	ldr	r3, [pc, #48]	; (7bc <cpu_irq_enter_critical+0x34>)
     78a:	681b      	ldr	r3, [r3, #0]
     78c:	2b00      	cmp	r3, #0
     78e:	d106      	bne.n	79e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     790:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     794:	2b00      	cmp	r3, #0
     796:	d007      	beq.n	7a8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     798:	2200      	movs	r2, #0
     79a:	4b09      	ldr	r3, [pc, #36]	; (7c0 <cpu_irq_enter_critical+0x38>)
     79c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     79e:	4a07      	ldr	r2, [pc, #28]	; (7bc <cpu_irq_enter_critical+0x34>)
     7a0:	6813      	ldr	r3, [r2, #0]
     7a2:	3301      	adds	r3, #1
     7a4:	6013      	str	r3, [r2, #0]
}
     7a6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     7a8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7aa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     7ae:	2200      	movs	r2, #0
     7b0:	4b04      	ldr	r3, [pc, #16]	; (7c4 <cpu_irq_enter_critical+0x3c>)
     7b2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     7b4:	3201      	adds	r2, #1
     7b6:	4b02      	ldr	r3, [pc, #8]	; (7c0 <cpu_irq_enter_critical+0x38>)
     7b8:	701a      	strb	r2, [r3, #0]
     7ba:	e7f0      	b.n	79e <cpu_irq_enter_critical+0x16>
     7bc:	200001fc 	.word	0x200001fc
     7c0:	20000200 	.word	0x20000200
     7c4:	20000008 	.word	0x20000008

000007c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     7c8:	4b08      	ldr	r3, [pc, #32]	; (7ec <cpu_irq_leave_critical+0x24>)
     7ca:	681a      	ldr	r2, [r3, #0]
     7cc:	3a01      	subs	r2, #1
     7ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	2b00      	cmp	r3, #0
     7d4:	d109      	bne.n	7ea <cpu_irq_leave_critical+0x22>
     7d6:	4b06      	ldr	r3, [pc, #24]	; (7f0 <cpu_irq_leave_critical+0x28>)
     7d8:	781b      	ldrb	r3, [r3, #0]
     7da:	2b00      	cmp	r3, #0
     7dc:	d005      	beq.n	7ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     7de:	2201      	movs	r2, #1
     7e0:	4b04      	ldr	r3, [pc, #16]	; (7f4 <cpu_irq_leave_critical+0x2c>)
     7e2:	701a      	strb	r2, [r3, #0]
     7e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     7e8:	b662      	cpsie	i
	}
}
     7ea:	4770      	bx	lr
     7ec:	200001fc 	.word	0x200001fc
     7f0:	20000200 	.word	0x20000200
     7f4:	20000008 	.word	0x20000008

000007f8 <system_board_init>:




void system_board_init(void)
{
     7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7fa:	46c6      	mov	lr, r8
     7fc:	b500      	push	{lr}
     7fe:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
     800:	ac01      	add	r4, sp, #4
     802:	2601      	movs	r6, #1
     804:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     806:	2700      	movs	r7, #0
     808:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     80a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     80c:	0021      	movs	r1, r4
     80e:	2013      	movs	r0, #19
     810:	4d27      	ldr	r5, [pc, #156]	; (8b0 <system_board_init+0xb8>)
     812:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     814:	4b27      	ldr	r3, [pc, #156]	; (8b4 <system_board_init+0xbc>)
     816:	4698      	mov	r8, r3
     818:	2380      	movs	r3, #128	; 0x80
     81a:	031b      	lsls	r3, r3, #12
     81c:	4642      	mov	r2, r8
     81e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     820:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     822:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     824:	0021      	movs	r1, r4
     826:	201c      	movs	r0, #28
     828:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     82a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     82c:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     82e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     830:	0021      	movs	r1, r4
     832:	2052      	movs	r0, #82	; 0x52
     834:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     836:	0021      	movs	r1, r4
     838:	203e      	movs	r0, #62	; 0x3e
     83a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     83c:	0021      	movs	r1, r4
     83e:	203f      	movs	r0, #63	; 0x3f
     840:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     842:	0021      	movs	r1, r4
     844:	202f      	movs	r0, #47	; 0x2f
     846:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     848:	0021      	movs	r1, r4
     84a:	2014      	movs	r0, #20
     84c:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     84e:	2280      	movs	r2, #128	; 0x80
     850:	02d2      	lsls	r2, r2, #11
     852:	4b19      	ldr	r3, [pc, #100]	; (8b8 <system_board_init+0xc0>)
     854:	619a      	str	r2, [r3, #24]
     856:	4b19      	ldr	r3, [pc, #100]	; (8bc <system_board_init+0xc4>)
     858:	2280      	movs	r2, #128	; 0x80
     85a:	05d2      	lsls	r2, r2, #23
     85c:	619a      	str	r2, [r3, #24]
     85e:	2280      	movs	r2, #128	; 0x80
     860:	0612      	lsls	r2, r2, #24
     862:	619a      	str	r2, [r3, #24]
     864:	2280      	movs	r2, #128	; 0x80
     866:	0212      	lsls	r2, r2, #8
     868:	619a      	str	r2, [r3, #24]
     86a:	2380      	movs	r3, #128	; 0x80
     86c:	035b      	lsls	r3, r3, #13
     86e:	4642      	mov	r2, r8
     870:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     872:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     874:	0021      	movs	r1, r4
     876:	2053      	movs	r0, #83	; 0x53
     878:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     87a:	4a11      	ldr	r2, [pc, #68]	; (8c0 <system_board_init+0xc8>)
     87c:	6a11      	ldr	r1, [r2, #32]
     87e:	2380      	movs	r3, #128	; 0x80
     880:	039b      	lsls	r3, r3, #14
     882:	430b      	orrs	r3, r1
     884:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     886:	2204      	movs	r2, #4
     888:	4b0e      	ldr	r3, [pc, #56]	; (8c4 <system_board_init+0xcc>)
     88a:	801a      	strh	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     88c:	466b      	mov	r3, sp
     88e:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     890:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     892:	2305      	movs	r3, #5
     894:	466a      	mov	r2, sp
     896:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     898:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     89a:	4669      	mov	r1, sp
     89c:	2009      	movs	r0, #9
     89e:	4c0a      	ldr	r4, [pc, #40]	; (8c8 <system_board_init+0xd0>)
     8a0:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     8a2:	4669      	mov	r1, sp
     8a4:	200c      	movs	r0, #12
     8a6:	47a0      	blx	r4
#endif

}
     8a8:	b002      	add	sp, #8
     8aa:	bc04      	pop	{r2}
     8ac:	4690      	mov	r8, r2
     8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8b0:	00000a5d 	.word	0x00000a5d
     8b4:	41004400 	.word	0x41004400
     8b8:	41004500 	.word	0x41004500
     8bc:	41004480 	.word	0x41004480
     8c0:	40000400 	.word	0x40000400
     8c4:	42005400 	.word	0x42005400
     8c8:	0000219d 	.word	0x0000219d

000008cc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     8cc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     8ce:	2a00      	cmp	r2, #0
     8d0:	d001      	beq.n	8d6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     8d2:	0018      	movs	r0, r3
     8d4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     8d6:	008b      	lsls	r3, r1, #2
     8d8:	4a06      	ldr	r2, [pc, #24]	; (8f4 <extint_register_callback+0x28>)
     8da:	589b      	ldr	r3, [r3, r2]
     8dc:	2b00      	cmp	r3, #0
     8de:	d003      	beq.n	8e8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     8e0:	4283      	cmp	r3, r0
     8e2:	d005      	beq.n	8f0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     8e4:	231d      	movs	r3, #29
     8e6:	e7f4      	b.n	8d2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     8e8:	0089      	lsls	r1, r1, #2
     8ea:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     8ec:	2300      	movs	r3, #0
     8ee:	e7f0      	b.n	8d2 <extint_register_callback+0x6>
		return STATUS_OK;
     8f0:	2300      	movs	r3, #0
     8f2:	e7ee      	b.n	8d2 <extint_register_callback+0x6>
     8f4:	200008a4 	.word	0x200008a4

000008f8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     8f8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     8fa:	2200      	movs	r2, #0
     8fc:	4b10      	ldr	r3, [pc, #64]	; (940 <EIC_Handler+0x48>)
     8fe:	701a      	strb	r2, [r3, #0]
     900:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     902:	4910      	ldr	r1, [pc, #64]	; (944 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     904:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     906:	4e10      	ldr	r6, [pc, #64]	; (948 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     908:	4c0d      	ldr	r4, [pc, #52]	; (940 <EIC_Handler+0x48>)
     90a:	e00a      	b.n	922 <EIC_Handler+0x2a>
		return eics[eic_index];
     90c:	490d      	ldr	r1, [pc, #52]	; (944 <EIC_Handler+0x4c>)
     90e:	e008      	b.n	922 <EIC_Handler+0x2a>
     910:	7823      	ldrb	r3, [r4, #0]
     912:	3301      	adds	r3, #1
     914:	b2db      	uxtb	r3, r3
     916:	7023      	strb	r3, [r4, #0]
     918:	2b0f      	cmp	r3, #15
     91a:	d810      	bhi.n	93e <EIC_Handler+0x46>
		return NULL;
     91c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     91e:	2b1f      	cmp	r3, #31
     920:	d9f4      	bls.n	90c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     922:	0028      	movs	r0, r5
     924:	4018      	ands	r0, r3
     926:	2201      	movs	r2, #1
     928:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     92a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     92c:	4210      	tst	r0, r2
     92e:	d0ef      	beq.n	910 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     930:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     932:	009b      	lsls	r3, r3, #2
     934:	599b      	ldr	r3, [r3, r6]
     936:	2b00      	cmp	r3, #0
     938:	d0ea      	beq.n	910 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     93a:	4798      	blx	r3
     93c:	e7e8      	b.n	910 <EIC_Handler+0x18>
			}
		}
	}
}
     93e:	bd70      	pop	{r4, r5, r6, pc}
     940:	200008a0 	.word	0x200008a0
     944:	40001800 	.word	0x40001800
     948:	200008a4 	.word	0x200008a4

0000094c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     94c:	4a04      	ldr	r2, [pc, #16]	; (960 <_extint_enable+0x14>)
     94e:	7813      	ldrb	r3, [r2, #0]
     950:	2102      	movs	r1, #2
     952:	430b      	orrs	r3, r1
     954:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     956:	7853      	ldrb	r3, [r2, #1]
     958:	b25b      	sxtb	r3, r3
     95a:	2b00      	cmp	r3, #0
     95c:	dbfb      	blt.n	956 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     95e:	4770      	bx	lr
     960:	40001800 	.word	0x40001800

00000964 <_system_extint_init>:
{
     964:	b500      	push	{lr}
     966:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     968:	4a12      	ldr	r2, [pc, #72]	; (9b4 <_system_extint_init+0x50>)
     96a:	6993      	ldr	r3, [r2, #24]
     96c:	2140      	movs	r1, #64	; 0x40
     96e:	430b      	orrs	r3, r1
     970:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     972:	a901      	add	r1, sp, #4
     974:	2300      	movs	r3, #0
     976:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     978:	2005      	movs	r0, #5
     97a:	4b0f      	ldr	r3, [pc, #60]	; (9b8 <_system_extint_init+0x54>)
     97c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     97e:	2005      	movs	r0, #5
     980:	4b0e      	ldr	r3, [pc, #56]	; (9bc <_system_extint_init+0x58>)
     982:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     984:	4a0e      	ldr	r2, [pc, #56]	; (9c0 <_system_extint_init+0x5c>)
     986:	7813      	ldrb	r3, [r2, #0]
     988:	2101      	movs	r1, #1
     98a:	430b      	orrs	r3, r1
     98c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     98e:	7853      	ldrb	r3, [r2, #1]
     990:	b25b      	sxtb	r3, r3
     992:	2b00      	cmp	r3, #0
     994:	dbfb      	blt.n	98e <_system_extint_init+0x2a>
     996:	4b0b      	ldr	r3, [pc, #44]	; (9c4 <_system_extint_init+0x60>)
     998:	0019      	movs	r1, r3
     99a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     99c:	2200      	movs	r2, #0
     99e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     9a0:	4299      	cmp	r1, r3
     9a2:	d1fc      	bne.n	99e <_system_extint_init+0x3a>
     9a4:	2210      	movs	r2, #16
     9a6:	4b08      	ldr	r3, [pc, #32]	; (9c8 <_system_extint_init+0x64>)
     9a8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     9aa:	4b08      	ldr	r3, [pc, #32]	; (9cc <_system_extint_init+0x68>)
     9ac:	4798      	blx	r3
}
     9ae:	b003      	add	sp, #12
     9b0:	bd00      	pop	{pc}
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	40000400 	.word	0x40000400
     9b8:	000020a5 	.word	0x000020a5
     9bc:	00002019 	.word	0x00002019
     9c0:	40001800 	.word	0x40001800
     9c4:	200008a4 	.word	0x200008a4
     9c8:	e000e100 	.word	0xe000e100
     9cc:	0000094d 	.word	0x0000094d

000009d0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     9d0:	2300      	movs	r3, #0
     9d2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     9d4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     9d6:	2201      	movs	r2, #1
     9d8:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     9da:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     9dc:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     9de:	3302      	adds	r3, #2
     9e0:	72c3      	strb	r3, [r0, #11]
}
     9e2:	4770      	bx	lr

000009e4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e6:	b083      	sub	sp, #12
     9e8:	0005      	movs	r5, r0
     9ea:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9ec:	a901      	add	r1, sp, #4
     9ee:	2300      	movs	r3, #0
     9f0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     9f2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     9f4:	7923      	ldrb	r3, [r4, #4]
     9f6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     9f8:	7a23      	ldrb	r3, [r4, #8]
     9fa:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     9fc:	7820      	ldrb	r0, [r4, #0]
     9fe:	4b15      	ldr	r3, [pc, #84]	; (a54 <extint_chan_set_config+0x70>)
     a00:	4798      	blx	r3
		return NULL;
     a02:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     a04:	2d1f      	cmp	r5, #31
     a06:	d800      	bhi.n	a0a <extint_chan_set_config+0x26>
		return eics[eic_index];
     a08:	4813      	ldr	r0, [pc, #76]	; (a58 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     a0a:	2207      	movs	r2, #7
     a0c:	402a      	ands	r2, r5
     a0e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     a10:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     a12:	7aa3      	ldrb	r3, [r4, #10]
     a14:	2b00      	cmp	r3, #0
     a16:	d001      	beq.n	a1c <extint_chan_set_config+0x38>
     a18:	2308      	movs	r3, #8
     a1a:	431f      	orrs	r7, r3
     a1c:	08eb      	lsrs	r3, r5, #3
     a1e:	009b      	lsls	r3, r3, #2
     a20:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     a22:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     a24:	260f      	movs	r6, #15
     a26:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     a28:	43b1      	bics	r1, r6
			(new_config << config_pos);
     a2a:	4097      	lsls	r7, r2
     a2c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     a2e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     a30:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     a32:	7a63      	ldrb	r3, [r4, #9]
     a34:	2b00      	cmp	r3, #0
     a36:	d106      	bne.n	a46 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     a38:	6943      	ldr	r3, [r0, #20]
     a3a:	2201      	movs	r2, #1
     a3c:	40aa      	lsls	r2, r5
     a3e:	4393      	bics	r3, r2
     a40:	6143      	str	r3, [r0, #20]
	}
}
     a42:	b003      	add	sp, #12
     a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     a46:	6942      	ldr	r2, [r0, #20]
     a48:	2301      	movs	r3, #1
     a4a:	40ab      	lsls	r3, r5
     a4c:	4313      	orrs	r3, r2
     a4e:	6143      	str	r3, [r0, #20]
     a50:	e7f7      	b.n	a42 <extint_chan_set_config+0x5e>
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	0000219d 	.word	0x0000219d
     a58:	40001800 	.word	0x40001800

00000a5c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a5c:	b500      	push	{lr}
     a5e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a60:	ab01      	add	r3, sp, #4
     a62:	2280      	movs	r2, #128	; 0x80
     a64:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a66:	780a      	ldrb	r2, [r1, #0]
     a68:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a6a:	784a      	ldrb	r2, [r1, #1]
     a6c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a6e:	788a      	ldrb	r2, [r1, #2]
     a70:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a72:	0019      	movs	r1, r3
     a74:	4b01      	ldr	r3, [pc, #4]	; (a7c <port_pin_set_config+0x20>)
     a76:	4798      	blx	r3
}
     a78:	b003      	add	sp, #12
     a7a:	bd00      	pop	{pc}
     a7c:	0000219d 	.word	0x0000219d

00000a80 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a80:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a82:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a84:	2340      	movs	r3, #64	; 0x40
     a86:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     a88:	4281      	cmp	r1, r0
     a8a:	d202      	bcs.n	a92 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     a8c:	0018      	movs	r0, r3
     a8e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     a90:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     a92:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a94:	1c63      	adds	r3, r4, #1
     a96:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     a98:	4288      	cmp	r0, r1
     a9a:	d9f9      	bls.n	a90 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a9c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     a9e:	2cff      	cmp	r4, #255	; 0xff
     aa0:	d8f4      	bhi.n	a8c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     aa2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     aa4:	2300      	movs	r3, #0
     aa6:	e7f1      	b.n	a8c <_sercom_get_sync_baud_val+0xc>

00000aa8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aaa:	46de      	mov	lr, fp
     aac:	4657      	mov	r7, sl
     aae:	464e      	mov	r6, r9
     ab0:	4645      	mov	r5, r8
     ab2:	b5e0      	push	{r5, r6, r7, lr}
     ab4:	b089      	sub	sp, #36	; 0x24
     ab6:	000c      	movs	r4, r1
     ab8:	9205      	str	r2, [sp, #20]
     aba:	aa12      	add	r2, sp, #72	; 0x48
     abc:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     abe:	0005      	movs	r5, r0
     ac0:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ac2:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     ac4:	42a5      	cmp	r5, r4
     ac6:	d907      	bls.n	ad8 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     ac8:	0010      	movs	r0, r2
     aca:	b009      	add	sp, #36	; 0x24
     acc:	bc3c      	pop	{r2, r3, r4, r5}
     ace:	4690      	mov	r8, r2
     ad0:	4699      	mov	r9, r3
     ad2:	46a2      	mov	sl, r4
     ad4:	46ab      	mov	fp, r5
     ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     ad8:	2b00      	cmp	r3, #0
     ada:	d155      	bne.n	b88 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     adc:	0002      	movs	r2, r0
     ade:	0008      	movs	r0, r1
     ae0:	2100      	movs	r1, #0
     ae2:	4d63      	ldr	r5, [pc, #396]	; (c70 <_sercom_get_async_baud_val+0x1c8>)
     ae4:	47a8      	blx	r5
     ae6:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     ae8:	0026      	movs	r6, r4
     aea:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     aec:	2300      	movs	r3, #0
     aee:	2400      	movs	r4, #0
     af0:	9300      	str	r3, [sp, #0]
     af2:	9401      	str	r4, [sp, #4]
     af4:	2200      	movs	r2, #0
     af6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     af8:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     afa:	2120      	movs	r1, #32
     afc:	468c      	mov	ip, r1
     afe:	391f      	subs	r1, #31
     b00:	9602      	str	r6, [sp, #8]
     b02:	9703      	str	r7, [sp, #12]
     b04:	e014      	b.n	b30 <_sercom_get_async_baud_val+0x88>
     b06:	4664      	mov	r4, ip
     b08:	1a24      	subs	r4, r4, r0
     b0a:	000d      	movs	r5, r1
     b0c:	40e5      	lsrs	r5, r4
     b0e:	46a8      	mov	r8, r5
     b10:	e015      	b.n	b3e <_sercom_get_async_baud_val+0x96>
			r = r - d;
     b12:	9c02      	ldr	r4, [sp, #8]
     b14:	9d03      	ldr	r5, [sp, #12]
     b16:	1b12      	subs	r2, r2, r4
     b18:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     b1a:	464d      	mov	r5, r9
     b1c:	9e00      	ldr	r6, [sp, #0]
     b1e:	9f01      	ldr	r7, [sp, #4]
     b20:	4335      	orrs	r5, r6
     b22:	003c      	movs	r4, r7
     b24:	4646      	mov	r6, r8
     b26:	4334      	orrs	r4, r6
     b28:	9500      	str	r5, [sp, #0]
     b2a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     b2c:	3801      	subs	r0, #1
     b2e:	d31d      	bcc.n	b6c <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     b30:	2420      	movs	r4, #32
     b32:	4264      	negs	r4, r4
     b34:	1904      	adds	r4, r0, r4
     b36:	d4e6      	bmi.n	b06 <_sercom_get_async_baud_val+0x5e>
     b38:	000d      	movs	r5, r1
     b3a:	40a5      	lsls	r5, r4
     b3c:	46a8      	mov	r8, r5
     b3e:	000c      	movs	r4, r1
     b40:	4084      	lsls	r4, r0
     b42:	46a1      	mov	r9, r4
		r = r << 1;
     b44:	1892      	adds	r2, r2, r2
     b46:	415b      	adcs	r3, r3
     b48:	0014      	movs	r4, r2
     b4a:	001d      	movs	r5, r3
		if (n & bit_shift) {
     b4c:	4646      	mov	r6, r8
     b4e:	465f      	mov	r7, fp
     b50:	423e      	tst	r6, r7
     b52:	d003      	beq.n	b5c <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     b54:	000e      	movs	r6, r1
     b56:	4326      	orrs	r6, r4
     b58:	0032      	movs	r2, r6
     b5a:	002b      	movs	r3, r5
		if (r >= d) {
     b5c:	9c02      	ldr	r4, [sp, #8]
     b5e:	9d03      	ldr	r5, [sp, #12]
     b60:	429d      	cmp	r5, r3
     b62:	d8e3      	bhi.n	b2c <_sercom_get_async_baud_val+0x84>
     b64:	d1d5      	bne.n	b12 <_sercom_get_async_baud_val+0x6a>
     b66:	4294      	cmp	r4, r2
     b68:	d8e0      	bhi.n	b2c <_sercom_get_async_baud_val+0x84>
     b6a:	e7d2      	b.n	b12 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b6c:	2200      	movs	r2, #0
     b6e:	2301      	movs	r3, #1
     b70:	9800      	ldr	r0, [sp, #0]
     b72:	9901      	ldr	r1, [sp, #4]
     b74:	1a12      	subs	r2, r2, r0
     b76:	418b      	sbcs	r3, r1
     b78:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     b7a:	0c13      	lsrs	r3, r2, #16
     b7c:	040a      	lsls	r2, r1, #16
     b7e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     b80:	9b05      	ldr	r3, [sp, #20]
     b82:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     b84:	2200      	movs	r2, #0
     b86:	e79f      	b.n	ac8 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     b88:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b8a:	2b01      	cmp	r3, #1
     b8c:	d1f8      	bne.n	b80 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     b8e:	0f63      	lsrs	r3, r4, #29
     b90:	9304      	str	r3, [sp, #16]
     b92:	00e3      	lsls	r3, r4, #3
     b94:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     b96:	000a      	movs	r2, r1
     b98:	2300      	movs	r3, #0
     b9a:	2100      	movs	r1, #0
     b9c:	4c34      	ldr	r4, [pc, #208]	; (c70 <_sercom_get_async_baud_val+0x1c8>)
     b9e:	47a0      	blx	r4
     ba0:	0004      	movs	r4, r0
     ba2:	000d      	movs	r5, r1
     ba4:	2300      	movs	r3, #0
     ba6:	469c      	mov	ip, r3
     ba8:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     baa:	3320      	adds	r3, #32
     bac:	469b      	mov	fp, r3
     bae:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     bb0:	4663      	mov	r3, ip
     bb2:	9307      	str	r3, [sp, #28]
     bb4:	e048      	b.n	c48 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     bb6:	4659      	mov	r1, fp
     bb8:	1bc9      	subs	r1, r1, r7
     bba:	0030      	movs	r0, r6
     bbc:	40c8      	lsrs	r0, r1
     bbe:	4682      	mov	sl, r0
     bc0:	e010      	b.n	be4 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     bc2:	9800      	ldr	r0, [sp, #0]
     bc4:	9901      	ldr	r1, [sp, #4]
     bc6:	1a12      	subs	r2, r2, r0
     bc8:	418b      	sbcs	r3, r1
			q |= bit_shift;
     bca:	9902      	ldr	r1, [sp, #8]
     bcc:	4648      	mov	r0, r9
     bce:	4301      	orrs	r1, r0
     bd0:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     bd2:	3f01      	subs	r7, #1
     bd4:	d325      	bcc.n	c22 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     bd6:	2120      	movs	r1, #32
     bd8:	4249      	negs	r1, r1
     bda:	1879      	adds	r1, r7, r1
     bdc:	d4eb      	bmi.n	bb6 <_sercom_get_async_baud_val+0x10e>
     bde:	0030      	movs	r0, r6
     be0:	4088      	lsls	r0, r1
     be2:	4682      	mov	sl, r0
     be4:	0031      	movs	r1, r6
     be6:	40b9      	lsls	r1, r7
     be8:	4689      	mov	r9, r1
		r = r << 1;
     bea:	1892      	adds	r2, r2, r2
     bec:	415b      	adcs	r3, r3
     bee:	0010      	movs	r0, r2
     bf0:	0019      	movs	r1, r3
		if (n & bit_shift) {
     bf2:	4644      	mov	r4, r8
     bf4:	464d      	mov	r5, r9
     bf6:	402c      	ands	r4, r5
     bf8:	46a4      	mov	ip, r4
     bfa:	4654      	mov	r4, sl
     bfc:	9d04      	ldr	r5, [sp, #16]
     bfe:	402c      	ands	r4, r5
     c00:	46a2      	mov	sl, r4
     c02:	4664      	mov	r4, ip
     c04:	4655      	mov	r5, sl
     c06:	432c      	orrs	r4, r5
     c08:	d003      	beq.n	c12 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     c0a:	0034      	movs	r4, r6
     c0c:	4304      	orrs	r4, r0
     c0e:	0022      	movs	r2, r4
     c10:	000b      	movs	r3, r1
		if (r >= d) {
     c12:	9800      	ldr	r0, [sp, #0]
     c14:	9901      	ldr	r1, [sp, #4]
     c16:	4299      	cmp	r1, r3
     c18:	d8db      	bhi.n	bd2 <_sercom_get_async_baud_val+0x12a>
     c1a:	d1d2      	bne.n	bc2 <_sercom_get_async_baud_val+0x11a>
     c1c:	4290      	cmp	r0, r2
     c1e:	d8d8      	bhi.n	bd2 <_sercom_get_async_baud_val+0x12a>
     c20:	e7cf      	b.n	bc2 <_sercom_get_async_baud_val+0x11a>
     c22:	9c00      	ldr	r4, [sp, #0]
     c24:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     c26:	9902      	ldr	r1, [sp, #8]
     c28:	9a07      	ldr	r2, [sp, #28]
     c2a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     c2c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     c2e:	4911      	ldr	r1, [pc, #68]	; (c74 <_sercom_get_async_baud_val+0x1cc>)
     c30:	428b      	cmp	r3, r1
     c32:	d914      	bls.n	c5e <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     c34:	9b06      	ldr	r3, [sp, #24]
     c36:	3301      	adds	r3, #1
     c38:	b2db      	uxtb	r3, r3
     c3a:	0019      	movs	r1, r3
     c3c:	9306      	str	r3, [sp, #24]
     c3e:	0013      	movs	r3, r2
     c40:	3301      	adds	r3, #1
     c42:	9307      	str	r3, [sp, #28]
     c44:	2908      	cmp	r1, #8
     c46:	d008      	beq.n	c5a <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     c48:	2300      	movs	r3, #0
     c4a:	9302      	str	r3, [sp, #8]
     c4c:	2200      	movs	r2, #0
     c4e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     c50:	213f      	movs	r1, #63	; 0x3f
     c52:	9400      	str	r4, [sp, #0]
     c54:	9501      	str	r5, [sp, #4]
     c56:	000f      	movs	r7, r1
     c58:	e7bd      	b.n	bd6 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c5a:	2240      	movs	r2, #64	; 0x40
     c5c:	e734      	b.n	ac8 <_sercom_get_async_baud_val+0x20>
     c5e:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     c60:	9906      	ldr	r1, [sp, #24]
     c62:	2908      	cmp	r1, #8
     c64:	d100      	bne.n	c68 <_sercom_get_async_baud_val+0x1c0>
     c66:	e72f      	b.n	ac8 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     c68:	034a      	lsls	r2, r1, #13
     c6a:	431a      	orrs	r2, r3
     c6c:	e788      	b.n	b80 <_sercom_get_async_baud_val+0xd8>
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	000060f1 	.word	0x000060f1
     c74:	00001fff 	.word	0x00001fff

00000c78 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c78:	b510      	push	{r4, lr}
     c7a:	b082      	sub	sp, #8
     c7c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c7e:	4b0e      	ldr	r3, [pc, #56]	; (cb8 <sercom_set_gclk_generator+0x40>)
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	2b00      	cmp	r3, #0
     c84:	d007      	beq.n	c96 <sercom_set_gclk_generator+0x1e>
     c86:	2900      	cmp	r1, #0
     c88:	d105      	bne.n	c96 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     c8a:	4b0b      	ldr	r3, [pc, #44]	; (cb8 <sercom_set_gclk_generator+0x40>)
     c8c:	785b      	ldrb	r3, [r3, #1]
     c8e:	4283      	cmp	r3, r0
     c90:	d010      	beq.n	cb4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c92:	201d      	movs	r0, #29
     c94:	e00c      	b.n	cb0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     c96:	a901      	add	r1, sp, #4
     c98:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c9a:	2013      	movs	r0, #19
     c9c:	4b07      	ldr	r3, [pc, #28]	; (cbc <sercom_set_gclk_generator+0x44>)
     c9e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     ca0:	2013      	movs	r0, #19
     ca2:	4b07      	ldr	r3, [pc, #28]	; (cc0 <sercom_set_gclk_generator+0x48>)
     ca4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     ca6:	4b04      	ldr	r3, [pc, #16]	; (cb8 <sercom_set_gclk_generator+0x40>)
     ca8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     caa:	2201      	movs	r2, #1
     cac:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     cae:	2000      	movs	r0, #0
}
     cb0:	b002      	add	sp, #8
     cb2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     cb4:	2000      	movs	r0, #0
     cb6:	e7fb      	b.n	cb0 <sercom_set_gclk_generator+0x38>
     cb8:	20000204 	.word	0x20000204
     cbc:	000020a5 	.word	0x000020a5
     cc0:	00002019 	.word	0x00002019

00000cc4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     cc4:	4b40      	ldr	r3, [pc, #256]	; (dc8 <_sercom_get_default_pad+0x104>)
     cc6:	4298      	cmp	r0, r3
     cc8:	d031      	beq.n	d2e <_sercom_get_default_pad+0x6a>
     cca:	d90a      	bls.n	ce2 <_sercom_get_default_pad+0x1e>
     ccc:	4b3f      	ldr	r3, [pc, #252]	; (dcc <_sercom_get_default_pad+0x108>)
     cce:	4298      	cmp	r0, r3
     cd0:	d04d      	beq.n	d6e <_sercom_get_default_pad+0xaa>
     cd2:	4b3f      	ldr	r3, [pc, #252]	; (dd0 <_sercom_get_default_pad+0x10c>)
     cd4:	4298      	cmp	r0, r3
     cd6:	d05a      	beq.n	d8e <_sercom_get_default_pad+0xca>
     cd8:	4b3e      	ldr	r3, [pc, #248]	; (dd4 <_sercom_get_default_pad+0x110>)
     cda:	4298      	cmp	r0, r3
     cdc:	d037      	beq.n	d4e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     cde:	2000      	movs	r0, #0
}
     ce0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     ce2:	4b3d      	ldr	r3, [pc, #244]	; (dd8 <_sercom_get_default_pad+0x114>)
     ce4:	4298      	cmp	r0, r3
     ce6:	d00c      	beq.n	d02 <_sercom_get_default_pad+0x3e>
     ce8:	4b3c      	ldr	r3, [pc, #240]	; (ddc <_sercom_get_default_pad+0x118>)
     cea:	4298      	cmp	r0, r3
     cec:	d1f7      	bne.n	cde <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cee:	2901      	cmp	r1, #1
     cf0:	d017      	beq.n	d22 <_sercom_get_default_pad+0x5e>
     cf2:	2900      	cmp	r1, #0
     cf4:	d05d      	beq.n	db2 <_sercom_get_default_pad+0xee>
     cf6:	2902      	cmp	r1, #2
     cf8:	d015      	beq.n	d26 <_sercom_get_default_pad+0x62>
     cfa:	2903      	cmp	r1, #3
     cfc:	d015      	beq.n	d2a <_sercom_get_default_pad+0x66>
	return 0;
     cfe:	2000      	movs	r0, #0
     d00:	e7ee      	b.n	ce0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d02:	2901      	cmp	r1, #1
     d04:	d007      	beq.n	d16 <_sercom_get_default_pad+0x52>
     d06:	2900      	cmp	r1, #0
     d08:	d051      	beq.n	dae <_sercom_get_default_pad+0xea>
     d0a:	2902      	cmp	r1, #2
     d0c:	d005      	beq.n	d1a <_sercom_get_default_pad+0x56>
     d0e:	2903      	cmp	r1, #3
     d10:	d005      	beq.n	d1e <_sercom_get_default_pad+0x5a>
	return 0;
     d12:	2000      	movs	r0, #0
     d14:	e7e4      	b.n	ce0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d16:	4832      	ldr	r0, [pc, #200]	; (de0 <_sercom_get_default_pad+0x11c>)
     d18:	e7e2      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d1a:	4832      	ldr	r0, [pc, #200]	; (de4 <_sercom_get_default_pad+0x120>)
     d1c:	e7e0      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d1e:	4832      	ldr	r0, [pc, #200]	; (de8 <_sercom_get_default_pad+0x124>)
     d20:	e7de      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d22:	4832      	ldr	r0, [pc, #200]	; (dec <_sercom_get_default_pad+0x128>)
     d24:	e7dc      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d26:	4832      	ldr	r0, [pc, #200]	; (df0 <_sercom_get_default_pad+0x12c>)
     d28:	e7da      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d2a:	4832      	ldr	r0, [pc, #200]	; (df4 <_sercom_get_default_pad+0x130>)
     d2c:	e7d8      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d2e:	2901      	cmp	r1, #1
     d30:	d007      	beq.n	d42 <_sercom_get_default_pad+0x7e>
     d32:	2900      	cmp	r1, #0
     d34:	d03f      	beq.n	db6 <_sercom_get_default_pad+0xf2>
     d36:	2902      	cmp	r1, #2
     d38:	d005      	beq.n	d46 <_sercom_get_default_pad+0x82>
     d3a:	2903      	cmp	r1, #3
     d3c:	d005      	beq.n	d4a <_sercom_get_default_pad+0x86>
	return 0;
     d3e:	2000      	movs	r0, #0
     d40:	e7ce      	b.n	ce0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d42:	482d      	ldr	r0, [pc, #180]	; (df8 <_sercom_get_default_pad+0x134>)
     d44:	e7cc      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d46:	482d      	ldr	r0, [pc, #180]	; (dfc <_sercom_get_default_pad+0x138>)
     d48:	e7ca      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d4a:	482d      	ldr	r0, [pc, #180]	; (e00 <_sercom_get_default_pad+0x13c>)
     d4c:	e7c8      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d4e:	2901      	cmp	r1, #1
     d50:	d007      	beq.n	d62 <_sercom_get_default_pad+0x9e>
     d52:	2900      	cmp	r1, #0
     d54:	d031      	beq.n	dba <_sercom_get_default_pad+0xf6>
     d56:	2902      	cmp	r1, #2
     d58:	d005      	beq.n	d66 <_sercom_get_default_pad+0xa2>
     d5a:	2903      	cmp	r1, #3
     d5c:	d005      	beq.n	d6a <_sercom_get_default_pad+0xa6>
	return 0;
     d5e:	2000      	movs	r0, #0
     d60:	e7be      	b.n	ce0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d62:	4828      	ldr	r0, [pc, #160]	; (e04 <_sercom_get_default_pad+0x140>)
     d64:	e7bc      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d66:	4828      	ldr	r0, [pc, #160]	; (e08 <_sercom_get_default_pad+0x144>)
     d68:	e7ba      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d6a:	4828      	ldr	r0, [pc, #160]	; (e0c <_sercom_get_default_pad+0x148>)
     d6c:	e7b8      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d6e:	2901      	cmp	r1, #1
     d70:	d007      	beq.n	d82 <_sercom_get_default_pad+0xbe>
     d72:	2900      	cmp	r1, #0
     d74:	d023      	beq.n	dbe <_sercom_get_default_pad+0xfa>
     d76:	2902      	cmp	r1, #2
     d78:	d005      	beq.n	d86 <_sercom_get_default_pad+0xc2>
     d7a:	2903      	cmp	r1, #3
     d7c:	d005      	beq.n	d8a <_sercom_get_default_pad+0xc6>
	return 0;
     d7e:	2000      	movs	r0, #0
     d80:	e7ae      	b.n	ce0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d82:	4823      	ldr	r0, [pc, #140]	; (e10 <_sercom_get_default_pad+0x14c>)
     d84:	e7ac      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d86:	4823      	ldr	r0, [pc, #140]	; (e14 <_sercom_get_default_pad+0x150>)
     d88:	e7aa      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d8a:	4823      	ldr	r0, [pc, #140]	; (e18 <_sercom_get_default_pad+0x154>)
     d8c:	e7a8      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     d8e:	2901      	cmp	r1, #1
     d90:	d007      	beq.n	da2 <_sercom_get_default_pad+0xde>
     d92:	2900      	cmp	r1, #0
     d94:	d015      	beq.n	dc2 <_sercom_get_default_pad+0xfe>
     d96:	2902      	cmp	r1, #2
     d98:	d005      	beq.n	da6 <_sercom_get_default_pad+0xe2>
     d9a:	2903      	cmp	r1, #3
     d9c:	d005      	beq.n	daa <_sercom_get_default_pad+0xe6>
	return 0;
     d9e:	2000      	movs	r0, #0
     da0:	e79e      	b.n	ce0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     da2:	481e      	ldr	r0, [pc, #120]	; (e1c <_sercom_get_default_pad+0x158>)
     da4:	e79c      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     da6:	481e      	ldr	r0, [pc, #120]	; (e20 <_sercom_get_default_pad+0x15c>)
     da8:	e79a      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     daa:	481e      	ldr	r0, [pc, #120]	; (e24 <_sercom_get_default_pad+0x160>)
     dac:	e798      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     dae:	481e      	ldr	r0, [pc, #120]	; (e28 <_sercom_get_default_pad+0x164>)
     db0:	e796      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     db2:	2003      	movs	r0, #3
     db4:	e794      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     db6:	481d      	ldr	r0, [pc, #116]	; (e2c <_sercom_get_default_pad+0x168>)
     db8:	e792      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     dba:	481d      	ldr	r0, [pc, #116]	; (e30 <_sercom_get_default_pad+0x16c>)
     dbc:	e790      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     dbe:	481d      	ldr	r0, [pc, #116]	; (e34 <_sercom_get_default_pad+0x170>)
     dc0:	e78e      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     dc2:	481d      	ldr	r0, [pc, #116]	; (e38 <_sercom_get_default_pad+0x174>)
     dc4:	e78c      	b.n	ce0 <_sercom_get_default_pad+0x1c>
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	42001000 	.word	0x42001000
     dcc:	42001800 	.word	0x42001800
     dd0:	42001c00 	.word	0x42001c00
     dd4:	42001400 	.word	0x42001400
     dd8:	42000800 	.word	0x42000800
     ddc:	42000c00 	.word	0x42000c00
     de0:	00050003 	.word	0x00050003
     de4:	00060003 	.word	0x00060003
     de8:	00070003 	.word	0x00070003
     dec:	00010003 	.word	0x00010003
     df0:	001e0003 	.word	0x001e0003
     df4:	001f0003 	.word	0x001f0003
     df8:	000d0002 	.word	0x000d0002
     dfc:	000e0002 	.word	0x000e0002
     e00:	000f0002 	.word	0x000f0002
     e04:	00110003 	.word	0x00110003
     e08:	00120003 	.word	0x00120003
     e0c:	00130003 	.word	0x00130003
     e10:	003f0005 	.word	0x003f0005
     e14:	003e0005 	.word	0x003e0005
     e18:	00520005 	.word	0x00520005
     e1c:	00170003 	.word	0x00170003
     e20:	00180003 	.word	0x00180003
     e24:	00190003 	.word	0x00190003
     e28:	00040003 	.word	0x00040003
     e2c:	000c0002 	.word	0x000c0002
     e30:	00100003 	.word	0x00100003
     e34:	00530005 	.word	0x00530005
     e38:	00160003 	.word	0x00160003

00000e3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e3c:	b530      	push	{r4, r5, lr}
     e3e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     e40:	4b0b      	ldr	r3, [pc, #44]	; (e70 <_sercom_get_sercom_inst_index+0x34>)
     e42:	466a      	mov	r2, sp
     e44:	cb32      	ldmia	r3!, {r1, r4, r5}
     e46:	c232      	stmia	r2!, {r1, r4, r5}
     e48:	cb32      	ldmia	r3!, {r1, r4, r5}
     e4a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e4c:	9b00      	ldr	r3, [sp, #0]
     e4e:	4283      	cmp	r3, r0
     e50:	d00b      	beq.n	e6a <_sercom_get_sercom_inst_index+0x2e>
     e52:	2301      	movs	r3, #1
     e54:	009a      	lsls	r2, r3, #2
     e56:	4669      	mov	r1, sp
     e58:	5852      	ldr	r2, [r2, r1]
     e5a:	4282      	cmp	r2, r0
     e5c:	d006      	beq.n	e6c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e5e:	3301      	adds	r3, #1
     e60:	2b06      	cmp	r3, #6
     e62:	d1f7      	bne.n	e54 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     e64:	2000      	movs	r0, #0
}
     e66:	b007      	add	sp, #28
     e68:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e6a:	2300      	movs	r3, #0
			return i;
     e6c:	b2d8      	uxtb	r0, r3
     e6e:	e7fa      	b.n	e66 <_sercom_get_sercom_inst_index+0x2a>
     e70:	000088b8 	.word	0x000088b8

00000e74 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     e74:	4770      	bx	lr
	...

00000e78 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e78:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     e7a:	4b0a      	ldr	r3, [pc, #40]	; (ea4 <_sercom_set_handler+0x2c>)
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	2b00      	cmp	r3, #0
     e80:	d10c      	bne.n	e9c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e82:	4f09      	ldr	r7, [pc, #36]	; (ea8 <_sercom_set_handler+0x30>)
     e84:	4e09      	ldr	r6, [pc, #36]	; (eac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     e86:	4d0a      	ldr	r5, [pc, #40]	; (eb0 <_sercom_set_handler+0x38>)
     e88:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e8a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     e8c:	195a      	adds	r2, r3, r5
     e8e:	6014      	str	r4, [r2, #0]
     e90:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e92:	2b18      	cmp	r3, #24
     e94:	d1f9      	bne.n	e8a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     e96:	2201      	movs	r2, #1
     e98:	4b02      	ldr	r3, [pc, #8]	; (ea4 <_sercom_set_handler+0x2c>)
     e9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e9c:	0080      	lsls	r0, r0, #2
     e9e:	4b02      	ldr	r3, [pc, #8]	; (ea8 <_sercom_set_handler+0x30>)
     ea0:	50c1      	str	r1, [r0, r3]
}
     ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ea4:	20000206 	.word	0x20000206
     ea8:	20000208 	.word	0x20000208
     eac:	00000e75 	.word	0x00000e75
     eb0:	200008e4 	.word	0x200008e4

00000eb4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     eb4:	b500      	push	{lr}
     eb6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     eb8:	2309      	movs	r3, #9
     eba:	466a      	mov	r2, sp
     ebc:	7013      	strb	r3, [r2, #0]
     ebe:	3301      	adds	r3, #1
     ec0:	7053      	strb	r3, [r2, #1]
     ec2:	3301      	adds	r3, #1
     ec4:	7093      	strb	r3, [r2, #2]
     ec6:	3301      	adds	r3, #1
     ec8:	70d3      	strb	r3, [r2, #3]
     eca:	3301      	adds	r3, #1
     ecc:	7113      	strb	r3, [r2, #4]
     ece:	3301      	adds	r3, #1
     ed0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ed2:	4b03      	ldr	r3, [pc, #12]	; (ee0 <_sercom_get_interrupt_vector+0x2c>)
     ed4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ed6:	466b      	mov	r3, sp
     ed8:	5618      	ldrsb	r0, [r3, r0]
}
     eda:	b003      	add	sp, #12
     edc:	bd00      	pop	{pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	00000e3d 	.word	0x00000e3d

00000ee4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ee4:	b510      	push	{r4, lr}
     ee6:	4b02      	ldr	r3, [pc, #8]	; (ef0 <SERCOM0_Handler+0xc>)
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	2000      	movs	r0, #0
     eec:	4798      	blx	r3
     eee:	bd10      	pop	{r4, pc}
     ef0:	20000208 	.word	0x20000208

00000ef4 <SERCOM1_Handler>:
     ef4:	b510      	push	{r4, lr}
     ef6:	4b02      	ldr	r3, [pc, #8]	; (f00 <SERCOM1_Handler+0xc>)
     ef8:	685b      	ldr	r3, [r3, #4]
     efa:	2001      	movs	r0, #1
     efc:	4798      	blx	r3
     efe:	bd10      	pop	{r4, pc}
     f00:	20000208 	.word	0x20000208

00000f04 <SERCOM2_Handler>:
     f04:	b510      	push	{r4, lr}
     f06:	4b02      	ldr	r3, [pc, #8]	; (f10 <SERCOM2_Handler+0xc>)
     f08:	689b      	ldr	r3, [r3, #8]
     f0a:	2002      	movs	r0, #2
     f0c:	4798      	blx	r3
     f0e:	bd10      	pop	{r4, pc}
     f10:	20000208 	.word	0x20000208

00000f14 <SERCOM3_Handler>:
     f14:	b510      	push	{r4, lr}
     f16:	4b02      	ldr	r3, [pc, #8]	; (f20 <SERCOM3_Handler+0xc>)
     f18:	68db      	ldr	r3, [r3, #12]
     f1a:	2003      	movs	r0, #3
     f1c:	4798      	blx	r3
     f1e:	bd10      	pop	{r4, pc}
     f20:	20000208 	.word	0x20000208

00000f24 <SERCOM4_Handler>:
     f24:	b510      	push	{r4, lr}
     f26:	4b02      	ldr	r3, [pc, #8]	; (f30 <SERCOM4_Handler+0xc>)
     f28:	691b      	ldr	r3, [r3, #16]
     f2a:	2004      	movs	r0, #4
     f2c:	4798      	blx	r3
     f2e:	bd10      	pop	{r4, pc}
     f30:	20000208 	.word	0x20000208

00000f34 <SERCOM5_Handler>:
     f34:	b510      	push	{r4, lr}
     f36:	4b02      	ldr	r3, [pc, #8]	; (f40 <SERCOM5_Handler+0xc>)
     f38:	695b      	ldr	r3, [r3, #20]
     f3a:	2005      	movs	r0, #5
     f3c:	4798      	blx	r3
     f3e:	bd10      	pop	{r4, pc}
     f40:	20000208 	.word	0x20000208

00000f44 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     f44:	b5f0      	push	{r4, r5, r6, r7, lr}
     f46:	46d6      	mov	lr, sl
     f48:	464f      	mov	r7, r9
     f4a:	b580      	push	{r7, lr}
     f4c:	b08b      	sub	sp, #44	; 0x2c
     f4e:	4681      	mov	r9, r0
     f50:	000f      	movs	r7, r1
     f52:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     f54:	0003      	movs	r3, r0
     f56:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f58:	680b      	ldr	r3, [r1, #0]
     f5a:	079b      	lsls	r3, r3, #30
     f5c:	d409      	bmi.n	f72 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f5e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     f60:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f62:	07db      	lsls	r3, r3, #31
     f64:	d400      	bmi.n	f68 <spi_init+0x24>
     f66:	e098      	b.n	109a <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     f68:	b00b      	add	sp, #44	; 0x2c
     f6a:	bc0c      	pop	{r2, r3}
     f6c:	4691      	mov	r9, r2
     f6e:	469a      	mov	sl, r3
     f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     f72:	6a93      	ldr	r3, [r2, #40]	; 0x28
     f74:	9305      	str	r3, [sp, #20]
     f76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     f78:	9306      	str	r3, [sp, #24]
     f7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     f7c:	9307      	str	r3, [sp, #28]
     f7e:	6b53      	ldr	r3, [r2, #52]	; 0x34
     f80:	9308      	str	r3, [sp, #32]
     f82:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f84:	ab05      	add	r3, sp, #20
     f86:	9301      	str	r3, [sp, #4]
     f88:	e00a      	b.n	fa0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f8a:	0038      	movs	r0, r7
     f8c:	4b93      	ldr	r3, [pc, #588]	; (11dc <spi_init+0x298>)
     f8e:	4798      	blx	r3
     f90:	e00c      	b.n	fac <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     f92:	230f      	movs	r3, #15
     f94:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     f96:	4281      	cmp	r1, r0
     f98:	d12d      	bne.n	ff6 <spi_init+0xb2>
     f9a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     f9c:	2e04      	cmp	r6, #4
     f9e:	d02f      	beq.n	1000 <spi_init+0xbc>
     fa0:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fa2:	00b3      	lsls	r3, r6, #2
     fa4:	9a01      	ldr	r2, [sp, #4]
     fa6:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     fa8:	2800      	cmp	r0, #0
     faa:	d0ee      	beq.n	f8a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     fac:	1c43      	adds	r3, r0, #1
     fae:	d0f4      	beq.n	f9a <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     fb0:	0401      	lsls	r1, r0, #16
     fb2:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     fb4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     fb6:	b2c3      	uxtb	r3, r0
     fb8:	469c      	mov	ip, r3
		return NULL;
     fba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     fbc:	0602      	lsls	r2, r0, #24
     fbe:	d405      	bmi.n	fcc <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     fc0:	4663      	mov	r3, ip
     fc2:	095b      	lsrs	r3, r3, #5
     fc4:	01db      	lsls	r3, r3, #7
     fc6:	4a86      	ldr	r2, [pc, #536]	; (11e0 <spi_init+0x29c>)
     fc8:	4692      	mov	sl, r2
     fca:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     fcc:	221f      	movs	r2, #31
     fce:	4660      	mov	r0, ip
     fd0:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     fd2:	1898      	adds	r0, r3, r2
     fd4:	3040      	adds	r0, #64	; 0x40
     fd6:	7800      	ldrb	r0, [r0, #0]
     fd8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     fda:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     fdc:	4655      	mov	r5, sl
     fde:	07ed      	lsls	r5, r5, #31
     fe0:	d5d9      	bpl.n	f96 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     fe2:	0852      	lsrs	r2, r2, #1
     fe4:	189b      	adds	r3, r3, r2
     fe6:	3330      	adds	r3, #48	; 0x30
     fe8:	7818      	ldrb	r0, [r3, #0]
     fea:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     fec:	4663      	mov	r3, ip
     fee:	07db      	lsls	r3, r3, #31
     ff0:	d5cf      	bpl.n	f92 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     ff2:	0900      	lsrs	r0, r0, #4
     ff4:	e7cf      	b.n	f96 <spi_init+0x52>
			module->hw = NULL;
     ff6:	2300      	movs	r3, #0
     ff8:	464a      	mov	r2, r9
     ffa:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     ffc:	201c      	movs	r0, #28
     ffe:	e7b3      	b.n	f68 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1000:	2013      	movs	r0, #19
    1002:	4b78      	ldr	r3, [pc, #480]	; (11e4 <spi_init+0x2a0>)
    1004:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1006:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1008:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    100a:	2a01      	cmp	r2, #1
    100c:	d027      	beq.n	105e <spi_init+0x11a>
	ctrla |= config->mux_setting;
    100e:	6863      	ldr	r3, [r4, #4]
    1010:	68a2      	ldr	r2, [r4, #8]
    1012:	4313      	orrs	r3, r2
    1014:	68e2      	ldr	r2, [r4, #12]
    1016:	4313      	orrs	r3, r2
    1018:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    101a:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    101c:	7c61      	ldrb	r1, [r4, #17]
    101e:	2900      	cmp	r1, #0
    1020:	d001      	beq.n	1026 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1022:	2180      	movs	r1, #128	; 0x80
    1024:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1026:	7ca1      	ldrb	r1, [r4, #18]
    1028:	2900      	cmp	r1, #0
    102a:	d002      	beq.n	1032 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    102c:	2180      	movs	r1, #128	; 0x80
    102e:	0289      	lsls	r1, r1, #10
    1030:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1032:	7ce1      	ldrb	r1, [r4, #19]
    1034:	2900      	cmp	r1, #0
    1036:	d002      	beq.n	103e <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1038:	2180      	movs	r1, #128	; 0x80
    103a:	0089      	lsls	r1, r1, #2
    103c:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    103e:	7d21      	ldrb	r1, [r4, #20]
    1040:	2900      	cmp	r1, #0
    1042:	d002      	beq.n	104a <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1044:	2180      	movs	r1, #128	; 0x80
    1046:	0189      	lsls	r1, r1, #6
    1048:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    104a:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    104c:	2002      	movs	r0, #2
    104e:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    1050:	428b      	cmp	r3, r1
    1052:	d018      	beq.n	1086 <spi_init+0x142>
	module->hw = NULL;
    1054:	2300      	movs	r3, #0
    1056:	464a      	mov	r2, r9
    1058:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    105a:	201c      	movs	r0, #28
    105c:	e784      	b.n	f68 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    105e:	aa04      	add	r2, sp, #16
    1060:	0001      	movs	r1, r0
    1062:	69a0      	ldr	r0, [r4, #24]
    1064:	4b60      	ldr	r3, [pc, #384]	; (11e8 <spi_init+0x2a4>)
    1066:	4798      	blx	r3
    1068:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    106a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    106c:	2b00      	cmp	r3, #0
    106e:	d000      	beq.n	1072 <spi_init+0x12e>
    1070:	e77a      	b.n	f68 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1072:	7b3b      	ldrb	r3, [r7, #12]
    1074:	b2db      	uxtb	r3, r3
    1076:	aa04      	add	r2, sp, #16
    1078:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    107a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    107c:	429a      	cmp	r2, r3
    107e:	d000      	beq.n	1082 <spi_init+0x13e>
    1080:	e772      	b.n	f68 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1082:	350c      	adds	r5, #12
    1084:	e7c3      	b.n	100e <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    1086:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    1088:	4293      	cmp	r3, r2
    108a:	d1e3      	bne.n	1054 <spi_init+0x110>
		module->mode           = config->mode;
    108c:	7823      	ldrb	r3, [r4, #0]
    108e:	464a      	mov	r2, r9
    1090:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    1092:	7c23      	ldrb	r3, [r4, #16]
    1094:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    1096:	2000      	movs	r0, #0
    1098:	e766      	b.n	f68 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    109a:	0008      	movs	r0, r1
    109c:	4b53      	ldr	r3, [pc, #332]	; (11ec <spi_init+0x2a8>)
    109e:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    10a0:	4a53      	ldr	r2, [pc, #332]	; (11f0 <spi_init+0x2ac>)
    10a2:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10a4:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10a6:	2301      	movs	r3, #1
    10a8:	40ab      	lsls	r3, r5
    10aa:	430b      	orrs	r3, r1
    10ac:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    10ae:	a909      	add	r1, sp, #36	; 0x24
    10b0:	2624      	movs	r6, #36	; 0x24
    10b2:	5da3      	ldrb	r3, [r4, r6]
    10b4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10b6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10b8:	b2c5      	uxtb	r5, r0
    10ba:	0028      	movs	r0, r5
    10bc:	4b4d      	ldr	r3, [pc, #308]	; (11f4 <spi_init+0x2b0>)
    10be:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10c0:	0028      	movs	r0, r5
    10c2:	4b4d      	ldr	r3, [pc, #308]	; (11f8 <spi_init+0x2b4>)
    10c4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10c6:	5da0      	ldrb	r0, [r4, r6]
    10c8:	2100      	movs	r1, #0
    10ca:	4b4c      	ldr	r3, [pc, #304]	; (11fc <spi_init+0x2b8>)
    10cc:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10ce:	7823      	ldrb	r3, [r4, #0]
    10d0:	2b01      	cmp	r3, #1
    10d2:	d019      	beq.n	1108 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    10d4:	464b      	mov	r3, r9
    10d6:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10d8:	ab04      	add	r3, sp, #16
    10da:	2280      	movs	r2, #128	; 0x80
    10dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10de:	2200      	movs	r2, #0
    10e0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    10e2:	2101      	movs	r1, #1
    10e4:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    10e6:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    10e8:	7823      	ldrb	r3, [r4, #0]
    10ea:	2b00      	cmp	r3, #0
    10ec:	d101      	bne.n	10f2 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    10ee:	ab04      	add	r3, sp, #16
    10f0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    10f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10f4:	9305      	str	r3, [sp, #20]
    10f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    10f8:	9306      	str	r3, [sp, #24]
    10fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    10fc:	9307      	str	r3, [sp, #28]
    10fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1100:	9308      	str	r3, [sp, #32]
    1102:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1104:	ad05      	add	r5, sp, #20
    1106:	e011      	b.n	112c <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1108:	683b      	ldr	r3, [r7, #0]
    110a:	220c      	movs	r2, #12
    110c:	4313      	orrs	r3, r2
    110e:	603b      	str	r3, [r7, #0]
    1110:	e7e0      	b.n	10d4 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1112:	0030      	movs	r0, r6
    1114:	4b31      	ldr	r3, [pc, #196]	; (11dc <spi_init+0x298>)
    1116:	4798      	blx	r3
    1118:	e00d      	b.n	1136 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    111a:	a904      	add	r1, sp, #16
    111c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    111e:	0c00      	lsrs	r0, r0, #16
    1120:	b2c0      	uxtb	r0, r0
    1122:	4b37      	ldr	r3, [pc, #220]	; (1200 <spi_init+0x2bc>)
    1124:	4798      	blx	r3
    1126:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1128:	2f04      	cmp	r7, #4
    112a:	d007      	beq.n	113c <spi_init+0x1f8>
    112c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    112e:	00bb      	lsls	r3, r7, #2
    1130:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1132:	2800      	cmp	r0, #0
    1134:	d0ed      	beq.n	1112 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    1136:	1c43      	adds	r3, r0, #1
    1138:	d1ef      	bne.n	111a <spi_init+0x1d6>
    113a:	e7f4      	b.n	1126 <spi_init+0x1e2>
	module->mode             = config->mode;
    113c:	7823      	ldrb	r3, [r4, #0]
    113e:	464a      	mov	r2, r9
    1140:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    1142:	7c23      	ldrb	r3, [r4, #16]
    1144:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1146:	7ca3      	ldrb	r3, [r4, #18]
    1148:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    114a:	7d23      	ldrb	r3, [r4, #20]
    114c:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    114e:	2200      	movs	r2, #0
    1150:	ab02      	add	r3, sp, #8
    1152:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1154:	7823      	ldrb	r3, [r4, #0]
    1156:	2b01      	cmp	r3, #1
    1158:	d028      	beq.n	11ac <spi_init+0x268>
	ctrla |= config->transfer_mode;
    115a:	6863      	ldr	r3, [r4, #4]
    115c:	68a2      	ldr	r2, [r4, #8]
    115e:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1160:	68e2      	ldr	r2, [r4, #12]
    1162:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1164:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1166:	7c62      	ldrb	r2, [r4, #17]
    1168:	2a00      	cmp	r2, #0
    116a:	d103      	bne.n	1174 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    116c:	4a25      	ldr	r2, [pc, #148]	; (1204 <spi_init+0x2c0>)
    116e:	7892      	ldrb	r2, [r2, #2]
    1170:	0792      	lsls	r2, r2, #30
    1172:	d501      	bpl.n	1178 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1174:	2280      	movs	r2, #128	; 0x80
    1176:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    1178:	7ca2      	ldrb	r2, [r4, #18]
    117a:	2a00      	cmp	r2, #0
    117c:	d002      	beq.n	1184 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    117e:	2280      	movs	r2, #128	; 0x80
    1180:	0292      	lsls	r2, r2, #10
    1182:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1184:	7ce2      	ldrb	r2, [r4, #19]
    1186:	2a00      	cmp	r2, #0
    1188:	d002      	beq.n	1190 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    118a:	2280      	movs	r2, #128	; 0x80
    118c:	0092      	lsls	r2, r2, #2
    118e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1190:	7d22      	ldrb	r2, [r4, #20]
    1192:	2a00      	cmp	r2, #0
    1194:	d002      	beq.n	119c <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1196:	2280      	movs	r2, #128	; 0x80
    1198:	0192      	lsls	r2, r2, #6
    119a:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    119c:	6832      	ldr	r2, [r6, #0]
    119e:	4313      	orrs	r3, r2
    11a0:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    11a2:	6873      	ldr	r3, [r6, #4]
    11a4:	430b      	orrs	r3, r1
    11a6:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    11a8:	2000      	movs	r0, #0
    11aa:	e6dd      	b.n	f68 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11ac:	464b      	mov	r3, r9
    11ae:	6818      	ldr	r0, [r3, #0]
    11b0:	4b0e      	ldr	r3, [pc, #56]	; (11ec <spi_init+0x2a8>)
    11b2:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11b4:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    11b6:	b2c0      	uxtb	r0, r0
    11b8:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <spi_init+0x2a0>)
    11ba:	4798      	blx	r3
    11bc:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    11be:	ab02      	add	r3, sp, #8
    11c0:	1d9a      	adds	r2, r3, #6
    11c2:	69a0      	ldr	r0, [r4, #24]
    11c4:	4b08      	ldr	r3, [pc, #32]	; (11e8 <spi_init+0x2a4>)
    11c6:	4798      	blx	r3
    11c8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    11ca:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    11cc:	2b00      	cmp	r3, #0
    11ce:	d000      	beq.n	11d2 <spi_init+0x28e>
    11d0:	e6ca      	b.n	f68 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    11d2:	ab02      	add	r3, sp, #8
    11d4:	3306      	adds	r3, #6
    11d6:	781b      	ldrb	r3, [r3, #0]
    11d8:	7333      	strb	r3, [r6, #12]
    11da:	e7be      	b.n	115a <spi_init+0x216>
    11dc:	00000cc5 	.word	0x00000cc5
    11e0:	41004400 	.word	0x41004400
    11e4:	000020c1 	.word	0x000020c1
    11e8:	00000a81 	.word	0x00000a81
    11ec:	00000e3d 	.word	0x00000e3d
    11f0:	40000400 	.word	0x40000400
    11f4:	000020a5 	.word	0x000020a5
    11f8:	00002019 	.word	0x00002019
    11fc:	00000c79 	.word	0x00000c79
    1200:	0000219d 	.word	0x0000219d
    1204:	41002000 	.word	0x41002000

00001208 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1208:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    120a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    120c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    120e:	2c01      	cmp	r4, #1
    1210:	d001      	beq.n	1216 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1212:	0018      	movs	r0, r3
    1214:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1216:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1218:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    121a:	2c00      	cmp	r4, #0
    121c:	d1f9      	bne.n	1212 <spi_select_slave+0xa>
		if (select) {
    121e:	2a00      	cmp	r2, #0
    1220:	d058      	beq.n	12d4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1222:	784b      	ldrb	r3, [r1, #1]
    1224:	2b00      	cmp	r3, #0
    1226:	d044      	beq.n	12b2 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1228:	6803      	ldr	r3, [r0, #0]
    122a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    122c:	07db      	lsls	r3, r3, #31
    122e:	d410      	bmi.n	1252 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1230:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1232:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1234:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1236:	2900      	cmp	r1, #0
    1238:	d104      	bne.n	1244 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    123a:	0953      	lsrs	r3, r2, #5
    123c:	01db      	lsls	r3, r3, #7
    123e:	492e      	ldr	r1, [pc, #184]	; (12f8 <spi_select_slave+0xf0>)
    1240:	468c      	mov	ip, r1
    1242:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1244:	211f      	movs	r1, #31
    1246:	4011      	ands	r1, r2
    1248:	2201      	movs	r2, #1
    124a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    124c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    124e:	2305      	movs	r3, #5
    1250:	e7df      	b.n	1212 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1252:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1254:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1256:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1258:	2c00      	cmp	r4, #0
    125a:	d104      	bne.n	1266 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    125c:	0953      	lsrs	r3, r2, #5
    125e:	01db      	lsls	r3, r3, #7
    1260:	4c25      	ldr	r4, [pc, #148]	; (12f8 <spi_select_slave+0xf0>)
    1262:	46a4      	mov	ip, r4
    1264:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1266:	241f      	movs	r4, #31
    1268:	4014      	ands	r4, r2
    126a:	2201      	movs	r2, #1
    126c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    126e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1270:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1272:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1274:	07d2      	lsls	r2, r2, #31
    1276:	d501      	bpl.n	127c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1278:	788a      	ldrb	r2, [r1, #2]
    127a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    127c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    127e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1280:	2a00      	cmp	r2, #0
    1282:	d1c6      	bne.n	1212 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1284:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1286:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1288:	7e13      	ldrb	r3, [r2, #24]
    128a:	420b      	tst	r3, r1
    128c:	d0fc      	beq.n	1288 <spi_select_slave+0x80>
    128e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    1290:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1292:	0749      	lsls	r1, r1, #29
    1294:	d5bd      	bpl.n	1212 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1296:	8b53      	ldrh	r3, [r2, #26]
    1298:	075b      	lsls	r3, r3, #29
    129a:	d501      	bpl.n	12a0 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    129c:	2304      	movs	r3, #4
    129e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12a0:	7983      	ldrb	r3, [r0, #6]
    12a2:	2b01      	cmp	r3, #1
    12a4:	d002      	beq.n	12ac <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    12a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    12a8:	2300      	movs	r3, #0
    12aa:	e7b2      	b.n	1212 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    12ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    12ae:	2300      	movs	r3, #0
    12b0:	e7af      	b.n	1212 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    12b2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    12b4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    12b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12b8:	2900      	cmp	r1, #0
    12ba:	d104      	bne.n	12c6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    12bc:	0953      	lsrs	r3, r2, #5
    12be:	01db      	lsls	r3, r3, #7
    12c0:	490d      	ldr	r1, [pc, #52]	; (12f8 <spi_select_slave+0xf0>)
    12c2:	468c      	mov	ip, r1
    12c4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12c6:	211f      	movs	r1, #31
    12c8:	4011      	ands	r1, r2
    12ca:	2201      	movs	r2, #1
    12cc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    12ce:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    12d0:	2300      	movs	r3, #0
    12d2:	e79e      	b.n	1212 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    12d4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    12d6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    12d8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12da:	2900      	cmp	r1, #0
    12dc:	d104      	bne.n	12e8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    12de:	0953      	lsrs	r3, r2, #5
    12e0:	01db      	lsls	r3, r3, #7
    12e2:	4905      	ldr	r1, [pc, #20]	; (12f8 <spi_select_slave+0xf0>)
    12e4:	468c      	mov	ip, r1
    12e6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12e8:	211f      	movs	r1, #31
    12ea:	4011      	ands	r1, r2
    12ec:	2201      	movs	r2, #1
    12ee:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    12f0:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    12f2:	2300      	movs	r3, #0
    12f4:	e78d      	b.n	1212 <spi_select_slave+0xa>
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	41004400 	.word	0x41004400

000012fc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    12fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12fe:	46de      	mov	lr, fp
    1300:	4657      	mov	r7, sl
    1302:	464e      	mov	r6, r9
    1304:	4645      	mov	r5, r8
    1306:	b5e0      	push	{r5, r6, r7, lr}
    1308:	b091      	sub	sp, #68	; 0x44
    130a:	0005      	movs	r5, r0
    130c:	000c      	movs	r4, r1
    130e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1310:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1312:	0008      	movs	r0, r1
    1314:	4bbb      	ldr	r3, [pc, #748]	; (1604 <usart_init+0x308>)
    1316:	4798      	blx	r3
    1318:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    131a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    131c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    131e:	07db      	lsls	r3, r3, #31
    1320:	d506      	bpl.n	1330 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1322:	b011      	add	sp, #68	; 0x44
    1324:	bc3c      	pop	{r2, r3, r4, r5}
    1326:	4690      	mov	r8, r2
    1328:	4699      	mov	r9, r3
    132a:	46a2      	mov	sl, r4
    132c:	46ab      	mov	fp, r5
    132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1330:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1332:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1334:	079b      	lsls	r3, r3, #30
    1336:	d4f4      	bmi.n	1322 <usart_init+0x26>
    1338:	49b3      	ldr	r1, [pc, #716]	; (1608 <usart_init+0x30c>)
    133a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    133c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    133e:	2301      	movs	r3, #1
    1340:	40bb      	lsls	r3, r7
    1342:	4303      	orrs	r3, r0
    1344:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1346:	a90f      	add	r1, sp, #60	; 0x3c
    1348:	272d      	movs	r7, #45	; 0x2d
    134a:	5df3      	ldrb	r3, [r6, r7]
    134c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    134e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1350:	b2d3      	uxtb	r3, r2
    1352:	9302      	str	r3, [sp, #8]
    1354:	0018      	movs	r0, r3
    1356:	4bad      	ldr	r3, [pc, #692]	; (160c <usart_init+0x310>)
    1358:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    135a:	9802      	ldr	r0, [sp, #8]
    135c:	4bac      	ldr	r3, [pc, #688]	; (1610 <usart_init+0x314>)
    135e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1360:	5df0      	ldrb	r0, [r6, r7]
    1362:	2100      	movs	r1, #0
    1364:	4bab      	ldr	r3, [pc, #684]	; (1614 <usart_init+0x318>)
    1366:	4798      	blx	r3
	module->character_size = config->character_size;
    1368:	7af3      	ldrb	r3, [r6, #11]
    136a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    136c:	2324      	movs	r3, #36	; 0x24
    136e:	5cf3      	ldrb	r3, [r6, r3]
    1370:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1372:	2325      	movs	r3, #37	; 0x25
    1374:	5cf3      	ldrb	r3, [r6, r3]
    1376:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1378:	7ef3      	ldrb	r3, [r6, #27]
    137a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    137c:	7f33      	ldrb	r3, [r6, #28]
    137e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1380:	682b      	ldr	r3, [r5, #0]
    1382:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1384:	0018      	movs	r0, r3
    1386:	4b9f      	ldr	r3, [pc, #636]	; (1604 <usart_init+0x308>)
    1388:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    138a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    138c:	2200      	movs	r2, #0
    138e:	230e      	movs	r3, #14
    1390:	a906      	add	r1, sp, #24
    1392:	468c      	mov	ip, r1
    1394:	4463      	add	r3, ip
    1396:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1398:	8a32      	ldrh	r2, [r6, #16]
    139a:	9202      	str	r2, [sp, #8]
    139c:	2380      	movs	r3, #128	; 0x80
    139e:	01db      	lsls	r3, r3, #7
    13a0:	429a      	cmp	r2, r3
    13a2:	d100      	bne.n	13a6 <usart_init+0xaa>
    13a4:	e09c      	b.n	14e0 <usart_init+0x1e4>
    13a6:	d90f      	bls.n	13c8 <usart_init+0xcc>
    13a8:	23c0      	movs	r3, #192	; 0xc0
    13aa:	01db      	lsls	r3, r3, #7
    13ac:	9a02      	ldr	r2, [sp, #8]
    13ae:	429a      	cmp	r2, r3
    13b0:	d100      	bne.n	13b4 <usart_init+0xb8>
    13b2:	e090      	b.n	14d6 <usart_init+0x1da>
    13b4:	2380      	movs	r3, #128	; 0x80
    13b6:	021b      	lsls	r3, r3, #8
    13b8:	429a      	cmp	r2, r3
    13ba:	d000      	beq.n	13be <usart_init+0xc2>
    13bc:	e11d      	b.n	15fa <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    13be:	2303      	movs	r3, #3
    13c0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13c2:	2300      	movs	r3, #0
    13c4:	9307      	str	r3, [sp, #28]
    13c6:	e008      	b.n	13da <usart_init+0xde>
	switch (config->sample_rate) {
    13c8:	2380      	movs	r3, #128	; 0x80
    13ca:	019b      	lsls	r3, r3, #6
    13cc:	429a      	cmp	r2, r3
    13ce:	d000      	beq.n	13d2 <usart_init+0xd6>
    13d0:	e113      	b.n	15fa <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13d2:	2310      	movs	r3, #16
    13d4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13d6:	3b0f      	subs	r3, #15
    13d8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    13da:	6833      	ldr	r3, [r6, #0]
    13dc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    13de:	68f3      	ldr	r3, [r6, #12]
    13e0:	469b      	mov	fp, r3
		config->sample_adjustment |
    13e2:	6973      	ldr	r3, [r6, #20]
    13e4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    13e6:	7e33      	ldrb	r3, [r6, #24]
    13e8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    13ea:	2326      	movs	r3, #38	; 0x26
    13ec:	5cf3      	ldrb	r3, [r6, r3]
    13ee:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    13f0:	6873      	ldr	r3, [r6, #4]
    13f2:	4699      	mov	r9, r3
	switch (transfer_mode)
    13f4:	2b00      	cmp	r3, #0
    13f6:	d100      	bne.n	13fa <usart_init+0xfe>
    13f8:	e09e      	b.n	1538 <usart_init+0x23c>
    13fa:	2380      	movs	r3, #128	; 0x80
    13fc:	055b      	lsls	r3, r3, #21
    13fe:	4599      	cmp	r9, r3
    1400:	d100      	bne.n	1404 <usart_init+0x108>
    1402:	e082      	b.n	150a <usart_init+0x20e>
	if(config->encoding_format_enable) {
    1404:	7e73      	ldrb	r3, [r6, #25]
    1406:	2b00      	cmp	r3, #0
    1408:	d002      	beq.n	1410 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    140a:	7eb3      	ldrb	r3, [r6, #26]
    140c:	4642      	mov	r2, r8
    140e:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1410:	682a      	ldr	r2, [r5, #0]
    1412:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    1414:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1416:	2b00      	cmp	r3, #0
    1418:	d1fc      	bne.n	1414 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    141a:	330e      	adds	r3, #14
    141c:	aa06      	add	r2, sp, #24
    141e:	4694      	mov	ip, r2
    1420:	4463      	add	r3, ip
    1422:	881b      	ldrh	r3, [r3, #0]
    1424:	4642      	mov	r2, r8
    1426:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1428:	9b05      	ldr	r3, [sp, #20]
    142a:	465a      	mov	r2, fp
    142c:	4313      	orrs	r3, r2
    142e:	9a03      	ldr	r2, [sp, #12]
    1430:	4313      	orrs	r3, r2
    1432:	464a      	mov	r2, r9
    1434:	4313      	orrs	r3, r2
    1436:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1438:	9b04      	ldr	r3, [sp, #16]
    143a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    143c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    143e:	4653      	mov	r3, sl
    1440:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1442:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1444:	2327      	movs	r3, #39	; 0x27
    1446:	5cf3      	ldrb	r3, [r6, r3]
    1448:	2b00      	cmp	r3, #0
    144a:	d101      	bne.n	1450 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    144c:	3304      	adds	r3, #4
    144e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1450:	7e73      	ldrb	r3, [r6, #25]
    1452:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1454:	7f32      	ldrb	r2, [r6, #28]
    1456:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1458:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    145a:	7f72      	ldrb	r2, [r6, #29]
    145c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    145e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1460:	2224      	movs	r2, #36	; 0x24
    1462:	5cb2      	ldrb	r2, [r6, r2]
    1464:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1466:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1468:	2225      	movs	r2, #37	; 0x25
    146a:	5cb2      	ldrb	r2, [r6, r2]
    146c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    146e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1470:	7af1      	ldrb	r1, [r6, #11]
    1472:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1474:	8933      	ldrh	r3, [r6, #8]
    1476:	2bff      	cmp	r3, #255	; 0xff
    1478:	d100      	bne.n	147c <usart_init+0x180>
    147a:	e081      	b.n	1580 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    147c:	2280      	movs	r2, #128	; 0x80
    147e:	0452      	lsls	r2, r2, #17
    1480:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1482:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1484:	232c      	movs	r3, #44	; 0x2c
    1486:	5cf3      	ldrb	r3, [r6, r3]
    1488:	2b00      	cmp	r3, #0
    148a:	d103      	bne.n	1494 <usart_init+0x198>
    148c:	4b62      	ldr	r3, [pc, #392]	; (1618 <usart_init+0x31c>)
    148e:	789b      	ldrb	r3, [r3, #2]
    1490:	079b      	lsls	r3, r3, #30
    1492:	d501      	bpl.n	1498 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1494:	2380      	movs	r3, #128	; 0x80
    1496:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1498:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    149a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    149c:	2b00      	cmp	r3, #0
    149e:	d1fc      	bne.n	149a <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    14a0:	4643      	mov	r3, r8
    14a2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    14a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14a8:	2b00      	cmp	r3, #0
    14aa:	d1fc      	bne.n	14a6 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    14ac:	4643      	mov	r3, r8
    14ae:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14b0:	ab0e      	add	r3, sp, #56	; 0x38
    14b2:	2280      	movs	r2, #128	; 0x80
    14b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14b6:	2200      	movs	r2, #0
    14b8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    14ba:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14bc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    14be:	6b33      	ldr	r3, [r6, #48]	; 0x30
    14c0:	930a      	str	r3, [sp, #40]	; 0x28
    14c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    14c4:	930b      	str	r3, [sp, #44]	; 0x2c
    14c6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    14c8:	930c      	str	r3, [sp, #48]	; 0x30
    14ca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    14cc:	9302      	str	r3, [sp, #8]
    14ce:	930d      	str	r3, [sp, #52]	; 0x34
    14d0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14d2:	ae0a      	add	r6, sp, #40	; 0x28
    14d4:	e063      	b.n	159e <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    14d6:	2308      	movs	r3, #8
    14d8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    14da:	3b07      	subs	r3, #7
    14dc:	9307      	str	r3, [sp, #28]
    14de:	e77c      	b.n	13da <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    14e0:	6833      	ldr	r3, [r6, #0]
    14e2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    14e4:	68f3      	ldr	r3, [r6, #12]
    14e6:	469b      	mov	fp, r3
		config->sample_adjustment |
    14e8:	6973      	ldr	r3, [r6, #20]
    14ea:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    14ec:	7e33      	ldrb	r3, [r6, #24]
    14ee:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    14f0:	2326      	movs	r3, #38	; 0x26
    14f2:	5cf3      	ldrb	r3, [r6, r3]
    14f4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    14f6:	6873      	ldr	r3, [r6, #4]
    14f8:	4699      	mov	r9, r3
	switch (transfer_mode)
    14fa:	2b00      	cmp	r3, #0
    14fc:	d018      	beq.n	1530 <usart_init+0x234>
    14fe:	2380      	movs	r3, #128	; 0x80
    1500:	055b      	lsls	r3, r3, #21
    1502:	4599      	cmp	r9, r3
    1504:	d001      	beq.n	150a <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    1506:	2000      	movs	r0, #0
    1508:	e025      	b.n	1556 <usart_init+0x25a>
			if (!config->use_external_clock) {
    150a:	2327      	movs	r3, #39	; 0x27
    150c:	5cf3      	ldrb	r3, [r6, r3]
    150e:	2b00      	cmp	r3, #0
    1510:	d000      	beq.n	1514 <usart_init+0x218>
    1512:	e777      	b.n	1404 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1514:	6a33      	ldr	r3, [r6, #32]
    1516:	001f      	movs	r7, r3
    1518:	b2c0      	uxtb	r0, r0
    151a:	4b40      	ldr	r3, [pc, #256]	; (161c <usart_init+0x320>)
    151c:	4798      	blx	r3
    151e:	0001      	movs	r1, r0
    1520:	220e      	movs	r2, #14
    1522:	ab06      	add	r3, sp, #24
    1524:	469c      	mov	ip, r3
    1526:	4462      	add	r2, ip
    1528:	0038      	movs	r0, r7
    152a:	4b3d      	ldr	r3, [pc, #244]	; (1620 <usart_init+0x324>)
    152c:	4798      	blx	r3
    152e:	e012      	b.n	1556 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1530:	2308      	movs	r3, #8
    1532:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1534:	2300      	movs	r3, #0
    1536:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1538:	2327      	movs	r3, #39	; 0x27
    153a:	5cf3      	ldrb	r3, [r6, r3]
    153c:	2b00      	cmp	r3, #0
    153e:	d00e      	beq.n	155e <usart_init+0x262>
				status_code =
    1540:	9b06      	ldr	r3, [sp, #24]
    1542:	9300      	str	r3, [sp, #0]
    1544:	9b07      	ldr	r3, [sp, #28]
    1546:	220e      	movs	r2, #14
    1548:	a906      	add	r1, sp, #24
    154a:	468c      	mov	ip, r1
    154c:	4462      	add	r2, ip
    154e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1550:	6a30      	ldr	r0, [r6, #32]
    1552:	4f34      	ldr	r7, [pc, #208]	; (1624 <usart_init+0x328>)
    1554:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1556:	2800      	cmp	r0, #0
    1558:	d000      	beq.n	155c <usart_init+0x260>
    155a:	e6e2      	b.n	1322 <usart_init+0x26>
    155c:	e752      	b.n	1404 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    155e:	6a33      	ldr	r3, [r6, #32]
    1560:	001f      	movs	r7, r3
    1562:	b2c0      	uxtb	r0, r0
    1564:	4b2d      	ldr	r3, [pc, #180]	; (161c <usart_init+0x320>)
    1566:	4798      	blx	r3
    1568:	0001      	movs	r1, r0
				status_code =
    156a:	9b06      	ldr	r3, [sp, #24]
    156c:	9300      	str	r3, [sp, #0]
    156e:	9b07      	ldr	r3, [sp, #28]
    1570:	220e      	movs	r2, #14
    1572:	a806      	add	r0, sp, #24
    1574:	4684      	mov	ip, r0
    1576:	4462      	add	r2, ip
    1578:	0038      	movs	r0, r7
    157a:	4f2a      	ldr	r7, [pc, #168]	; (1624 <usart_init+0x328>)
    157c:	47b8      	blx	r7
    157e:	e7ea      	b.n	1556 <usart_init+0x25a>
		if(config->lin_slave_enable) {
    1580:	7ef3      	ldrb	r3, [r6, #27]
    1582:	2b00      	cmp	r3, #0
    1584:	d100      	bne.n	1588 <usart_init+0x28c>
    1586:	e77d      	b.n	1484 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1588:	2380      	movs	r3, #128	; 0x80
    158a:	04db      	lsls	r3, r3, #19
    158c:	431f      	orrs	r7, r3
    158e:	e779      	b.n	1484 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1590:	0020      	movs	r0, r4
    1592:	4b25      	ldr	r3, [pc, #148]	; (1628 <usart_init+0x32c>)
    1594:	4798      	blx	r3
    1596:	e007      	b.n	15a8 <usart_init+0x2ac>
    1598:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    159a:	2f04      	cmp	r7, #4
    159c:	d00d      	beq.n	15ba <usart_init+0x2be>
    159e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15a0:	00bb      	lsls	r3, r7, #2
    15a2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    15a4:	2800      	cmp	r0, #0
    15a6:	d0f3      	beq.n	1590 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    15a8:	1c43      	adds	r3, r0, #1
    15aa:	d0f5      	beq.n	1598 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15ac:	a90e      	add	r1, sp, #56	; 0x38
    15ae:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15b0:	0c00      	lsrs	r0, r0, #16
    15b2:	b2c0      	uxtb	r0, r0
    15b4:	4b1d      	ldr	r3, [pc, #116]	; (162c <usart_init+0x330>)
    15b6:	4798      	blx	r3
    15b8:	e7ee      	b.n	1598 <usart_init+0x29c>
		module->callback[i]            = NULL;
    15ba:	2300      	movs	r3, #0
    15bc:	60eb      	str	r3, [r5, #12]
    15be:	612b      	str	r3, [r5, #16]
    15c0:	616b      	str	r3, [r5, #20]
    15c2:	61ab      	str	r3, [r5, #24]
    15c4:	61eb      	str	r3, [r5, #28]
    15c6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    15c8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    15ca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    15cc:	2200      	movs	r2, #0
    15ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    15d0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    15d2:	3330      	adds	r3, #48	; 0x30
    15d4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    15d6:	3301      	adds	r3, #1
    15d8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    15da:	3301      	adds	r3, #1
    15dc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    15de:	3301      	adds	r3, #1
    15e0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    15e2:	6828      	ldr	r0, [r5, #0]
    15e4:	4b07      	ldr	r3, [pc, #28]	; (1604 <usart_init+0x308>)
    15e6:	4798      	blx	r3
    15e8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    15ea:	4911      	ldr	r1, [pc, #68]	; (1630 <usart_init+0x334>)
    15ec:	4b11      	ldr	r3, [pc, #68]	; (1634 <usart_init+0x338>)
    15ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    15f0:	00a4      	lsls	r4, r4, #2
    15f2:	4b11      	ldr	r3, [pc, #68]	; (1638 <usart_init+0x33c>)
    15f4:	50e5      	str	r5, [r4, r3]
	return status_code;
    15f6:	2000      	movs	r0, #0
    15f8:	e693      	b.n	1322 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    15fa:	2310      	movs	r3, #16
    15fc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15fe:	2300      	movs	r3, #0
    1600:	9307      	str	r3, [sp, #28]
    1602:	e6ea      	b.n	13da <usart_init+0xde>
    1604:	00000e3d 	.word	0x00000e3d
    1608:	40000400 	.word	0x40000400
    160c:	000020a5 	.word	0x000020a5
    1610:	00002019 	.word	0x00002019
    1614:	00000c79 	.word	0x00000c79
    1618:	41002000 	.word	0x41002000
    161c:	000020c1 	.word	0x000020c1
    1620:	00000a81 	.word	0x00000a81
    1624:	00000aa9 	.word	0x00000aa9
    1628:	00000cc5 	.word	0x00000cc5
    162c:	0000219d 	.word	0x0000219d
    1630:	000017bd 	.word	0x000017bd
    1634:	00000e79 	.word	0x00000e79
    1638:	200008e4 	.word	0x200008e4

0000163c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    163c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    163e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1640:	2a00      	cmp	r2, #0
    1642:	d101      	bne.n	1648 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1644:	0018      	movs	r0, r3
    1646:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1648:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    164a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    164c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    164e:	2a00      	cmp	r2, #0
    1650:	d1f8      	bne.n	1644 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1652:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1654:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1656:	2a00      	cmp	r2, #0
    1658:	d1fc      	bne.n	1654 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    165a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    165c:	2102      	movs	r1, #2
    165e:	7e1a      	ldrb	r2, [r3, #24]
    1660:	420a      	tst	r2, r1
    1662:	d0fc      	beq.n	165e <usart_write_wait+0x22>
	return STATUS_OK;
    1664:	2300      	movs	r3, #0
    1666:	e7ed      	b.n	1644 <usart_write_wait+0x8>

00001668 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1668:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    166a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    166c:	2a00      	cmp	r2, #0
    166e:	d101      	bne.n	1674 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1670:	0018      	movs	r0, r3
    1672:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1674:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1676:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1678:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    167a:	2a00      	cmp	r2, #0
    167c:	d1f8      	bne.n	1670 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    167e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1680:	7e10      	ldrb	r0, [r2, #24]
    1682:	0740      	lsls	r0, r0, #29
    1684:	d5f4      	bpl.n	1670 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1686:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1688:	2b00      	cmp	r3, #0
    168a:	d1fc      	bne.n	1686 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    168c:	8b53      	ldrh	r3, [r2, #26]
    168e:	b2db      	uxtb	r3, r3
	if (error_code) {
    1690:	0698      	lsls	r0, r3, #26
    1692:	d01d      	beq.n	16d0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1694:	0798      	lsls	r0, r3, #30
    1696:	d503      	bpl.n	16a0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1698:	2302      	movs	r3, #2
    169a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    169c:	3318      	adds	r3, #24
    169e:	e7e7      	b.n	1670 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16a0:	0758      	lsls	r0, r3, #29
    16a2:	d503      	bpl.n	16ac <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    16a4:	2304      	movs	r3, #4
    16a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    16a8:	331a      	adds	r3, #26
    16aa:	e7e1      	b.n	1670 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    16ac:	07d8      	lsls	r0, r3, #31
    16ae:	d503      	bpl.n	16b8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    16b0:	2301      	movs	r3, #1
    16b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    16b4:	3312      	adds	r3, #18
    16b6:	e7db      	b.n	1670 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    16b8:	06d8      	lsls	r0, r3, #27
    16ba:	d503      	bpl.n	16c4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    16bc:	2310      	movs	r3, #16
    16be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    16c0:	3332      	adds	r3, #50	; 0x32
    16c2:	e7d5      	b.n	1670 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    16c4:	069b      	lsls	r3, r3, #26
    16c6:	d503      	bpl.n	16d0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    16c8:	2320      	movs	r3, #32
    16ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    16cc:	3321      	adds	r3, #33	; 0x21
    16ce:	e7cf      	b.n	1670 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    16d0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    16d2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    16d4:	2300      	movs	r3, #0
    16d6:	e7cb      	b.n	1670 <usart_read_wait+0x8>

000016d8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    16d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16da:	0006      	movs	r6, r0
    16dc:	000c      	movs	r4, r1
    16de:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    16e0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    16e2:	4b0a      	ldr	r3, [pc, #40]	; (170c <_usart_write_buffer+0x34>)
    16e4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    16e6:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    16e8:	b29b      	uxth	r3, r3
    16ea:	2b00      	cmp	r3, #0
    16ec:	d003      	beq.n	16f6 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    16ee:	4b08      	ldr	r3, [pc, #32]	; (1710 <_usart_write_buffer+0x38>)
    16f0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    16f2:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    16f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    16f6:	85f5      	strh	r5, [r6, #46]	; 0x2e
    16f8:	4b05      	ldr	r3, [pc, #20]	; (1710 <_usart_write_buffer+0x38>)
    16fa:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    16fc:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    16fe:	2205      	movs	r2, #5
    1700:	2333      	movs	r3, #51	; 0x33
    1702:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1704:	3b32      	subs	r3, #50	; 0x32
    1706:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    1708:	2000      	movs	r0, #0
    170a:	e7f3      	b.n	16f4 <_usart_write_buffer+0x1c>
    170c:	00000789 	.word	0x00000789
    1710:	000007c9 	.word	0x000007c9

00001714 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1716:	0004      	movs	r4, r0
    1718:	000d      	movs	r5, r1
    171a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    171c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    171e:	4b0f      	ldr	r3, [pc, #60]	; (175c <_usart_read_buffer+0x48>)
    1720:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1722:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1724:	b29b      	uxth	r3, r3
    1726:	2b00      	cmp	r3, #0
    1728:	d003      	beq.n	1732 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    172a:	4b0d      	ldr	r3, [pc, #52]	; (1760 <_usart_read_buffer+0x4c>)
    172c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    172e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1732:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <_usart_read_buffer+0x4c>)
    1736:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1738:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    173a:	2205      	movs	r2, #5
    173c:	2332      	movs	r3, #50	; 0x32
    173e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1740:	3b2e      	subs	r3, #46	; 0x2e
    1742:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1744:	7a23      	ldrb	r3, [r4, #8]
    1746:	2b00      	cmp	r3, #0
    1748:	d001      	beq.n	174e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    174a:	2320      	movs	r3, #32
    174c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    174e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1750:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1752:	2b00      	cmp	r3, #0
    1754:	d0ec      	beq.n	1730 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1756:	2308      	movs	r3, #8
    1758:	75bb      	strb	r3, [r7, #22]
    175a:	e7e9      	b.n	1730 <_usart_read_buffer+0x1c>
    175c:	00000789 	.word	0x00000789
    1760:	000007c9 	.word	0x000007c9

00001764 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1764:	1c93      	adds	r3, r2, #2
    1766:	009b      	lsls	r3, r3, #2
    1768:	18c3      	adds	r3, r0, r3
    176a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    176c:	2130      	movs	r1, #48	; 0x30
    176e:	2301      	movs	r3, #1
    1770:	4093      	lsls	r3, r2
    1772:	001a      	movs	r2, r3
    1774:	5c43      	ldrb	r3, [r0, r1]
    1776:	4313      	orrs	r3, r2
    1778:	5443      	strb	r3, [r0, r1]
}
    177a:	4770      	bx	lr

0000177c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    177c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    177e:	2317      	movs	r3, #23
	if (length == 0) {
    1780:	2a00      	cmp	r2, #0
    1782:	d101      	bne.n	1788 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    1784:	0018      	movs	r0, r3
    1786:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    1788:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    178a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    178c:	2c00      	cmp	r4, #0
    178e:	d0f9      	beq.n	1784 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    1790:	4b01      	ldr	r3, [pc, #4]	; (1798 <usart_write_buffer_job+0x1c>)
    1792:	4798      	blx	r3
    1794:	0003      	movs	r3, r0
    1796:	e7f5      	b.n	1784 <usart_write_buffer_job+0x8>
    1798:	000016d9 	.word	0x000016d9

0000179c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    179c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    179e:	2317      	movs	r3, #23
	if (length == 0) {
    17a0:	2a00      	cmp	r2, #0
    17a2:	d101      	bne.n	17a8 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    17a4:	0018      	movs	r0, r3
    17a6:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    17a8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    17aa:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    17ac:	2c00      	cmp	r4, #0
    17ae:	d0f9      	beq.n	17a4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    17b0:	4b01      	ldr	r3, [pc, #4]	; (17b8 <usart_read_buffer_job+0x1c>)
    17b2:	4798      	blx	r3
    17b4:	0003      	movs	r3, r0
    17b6:	e7f5      	b.n	17a4 <usart_read_buffer_job+0x8>
    17b8:	00001715 	.word	0x00001715

000017bc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    17bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    17be:	0080      	lsls	r0, r0, #2
    17c0:	4b62      	ldr	r3, [pc, #392]	; (194c <_usart_interrupt_handler+0x190>)
    17c2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    17c4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    17c6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    17c8:	2b00      	cmp	r3, #0
    17ca:	d1fc      	bne.n	17c6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    17cc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    17ce:	7da6      	ldrb	r6, [r4, #22]
    17d0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    17d2:	2330      	movs	r3, #48	; 0x30
    17d4:	5ceb      	ldrb	r3, [r5, r3]
    17d6:	2231      	movs	r2, #49	; 0x31
    17d8:	5caf      	ldrb	r7, [r5, r2]
    17da:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    17dc:	07f3      	lsls	r3, r6, #31
    17de:	d522      	bpl.n	1826 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    17e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    17e2:	b29b      	uxth	r3, r3
    17e4:	2b00      	cmp	r3, #0
    17e6:	d01c      	beq.n	1822 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    17e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    17ea:	7813      	ldrb	r3, [r2, #0]
    17ec:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    17ee:	1c51      	adds	r1, r2, #1
    17f0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    17f2:	7969      	ldrb	r1, [r5, #5]
    17f4:	2901      	cmp	r1, #1
    17f6:	d00e      	beq.n	1816 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    17f8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    17fa:	05db      	lsls	r3, r3, #23
    17fc:	0ddb      	lsrs	r3, r3, #23
    17fe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1800:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1802:	3b01      	subs	r3, #1
    1804:	b29b      	uxth	r3, r3
    1806:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1808:	2b00      	cmp	r3, #0
    180a:	d10c      	bne.n	1826 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    180c:	3301      	adds	r3, #1
    180e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1810:	3301      	adds	r3, #1
    1812:	75a3      	strb	r3, [r4, #22]
    1814:	e007      	b.n	1826 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1816:	7851      	ldrb	r1, [r2, #1]
    1818:	0209      	lsls	r1, r1, #8
    181a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    181c:	3202      	adds	r2, #2
    181e:	62aa      	str	r2, [r5, #40]	; 0x28
    1820:	e7eb      	b.n	17fa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1822:	2301      	movs	r3, #1
    1824:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1826:	07b3      	lsls	r3, r6, #30
    1828:	d506      	bpl.n	1838 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    182a:	2302      	movs	r3, #2
    182c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    182e:	2200      	movs	r2, #0
    1830:	3331      	adds	r3, #49	; 0x31
    1832:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1834:	07fb      	lsls	r3, r7, #31
    1836:	d41a      	bmi.n	186e <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1838:	0773      	lsls	r3, r6, #29
    183a:	d565      	bpl.n	1908 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    183c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    183e:	b29b      	uxth	r3, r3
    1840:	2b00      	cmp	r3, #0
    1842:	d05f      	beq.n	1904 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1844:	8b63      	ldrh	r3, [r4, #26]
    1846:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1848:	071a      	lsls	r2, r3, #28
    184a:	d414      	bmi.n	1876 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    184c:	223f      	movs	r2, #63	; 0x3f
    184e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1850:	2b00      	cmp	r3, #0
    1852:	d034      	beq.n	18be <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1854:	079a      	lsls	r2, r3, #30
    1856:	d511      	bpl.n	187c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1858:	221a      	movs	r2, #26
    185a:	2332      	movs	r3, #50	; 0x32
    185c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    185e:	3b30      	subs	r3, #48	; 0x30
    1860:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1862:	077b      	lsls	r3, r7, #29
    1864:	d550      	bpl.n	1908 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1866:	0028      	movs	r0, r5
    1868:	696b      	ldr	r3, [r5, #20]
    186a:	4798      	blx	r3
    186c:	e04c      	b.n	1908 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    186e:	0028      	movs	r0, r5
    1870:	68eb      	ldr	r3, [r5, #12]
    1872:	4798      	blx	r3
    1874:	e7e0      	b.n	1838 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1876:	2237      	movs	r2, #55	; 0x37
    1878:	4013      	ands	r3, r2
    187a:	e7e9      	b.n	1850 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    187c:	075a      	lsls	r2, r3, #29
    187e:	d505      	bpl.n	188c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1880:	221e      	movs	r2, #30
    1882:	2332      	movs	r3, #50	; 0x32
    1884:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1886:	3b2e      	subs	r3, #46	; 0x2e
    1888:	8363      	strh	r3, [r4, #26]
    188a:	e7ea      	b.n	1862 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    188c:	07da      	lsls	r2, r3, #31
    188e:	d505      	bpl.n	189c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1890:	2213      	movs	r2, #19
    1892:	2332      	movs	r3, #50	; 0x32
    1894:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1896:	3b31      	subs	r3, #49	; 0x31
    1898:	8363      	strh	r3, [r4, #26]
    189a:	e7e2      	b.n	1862 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    189c:	06da      	lsls	r2, r3, #27
    189e:	d505      	bpl.n	18ac <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    18a0:	2242      	movs	r2, #66	; 0x42
    18a2:	2332      	movs	r3, #50	; 0x32
    18a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    18a6:	3b22      	subs	r3, #34	; 0x22
    18a8:	8363      	strh	r3, [r4, #26]
    18aa:	e7da      	b.n	1862 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    18ac:	2220      	movs	r2, #32
    18ae:	421a      	tst	r2, r3
    18b0:	d0d7      	beq.n	1862 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    18b2:	3221      	adds	r2, #33	; 0x21
    18b4:	2332      	movs	r3, #50	; 0x32
    18b6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    18b8:	3b12      	subs	r3, #18
    18ba:	8363      	strh	r3, [r4, #26]
    18bc:	e7d1      	b.n	1862 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    18be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    18c0:	05db      	lsls	r3, r3, #23
    18c2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    18c4:	b2da      	uxtb	r2, r3
    18c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    18c8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    18ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    18cc:	1c51      	adds	r1, r2, #1
    18ce:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18d0:	7969      	ldrb	r1, [r5, #5]
    18d2:	2901      	cmp	r1, #1
    18d4:	d010      	beq.n	18f8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    18d6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    18d8:	3b01      	subs	r3, #1
    18da:	b29b      	uxth	r3, r3
    18dc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    18de:	2b00      	cmp	r3, #0
    18e0:	d112      	bne.n	1908 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    18e2:	3304      	adds	r3, #4
    18e4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    18e6:	2200      	movs	r2, #0
    18e8:	332e      	adds	r3, #46	; 0x2e
    18ea:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    18ec:	07bb      	lsls	r3, r7, #30
    18ee:	d50b      	bpl.n	1908 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    18f0:	0028      	movs	r0, r5
    18f2:	692b      	ldr	r3, [r5, #16]
    18f4:	4798      	blx	r3
    18f6:	e007      	b.n	1908 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    18f8:	0a1b      	lsrs	r3, r3, #8
    18fa:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    18fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    18fe:	3301      	adds	r3, #1
    1900:	626b      	str	r3, [r5, #36]	; 0x24
    1902:	e7e8      	b.n	18d6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1904:	2304      	movs	r3, #4
    1906:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1908:	06f3      	lsls	r3, r6, #27
    190a:	d504      	bpl.n	1916 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    190c:	2310      	movs	r3, #16
    190e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1910:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1912:	06fb      	lsls	r3, r7, #27
    1914:	d40e      	bmi.n	1934 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1916:	06b3      	lsls	r3, r6, #26
    1918:	d504      	bpl.n	1924 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    191a:	2320      	movs	r3, #32
    191c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    191e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1920:	073b      	lsls	r3, r7, #28
    1922:	d40b      	bmi.n	193c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1924:	0733      	lsls	r3, r6, #28
    1926:	d504      	bpl.n	1932 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1928:	2308      	movs	r3, #8
    192a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    192c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    192e:	06bb      	lsls	r3, r7, #26
    1930:	d408      	bmi.n	1944 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1934:	0028      	movs	r0, r5
    1936:	69eb      	ldr	r3, [r5, #28]
    1938:	4798      	blx	r3
    193a:	e7ec      	b.n	1916 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    193c:	0028      	movs	r0, r5
    193e:	69ab      	ldr	r3, [r5, #24]
    1940:	4798      	blx	r3
    1942:	e7ef      	b.n	1924 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1944:	6a2b      	ldr	r3, [r5, #32]
    1946:	0028      	movs	r0, r5
    1948:	4798      	blx	r3
}
    194a:	e7f2      	b.n	1932 <_usart_interrupt_handler+0x176>
    194c:	200008e4 	.word	0x200008e4

00001950 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1950:	b510      	push	{r4, lr}
	switch (clock_source) {
    1952:	2808      	cmp	r0, #8
    1954:	d803      	bhi.n	195e <system_clock_source_get_hz+0xe>
    1956:	0080      	lsls	r0, r0, #2
    1958:	4b1b      	ldr	r3, [pc, #108]	; (19c8 <system_clock_source_get_hz+0x78>)
    195a:	581b      	ldr	r3, [r3, r0]
    195c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    195e:	2000      	movs	r0, #0
    1960:	e030      	b.n	19c4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1962:	4b1a      	ldr	r3, [pc, #104]	; (19cc <system_clock_source_get_hz+0x7c>)
    1964:	6918      	ldr	r0, [r3, #16]
    1966:	e02d      	b.n	19c4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1968:	4b19      	ldr	r3, [pc, #100]	; (19d0 <system_clock_source_get_hz+0x80>)
    196a:	6a1b      	ldr	r3, [r3, #32]
    196c:	059b      	lsls	r3, r3, #22
    196e:	0f9b      	lsrs	r3, r3, #30
    1970:	4818      	ldr	r0, [pc, #96]	; (19d4 <system_clock_source_get_hz+0x84>)
    1972:	40d8      	lsrs	r0, r3
    1974:	e026      	b.n	19c4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1976:	4b15      	ldr	r3, [pc, #84]	; (19cc <system_clock_source_get_hz+0x7c>)
    1978:	6958      	ldr	r0, [r3, #20]
    197a:	e023      	b.n	19c4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    197c:	4b13      	ldr	r3, [pc, #76]	; (19cc <system_clock_source_get_hz+0x7c>)
    197e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1980:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1982:	079b      	lsls	r3, r3, #30
    1984:	d51e      	bpl.n	19c4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1986:	4912      	ldr	r1, [pc, #72]	; (19d0 <system_clock_source_get_hz+0x80>)
    1988:	2210      	movs	r2, #16
    198a:	68cb      	ldr	r3, [r1, #12]
    198c:	421a      	tst	r2, r3
    198e:	d0fc      	beq.n	198a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1990:	4b0e      	ldr	r3, [pc, #56]	; (19cc <system_clock_source_get_hz+0x7c>)
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	075b      	lsls	r3, r3, #29
    1996:	d401      	bmi.n	199c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1998:	480f      	ldr	r0, [pc, #60]	; (19d8 <system_clock_source_get_hz+0x88>)
    199a:	e013      	b.n	19c4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    199c:	2000      	movs	r0, #0
    199e:	4b0f      	ldr	r3, [pc, #60]	; (19dc <system_clock_source_get_hz+0x8c>)
    19a0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    19a2:	4b0a      	ldr	r3, [pc, #40]	; (19cc <system_clock_source_get_hz+0x7c>)
    19a4:	689b      	ldr	r3, [r3, #8]
    19a6:	041b      	lsls	r3, r3, #16
    19a8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19aa:	4358      	muls	r0, r3
    19ac:	e00a      	b.n	19c4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19ae:	2350      	movs	r3, #80	; 0x50
    19b0:	4a07      	ldr	r2, [pc, #28]	; (19d0 <system_clock_source_get_hz+0x80>)
    19b2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    19b4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19b6:	075b      	lsls	r3, r3, #29
    19b8:	d504      	bpl.n	19c4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    19ba:	4b04      	ldr	r3, [pc, #16]	; (19cc <system_clock_source_get_hz+0x7c>)
    19bc:	68d8      	ldr	r0, [r3, #12]
    19be:	e001      	b.n	19c4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    19c0:	2080      	movs	r0, #128	; 0x80
    19c2:	0200      	lsls	r0, r0, #8
	}
}
    19c4:	bd10      	pop	{r4, pc}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	000088d0 	.word	0x000088d0
    19cc:	20000220 	.word	0x20000220
    19d0:	40000800 	.word	0x40000800
    19d4:	007a1200 	.word	0x007a1200
    19d8:	02dc6c00 	.word	0x02dc6c00
    19dc:	000020c1 	.word	0x000020c1

000019e0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    19e0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    19e2:	490c      	ldr	r1, [pc, #48]	; (1a14 <system_clock_source_osc8m_set_config+0x34>)
    19e4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    19e6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    19e8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    19ea:	7840      	ldrb	r0, [r0, #1]
    19ec:	2201      	movs	r2, #1
    19ee:	4010      	ands	r0, r2
    19f0:	0180      	lsls	r0, r0, #6
    19f2:	2640      	movs	r6, #64	; 0x40
    19f4:	43b3      	bics	r3, r6
    19f6:	4303      	orrs	r3, r0
    19f8:	402a      	ands	r2, r5
    19fa:	01d2      	lsls	r2, r2, #7
    19fc:	2080      	movs	r0, #128	; 0x80
    19fe:	4383      	bics	r3, r0
    1a00:	4313      	orrs	r3, r2
    1a02:	2203      	movs	r2, #3
    1a04:	4022      	ands	r2, r4
    1a06:	0212      	lsls	r2, r2, #8
    1a08:	4803      	ldr	r0, [pc, #12]	; (1a18 <system_clock_source_osc8m_set_config+0x38>)
    1a0a:	4003      	ands	r3, r0
    1a0c:	4313      	orrs	r3, r2
    1a0e:	620b      	str	r3, [r1, #32]
}
    1a10:	bd70      	pop	{r4, r5, r6, pc}
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	40000800 	.word	0x40000800
    1a18:	fffffcff 	.word	0xfffffcff

00001a1c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1e:	46ce      	mov	lr, r9
    1a20:	4647      	mov	r7, r8
    1a22:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1a24:	4b19      	ldr	r3, [pc, #100]	; (1a8c <system_clock_source_osc32k_set_config+0x70>)
    1a26:	4699      	mov	r9, r3
    1a28:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1a2a:	7841      	ldrb	r1, [r0, #1]
    1a2c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1a2e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1a30:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1a32:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1a34:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1a36:	7880      	ldrb	r0, [r0, #2]
    1a38:	2101      	movs	r1, #1
    1a3a:	4008      	ands	r0, r1
    1a3c:	0080      	lsls	r0, r0, #2
    1a3e:	2204      	movs	r2, #4
    1a40:	4393      	bics	r3, r2
    1a42:	4303      	orrs	r3, r0
    1a44:	4660      	mov	r0, ip
    1a46:	4008      	ands	r0, r1
    1a48:	00c0      	lsls	r0, r0, #3
    1a4a:	3204      	adds	r2, #4
    1a4c:	4393      	bics	r3, r2
    1a4e:	4303      	orrs	r3, r0
    1a50:	0038      	movs	r0, r7
    1a52:	4008      	ands	r0, r1
    1a54:	0180      	lsls	r0, r0, #6
    1a56:	2740      	movs	r7, #64	; 0x40
    1a58:	43bb      	bics	r3, r7
    1a5a:	4303      	orrs	r3, r0
    1a5c:	0030      	movs	r0, r6
    1a5e:	4008      	ands	r0, r1
    1a60:	01c0      	lsls	r0, r0, #7
    1a62:	2680      	movs	r6, #128	; 0x80
    1a64:	43b3      	bics	r3, r6
    1a66:	4303      	orrs	r3, r0
    1a68:	2007      	movs	r0, #7
    1a6a:	4005      	ands	r5, r0
    1a6c:	022d      	lsls	r5, r5, #8
    1a6e:	4808      	ldr	r0, [pc, #32]	; (1a90 <system_clock_source_osc32k_set_config+0x74>)
    1a70:	4003      	ands	r3, r0
    1a72:	432b      	orrs	r3, r5
    1a74:	4021      	ands	r1, r4
    1a76:	0309      	lsls	r1, r1, #12
    1a78:	4806      	ldr	r0, [pc, #24]	; (1a94 <system_clock_source_osc32k_set_config+0x78>)
    1a7a:	4003      	ands	r3, r0
    1a7c:	430b      	orrs	r3, r1
    1a7e:	464a      	mov	r2, r9
    1a80:	6193      	str	r3, [r2, #24]
}
    1a82:	bc0c      	pop	{r2, r3}
    1a84:	4690      	mov	r8, r2
    1a86:	4699      	mov	r9, r3
    1a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	40000800 	.word	0x40000800
    1a90:	fffff8ff 	.word	0xfffff8ff
    1a94:	ffffefff 	.word	0xffffefff

00001a98 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9a:	46de      	mov	lr, fp
    1a9c:	4657      	mov	r7, sl
    1a9e:	464e      	mov	r6, r9
    1aa0:	4645      	mov	r5, r8
    1aa2:	b5e0      	push	{r5, r6, r7, lr}
    1aa4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1aa6:	4b26      	ldr	r3, [pc, #152]	; (1b40 <system_clock_source_xosc32k_set_config+0xa8>)
    1aa8:	469b      	mov	fp, r3
    1aaa:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1aac:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1aae:	7800      	ldrb	r0, [r0, #0]
    1ab0:	4242      	negs	r2, r0
    1ab2:	4142      	adcs	r2, r0
    1ab4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1ab6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1ab8:	78ca      	ldrb	r2, [r1, #3]
    1aba:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1abc:	790a      	ldrb	r2, [r1, #4]
    1abe:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1ac0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ac2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1ac4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1ac6:	688a      	ldr	r2, [r1, #8]
    1ac8:	491e      	ldr	r1, [pc, #120]	; (1b44 <system_clock_source_xosc32k_set_config+0xac>)
    1aca:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1acc:	2101      	movs	r1, #1
    1ace:	464a      	mov	r2, r9
    1ad0:	0092      	lsls	r2, r2, #2
    1ad2:	4691      	mov	r9, r2
    1ad4:	2204      	movs	r2, #4
    1ad6:	4393      	bics	r3, r2
    1ad8:	464a      	mov	r2, r9
    1ada:	4313      	orrs	r3, r2
    1adc:	4642      	mov	r2, r8
    1ade:	400a      	ands	r2, r1
    1ae0:	00d2      	lsls	r2, r2, #3
    1ae2:	4690      	mov	r8, r2
    1ae4:	2208      	movs	r2, #8
    1ae6:	4393      	bics	r3, r2
    1ae8:	4642      	mov	r2, r8
    1aea:	4313      	orrs	r3, r2
    1aec:	4662      	mov	r2, ip
    1aee:	400a      	ands	r2, r1
    1af0:	0112      	lsls	r2, r2, #4
    1af2:	4694      	mov	ip, r2
    1af4:	2210      	movs	r2, #16
    1af6:	4393      	bics	r3, r2
    1af8:	4662      	mov	r2, ip
    1afa:	4313      	orrs	r3, r2
    1afc:	4008      	ands	r0, r1
    1afe:	0140      	lsls	r0, r0, #5
    1b00:	2220      	movs	r2, #32
    1b02:	4393      	bics	r3, r2
    1b04:	4303      	orrs	r3, r0
    1b06:	400f      	ands	r7, r1
    1b08:	01bf      	lsls	r7, r7, #6
    1b0a:	2040      	movs	r0, #64	; 0x40
    1b0c:	4383      	bics	r3, r0
    1b0e:	433b      	orrs	r3, r7
    1b10:	400e      	ands	r6, r1
    1b12:	01f6      	lsls	r6, r6, #7
    1b14:	3040      	adds	r0, #64	; 0x40
    1b16:	4383      	bics	r3, r0
    1b18:	4333      	orrs	r3, r6
    1b1a:	3879      	subs	r0, #121	; 0x79
    1b1c:	4005      	ands	r5, r0
    1b1e:	022d      	lsls	r5, r5, #8
    1b20:	4809      	ldr	r0, [pc, #36]	; (1b48 <system_clock_source_xosc32k_set_config+0xb0>)
    1b22:	4003      	ands	r3, r0
    1b24:	432b      	orrs	r3, r5
    1b26:	4021      	ands	r1, r4
    1b28:	0309      	lsls	r1, r1, #12
    1b2a:	4808      	ldr	r0, [pc, #32]	; (1b4c <system_clock_source_xosc32k_set_config+0xb4>)
    1b2c:	4003      	ands	r3, r0
    1b2e:	430b      	orrs	r3, r1
    1b30:	465a      	mov	r2, fp
    1b32:	8293      	strh	r3, [r2, #20]
}
    1b34:	bc3c      	pop	{r2, r3, r4, r5}
    1b36:	4690      	mov	r8, r2
    1b38:	4699      	mov	r9, r3
    1b3a:	46a2      	mov	sl, r4
    1b3c:	46ab      	mov	fp, r5
    1b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b40:	40000800 	.word	0x40000800
    1b44:	20000220 	.word	0x20000220
    1b48:	fffff8ff 	.word	0xfffff8ff
    1b4c:	ffffefff 	.word	0xffffefff

00001b50 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1b50:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1b52:	7a03      	ldrb	r3, [r0, #8]
    1b54:	069b      	lsls	r3, r3, #26
    1b56:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1b58:	8942      	ldrh	r2, [r0, #10]
    1b5a:	0592      	lsls	r2, r2, #22
    1b5c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1b5e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1b60:	4918      	ldr	r1, [pc, #96]	; (1bc4 <system_clock_source_dfll_set_config+0x74>)
    1b62:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1b64:	7983      	ldrb	r3, [r0, #6]
    1b66:	79c2      	ldrb	r2, [r0, #7]
    1b68:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1b6a:	8842      	ldrh	r2, [r0, #2]
    1b6c:	8884      	ldrh	r4, [r0, #4]
    1b6e:	4322      	orrs	r2, r4
    1b70:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1b72:	7842      	ldrb	r2, [r0, #1]
    1b74:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1b76:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1b78:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1b7a:	7803      	ldrb	r3, [r0, #0]
    1b7c:	2b04      	cmp	r3, #4
    1b7e:	d011      	beq.n	1ba4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1b80:	2b20      	cmp	r3, #32
    1b82:	d10e      	bne.n	1ba2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1b84:	7b03      	ldrb	r3, [r0, #12]
    1b86:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1b88:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1b8a:	4313      	orrs	r3, r2
    1b8c:	89c2      	ldrh	r2, [r0, #14]
    1b8e:	0412      	lsls	r2, r2, #16
    1b90:	490d      	ldr	r1, [pc, #52]	; (1bc8 <system_clock_source_dfll_set_config+0x78>)
    1b92:	400a      	ands	r2, r1
    1b94:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1b96:	4a0b      	ldr	r2, [pc, #44]	; (1bc4 <system_clock_source_dfll_set_config+0x74>)
    1b98:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1b9a:	6811      	ldr	r1, [r2, #0]
    1b9c:	4b0b      	ldr	r3, [pc, #44]	; (1bcc <system_clock_source_dfll_set_config+0x7c>)
    1b9e:	430b      	orrs	r3, r1
    1ba0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1ba2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1ba4:	7b03      	ldrb	r3, [r0, #12]
    1ba6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ba8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1baa:	4313      	orrs	r3, r2
    1bac:	89c2      	ldrh	r2, [r0, #14]
    1bae:	0412      	lsls	r2, r2, #16
    1bb0:	4905      	ldr	r1, [pc, #20]	; (1bc8 <system_clock_source_dfll_set_config+0x78>)
    1bb2:	400a      	ands	r2, r1
    1bb4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1bb6:	4a03      	ldr	r2, [pc, #12]	; (1bc4 <system_clock_source_dfll_set_config+0x74>)
    1bb8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1bba:	6813      	ldr	r3, [r2, #0]
    1bbc:	2104      	movs	r1, #4
    1bbe:	430b      	orrs	r3, r1
    1bc0:	6013      	str	r3, [r2, #0]
    1bc2:	e7ee      	b.n	1ba2 <system_clock_source_dfll_set_config+0x52>
    1bc4:	20000220 	.word	0x20000220
    1bc8:	03ff0000 	.word	0x03ff0000
    1bcc:	00000424 	.word	0x00000424

00001bd0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1bd0:	2808      	cmp	r0, #8
    1bd2:	d803      	bhi.n	1bdc <system_clock_source_enable+0xc>
    1bd4:	0080      	lsls	r0, r0, #2
    1bd6:	4b25      	ldr	r3, [pc, #148]	; (1c6c <system_clock_source_enable+0x9c>)
    1bd8:	581b      	ldr	r3, [r3, r0]
    1bda:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1bdc:	2017      	movs	r0, #23
    1bde:	e044      	b.n	1c6a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1be0:	4a23      	ldr	r2, [pc, #140]	; (1c70 <system_clock_source_enable+0xa0>)
    1be2:	6a13      	ldr	r3, [r2, #32]
    1be4:	2102      	movs	r1, #2
    1be6:	430b      	orrs	r3, r1
    1be8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1bea:	2000      	movs	r0, #0
    1bec:	e03d      	b.n	1c6a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1bee:	4a20      	ldr	r2, [pc, #128]	; (1c70 <system_clock_source_enable+0xa0>)
    1bf0:	6993      	ldr	r3, [r2, #24]
    1bf2:	2102      	movs	r1, #2
    1bf4:	430b      	orrs	r3, r1
    1bf6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1bf8:	2000      	movs	r0, #0
		break;
    1bfa:	e036      	b.n	1c6a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1bfc:	4a1c      	ldr	r2, [pc, #112]	; (1c70 <system_clock_source_enable+0xa0>)
    1bfe:	8a13      	ldrh	r3, [r2, #16]
    1c00:	2102      	movs	r1, #2
    1c02:	430b      	orrs	r3, r1
    1c04:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1c06:	2000      	movs	r0, #0
		break;
    1c08:	e02f      	b.n	1c6a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1c0a:	4a19      	ldr	r2, [pc, #100]	; (1c70 <system_clock_source_enable+0xa0>)
    1c0c:	8a93      	ldrh	r3, [r2, #20]
    1c0e:	2102      	movs	r1, #2
    1c10:	430b      	orrs	r3, r1
    1c12:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1c14:	2000      	movs	r0, #0
		break;
    1c16:	e028      	b.n	1c6a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1c18:	4916      	ldr	r1, [pc, #88]	; (1c74 <system_clock_source_enable+0xa4>)
    1c1a:	680b      	ldr	r3, [r1, #0]
    1c1c:	2202      	movs	r2, #2
    1c1e:	4313      	orrs	r3, r2
    1c20:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1c22:	4b13      	ldr	r3, [pc, #76]	; (1c70 <system_clock_source_enable+0xa0>)
    1c24:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c26:	0019      	movs	r1, r3
    1c28:	320e      	adds	r2, #14
    1c2a:	68cb      	ldr	r3, [r1, #12]
    1c2c:	421a      	tst	r2, r3
    1c2e:	d0fc      	beq.n	1c2a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1c30:	4a10      	ldr	r2, [pc, #64]	; (1c74 <system_clock_source_enable+0xa4>)
    1c32:	6891      	ldr	r1, [r2, #8]
    1c34:	4b0e      	ldr	r3, [pc, #56]	; (1c70 <system_clock_source_enable+0xa0>)
    1c36:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1c38:	6852      	ldr	r2, [r2, #4]
    1c3a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1c3c:	2200      	movs	r2, #0
    1c3e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c40:	0019      	movs	r1, r3
    1c42:	3210      	adds	r2, #16
    1c44:	68cb      	ldr	r3, [r1, #12]
    1c46:	421a      	tst	r2, r3
    1c48:	d0fc      	beq.n	1c44 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1c4a:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <system_clock_source_enable+0xa4>)
    1c4c:	681b      	ldr	r3, [r3, #0]
    1c4e:	b29b      	uxth	r3, r3
    1c50:	4a07      	ldr	r2, [pc, #28]	; (1c70 <system_clock_source_enable+0xa0>)
    1c52:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1c54:	2000      	movs	r0, #0
    1c56:	e008      	b.n	1c6a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1c58:	4905      	ldr	r1, [pc, #20]	; (1c70 <system_clock_source_enable+0xa0>)
    1c5a:	2244      	movs	r2, #68	; 0x44
    1c5c:	5c8b      	ldrb	r3, [r1, r2]
    1c5e:	2002      	movs	r0, #2
    1c60:	4303      	orrs	r3, r0
    1c62:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1c64:	2000      	movs	r0, #0
		break;
    1c66:	e000      	b.n	1c6a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1c68:	2000      	movs	r0, #0
}
    1c6a:	4770      	bx	lr
    1c6c:	000088f4 	.word	0x000088f4
    1c70:	40000800 	.word	0x40000800
    1c74:	20000220 	.word	0x20000220

00001c78 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c7a:	46d6      	mov	lr, sl
    1c7c:	464f      	mov	r7, r9
    1c7e:	4646      	mov	r6, r8
    1c80:	b5c0      	push	{r6, r7, lr}
    1c82:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1c84:	22c2      	movs	r2, #194	; 0xc2
    1c86:	00d2      	lsls	r2, r2, #3
    1c88:	4b69      	ldr	r3, [pc, #420]	; (1e30 <system_clock_init+0x1b8>)
    1c8a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1c8c:	4a69      	ldr	r2, [pc, #420]	; (1e34 <system_clock_init+0x1bc>)
    1c8e:	6853      	ldr	r3, [r2, #4]
    1c90:	211e      	movs	r1, #30
    1c92:	438b      	bics	r3, r1
    1c94:	391a      	subs	r1, #26
    1c96:	430b      	orrs	r3, r1
    1c98:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1c9a:	2205      	movs	r2, #5
    1c9c:	ab01      	add	r3, sp, #4
    1c9e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ca0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1ca2:	4d65      	ldr	r5, [pc, #404]	; (1e38 <system_clock_init+0x1c0>)
    1ca4:	b2e0      	uxtb	r0, r4
    1ca6:	a901      	add	r1, sp, #4
    1ca8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1caa:	3401      	adds	r4, #1
    1cac:	2c25      	cmp	r4, #37	; 0x25
    1cae:	d1f9      	bne.n	1ca4 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1cb0:	a80c      	add	r0, sp, #48	; 0x30
    1cb2:	2300      	movs	r3, #0
    1cb4:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1cb6:	2280      	movs	r2, #128	; 0x80
    1cb8:	0212      	lsls	r2, r2, #8
    1cba:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1cbc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1cbe:	2201      	movs	r2, #1
    1cc0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1cc2:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1cc4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1cc6:	2106      	movs	r1, #6
    1cc8:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1cca:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1ccc:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1cce:	4b5b      	ldr	r3, [pc, #364]	; (1e3c <system_clock_init+0x1c4>)
    1cd0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1cd2:	2005      	movs	r0, #5
    1cd4:	4b5a      	ldr	r3, [pc, #360]	; (1e40 <system_clock_init+0x1c8>)
    1cd6:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1cd8:	4955      	ldr	r1, [pc, #340]	; (1e30 <system_clock_init+0x1b8>)
    1cda:	2202      	movs	r2, #2
    1cdc:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1cde:	421a      	tst	r2, r3
    1ce0:	d0fc      	beq.n	1cdc <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1ce2:	4953      	ldr	r1, [pc, #332]	; (1e30 <system_clock_init+0x1b8>)
    1ce4:	8a8b      	ldrh	r3, [r1, #20]
    1ce6:	2280      	movs	r2, #128	; 0x80
    1ce8:	4313      	orrs	r3, r2
    1cea:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1cec:	4c55      	ldr	r4, [pc, #340]	; (1e44 <system_clock_init+0x1cc>)
	SYSCTRL->OSC32K.bit.CALIB =
    1cee:	6823      	ldr	r3, [r4, #0]
    1cf0:	04db      	lsls	r3, r3, #19
    1cf2:	698a      	ldr	r2, [r1, #24]
    1cf4:	0e5b      	lsrs	r3, r3, #25
    1cf6:	041b      	lsls	r3, r3, #16
    1cf8:	4853      	ldr	r0, [pc, #332]	; (1e48 <system_clock_init+0x1d0>)
    1cfa:	4002      	ands	r2, r0
    1cfc:	4313      	orrs	r3, r2
    1cfe:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1d00:	a80a      	add	r0, sp, #40	; 0x28
    1d02:	2301      	movs	r3, #1
    1d04:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1d06:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1d08:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1d0a:	2207      	movs	r2, #7
    1d0c:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1d0e:	2500      	movs	r5, #0
    1d10:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1d12:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1d14:	4b4d      	ldr	r3, [pc, #308]	; (1e4c <system_clock_init+0x1d4>)
    1d16:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1d18:	2004      	movs	r0, #4
    1d1a:	4b49      	ldr	r3, [pc, #292]	; (1e40 <system_clock_init+0x1c8>)
    1d1c:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1d1e:	ab05      	add	r3, sp, #20
    1d20:	2200      	movs	r2, #0
    1d22:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1d24:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1d26:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1d28:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1d2a:	213f      	movs	r1, #63	; 0x3f
    1d2c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1d2e:	393b      	subs	r1, #59	; 0x3b
    1d30:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1d32:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1d34:	6823      	ldr	r3, [r4, #0]
    1d36:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1d38:	2b3f      	cmp	r3, #63	; 0x3f
    1d3a:	d100      	bne.n	1d3e <system_clock_init+0xc6>
    1d3c:	e075      	b.n	1e2a <system_clock_init+0x1b2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1d3e:	a805      	add	r0, sp, #20
    1d40:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1d42:	23b7      	movs	r3, #183	; 0xb7
    1d44:	00db      	lsls	r3, r3, #3
    1d46:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1d48:	2307      	movs	r3, #7
    1d4a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1d4c:	3338      	adds	r3, #56	; 0x38
    1d4e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1d50:	4b3f      	ldr	r3, [pc, #252]	; (1e50 <system_clock_init+0x1d8>)
    1d52:	4798      	blx	r3
	config->run_in_standby  = false;
    1d54:	a804      	add	r0, sp, #16
    1d56:	2500      	movs	r5, #0
    1d58:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1d5a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1d5c:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1d5e:	4b3d      	ldr	r3, [pc, #244]	; (1e54 <system_clock_init+0x1dc>)
    1d60:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1d62:	2006      	movs	r0, #6
    1d64:	4b36      	ldr	r3, [pc, #216]	; (1e40 <system_clock_init+0x1c8>)
    1d66:	4699      	mov	r9, r3
    1d68:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1d6a:	4b3b      	ldr	r3, [pc, #236]	; (1e58 <system_clock_init+0x1e0>)
    1d6c:	4798      	blx	r3
	config->division_factor    = 1;
    1d6e:	ac01      	add	r4, sp, #4
    1d70:	2601      	movs	r6, #1
    1d72:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1d74:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1d76:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1d78:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1d7a:	2305      	movs	r3, #5
    1d7c:	7023      	strb	r3, [r4, #0]
    1d7e:	0021      	movs	r1, r4
    1d80:	2001      	movs	r0, #1
    1d82:	4b36      	ldr	r3, [pc, #216]	; (1e5c <system_clock_init+0x1e4>)
    1d84:	4698      	mov	r8, r3
    1d86:	4798      	blx	r3
    1d88:	2001      	movs	r0, #1
    1d8a:	4f35      	ldr	r7, [pc, #212]	; (1e60 <system_clock_init+0x1e8>)
    1d8c:	47b8      	blx	r7
	config->high_when_disabled = false;
    1d8e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1d90:	7265      	strb	r5, [r4, #9]
    1d92:	2304      	movs	r3, #4
    1d94:	7023      	strb	r3, [r4, #0]
    1d96:	331c      	adds	r3, #28
    1d98:	469a      	mov	sl, r3
    1d9a:	6063      	str	r3, [r4, #4]
    1d9c:	7226      	strb	r6, [r4, #8]
    1d9e:	0021      	movs	r1, r4
    1da0:	2002      	movs	r0, #2
    1da2:	47c0      	blx	r8
    1da4:	2002      	movs	r0, #2
    1da6:	47b8      	blx	r7
	config->division_factor    = 1;
    1da8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1daa:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1dac:	2306      	movs	r3, #6
    1dae:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1db0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1db2:	7265      	strb	r5, [r4, #9]
    1db4:	0021      	movs	r1, r4
    1db6:	2003      	movs	r0, #3
    1db8:	47c0      	blx	r8
    1dba:	2003      	movs	r0, #3
    1dbc:	47b8      	blx	r7
	config->high_when_disabled = false;
    1dbe:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1dc0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1dc2:	7265      	strb	r5, [r4, #9]
    1dc4:	2303      	movs	r3, #3
    1dc6:	7023      	strb	r3, [r4, #0]
    1dc8:	4653      	mov	r3, sl
    1dca:	6063      	str	r3, [r4, #4]
    1dcc:	0021      	movs	r1, r4
    1dce:	2004      	movs	r0, #4
    1dd0:	47c0      	blx	r8
    1dd2:	2004      	movs	r0, #4
    1dd4:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1dd6:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1dd8:	0021      	movs	r1, r4
    1dda:	2000      	movs	r0, #0
    1ddc:	4b16      	ldr	r3, [pc, #88]	; (1e38 <system_clock_init+0x1c0>)
    1dde:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1de0:	2000      	movs	r0, #0
    1de2:	4b20      	ldr	r3, [pc, #128]	; (1e64 <system_clock_init+0x1ec>)
    1de4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1de6:	2007      	movs	r0, #7
    1de8:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1dea:	4911      	ldr	r1, [pc, #68]	; (1e30 <system_clock_init+0x1b8>)
    1dec:	22d0      	movs	r2, #208	; 0xd0
    1dee:	68cb      	ldr	r3, [r1, #12]
    1df0:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1df2:	2bd0      	cmp	r3, #208	; 0xd0
    1df4:	d1fb      	bne.n	1dee <system_clock_init+0x176>
	PM->CPUSEL.reg = (uint32_t)divider;
    1df6:	4a1c      	ldr	r2, [pc, #112]	; (1e68 <system_clock_init+0x1f0>)
    1df8:	2300      	movs	r3, #0
    1dfa:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1dfc:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1dfe:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1e00:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1e02:	a901      	add	r1, sp, #4
    1e04:	2201      	movs	r2, #1
    1e06:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1e08:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1e0a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1e0c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e0e:	3307      	adds	r3, #7
    1e10:	700b      	strb	r3, [r1, #0]
    1e12:	2000      	movs	r0, #0
    1e14:	4b11      	ldr	r3, [pc, #68]	; (1e5c <system_clock_init+0x1e4>)
    1e16:	4798      	blx	r3
    1e18:	2000      	movs	r0, #0
    1e1a:	4b11      	ldr	r3, [pc, #68]	; (1e60 <system_clock_init+0x1e8>)
    1e1c:	4798      	blx	r3
#endif
}
    1e1e:	b010      	add	sp, #64	; 0x40
    1e20:	bc1c      	pop	{r2, r3, r4}
    1e22:	4690      	mov	r8, r2
    1e24:	4699      	mov	r9, r3
    1e26:	46a2      	mov	sl, r4
    1e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1e2a:	3b20      	subs	r3, #32
    1e2c:	e787      	b.n	1d3e <system_clock_init+0xc6>
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	40000800 	.word	0x40000800
    1e34:	41004000 	.word	0x41004000
    1e38:	000020a5 	.word	0x000020a5
    1e3c:	00001a99 	.word	0x00001a99
    1e40:	00001bd1 	.word	0x00001bd1
    1e44:	00806024 	.word	0x00806024
    1e48:	ff80ffff 	.word	0xff80ffff
    1e4c:	00001a1d 	.word	0x00001a1d
    1e50:	00001b51 	.word	0x00001b51
    1e54:	000019e1 	.word	0x000019e1
    1e58:	00001e6d 	.word	0x00001e6d
    1e5c:	00001e91 	.word	0x00001e91
    1e60:	00001f49 	.word	0x00001f49
    1e64:	00002019 	.word	0x00002019
    1e68:	40000400 	.word	0x40000400

00001e6c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1e6c:	4a06      	ldr	r2, [pc, #24]	; (1e88 <system_gclk_init+0x1c>)
    1e6e:	6993      	ldr	r3, [r2, #24]
    1e70:	2108      	movs	r1, #8
    1e72:	430b      	orrs	r3, r1
    1e74:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1e76:	2201      	movs	r2, #1
    1e78:	4b04      	ldr	r3, [pc, #16]	; (1e8c <system_gclk_init+0x20>)
    1e7a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1e7c:	0019      	movs	r1, r3
    1e7e:	780b      	ldrb	r3, [r1, #0]
    1e80:	4213      	tst	r3, r2
    1e82:	d1fc      	bne.n	1e7e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1e84:	4770      	bx	lr
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	40000400 	.word	0x40000400
    1e8c:	40000c00 	.word	0x40000c00

00001e90 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1e90:	b570      	push	{r4, r5, r6, lr}
    1e92:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1e94:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1e96:	780d      	ldrb	r5, [r1, #0]
    1e98:	022d      	lsls	r5, r5, #8
    1e9a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1e9c:	784b      	ldrb	r3, [r1, #1]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d002      	beq.n	1ea8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1ea2:	2380      	movs	r3, #128	; 0x80
    1ea4:	02db      	lsls	r3, r3, #11
    1ea6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1ea8:	7a4b      	ldrb	r3, [r1, #9]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d002      	beq.n	1eb4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1eae:	2380      	movs	r3, #128	; 0x80
    1eb0:	031b      	lsls	r3, r3, #12
    1eb2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1eb4:	6848      	ldr	r0, [r1, #4]
    1eb6:	2801      	cmp	r0, #1
    1eb8:	d910      	bls.n	1edc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1eba:	1e43      	subs	r3, r0, #1
    1ebc:	4218      	tst	r0, r3
    1ebe:	d134      	bne.n	1f2a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1ec0:	2802      	cmp	r0, #2
    1ec2:	d930      	bls.n	1f26 <system_gclk_gen_set_config+0x96>
    1ec4:	2302      	movs	r3, #2
    1ec6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1ec8:	3201      	adds	r2, #1
						mask <<= 1) {
    1eca:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1ecc:	4298      	cmp	r0, r3
    1ece:	d8fb      	bhi.n	1ec8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1ed0:	0212      	lsls	r2, r2, #8
    1ed2:	4332      	orrs	r2, r6
    1ed4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1ed6:	2380      	movs	r3, #128	; 0x80
    1ed8:	035b      	lsls	r3, r3, #13
    1eda:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1edc:	7a0b      	ldrb	r3, [r1, #8]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d002      	beq.n	1ee8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ee2:	2380      	movs	r3, #128	; 0x80
    1ee4:	039b      	lsls	r3, r3, #14
    1ee6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ee8:	4a13      	ldr	r2, [pc, #76]	; (1f38 <system_gclk_gen_set_config+0xa8>)
    1eea:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1eec:	b25b      	sxtb	r3, r3
    1eee:	2b00      	cmp	r3, #0
    1ef0:	dbfb      	blt.n	1eea <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1ef2:	4b12      	ldr	r3, [pc, #72]	; (1f3c <system_gclk_gen_set_config+0xac>)
    1ef4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ef6:	4b12      	ldr	r3, [pc, #72]	; (1f40 <system_gclk_gen_set_config+0xb0>)
    1ef8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1efa:	4a0f      	ldr	r2, [pc, #60]	; (1f38 <system_gclk_gen_set_config+0xa8>)
    1efc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1efe:	b25b      	sxtb	r3, r3
    1f00:	2b00      	cmp	r3, #0
    1f02:	dbfb      	blt.n	1efc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1f04:	4b0c      	ldr	r3, [pc, #48]	; (1f38 <system_gclk_gen_set_config+0xa8>)
    1f06:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f08:	001a      	movs	r2, r3
    1f0a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1f0c:	b25b      	sxtb	r3, r3
    1f0e:	2b00      	cmp	r3, #0
    1f10:	dbfb      	blt.n	1f0a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1f12:	4a09      	ldr	r2, [pc, #36]	; (1f38 <system_gclk_gen_set_config+0xa8>)
    1f14:	6853      	ldr	r3, [r2, #4]
    1f16:	2180      	movs	r1, #128	; 0x80
    1f18:	0249      	lsls	r1, r1, #9
    1f1a:	400b      	ands	r3, r1
    1f1c:	431d      	orrs	r5, r3
    1f1e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1f20:	4b08      	ldr	r3, [pc, #32]	; (1f44 <system_gclk_gen_set_config+0xb4>)
    1f22:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f24:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1f26:	2200      	movs	r2, #0
    1f28:	e7d2      	b.n	1ed0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1f2a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1f2c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1f2e:	2380      	movs	r3, #128	; 0x80
    1f30:	029b      	lsls	r3, r3, #10
    1f32:	431d      	orrs	r5, r3
    1f34:	e7d2      	b.n	1edc <system_gclk_gen_set_config+0x4c>
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	40000c00 	.word	0x40000c00
    1f3c:	00000789 	.word	0x00000789
    1f40:	40000c08 	.word	0x40000c08
    1f44:	000007c9 	.word	0x000007c9

00001f48 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1f48:	b510      	push	{r4, lr}
    1f4a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f4c:	4a0b      	ldr	r2, [pc, #44]	; (1f7c <system_gclk_gen_enable+0x34>)
    1f4e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f50:	b25b      	sxtb	r3, r3
    1f52:	2b00      	cmp	r3, #0
    1f54:	dbfb      	blt.n	1f4e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1f56:	4b0a      	ldr	r3, [pc, #40]	; (1f80 <system_gclk_gen_enable+0x38>)
    1f58:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f5a:	4b0a      	ldr	r3, [pc, #40]	; (1f84 <system_gclk_gen_enable+0x3c>)
    1f5c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f5e:	4a07      	ldr	r2, [pc, #28]	; (1f7c <system_gclk_gen_enable+0x34>)
    1f60:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f62:	b25b      	sxtb	r3, r3
    1f64:	2b00      	cmp	r3, #0
    1f66:	dbfb      	blt.n	1f60 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1f68:	4a04      	ldr	r2, [pc, #16]	; (1f7c <system_gclk_gen_enable+0x34>)
    1f6a:	6851      	ldr	r1, [r2, #4]
    1f6c:	2380      	movs	r3, #128	; 0x80
    1f6e:	025b      	lsls	r3, r3, #9
    1f70:	430b      	orrs	r3, r1
    1f72:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1f74:	4b04      	ldr	r3, [pc, #16]	; (1f88 <system_gclk_gen_enable+0x40>)
    1f76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f78:	bd10      	pop	{r4, pc}
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	40000c00 	.word	0x40000c00
    1f80:	00000789 	.word	0x00000789
    1f84:	40000c04 	.word	0x40000c04
    1f88:	000007c9 	.word	0x000007c9

00001f8c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1f8c:	b570      	push	{r4, r5, r6, lr}
    1f8e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f90:	4a1a      	ldr	r2, [pc, #104]	; (1ffc <system_gclk_gen_get_hz+0x70>)
    1f92:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f94:	b25b      	sxtb	r3, r3
    1f96:	2b00      	cmp	r3, #0
    1f98:	dbfb      	blt.n	1f92 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1f9a:	4b19      	ldr	r3, [pc, #100]	; (2000 <STACK_SIZE>)
    1f9c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f9e:	4b19      	ldr	r3, [pc, #100]	; (2004 <STACK_SIZE+0x4>)
    1fa0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fa2:	4a16      	ldr	r2, [pc, #88]	; (1ffc <system_gclk_gen_get_hz+0x70>)
    1fa4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fa6:	b25b      	sxtb	r3, r3
    1fa8:	2b00      	cmp	r3, #0
    1faa:	dbfb      	blt.n	1fa4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1fac:	4e13      	ldr	r6, [pc, #76]	; (1ffc <system_gclk_gen_get_hz+0x70>)
    1fae:	6870      	ldr	r0, [r6, #4]
    1fb0:	04c0      	lsls	r0, r0, #19
    1fb2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1fb4:	4b14      	ldr	r3, [pc, #80]	; (2008 <STACK_SIZE+0x8>)
    1fb6:	4798      	blx	r3
    1fb8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fba:	4b12      	ldr	r3, [pc, #72]	; (2004 <STACK_SIZE+0x4>)
    1fbc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1fbe:	6876      	ldr	r6, [r6, #4]
    1fc0:	02f6      	lsls	r6, r6, #11
    1fc2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fc4:	4b11      	ldr	r3, [pc, #68]	; (200c <STACK_SIZE+0xc>)
    1fc6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fc8:	4a0c      	ldr	r2, [pc, #48]	; (1ffc <system_gclk_gen_get_hz+0x70>)
    1fca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fcc:	b25b      	sxtb	r3, r3
    1fce:	2b00      	cmp	r3, #0
    1fd0:	dbfb      	blt.n	1fca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1fd2:	4b0a      	ldr	r3, [pc, #40]	; (1ffc <system_gclk_gen_get_hz+0x70>)
    1fd4:	689c      	ldr	r4, [r3, #8]
    1fd6:	0224      	lsls	r4, r4, #8
    1fd8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1fda:	4b0d      	ldr	r3, [pc, #52]	; (2010 <STACK_SIZE+0x10>)
    1fdc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1fde:	2e00      	cmp	r6, #0
    1fe0:	d107      	bne.n	1ff2 <system_gclk_gen_get_hz+0x66>
    1fe2:	2c01      	cmp	r4, #1
    1fe4:	d907      	bls.n	1ff6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1fe6:	0021      	movs	r1, r4
    1fe8:	0028      	movs	r0, r5
    1fea:	4b0a      	ldr	r3, [pc, #40]	; (2014 <STACK_SIZE+0x14>)
    1fec:	4798      	blx	r3
    1fee:	0005      	movs	r5, r0
    1ff0:	e001      	b.n	1ff6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1ff2:	3401      	adds	r4, #1
    1ff4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1ff6:	0028      	movs	r0, r5
    1ff8:	bd70      	pop	{r4, r5, r6, pc}
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	40000c00 	.word	0x40000c00
    2000:	00000789 	.word	0x00000789
    2004:	40000c04 	.word	0x40000c04
    2008:	00001951 	.word	0x00001951
    200c:	40000c08 	.word	0x40000c08
    2010:	000007c9 	.word	0x000007c9
    2014:	00005d15 	.word	0x00005d15

00002018 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2018:	b510      	push	{r4, lr}
    201a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    201c:	4b06      	ldr	r3, [pc, #24]	; (2038 <system_gclk_chan_enable+0x20>)
    201e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2020:	4b06      	ldr	r3, [pc, #24]	; (203c <system_gclk_chan_enable+0x24>)
    2022:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2024:	4a06      	ldr	r2, [pc, #24]	; (2040 <system_gclk_chan_enable+0x28>)
    2026:	8853      	ldrh	r3, [r2, #2]
    2028:	2180      	movs	r1, #128	; 0x80
    202a:	01c9      	lsls	r1, r1, #7
    202c:	430b      	orrs	r3, r1
    202e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2030:	4b04      	ldr	r3, [pc, #16]	; (2044 <system_gclk_chan_enable+0x2c>)
    2032:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2034:	bd10      	pop	{r4, pc}
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	00000789 	.word	0x00000789
    203c:	40000c02 	.word	0x40000c02
    2040:	40000c00 	.word	0x40000c00
    2044:	000007c9 	.word	0x000007c9

00002048 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2048:	b510      	push	{r4, lr}
    204a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    204c:	4b0f      	ldr	r3, [pc, #60]	; (208c <system_gclk_chan_disable+0x44>)
    204e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2050:	4b0f      	ldr	r3, [pc, #60]	; (2090 <system_gclk_chan_disable+0x48>)
    2052:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2054:	4a0f      	ldr	r2, [pc, #60]	; (2094 <system_gclk_chan_disable+0x4c>)
    2056:	8853      	ldrh	r3, [r2, #2]
    2058:	051b      	lsls	r3, r3, #20
    205a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    205c:	8853      	ldrh	r3, [r2, #2]
    205e:	490e      	ldr	r1, [pc, #56]	; (2098 <system_gclk_chan_disable+0x50>)
    2060:	400b      	ands	r3, r1
    2062:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2064:	8853      	ldrh	r3, [r2, #2]
    2066:	490d      	ldr	r1, [pc, #52]	; (209c <system_gclk_chan_disable+0x54>)
    2068:	400b      	ands	r3, r1
    206a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    206c:	0011      	movs	r1, r2
    206e:	2280      	movs	r2, #128	; 0x80
    2070:	01d2      	lsls	r2, r2, #7
    2072:	884b      	ldrh	r3, [r1, #2]
    2074:	4213      	tst	r3, r2
    2076:	d1fc      	bne.n	2072 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2078:	4906      	ldr	r1, [pc, #24]	; (2094 <system_gclk_chan_disable+0x4c>)
    207a:	884a      	ldrh	r2, [r1, #2]
    207c:	0203      	lsls	r3, r0, #8
    207e:	4806      	ldr	r0, [pc, #24]	; (2098 <system_gclk_chan_disable+0x50>)
    2080:	4002      	ands	r2, r0
    2082:	4313      	orrs	r3, r2
    2084:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2086:	4b06      	ldr	r3, [pc, #24]	; (20a0 <system_gclk_chan_disable+0x58>)
    2088:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    208a:	bd10      	pop	{r4, pc}
    208c:	00000789 	.word	0x00000789
    2090:	40000c02 	.word	0x40000c02
    2094:	40000c00 	.word	0x40000c00
    2098:	fffff0ff 	.word	0xfffff0ff
    209c:	ffffbfff 	.word	0xffffbfff
    20a0:	000007c9 	.word	0x000007c9

000020a4 <system_gclk_chan_set_config>:
{
    20a4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    20a6:	780c      	ldrb	r4, [r1, #0]
    20a8:	0224      	lsls	r4, r4, #8
    20aa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    20ac:	4b02      	ldr	r3, [pc, #8]	; (20b8 <system_gclk_chan_set_config+0x14>)
    20ae:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    20b0:	b2a4      	uxth	r4, r4
    20b2:	4b02      	ldr	r3, [pc, #8]	; (20bc <system_gclk_chan_set_config+0x18>)
    20b4:	805c      	strh	r4, [r3, #2]
}
    20b6:	bd10      	pop	{r4, pc}
    20b8:	00002049 	.word	0x00002049
    20bc:	40000c00 	.word	0x40000c00

000020c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    20c0:	b510      	push	{r4, lr}
    20c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20c4:	4b06      	ldr	r3, [pc, #24]	; (20e0 <system_gclk_chan_get_hz+0x20>)
    20c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20c8:	4b06      	ldr	r3, [pc, #24]	; (20e4 <system_gclk_chan_get_hz+0x24>)
    20ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    20cc:	4b06      	ldr	r3, [pc, #24]	; (20e8 <system_gclk_chan_get_hz+0x28>)
    20ce:	885c      	ldrh	r4, [r3, #2]
    20d0:	0524      	lsls	r4, r4, #20
    20d2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    20d4:	4b05      	ldr	r3, [pc, #20]	; (20ec <system_gclk_chan_get_hz+0x2c>)
    20d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    20d8:	0020      	movs	r0, r4
    20da:	4b05      	ldr	r3, [pc, #20]	; (20f0 <system_gclk_chan_get_hz+0x30>)
    20dc:	4798      	blx	r3
}
    20de:	bd10      	pop	{r4, pc}
    20e0:	00000789 	.word	0x00000789
    20e4:	40000c02 	.word	0x40000c02
    20e8:	40000c00 	.word	0x40000c00
    20ec:	000007c9 	.word	0x000007c9
    20f0:	00001f8d 	.word	0x00001f8d

000020f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    20f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    20f6:	78d3      	ldrb	r3, [r2, #3]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d135      	bne.n	2168 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    20fc:	7813      	ldrb	r3, [r2, #0]
    20fe:	2b80      	cmp	r3, #128	; 0x80
    2100:	d029      	beq.n	2156 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2102:	061b      	lsls	r3, r3, #24
    2104:	2480      	movs	r4, #128	; 0x80
    2106:	0264      	lsls	r4, r4, #9
    2108:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    210a:	7854      	ldrb	r4, [r2, #1]
    210c:	2502      	movs	r5, #2
    210e:	43ac      	bics	r4, r5
    2110:	d106      	bne.n	2120 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2112:	7894      	ldrb	r4, [r2, #2]
    2114:	2c00      	cmp	r4, #0
    2116:	d120      	bne.n	215a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2118:	2480      	movs	r4, #128	; 0x80
    211a:	02a4      	lsls	r4, r4, #10
    211c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    211e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2120:	7854      	ldrb	r4, [r2, #1]
    2122:	3c01      	subs	r4, #1
    2124:	2c01      	cmp	r4, #1
    2126:	d91c      	bls.n	2162 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2128:	040d      	lsls	r5, r1, #16
    212a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    212c:	24a0      	movs	r4, #160	; 0xa0
    212e:	05e4      	lsls	r4, r4, #23
    2130:	432c      	orrs	r4, r5
    2132:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2134:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2136:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2138:	24d0      	movs	r4, #208	; 0xd0
    213a:	0624      	lsls	r4, r4, #24
    213c:	432c      	orrs	r4, r5
    213e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2140:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2142:	78d4      	ldrb	r4, [r2, #3]
    2144:	2c00      	cmp	r4, #0
    2146:	d122      	bne.n	218e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2148:	035b      	lsls	r3, r3, #13
    214a:	d51c      	bpl.n	2186 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    214c:	7893      	ldrb	r3, [r2, #2]
    214e:	2b01      	cmp	r3, #1
    2150:	d01e      	beq.n	2190 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2152:	6141      	str	r1, [r0, #20]
    2154:	e017      	b.n	2186 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2156:	2300      	movs	r3, #0
    2158:	e7d7      	b.n	210a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    215a:	24c0      	movs	r4, #192	; 0xc0
    215c:	02e4      	lsls	r4, r4, #11
    215e:	4323      	orrs	r3, r4
    2160:	e7dd      	b.n	211e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2162:	4c0d      	ldr	r4, [pc, #52]	; (2198 <_system_pinmux_config+0xa4>)
    2164:	4023      	ands	r3, r4
    2166:	e7df      	b.n	2128 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2168:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    216a:	040c      	lsls	r4, r1, #16
    216c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    216e:	23a0      	movs	r3, #160	; 0xa0
    2170:	05db      	lsls	r3, r3, #23
    2172:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2174:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2176:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2178:	23d0      	movs	r3, #208	; 0xd0
    217a:	061b      	lsls	r3, r3, #24
    217c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    217e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2180:	78d3      	ldrb	r3, [r2, #3]
    2182:	2b00      	cmp	r3, #0
    2184:	d103      	bne.n	218e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2186:	7853      	ldrb	r3, [r2, #1]
    2188:	3b01      	subs	r3, #1
    218a:	2b01      	cmp	r3, #1
    218c:	d902      	bls.n	2194 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    218e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2190:	6181      	str	r1, [r0, #24]
    2192:	e7f8      	b.n	2186 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2194:	6081      	str	r1, [r0, #8]
}
    2196:	e7fa      	b.n	218e <_system_pinmux_config+0x9a>
    2198:	fffbffff 	.word	0xfffbffff

0000219c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    219c:	b510      	push	{r4, lr}
    219e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    21a0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    21a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21a4:	2900      	cmp	r1, #0
    21a6:	d104      	bne.n	21b2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    21a8:	0943      	lsrs	r3, r0, #5
    21aa:	01db      	lsls	r3, r3, #7
    21ac:	4905      	ldr	r1, [pc, #20]	; (21c4 <system_pinmux_pin_set_config+0x28>)
    21ae:	468c      	mov	ip, r1
    21b0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    21b2:	241f      	movs	r4, #31
    21b4:	4020      	ands	r0, r4
    21b6:	2101      	movs	r1, #1
    21b8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    21ba:	0018      	movs	r0, r3
    21bc:	4b02      	ldr	r3, [pc, #8]	; (21c8 <system_pinmux_pin_set_config+0x2c>)
    21be:	4798      	blx	r3
}
    21c0:	bd10      	pop	{r4, pc}
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	41004400 	.word	0x41004400
    21c8:	000020f5 	.word	0x000020f5

000021cc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    21cc:	4770      	bx	lr
	...

000021d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    21d0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    21d2:	4b05      	ldr	r3, [pc, #20]	; (21e8 <system_init+0x18>)
    21d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    21d6:	4b05      	ldr	r3, [pc, #20]	; (21ec <system_init+0x1c>)
    21d8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    21da:	4b05      	ldr	r3, [pc, #20]	; (21f0 <system_init+0x20>)
    21dc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    21de:	4b05      	ldr	r3, [pc, #20]	; (21f4 <system_init+0x24>)
    21e0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    21e2:	4b05      	ldr	r3, [pc, #20]	; (21f8 <system_init+0x28>)
    21e4:	4798      	blx	r3
}
    21e6:	bd10      	pop	{r4, pc}
    21e8:	00001c79 	.word	0x00001c79
    21ec:	000007f9 	.word	0x000007f9
    21f0:	000021cd 	.word	0x000021cd
    21f4:	00000965 	.word	0x00000965
    21f8:	000021cd 	.word	0x000021cd

000021fc <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    21fc:	1c93      	adds	r3, r2, #2
    21fe:	009b      	lsls	r3, r3, #2
    2200:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2202:	2a02      	cmp	r2, #2
    2204:	d009      	beq.n	221a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2206:	2a03      	cmp	r2, #3
    2208:	d00c      	beq.n	2224 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    220a:	2301      	movs	r3, #1
    220c:	4093      	lsls	r3, r2
    220e:	001a      	movs	r2, r3
    2210:	7e03      	ldrb	r3, [r0, #24]
    2212:	4313      	orrs	r3, r2
    2214:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2216:	2000      	movs	r0, #0
    2218:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    221a:	7e03      	ldrb	r3, [r0, #24]
    221c:	2210      	movs	r2, #16
    221e:	4313      	orrs	r3, r2
    2220:	7603      	strb	r3, [r0, #24]
    2222:	e7f8      	b.n	2216 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2224:	7e03      	ldrb	r3, [r0, #24]
    2226:	2220      	movs	r2, #32
    2228:	4313      	orrs	r3, r2
    222a:	7603      	strb	r3, [r0, #24]
    222c:	e7f3      	b.n	2216 <tc_register_callback+0x1a>
	...

00002230 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2230:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2232:	0080      	lsls	r0, r0, #2
    2234:	4b16      	ldr	r3, [pc, #88]	; (2290 <_tc_interrupt_handler+0x60>)
    2236:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2238:	6823      	ldr	r3, [r4, #0]
    223a:	7b9d      	ldrb	r5, [r3, #14]
    223c:	7e22      	ldrb	r2, [r4, #24]
    223e:	7e63      	ldrb	r3, [r4, #25]
    2240:	4013      	ands	r3, r2
    2242:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2244:	07eb      	lsls	r3, r5, #31
    2246:	d406      	bmi.n	2256 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2248:	07ab      	lsls	r3, r5, #30
    224a:	d40b      	bmi.n	2264 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    224c:	06eb      	lsls	r3, r5, #27
    224e:	d410      	bmi.n	2272 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2250:	06ab      	lsls	r3, r5, #26
    2252:	d415      	bmi.n	2280 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2254:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2256:	0020      	movs	r0, r4
    2258:	68a3      	ldr	r3, [r4, #8]
    225a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    225c:	2301      	movs	r3, #1
    225e:	6822      	ldr	r2, [r4, #0]
    2260:	7393      	strb	r3, [r2, #14]
    2262:	e7f1      	b.n	2248 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2264:	0020      	movs	r0, r4
    2266:	68e3      	ldr	r3, [r4, #12]
    2268:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    226a:	2302      	movs	r3, #2
    226c:	6822      	ldr	r2, [r4, #0]
    226e:	7393      	strb	r3, [r2, #14]
    2270:	e7ec      	b.n	224c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2272:	0020      	movs	r0, r4
    2274:	6923      	ldr	r3, [r4, #16]
    2276:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2278:	2310      	movs	r3, #16
    227a:	6822      	ldr	r2, [r4, #0]
    227c:	7393      	strb	r3, [r2, #14]
    227e:	e7e7      	b.n	2250 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2280:	0020      	movs	r0, r4
    2282:	6963      	ldr	r3, [r4, #20]
    2284:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2286:	6823      	ldr	r3, [r4, #0]
    2288:	2220      	movs	r2, #32
    228a:	739a      	strb	r2, [r3, #14]
}
    228c:	e7e2      	b.n	2254 <_tc_interrupt_handler+0x24>
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	200008fc 	.word	0x200008fc

00002294 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2294:	b510      	push	{r4, lr}
    2296:	2000      	movs	r0, #0
    2298:	4b01      	ldr	r3, [pc, #4]	; (22a0 <TC3_Handler+0xc>)
    229a:	4798      	blx	r3
    229c:	bd10      	pop	{r4, pc}
    229e:	46c0      	nop			; (mov r8, r8)
    22a0:	00002231 	.word	0x00002231

000022a4 <TC4_Handler>:
    22a4:	b510      	push	{r4, lr}
    22a6:	2001      	movs	r0, #1
    22a8:	4b01      	ldr	r3, [pc, #4]	; (22b0 <TC4_Handler+0xc>)
    22aa:	4798      	blx	r3
    22ac:	bd10      	pop	{r4, pc}
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	00002231 	.word	0x00002231

000022b4 <TC5_Handler>:
    22b4:	b510      	push	{r4, lr}
    22b6:	2002      	movs	r0, #2
    22b8:	4b01      	ldr	r3, [pc, #4]	; (22c0 <TC5_Handler+0xc>)
    22ba:	4798      	blx	r3
    22bc:	bd10      	pop	{r4, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	00002231 	.word	0x00002231

000022c4 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    22c4:	b530      	push	{r4, r5, lr}
    22c6:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    22c8:	aa01      	add	r2, sp, #4
    22ca:	4b0b      	ldr	r3, [pc, #44]	; (22f8 <_tc_get_inst_index+0x34>)
    22cc:	cb32      	ldmia	r3!, {r1, r4, r5}
    22ce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    22d0:	9b01      	ldr	r3, [sp, #4]
    22d2:	4298      	cmp	r0, r3
    22d4:	d00d      	beq.n	22f2 <_tc_get_inst_index+0x2e>
    22d6:	9b02      	ldr	r3, [sp, #8]
    22d8:	4298      	cmp	r0, r3
    22da:	d008      	beq.n	22ee <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    22dc:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    22de:	9a03      	ldr	r2, [sp, #12]
    22e0:	4282      	cmp	r2, r0
    22e2:	d002      	beq.n	22ea <_tc_get_inst_index+0x26>
}
    22e4:	0018      	movs	r0, r3
    22e6:	b005      	add	sp, #20
    22e8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    22ea:	3302      	adds	r3, #2
    22ec:	e002      	b.n	22f4 <_tc_get_inst_index+0x30>
    22ee:	2301      	movs	r3, #1
    22f0:	e000      	b.n	22f4 <_tc_get_inst_index+0x30>
    22f2:	2300      	movs	r3, #0
			return i;
    22f4:	b2db      	uxtb	r3, r3
    22f6:	e7f5      	b.n	22e4 <_tc_get_inst_index+0x20>
    22f8:	00008918 	.word	0x00008918

000022fc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    22fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22fe:	b087      	sub	sp, #28
    2300:	0004      	movs	r4, r0
    2302:	000d      	movs	r5, r1
    2304:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2306:	0008      	movs	r0, r1
    2308:	4b85      	ldr	r3, [pc, #532]	; (2520 <tc_init+0x224>)
    230a:	4798      	blx	r3
    230c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    230e:	ab05      	add	r3, sp, #20
    2310:	221b      	movs	r2, #27
    2312:	701a      	strb	r2, [r3, #0]
    2314:	3201      	adds	r2, #1
    2316:	705a      	strb	r2, [r3, #1]
    2318:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    231a:	ab03      	add	r3, sp, #12
    231c:	2280      	movs	r2, #128	; 0x80
    231e:	0112      	lsls	r2, r2, #4
    2320:	801a      	strh	r2, [r3, #0]
    2322:	2280      	movs	r2, #128	; 0x80
    2324:	0152      	lsls	r2, r2, #5
    2326:	805a      	strh	r2, [r3, #2]
    2328:	2280      	movs	r2, #128	; 0x80
    232a:	0192      	lsls	r2, r2, #6
    232c:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    232e:	2300      	movs	r3, #0
    2330:	60a3      	str	r3, [r4, #8]
    2332:	60e3      	str	r3, [r4, #12]
    2334:	6123      	str	r3, [r4, #16]
    2336:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2338:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    233a:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    233c:	0082      	lsls	r2, r0, #2
    233e:	4b79      	ldr	r3, [pc, #484]	; (2524 <tc_init+0x228>)
    2340:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2342:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2344:	78b3      	ldrb	r3, [r6, #2]
    2346:	2b08      	cmp	r3, #8
    2348:	d006      	beq.n	2358 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    234a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    234c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    234e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2350:	07db      	lsls	r3, r3, #31
    2352:	d505      	bpl.n	2360 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2354:	b007      	add	sp, #28
    2356:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2358:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    235a:	07fa      	lsls	r2, r7, #31
    235c:	d5fa      	bpl.n	2354 <tc_init+0x58>
    235e:	e7f4      	b.n	234a <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2360:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    2362:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2364:	06db      	lsls	r3, r3, #27
    2366:	d4f5      	bmi.n	2354 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2368:	882b      	ldrh	r3, [r5, #0]
    236a:	079b      	lsls	r3, r3, #30
    236c:	d4f2      	bmi.n	2354 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    236e:	7c33      	ldrb	r3, [r6, #16]
    2370:	2b00      	cmp	r3, #0
    2372:	d179      	bne.n	2468 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    2374:	7f33      	ldrb	r3, [r6, #28]
    2376:	2b00      	cmp	r3, #0
    2378:	d000      	beq.n	237c <tc_init+0x80>
    237a:	e081      	b.n	2480 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    237c:	496a      	ldr	r1, [pc, #424]	; (2528 <tc_init+0x22c>)
    237e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2380:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2382:	ab03      	add	r3, sp, #12
    2384:	5ad3      	ldrh	r3, [r2, r3]
    2386:	4303      	orrs	r3, r0
    2388:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    238a:	78b3      	ldrb	r3, [r6, #2]
    238c:	2b08      	cmp	r3, #8
    238e:	d100      	bne.n	2392 <tc_init+0x96>
    2390:	e086      	b.n	24a0 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    2392:	a901      	add	r1, sp, #4
    2394:	7833      	ldrb	r3, [r6, #0]
    2396:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2398:	ab05      	add	r3, sp, #20
    239a:	5ddf      	ldrb	r7, [r3, r7]
    239c:	0038      	movs	r0, r7
    239e:	4b63      	ldr	r3, [pc, #396]	; (252c <tc_init+0x230>)
    23a0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    23a2:	0038      	movs	r0, r7
    23a4:	4b62      	ldr	r3, [pc, #392]	; (2530 <tc_init+0x234>)
    23a6:	4798      	blx	r3
	ctrla_tmp =
    23a8:	8931      	ldrh	r1, [r6, #8]
    23aa:	88b3      	ldrh	r3, [r6, #4]
    23ac:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    23ae:	78b1      	ldrb	r1, [r6, #2]
    23b0:	79b2      	ldrb	r2, [r6, #6]
    23b2:	4311      	orrs	r1, r2
	ctrla_tmp =
    23b4:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    23b6:	7873      	ldrb	r3, [r6, #1]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d002      	beq.n	23c2 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    23bc:	2380      	movs	r3, #128	; 0x80
    23be:	011b      	lsls	r3, r3, #4
    23c0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    23c2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    23c4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    23c6:	b25b      	sxtb	r3, r3
    23c8:	2b00      	cmp	r3, #0
    23ca:	dbfb      	blt.n	23c4 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    23cc:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    23ce:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    23d0:	1e4b      	subs	r3, r1, #1
    23d2:	4199      	sbcs	r1, r3
    23d4:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    23d6:	7bb3      	ldrb	r3, [r6, #14]
    23d8:	2b00      	cmp	r3, #0
    23da:	d001      	beq.n	23e0 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    23dc:	2301      	movs	r3, #1
    23de:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    23e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    23e2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    23e4:	b25b      	sxtb	r3, r3
    23e6:	2b00      	cmp	r3, #0
    23e8:	dbfb      	blt.n	23e2 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    23ea:	23ff      	movs	r3, #255	; 0xff
    23ec:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    23ee:	2900      	cmp	r1, #0
    23f0:	d005      	beq.n	23fe <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    23f2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    23f4:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    23f6:	b25b      	sxtb	r3, r3
    23f8:	2b00      	cmp	r3, #0
    23fa:	dbfb      	blt.n	23f4 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    23fc:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    23fe:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2400:	7af3      	ldrb	r3, [r6, #11]
    2402:	2b00      	cmp	r3, #0
    2404:	d001      	beq.n	240a <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2406:	2310      	movs	r3, #16
    2408:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    240a:	7b33      	ldrb	r3, [r6, #12]
    240c:	2b00      	cmp	r3, #0
    240e:	d001      	beq.n	2414 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2410:	2320      	movs	r3, #32
    2412:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2414:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2416:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2418:	b25b      	sxtb	r3, r3
    241a:	2b00      	cmp	r3, #0
    241c:	dbfb      	blt.n	2416 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    241e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2420:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2422:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2424:	b25b      	sxtb	r3, r3
    2426:	2b00      	cmp	r3, #0
    2428:	dbfb      	blt.n	2422 <tc_init+0x126>
	switch (module_inst->counter_size) {
    242a:	7923      	ldrb	r3, [r4, #4]
    242c:	2b04      	cmp	r3, #4
    242e:	d03f      	beq.n	24b0 <tc_init+0x1b4>
    2430:	2b08      	cmp	r3, #8
    2432:	d05e      	beq.n	24f2 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2434:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2436:	2b00      	cmp	r3, #0
    2438:	d000      	beq.n	243c <tc_init+0x140>
    243a:	e78b      	b.n	2354 <tc_init+0x58>
    243c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    243e:	b25b      	sxtb	r3, r3
    2440:	2b00      	cmp	r3, #0
    2442:	dbfb      	blt.n	243c <tc_init+0x140>
				= config->counter_16_bit.value;
    2444:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2446:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2448:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    244a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    244c:	b25b      	sxtb	r3, r3
    244e:	2b00      	cmp	r3, #0
    2450:	dbfb      	blt.n	244a <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    2452:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2454:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2456:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2458:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    245a:	b25b      	sxtb	r3, r3
    245c:	2b00      	cmp	r3, #0
    245e:	dbfb      	blt.n	2458 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    2460:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2462:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2464:	2000      	movs	r0, #0
    2466:	e775      	b.n	2354 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2468:	a902      	add	r1, sp, #8
    246a:	2301      	movs	r3, #1
    246c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    246e:	2200      	movs	r2, #0
    2470:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2472:	7e32      	ldrb	r2, [r6, #24]
    2474:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2476:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2478:	7d30      	ldrb	r0, [r6, #20]
    247a:	4b2e      	ldr	r3, [pc, #184]	; (2534 <tc_init+0x238>)
    247c:	4798      	blx	r3
    247e:	e779      	b.n	2374 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2480:	a902      	add	r1, sp, #8
    2482:	2301      	movs	r3, #1
    2484:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2486:	2200      	movs	r2, #0
    2488:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    248a:	3224      	adds	r2, #36	; 0x24
    248c:	18b2      	adds	r2, r6, r2
    248e:	7812      	ldrb	r2, [r2, #0]
    2490:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2492:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2494:	331f      	adds	r3, #31
    2496:	18f3      	adds	r3, r6, r3
    2498:	7818      	ldrb	r0, [r3, #0]
    249a:	4b26      	ldr	r3, [pc, #152]	; (2534 <tc_init+0x238>)
    249c:	4798      	blx	r3
    249e:	e76d      	b.n	237c <tc_init+0x80>
    24a0:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    24a2:	1c7a      	adds	r2, r7, #1
    24a4:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    24a6:	ab03      	add	r3, sp, #12
    24a8:	5ad3      	ldrh	r3, [r2, r3]
    24aa:	4303      	orrs	r3, r0
    24ac:	620b      	str	r3, [r1, #32]
    24ae:	e770      	b.n	2392 <tc_init+0x96>
    24b0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    24b2:	b25b      	sxtb	r3, r3
    24b4:	2b00      	cmp	r3, #0
    24b6:	dbfb      	blt.n	24b0 <tc_init+0x1b4>
					config->counter_8_bit.value;
    24b8:	2328      	movs	r3, #40	; 0x28
    24ba:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    24bc:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24be:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24c0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    24c2:	b25b      	sxtb	r3, r3
    24c4:	2b00      	cmp	r3, #0
    24c6:	dbfb      	blt.n	24c0 <tc_init+0x1c4>
					config->counter_8_bit.period;
    24c8:	2329      	movs	r3, #41	; 0x29
    24ca:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    24cc:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24ce:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24d0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    24d2:	b25b      	sxtb	r3, r3
    24d4:	2b00      	cmp	r3, #0
    24d6:	dbfb      	blt.n	24d0 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    24d8:	232a      	movs	r3, #42	; 0x2a
    24da:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    24dc:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24de:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    24e0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    24e2:	b25b      	sxtb	r3, r3
    24e4:	2b00      	cmp	r3, #0
    24e6:	dbfb      	blt.n	24e0 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    24e8:	232b      	movs	r3, #43	; 0x2b
    24ea:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    24ec:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    24ee:	2000      	movs	r0, #0
    24f0:	e730      	b.n	2354 <tc_init+0x58>
    24f2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    24f4:	b25b      	sxtb	r3, r3
    24f6:	2b00      	cmp	r3, #0
    24f8:	dbfb      	blt.n	24f2 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    24fa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    24fc:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    24fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2500:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2502:	b25b      	sxtb	r3, r3
    2504:	2b00      	cmp	r3, #0
    2506:	dbfb      	blt.n	2500 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    2508:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    250a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    250c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    250e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2510:	b25b      	sxtb	r3, r3
    2512:	2b00      	cmp	r3, #0
    2514:	dbfb      	blt.n	250e <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    2516:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2518:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    251a:	2000      	movs	r0, #0
    251c:	e71a      	b.n	2354 <tc_init+0x58>
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	000022c5 	.word	0x000022c5
    2524:	200008fc 	.word	0x200008fc
    2528:	40000400 	.word	0x40000400
    252c:	000020a5 	.word	0x000020a5
    2530:	00002019 	.word	0x00002019
    2534:	0000219d 	.word	0x0000219d

00002538 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2538:	6802      	ldr	r2, [r0, #0]
    253a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    253c:	b25b      	sxtb	r3, r3
    253e:	2b00      	cmp	r3, #0
    2540:	dbfb      	blt.n	253a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2542:	7903      	ldrb	r3, [r0, #4]
    2544:	2b04      	cmp	r3, #4
    2546:	d005      	beq.n	2554 <tc_get_count_value+0x1c>
    2548:	2b08      	cmp	r3, #8
    254a:	d009      	beq.n	2560 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    254c:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    254e:	2b00      	cmp	r3, #0
    2550:	d003      	beq.n	255a <tc_get_count_value+0x22>
}
    2552:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2554:	7c10      	ldrb	r0, [r2, #16]
    2556:	b2c0      	uxtb	r0, r0
    2558:	e7fb      	b.n	2552 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    255a:	8a10      	ldrh	r0, [r2, #16]
    255c:	b280      	uxth	r0, r0
    255e:	e7f8      	b.n	2552 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    2560:	6910      	ldr	r0, [r2, #16]
    2562:	e7f6      	b.n	2552 <tc_get_count_value+0x1a>

00002564 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2564:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2566:	6804      	ldr	r4, [r0, #0]
    2568:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    256a:	b25b      	sxtb	r3, r3
    256c:	2b00      	cmp	r3, #0
    256e:	dbfb      	blt.n	2568 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2570:	7903      	ldrb	r3, [r0, #4]
    2572:	2b04      	cmp	r3, #4
    2574:	d005      	beq.n	2582 <tc_set_compare_value+0x1e>
    2576:	2b08      	cmp	r3, #8
    2578:	d014      	beq.n	25a4 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    257a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    257c:	2b00      	cmp	r3, #0
    257e:	d008      	beq.n	2592 <tc_set_compare_value+0x2e>
}
    2580:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    2582:	2017      	movs	r0, #23
			if (channel_index <
    2584:	2901      	cmp	r1, #1
    2586:	d8fb      	bhi.n	2580 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    2588:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    258a:	1861      	adds	r1, r4, r1
    258c:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    258e:	2000      	movs	r0, #0
    2590:	e7f6      	b.n	2580 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2592:	2017      	movs	r0, #23
			if (channel_index <
    2594:	2901      	cmp	r1, #1
    2596:	d8f3      	bhi.n	2580 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    2598:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    259a:	310c      	adds	r1, #12
    259c:	0049      	lsls	r1, r1, #1
    259e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    25a0:	2000      	movs	r0, #0
    25a2:	e7ed      	b.n	2580 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    25a4:	2017      	movs	r0, #23
			if (channel_index <
    25a6:	2901      	cmp	r1, #1
    25a8:	d8ea      	bhi.n	2580 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    25aa:	3106      	adds	r1, #6
    25ac:	0089      	lsls	r1, r1, #2
    25ae:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    25b0:	2000      	movs	r0, #0
    25b2:	e7e5      	b.n	2580 <tc_set_compare_value+0x1c>

000025b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    25b4:	e7fe      	b.n	25b4 <Dummy_Handler>
	...

000025b8 <Reset_Handler>:
{
    25b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    25ba:	4a2a      	ldr	r2, [pc, #168]	; (2664 <Reset_Handler+0xac>)
    25bc:	4b2a      	ldr	r3, [pc, #168]	; (2668 <Reset_Handler+0xb0>)
    25be:	429a      	cmp	r2, r3
    25c0:	d011      	beq.n	25e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    25c2:	001a      	movs	r2, r3
    25c4:	4b29      	ldr	r3, [pc, #164]	; (266c <Reset_Handler+0xb4>)
    25c6:	429a      	cmp	r2, r3
    25c8:	d20d      	bcs.n	25e6 <Reset_Handler+0x2e>
    25ca:	4a29      	ldr	r2, [pc, #164]	; (2670 <Reset_Handler+0xb8>)
    25cc:	3303      	adds	r3, #3
    25ce:	1a9b      	subs	r3, r3, r2
    25d0:	089b      	lsrs	r3, r3, #2
    25d2:	3301      	adds	r3, #1
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    25d8:	4823      	ldr	r0, [pc, #140]	; (2668 <Reset_Handler+0xb0>)
    25da:	4922      	ldr	r1, [pc, #136]	; (2664 <Reset_Handler+0xac>)
    25dc:	588c      	ldr	r4, [r1, r2]
    25de:	5084      	str	r4, [r0, r2]
    25e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    25e2:	429a      	cmp	r2, r3
    25e4:	d1fa      	bne.n	25dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    25e6:	4a23      	ldr	r2, [pc, #140]	; (2674 <Reset_Handler+0xbc>)
    25e8:	4b23      	ldr	r3, [pc, #140]	; (2678 <Reset_Handler+0xc0>)
    25ea:	429a      	cmp	r2, r3
    25ec:	d20a      	bcs.n	2604 <Reset_Handler+0x4c>
    25ee:	43d3      	mvns	r3, r2
    25f0:	4921      	ldr	r1, [pc, #132]	; (2678 <Reset_Handler+0xc0>)
    25f2:	185b      	adds	r3, r3, r1
    25f4:	2103      	movs	r1, #3
    25f6:	438b      	bics	r3, r1
    25f8:	3304      	adds	r3, #4
    25fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    25fc:	2100      	movs	r1, #0
    25fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2600:	4293      	cmp	r3, r2
    2602:	d1fc      	bne.n	25fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2604:	4a1d      	ldr	r2, [pc, #116]	; (267c <Reset_Handler+0xc4>)
    2606:	21ff      	movs	r1, #255	; 0xff
    2608:	4b1d      	ldr	r3, [pc, #116]	; (2680 <Reset_Handler+0xc8>)
    260a:	438b      	bics	r3, r1
    260c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    260e:	39fd      	subs	r1, #253	; 0xfd
    2610:	2390      	movs	r3, #144	; 0x90
    2612:	005b      	lsls	r3, r3, #1
    2614:	4a1b      	ldr	r2, [pc, #108]	; (2684 <Reset_Handler+0xcc>)
    2616:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2618:	4a1b      	ldr	r2, [pc, #108]	; (2688 <Reset_Handler+0xd0>)
    261a:	78d3      	ldrb	r3, [r2, #3]
    261c:	2503      	movs	r5, #3
    261e:	43ab      	bics	r3, r5
    2620:	2402      	movs	r4, #2
    2622:	4323      	orrs	r3, r4
    2624:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2626:	78d3      	ldrb	r3, [r2, #3]
    2628:	270c      	movs	r7, #12
    262a:	43bb      	bics	r3, r7
    262c:	2608      	movs	r6, #8
    262e:	4333      	orrs	r3, r6
    2630:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2632:	4b16      	ldr	r3, [pc, #88]	; (268c <Reset_Handler+0xd4>)
    2634:	7b98      	ldrb	r0, [r3, #14]
    2636:	2230      	movs	r2, #48	; 0x30
    2638:	4390      	bics	r0, r2
    263a:	2220      	movs	r2, #32
    263c:	4310      	orrs	r0, r2
    263e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2640:	7b99      	ldrb	r1, [r3, #14]
    2642:	43b9      	bics	r1, r7
    2644:	4331      	orrs	r1, r6
    2646:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2648:	7b9a      	ldrb	r2, [r3, #14]
    264a:	43aa      	bics	r2, r5
    264c:	4322      	orrs	r2, r4
    264e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2650:	4a0f      	ldr	r2, [pc, #60]	; (2690 <Reset_Handler+0xd8>)
    2652:	6853      	ldr	r3, [r2, #4]
    2654:	2180      	movs	r1, #128	; 0x80
    2656:	430b      	orrs	r3, r1
    2658:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    265a:	4b0e      	ldr	r3, [pc, #56]	; (2694 <Reset_Handler+0xdc>)
    265c:	4798      	blx	r3
        main();
    265e:	4b0e      	ldr	r3, [pc, #56]	; (2698 <Reset_Handler+0xe0>)
    2660:	4798      	blx	r3
    2662:	e7fe      	b.n	2662 <Reset_Handler+0xaa>
    2664:	00008d70 	.word	0x00008d70
    2668:	20000000 	.word	0x20000000
    266c:	200001dc 	.word	0x200001dc
    2670:	20000004 	.word	0x20000004
    2674:	200001dc 	.word	0x200001dc
    2678:	20000a1c 	.word	0x20000a1c
    267c:	e000ed00 	.word	0xe000ed00
    2680:	00000000 	.word	0x00000000
    2684:	41007000 	.word	0x41007000
    2688:	41005000 	.word	0x41005000
    268c:	41004800 	.word	0x41004800
    2690:	41004000 	.word	0x41004000
    2694:	000032fd 	.word	0x000032fd
    2698:	000031dd 	.word	0x000031dd

0000269c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    269c:	b5f0      	push	{r4, r5, r6, r7, lr}
    269e:	46c6      	mov	lr, r8
    26a0:	b500      	push	{lr}
    26a2:	000c      	movs	r4, r1
    26a4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    26a6:	2800      	cmp	r0, #0
    26a8:	d10f      	bne.n	26ca <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    26aa:	2a00      	cmp	r2, #0
    26ac:	dd11      	ble.n	26d2 <_read+0x36>
    26ae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    26b0:	4e09      	ldr	r6, [pc, #36]	; (26d8 <_read+0x3c>)
    26b2:	4d0a      	ldr	r5, [pc, #40]	; (26dc <_read+0x40>)
    26b4:	6830      	ldr	r0, [r6, #0]
    26b6:	0021      	movs	r1, r4
    26b8:	682b      	ldr	r3, [r5, #0]
    26ba:	4798      	blx	r3
		ptr++;
    26bc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    26be:	42bc      	cmp	r4, r7
    26c0:	d1f8      	bne.n	26b4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    26c2:	4640      	mov	r0, r8
    26c4:	bc04      	pop	{r2}
    26c6:	4690      	mov	r8, r2
    26c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    26ca:	2301      	movs	r3, #1
    26cc:	425b      	negs	r3, r3
    26ce:	4698      	mov	r8, r3
    26d0:	e7f7      	b.n	26c2 <_read+0x26>
	for (; len > 0; --len) {
    26d2:	4680      	mov	r8, r0
    26d4:	e7f5      	b.n	26c2 <_read+0x26>
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	20000910 	.word	0x20000910
    26dc:	20000908 	.word	0x20000908

000026e0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    26e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e2:	46c6      	mov	lr, r8
    26e4:	b500      	push	{lr}
    26e6:	000e      	movs	r6, r1
    26e8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    26ea:	3801      	subs	r0, #1
    26ec:	2802      	cmp	r0, #2
    26ee:	d810      	bhi.n	2712 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    26f0:	2a00      	cmp	r2, #0
    26f2:	d011      	beq.n	2718 <_write+0x38>
    26f4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    26f6:	4b0c      	ldr	r3, [pc, #48]	; (2728 <_write+0x48>)
    26f8:	4698      	mov	r8, r3
    26fa:	4f0c      	ldr	r7, [pc, #48]	; (272c <_write+0x4c>)
    26fc:	4643      	mov	r3, r8
    26fe:	6818      	ldr	r0, [r3, #0]
    2700:	5d31      	ldrb	r1, [r6, r4]
    2702:	683b      	ldr	r3, [r7, #0]
    2704:	4798      	blx	r3
    2706:	2800      	cmp	r0, #0
    2708:	db08      	blt.n	271c <_write+0x3c>
			return -1;
		}
		++nChars;
    270a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    270c:	42a5      	cmp	r5, r4
    270e:	d1f5      	bne.n	26fc <_write+0x1c>
    2710:	e006      	b.n	2720 <_write+0x40>
		return -1;
    2712:	2401      	movs	r4, #1
    2714:	4264      	negs	r4, r4
    2716:	e003      	b.n	2720 <_write+0x40>
	for (; len != 0; --len) {
    2718:	0014      	movs	r4, r2
    271a:	e001      	b.n	2720 <_write+0x40>
			return -1;
    271c:	2401      	movs	r4, #1
    271e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2720:	0020      	movs	r0, r4
    2722:	bc04      	pop	{r2}
    2724:	4690      	mov	r8, r2
    2726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2728:	20000910 	.word	0x20000910
    272c:	2000090c 	.word	0x2000090c

00002730 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2730:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2732:	4a06      	ldr	r2, [pc, #24]	; (274c <_sbrk+0x1c>)
    2734:	6812      	ldr	r2, [r2, #0]
    2736:	2a00      	cmp	r2, #0
    2738:	d004      	beq.n	2744 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    273a:	4a04      	ldr	r2, [pc, #16]	; (274c <_sbrk+0x1c>)
    273c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    273e:	18c3      	adds	r3, r0, r3
    2740:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2742:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2744:	4902      	ldr	r1, [pc, #8]	; (2750 <_sbrk+0x20>)
    2746:	4a01      	ldr	r2, [pc, #4]	; (274c <_sbrk+0x1c>)
    2748:	6011      	str	r1, [r2, #0]
    274a:	e7f6      	b.n	273a <_sbrk+0xa>
    274c:	20000238 	.word	0x20000238
    2750:	20002a20 	.word	0x20002a20

00002754 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2754:	2001      	movs	r0, #1
    2756:	4240      	negs	r0, r0
    2758:	4770      	bx	lr

0000275a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    275a:	2380      	movs	r3, #128	; 0x80
    275c:	019b      	lsls	r3, r3, #6
    275e:	604b      	str	r3, [r1, #4]

	return 0;
}
    2760:	2000      	movs	r0, #0
    2762:	4770      	bx	lr

00002764 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2764:	2001      	movs	r0, #1
    2766:	4770      	bx	lr

00002768 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2768:	2000      	movs	r0, #0
    276a:	4770      	bx	lr

0000276c <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    276c:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    276e:	4a0d      	ldr	r2, [pc, #52]	; (27a4 <NWK_Init+0x38>)
    2770:	2300      	movs	r3, #0
    2772:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2774:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    2776:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    2778:	2158      	movs	r1, #88	; 0x58
    277a:	5253      	strh	r3, [r2, r1]
    277c:	0013      	movs	r3, r2
    277e:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2780:	2100      	movs	r1, #0
    2782:	6099      	str	r1, [r3, #8]
    2784:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2786:	4293      	cmp	r3, r2
    2788:	d1fb      	bne.n	2782 <NWK_Init+0x16>
	}

	nwkTxInit();
    278a:	4b07      	ldr	r3, [pc, #28]	; (27a8 <NWK_Init+0x3c>)
    278c:	4798      	blx	r3
	nwkRxInit();
    278e:	4b07      	ldr	r3, [pc, #28]	; (27ac <NWK_Init+0x40>)
    2790:	4798      	blx	r3
	nwkFrameInit();
    2792:	4b07      	ldr	r3, [pc, #28]	; (27b0 <NWK_Init+0x44>)
    2794:	4798      	blx	r3
	nwkDataReqInit();
    2796:	4b07      	ldr	r3, [pc, #28]	; (27b4 <NWK_Init+0x48>)
    2798:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    279a:	4b07      	ldr	r3, [pc, #28]	; (27b8 <NWK_Init+0x4c>)
    279c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    279e:	4b07      	ldr	r3, [pc, #28]	; (27bc <NWK_Init+0x50>)
    27a0:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    27a2:	bd10      	pop	{r4, pc}
    27a4:	20000914 	.word	0x20000914
    27a8:	00002a59 	.word	0x00002a59
    27ac:	00002951 	.word	0x00002951
    27b0:	000027dd 	.word	0x000027dd
    27b4:	000027d1 	.word	0x000027d1
    27b8:	0000282d 	.word	0x0000282d
    27bc:	00002991 	.word	0x00002991

000027c0 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    27c0:	3002      	adds	r0, #2
    27c2:	0080      	lsls	r0, r0, #2
    27c4:	4b01      	ldr	r3, [pc, #4]	; (27cc <NWK_OpenEndpoint+0xc>)
    27c6:	50c1      	str	r1, [r0, r3]
}
    27c8:	4770      	bx	lr
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	20000914 	.word	0x20000914

000027d0 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    27d0:	2200      	movs	r2, #0
    27d2:	4b01      	ldr	r3, [pc, #4]	; (27d8 <nwkDataReqInit+0x8>)
    27d4:	601a      	str	r2, [r3, #0]
}
    27d6:	4770      	bx	lr
    27d8:	2000023c 	.word	0x2000023c

000027dc <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    27dc:	4b03      	ldr	r3, [pc, #12]	; (27ec <nwkFrameInit+0x10>)
    27de:	2200      	movs	r2, #0
    27e0:	701a      	strb	r2, [r3, #0]
    27e2:	218d      	movs	r1, #141	; 0x8d
    27e4:	545a      	strb	r2, [r3, r1]
    27e6:	318d      	adds	r1, #141	; 0x8d
    27e8:	545a      	strb	r2, [r3, r1]
	}
}
    27ea:	4770      	bx	lr
    27ec:	20000240 	.word	0x20000240

000027f0 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    27f0:	2800      	cmp	r0, #0
    27f2:	d012      	beq.n	281a <nwkFrameNext+0x2a>
		frame = nwkFrameFrames;
	} else {
		frame++;
    27f4:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    27f6:	4b0c      	ldr	r3, [pc, #48]	; (2828 <nwkFrameNext+0x38>)
    27f8:	33a8      	adds	r3, #168	; 0xa8
    27fa:	33ff      	adds	r3, #255	; 0xff
    27fc:	4298      	cmp	r0, r3
    27fe:	d210      	bcs.n	2822 <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2800:	7803      	ldrb	r3, [r0, #0]
    2802:	2b00      	cmp	r3, #0
    2804:	d10c      	bne.n	2820 <nwkFrameNext+0x30>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2806:	4a08      	ldr	r2, [pc, #32]	; (2828 <nwkFrameNext+0x38>)
    2808:	32a8      	adds	r2, #168	; 0xa8
    280a:	32ff      	adds	r2, #255	; 0xff
    280c:	308d      	adds	r0, #141	; 0x8d
    280e:	4290      	cmp	r0, r2
    2810:	d205      	bcs.n	281e <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2812:	7803      	ldrb	r3, [r0, #0]
    2814:	2b00      	cmp	r3, #0
    2816:	d0f9      	beq.n	280c <nwkFrameNext+0x1c>
    2818:	e002      	b.n	2820 <nwkFrameNext+0x30>
		frame = nwkFrameFrames;
    281a:	4803      	ldr	r0, [pc, #12]	; (2828 <nwkFrameNext+0x38>)
    281c:	e7f0      	b.n	2800 <nwkFrameNext+0x10>
			return frame;
		}
	}

	return NULL;
    281e:	2000      	movs	r0, #0
}
    2820:	4770      	bx	lr
	return NULL;
    2822:	2000      	movs	r0, #0
    2824:	e7fc      	b.n	2820 <nwkFrameNext+0x30>
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	20000240 	.word	0x20000240

0000282c <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    282c:	b5f0      	push	{r4, r5, r6, r7, lr}
    282e:	4b09      	ldr	r3, [pc, #36]	; (2854 <nwkRouteInit+0x28>)
    2830:	3302      	adds	r3, #2
    2832:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2834:	2701      	movs	r7, #1
    2836:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2838:	4c06      	ldr	r4, [pc, #24]	; (2854 <nwkRouteInit+0x28>)
    283a:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    283c:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    283e:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2840:	00d0      	lsls	r0, r2, #3
    2842:	5d01      	ldrb	r1, [r0, r4]
    2844:	43b1      	bics	r1, r6
    2846:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2848:	711d      	strb	r5, [r3, #4]
    284a:	3201      	adds	r2, #1
    284c:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    284e:	2a64      	cmp	r2, #100	; 0x64
    2850:	d1f5      	bne.n	283e <nwkRouteInit+0x12>
	}
}
    2852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2854:	200003e8 	.word	0x200003e8

00002858 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2858:	b530      	push	{r4, r5, lr}
    285a:	4a0c      	ldr	r2, [pc, #48]	; (288c <NWK_RouteFindEntry+0x34>)
    285c:	3202      	adds	r2, #2
    285e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2860:	4d0a      	ldr	r5, [pc, #40]	; (288c <NWK_RouteFindEntry+0x34>)
    2862:	e003      	b.n	286c <NWK_RouteFindEntry+0x14>
    2864:	3301      	adds	r3, #1
    2866:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2868:	2b64      	cmp	r3, #100	; 0x64
    286a:	d00c      	beq.n	2886 <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    286c:	8814      	ldrh	r4, [r2, #0]
    286e:	4284      	cmp	r4, r0
    2870:	d1f8      	bne.n	2864 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    2872:	00dc      	lsls	r4, r3, #3
    2874:	5d64      	ldrb	r4, [r4, r5]
    2876:	07a4      	lsls	r4, r4, #30
    2878:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    287a:	428c      	cmp	r4, r1
    287c:	d1f2      	bne.n	2864 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    287e:	00db      	lsls	r3, r3, #3
    2880:	4802      	ldr	r0, [pc, #8]	; (288c <NWK_RouteFindEntry+0x34>)
    2882:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    2884:	bd30      	pop	{r4, r5, pc}
	return NULL;
    2886:	2000      	movs	r0, #0
    2888:	e7fc      	b.n	2884 <NWK_RouteFindEntry+0x2c>
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	200003e8 	.word	0x200003e8

00002890 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2890:	7803      	ldrb	r3, [r0, #0]
    2892:	07db      	lsls	r3, r3, #31
    2894:	d404      	bmi.n	28a0 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2896:	2301      	movs	r3, #1
    2898:	425b      	negs	r3, r3
    289a:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    289c:	2300      	movs	r3, #0
    289e:	7183      	strb	r3, [r0, #6]
}
    28a0:	4770      	bx	lr
	...

000028a4 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    28a4:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    28a6:	4b03      	ldr	r3, [pc, #12]	; (28b4 <nwkRouteRemove+0x10>)
    28a8:	4798      	blx	r3
	if (entry) {
    28aa:	2800      	cmp	r0, #0
    28ac:	d001      	beq.n	28b2 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    28ae:	4b02      	ldr	r3, [pc, #8]	; (28b8 <nwkRouteRemove+0x14>)
    28b0:	4798      	blx	r3
	}
}
    28b2:	bd10      	pop	{r4, pc}
    28b4:	00002859 	.word	0x00002859
    28b8:	00002891 	.word	0x00002891

000028bc <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    28bc:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    28be:	7b02      	ldrb	r2, [r0, #12]
		return false;
    28c0:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    28c2:	2a06      	cmp	r2, #6
    28c4:	d001      	beq.n	28ca <nwkRouteErrorReceived+0xe>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    28c6:	0018      	movs	r0, r3
    28c8:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    28ca:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    28cc:	7959      	ldrb	r1, [r3, #5]
    28ce:	78da      	ldrb	r2, [r3, #3]
    28d0:	7918      	ldrb	r0, [r3, #4]
    28d2:	0200      	lsls	r0, r0, #8
    28d4:	4310      	orrs	r0, r2
    28d6:	4b02      	ldr	r3, [pc, #8]	; (28e0 <nwkRouteErrorReceived+0x24>)
    28d8:	4798      	blx	r3
	return true;
    28da:	2301      	movs	r3, #1
    28dc:	e7f3      	b.n	28c6 <nwkRouteErrorReceived+0xa>
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	000028a5 	.word	0x000028a5

000028e4 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    28e4:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    28e6:	7b02      	ldrb	r2, [r0, #12]
		return false;
    28e8:	2300      	movs	r3, #0
	if (ind->size < 1) {
    28ea:	2a00      	cmp	r2, #0
    28ec:	d00a      	beq.n	2904 <nwkRxSeriveDataInd+0x20>
	}

	switch (ind->data[0]) {
    28ee:	6883      	ldr	r3, [r0, #8]
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	2b00      	cmp	r3, #0
    28f4:	d003      	beq.n	28fe <nwkRxSeriveDataInd+0x1a>
    28f6:	2b01      	cmp	r3, #1
    28f8:	d006      	beq.n	2908 <nwkRxSeriveDataInd+0x24>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    28fa:	2300      	movs	r3, #0
    28fc:	e002      	b.n	2904 <nwkRxSeriveDataInd+0x20>
		return nwkTxAckReceived(ind);
    28fe:	4b04      	ldr	r3, [pc, #16]	; (2910 <nwkRxSeriveDataInd+0x2c>)
    2900:	4798      	blx	r3
    2902:	0003      	movs	r3, r0
	}
}
    2904:	0018      	movs	r0, r3
    2906:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    2908:	4b02      	ldr	r3, [pc, #8]	; (2914 <nwkRxSeriveDataInd+0x30>)
    290a:	4798      	blx	r3
    290c:	0003      	movs	r3, r0
    290e:	e7f9      	b.n	2904 <nwkRxSeriveDataInd+0x20>
    2910:	00002a8d 	.word	0x00002a8d
    2914:	000028bd 	.word	0x000028bd

00002918 <nwkRxDuplicateRejectionTimerHandler>:
{
    2918:	b570      	push	{r4, r5, r6, lr}
    291a:	490b      	ldr	r1, [pc, #44]	; (2948 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    291c:	1d0b      	adds	r3, r1, #4
    291e:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2920:	2400      	movs	r4, #0
			restart = true;
    2922:	2501      	movs	r5, #1
    2924:	e002      	b.n	292c <nwkRxDuplicateRejectionTimerHandler+0x14>
    2926:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2928:	428b      	cmp	r3, r1
    292a:	d006      	beq.n	293a <nwkRxDuplicateRejectionTimerHandler+0x22>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    292c:	781a      	ldrb	r2, [r3, #0]
    292e:	2a00      	cmp	r2, #0
    2930:	d0f9      	beq.n	2926 <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2932:	3a01      	subs	r2, #1
    2934:	701a      	strb	r2, [r3, #0]
			restart = true;
    2936:	002c      	movs	r4, r5
    2938:	e7f5      	b.n	2926 <nwkRxDuplicateRejectionTimerHandler+0xe>
	if (restart) {
    293a:	2c00      	cmp	r4, #0
    293c:	d100      	bne.n	2940 <nwkRxDuplicateRejectionTimerHandler+0x28>
}
    293e:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    2940:	4b02      	ldr	r3, [pc, #8]	; (294c <nwkRxDuplicateRejectionTimerHandler+0x34>)
    2942:	4798      	blx	r3
}
    2944:	e7fb      	b.n	293e <nwkRxDuplicateRejectionTimerHandler+0x26>
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	20000708 	.word	0x20000708
    294c:	00002c25 	.word	0x00002c25

00002950 <nwkRxInit>:
{
    2950:	b510      	push	{r4, lr}
    2952:	4a0a      	ldr	r2, [pc, #40]	; (297c <nwkRxInit+0x2c>)
    2954:	1d13      	adds	r3, r2, #4
    2956:	3240      	adds	r2, #64	; 0x40
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2958:	2100      	movs	r1, #0
    295a:	7019      	strb	r1, [r3, #0]
    295c:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    295e:	4293      	cmp	r3, r2
    2960:	d1fb      	bne.n	295a <nwkRxInit+0xa>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2962:	4b07      	ldr	r3, [pc, #28]	; (2980 <nwkRxInit+0x30>)
    2964:	2264      	movs	r2, #100	; 0x64
    2966:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2968:	2200      	movs	r2, #0
    296a:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    296c:	4a05      	ldr	r2, [pc, #20]	; (2984 <nwkRxInit+0x34>)
    296e:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2970:	4905      	ldr	r1, [pc, #20]	; (2988 <nwkRxInit+0x38>)
    2972:	2000      	movs	r0, #0
    2974:	4b05      	ldr	r3, [pc, #20]	; (298c <nwkRxInit+0x3c>)
    2976:	4798      	blx	r3
}
    2978:	bd10      	pop	{r4, pc}
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	20000708 	.word	0x20000708
    2980:	20000744 	.word	0x20000744
    2984:	00002919 	.word	0x00002919
    2988:	000028e5 	.word	0x000028e5
    298c:	000027c1 	.word	0x000027c1

00002990 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2990:	2300      	movs	r3, #0
    2992:	4a02      	ldr	r2, [pc, #8]	; (299c <nwkSecurityInit+0xc>)
    2994:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2996:	4a02      	ldr	r2, [pc, #8]	; (29a0 <nwkSecurityInit+0x10>)
    2998:	6013      	str	r3, [r2, #0]
}
    299a:	4770      	bx	lr
    299c:	2000075c 	.word	0x2000075c
    29a0:	20000758 	.word	0x20000758

000029a4 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    29a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29a6:	b083      	sub	sp, #12
    29a8:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    29aa:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    29ac:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    29ae:	4d11      	ldr	r5, [pc, #68]	; (29f4 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    29b0:	2686      	movs	r6, #134	; 0x86
    29b2:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    29b4:	47a8      	blx	r5
    29b6:	2800      	cmp	r0, #0
    29b8:	d013      	beq.n	29e2 <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    29ba:	7803      	ldrb	r3, [r0, #0]
    29bc:	2b11      	cmp	r3, #17
    29be:	d1f9      	bne.n	29b4 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    29c0:	5d82      	ldrb	r2, [r0, r6]
    29c2:	5dc3      	ldrb	r3, [r0, r7]
    29c4:	021b      	lsls	r3, r3, #8
    29c6:	4313      	orrs	r3, r2
    29c8:	3b01      	subs	r3, #1
    29ca:	b29b      	uxth	r3, r3
    29cc:	5583      	strb	r3, [r0, r6]
    29ce:	0a19      	lsrs	r1, r3, #8
    29d0:	0002      	movs	r2, r0
    29d2:	3286      	adds	r2, #134	; 0x86
    29d4:	7051      	strb	r1, [r2, #1]
			restart = true;
    29d6:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    29d8:	2b00      	cmp	r3, #0
    29da:	d1eb      	bne.n	29b4 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    29dc:	3313      	adds	r3, #19
    29de:	7003      	strb	r3, [r0, #0]
    29e0:	e7e8      	b.n	29b4 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    29e2:	2c00      	cmp	r4, #0
    29e4:	d101      	bne.n	29ea <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    29e6:	b003      	add	sp, #12
    29e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    29ea:	9801      	ldr	r0, [sp, #4]
    29ec:	4b02      	ldr	r3, [pc, #8]	; (29f8 <nwkTxDelayTimerHandler+0x54>)
    29ee:	4798      	blx	r3
}
    29f0:	e7f9      	b.n	29e6 <nwkTxDelayTimerHandler+0x42>
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	000027f1 	.word	0x000027f1
    29f8:	00002c25 	.word	0x00002c25

000029fc <nwkTxAckWaitTimerHandler>:
{
    29fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29fe:	b083      	sub	sp, #12
    2a00:	9001      	str	r0, [sp, #4]
	bool restart = false;
    2a02:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2a04:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2a06:	4d12      	ldr	r5, [pc, #72]	; (2a50 <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    2a08:	2686      	movs	r6, #134	; 0x86
    2a0a:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2a0c:	47a8      	blx	r5
    2a0e:	2800      	cmp	r0, #0
    2a10:	d016      	beq.n	2a40 <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2a12:	7803      	ldrb	r3, [r0, #0]
    2a14:	2b16      	cmp	r3, #22
    2a16:	d1f9      	bne.n	2a0c <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2a18:	5d82      	ldrb	r2, [r0, r6]
    2a1a:	5dc3      	ldrb	r3, [r0, r7]
    2a1c:	021b      	lsls	r3, r3, #8
    2a1e:	4313      	orrs	r3, r2
    2a20:	3b01      	subs	r3, #1
    2a22:	b29b      	uxth	r3, r3
    2a24:	5583      	strb	r3, [r0, r6]
    2a26:	0a19      	lsrs	r1, r3, #8
    2a28:	0002      	movs	r2, r0
    2a2a:	3286      	adds	r2, #134	; 0x86
    2a2c:	7051      	strb	r1, [r2, #1]
			restart = true;
    2a2e:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2a30:	2b00      	cmp	r3, #0
    2a32:	d1eb      	bne.n	2a0c <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    2a34:	3317      	adds	r3, #23
    2a36:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2a38:	2210      	movs	r2, #16
    2a3a:	336e      	adds	r3, #110	; 0x6e
    2a3c:	54c2      	strb	r2, [r0, r3]
    2a3e:	e7e5      	b.n	2a0c <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    2a40:	2c00      	cmp	r4, #0
    2a42:	d101      	bne.n	2a48 <nwkTxAckWaitTimerHandler+0x4c>
}
    2a44:	b003      	add	sp, #12
    2a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2a48:	9801      	ldr	r0, [sp, #4]
    2a4a:	4b02      	ldr	r3, [pc, #8]	; (2a54 <nwkTxAckWaitTimerHandler+0x58>)
    2a4c:	4798      	blx	r3
}
    2a4e:	e7f9      	b.n	2a44 <nwkTxAckWaitTimerHandler+0x48>
    2a50:	000027f1 	.word	0x000027f1
    2a54:	00002c25 	.word	0x00002c25

00002a58 <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    2a58:	2200      	movs	r2, #0
    2a5a:	4b07      	ldr	r3, [pc, #28]	; (2a78 <nwkTxInit+0x20>)
    2a5c:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2a5e:	4b07      	ldr	r3, [pc, #28]	; (2a7c <nwkTxInit+0x24>)
    2a60:	2132      	movs	r1, #50	; 0x32
    2a62:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2a64:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2a66:	4906      	ldr	r1, [pc, #24]	; (2a80 <nwkTxInit+0x28>)
    2a68:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2a6a:	4b06      	ldr	r3, [pc, #24]	; (2a84 <nwkTxInit+0x2c>)
    2a6c:	210a      	movs	r1, #10
    2a6e:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2a70:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2a72:	4a05      	ldr	r2, [pc, #20]	; (2a88 <nwkTxInit+0x30>)
    2a74:	611a      	str	r2, [r3, #16]
}
    2a76:	4770      	bx	lr
    2a78:	20000788 	.word	0x20000788
    2a7c:	20000760 	.word	0x20000760
    2a80:	000029fd 	.word	0x000029fd
    2a84:	20000774 	.word	0x20000774
    2a88:	000029a5 	.word	0x000029a5

00002a8c <nwkTxAckReceived>:
{
    2a8c:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2a8e:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2a90:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2a92:	2a03      	cmp	r2, #3
    2a94:	d001      	beq.n	2a9a <nwkTxAckReceived+0xe>
}
    2a96:	0018      	movs	r0, r3
    2a98:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2a9a:	6885      	ldr	r5, [r0, #8]
    2a9c:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2a9e:	4c0a      	ldr	r4, [pc, #40]	; (2ac8 <nwkTxAckReceived+0x3c>)
    2aa0:	47a0      	blx	r4
    2aa2:	2800      	cmp	r0, #0
    2aa4:	d00d      	beq.n	2ac2 <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2aa6:	7803      	ldrb	r3, [r0, #0]
    2aa8:	2b16      	cmp	r3, #22
    2aaa:	d1f9      	bne.n	2aa0 <nwkTxAckReceived+0x14>
    2aac:	7b02      	ldrb	r2, [r0, #12]
    2aae:	786b      	ldrb	r3, [r5, #1]
    2ab0:	429a      	cmp	r2, r3
    2ab2:	d1f5      	bne.n	2aa0 <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    2ab4:	2317      	movs	r3, #23
    2ab6:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2ab8:	78aa      	ldrb	r2, [r5, #2]
    2aba:	3371      	adds	r3, #113	; 0x71
    2abc:	54c2      	strb	r2, [r0, r3]
			return true;
    2abe:	3b87      	subs	r3, #135	; 0x87
    2ac0:	e7e9      	b.n	2a96 <nwkTxAckReceived+0xa>
	return false;
    2ac2:	2300      	movs	r3, #0
    2ac4:	e7e7      	b.n	2a96 <nwkTxAckReceived+0xa>
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	000027f1 	.word	0x000027f1

00002acc <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2acc:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2ace:	4b0e      	ldr	r3, [pc, #56]	; (2b08 <PHY_Init+0x3c>)
    2ad0:	4798      	blx	r3
	PhyReset();
    2ad2:	4b0e      	ldr	r3, [pc, #56]	; (2b0c <PHY_Init+0x40>)
    2ad4:	4798      	blx	r3
	phyRxState = false;
    2ad6:	2200      	movs	r2, #0
    2ad8:	4b0d      	ldr	r3, [pc, #52]	; (2b10 <PHY_Init+0x44>)
    2ada:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2adc:	3201      	adds	r2, #1
    2ade:	4b0d      	ldr	r3, [pc, #52]	; (2b14 <PHY_Init+0x48>)
    2ae0:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2ae2:	4e0d      	ldr	r6, [pc, #52]	; (2b18 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2ae4:	4d0d      	ldr	r5, [pc, #52]	; (2b1c <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2ae6:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2ae8:	2108      	movs	r1, #8
    2aea:	2002      	movs	r0, #2
    2aec:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2aee:	2001      	movs	r0, #1
    2af0:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2af2:	4020      	ands	r0, r4
    2af4:	2808      	cmp	r0, #8
    2af6:	d1f7      	bne.n	2ae8 <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    2af8:	212e      	movs	r1, #46	; 0x2e
    2afa:	3804      	subs	r0, #4
    2afc:	4c06      	ldr	r4, [pc, #24]	; (2b18 <PHY_Init+0x4c>)
    2afe:	47a0      	blx	r4
    2b00:	21a0      	movs	r1, #160	; 0xa0
    2b02:	200c      	movs	r0, #12
    2b04:	47a0      	blx	r4
}
    2b06:	bd70      	pop	{r4, r5, r6, pc}
    2b08:	00002ded 	.word	0x00002ded
    2b0c:	00002f09 	.word	0x00002f09
    2b10:	2000078c 	.word	0x2000078c
    2b14:	2000078d 	.word	0x2000078d
    2b18:	00003035 	.word	0x00003035
    2b1c:	00002f39 	.word	0x00002f39

00002b20 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2b20:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2b22:	4b04      	ldr	r3, [pc, #16]	; (2b34 <SYS_Init+0x14>)
    2b24:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2b26:	4b04      	ldr	r3, [pc, #16]	; (2b38 <SYS_Init+0x18>)
    2b28:	4798      	blx	r3
#endif
	PHY_Init();
    2b2a:	4b04      	ldr	r3, [pc, #16]	; (2b3c <SYS_Init+0x1c>)
    2b2c:	4798      	blx	r3
	NWK_Init();
    2b2e:	4b04      	ldr	r3, [pc, #16]	; (2b40 <SYS_Init+0x20>)
    2b30:	4798      	blx	r3
}
    2b32:	bd10      	pop	{r4, pc}
    2b34:	00002bbd 	.word	0x00002bbd
    2b38:	00002dcd 	.word	0x00002dcd
    2b3c:	00002acd 	.word	0x00002acd
    2b40:	0000276d 	.word	0x0000276d

00002b44 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2b44:	b530      	push	{r4, r5, lr}
	if (timers) {
    2b46:	4b14      	ldr	r3, [pc, #80]	; (2b98 <placeTimer+0x54>)
    2b48:	681d      	ldr	r5, [r3, #0]
    2b4a:	2d00      	cmp	r5, #0
    2b4c:	d01c      	beq.n	2b88 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2b4e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2b50:	6869      	ldr	r1, [r5, #4]
    2b52:	428a      	cmp	r2, r1
    2b54:	d309      	bcc.n	2b6a <placeTimer+0x26>
    2b56:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2b58:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2b5a:	6823      	ldr	r3, [r4, #0]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d008      	beq.n	2b72 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2b60:	6859      	ldr	r1, [r3, #4]
    2b62:	4291      	cmp	r1, r2
    2b64:	d803      	bhi.n	2b6e <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2b66:	001c      	movs	r4, r3
    2b68:	e7f6      	b.n	2b58 <placeTimer+0x14>
    2b6a:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2b6c:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2b6e:	1a89      	subs	r1, r1, r2
    2b70:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2b72:	6042      	str	r2, [r0, #4]

		if (prev) {
    2b74:	2c00      	cmp	r4, #0
    2b76:	d003      	beq.n	2b80 <placeTimer+0x3c>
			timer->next = prev->next;
    2b78:	6823      	ldr	r3, [r4, #0]
    2b7a:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2b7c:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2b7e:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2b80:	6005      	str	r5, [r0, #0]
			timers = timer;
    2b82:	4b05      	ldr	r3, [pc, #20]	; (2b98 <placeTimer+0x54>)
    2b84:	6018      	str	r0, [r3, #0]
    2b86:	e7fa      	b.n	2b7e <placeTimer+0x3a>
		timer->next = NULL;
    2b88:	2300      	movs	r3, #0
    2b8a:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2b8c:	6883      	ldr	r3, [r0, #8]
    2b8e:	6043      	str	r3, [r0, #4]
		timers = timer;
    2b90:	4b01      	ldr	r3, [pc, #4]	; (2b98 <placeTimer+0x54>)
    2b92:	6018      	str	r0, [r3, #0]
}
    2b94:	e7f3      	b.n	2b7e <placeTimer+0x3a>
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	20000790 	.word	0x20000790

00002b9c <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2b9c:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2b9e:	4a04      	ldr	r2, [pc, #16]	; (2bb0 <SYS_HwExpiry_Cb+0x14>)
    2ba0:	7813      	ldrb	r3, [r2, #0]
    2ba2:	3301      	adds	r3, #1
    2ba4:	b2db      	uxtb	r3, r3
    2ba6:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2ba8:	4802      	ldr	r0, [pc, #8]	; (2bb4 <SYS_HwExpiry_Cb+0x18>)
    2baa:	4b03      	ldr	r3, [pc, #12]	; (2bb8 <SYS_HwExpiry_Cb+0x1c>)
    2bac:	4798      	blx	r3
}
    2bae:	bd10      	pop	{r4, pc}
    2bb0:	20000970 	.word	0x20000970
    2bb4:	00002710 	.word	0x00002710
    2bb8:	00003201 	.word	0x00003201

00002bbc <SYS_TimerInit>:
{
    2bbc:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2bbe:	2400      	movs	r4, #0
    2bc0:	4b06      	ldr	r3, [pc, #24]	; (2bdc <SYS_TimerInit+0x20>)
    2bc2:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2bc4:	4806      	ldr	r0, [pc, #24]	; (2be0 <SYS_TimerInit+0x24>)
    2bc6:	4b07      	ldr	r3, [pc, #28]	; (2be4 <SYS_TimerInit+0x28>)
    2bc8:	4798      	blx	r3
	common_tc_init();
    2bca:	4b07      	ldr	r3, [pc, #28]	; (2be8 <SYS_TimerInit+0x2c>)
    2bcc:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2bce:	4807      	ldr	r0, [pc, #28]	; (2bec <SYS_TimerInit+0x30>)
    2bd0:	4b07      	ldr	r3, [pc, #28]	; (2bf0 <SYS_TimerInit+0x34>)
    2bd2:	4798      	blx	r3
	timers = NULL;
    2bd4:	4b07      	ldr	r3, [pc, #28]	; (2bf4 <SYS_TimerInit+0x38>)
    2bd6:	601c      	str	r4, [r3, #0]
}
    2bd8:	bd10      	pop	{r4, pc}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	20000970 	.word	0x20000970
    2be0:	00002b9d 	.word	0x00002b9d
    2be4:	000032f1 	.word	0x000032f1
    2be8:	0000326d 	.word	0x0000326d
    2bec:	00002710 	.word	0x00002710
    2bf0:	00003201 	.word	0x00003201
    2bf4:	20000790 	.word	0x20000790

00002bf8 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2bf8:	4b09      	ldr	r3, [pc, #36]	; (2c20 <SYS_TimerStarted+0x28>)
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d00a      	beq.n	2c16 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2c00:	4283      	cmp	r3, r0
    2c02:	d00a      	beq.n	2c1a <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c04:	681b      	ldr	r3, [r3, #0]
    2c06:	2b00      	cmp	r3, #0
    2c08:	d003      	beq.n	2c12 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2c0a:	4298      	cmp	r0, r3
    2c0c:	d1fa      	bne.n	2c04 <SYS_TimerStarted+0xc>
			return true;
    2c0e:	2001      	movs	r0, #1
    2c10:	e000      	b.n	2c14 <SYS_TimerStarted+0x1c>
	return false;
    2c12:	2000      	movs	r0, #0
}
    2c14:	4770      	bx	lr
	return false;
    2c16:	2000      	movs	r0, #0
    2c18:	e7fc      	b.n	2c14 <SYS_TimerStarted+0x1c>
			return true;
    2c1a:	2001      	movs	r0, #1
    2c1c:	e7fa      	b.n	2c14 <SYS_TimerStarted+0x1c>
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	20000790 	.word	0x20000790

00002c24 <SYS_TimerStart>:
{
    2c24:	b510      	push	{r4, lr}
    2c26:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2c28:	4b04      	ldr	r3, [pc, #16]	; (2c3c <SYS_TimerStart+0x18>)
    2c2a:	4798      	blx	r3
    2c2c:	2800      	cmp	r0, #0
    2c2e:	d000      	beq.n	2c32 <SYS_TimerStart+0xe>
}
    2c30:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2c32:	0020      	movs	r0, r4
    2c34:	4b02      	ldr	r3, [pc, #8]	; (2c40 <SYS_TimerStart+0x1c>)
    2c36:	4798      	blx	r3
}
    2c38:	e7fa      	b.n	2c30 <SYS_TimerStart+0xc>
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	00002bf9 	.word	0x00002bf9
    2c40:	00002b45 	.word	0x00002b45

00002c44 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2c44:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2c46:	4b01      	ldr	r3, [pc, #4]	; (2c4c <tc_cca_callback+0x8>)
    2c48:	4798      	blx	r3
}
    2c4a:	bd10      	pop	{r4, pc}
    2c4c:	000032d5 	.word	0x000032d5

00002c50 <tc_ovf_callback>:
{
    2c50:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2c52:	4b01      	ldr	r3, [pc, #4]	; (2c58 <tc_ovf_callback+0x8>)
    2c54:	4798      	blx	r3
}
    2c56:	bd10      	pop	{r4, pc}
    2c58:	0000328d 	.word	0x0000328d

00002c5c <tmr_read_count>:
{
    2c5c:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2c5e:	4802      	ldr	r0, [pc, #8]	; (2c68 <tmr_read_count+0xc>)
    2c60:	4b02      	ldr	r3, [pc, #8]	; (2c6c <tmr_read_count+0x10>)
    2c62:	4798      	blx	r3
    2c64:	b280      	uxth	r0, r0
}
    2c66:	bd10      	pop	{r4, pc}
    2c68:	200009a8 	.word	0x200009a8
    2c6c:	00002539 	.word	0x00002539

00002c70 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2c70:	4b03      	ldr	r3, [pc, #12]	; (2c80 <tmr_disable_cc_interrupt+0x10>)
    2c72:	2110      	movs	r1, #16
    2c74:	681a      	ldr	r2, [r3, #0]
    2c76:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2c78:	7e5a      	ldrb	r2, [r3, #25]
    2c7a:	438a      	bics	r2, r1
    2c7c:	765a      	strb	r2, [r3, #25]
}
    2c7e:	4770      	bx	lr
    2c80:	200009a8 	.word	0x200009a8

00002c84 <tmr_enable_cc_interrupt>:
{
    2c84:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2c86:	4c0a      	ldr	r4, [pc, #40]	; (2cb0 <tmr_enable_cc_interrupt+0x2c>)
    2c88:	6820      	ldr	r0, [r4, #0]
    2c8a:	4b0a      	ldr	r3, [pc, #40]	; (2cb4 <tmr_enable_cc_interrupt+0x30>)
    2c8c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2c8e:	4b0a      	ldr	r3, [pc, #40]	; (2cb8 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2c90:	5c1b      	ldrb	r3, [r3, r0]
    2c92:	221f      	movs	r2, #31
    2c94:	401a      	ands	r2, r3
    2c96:	2301      	movs	r3, #1
    2c98:	4093      	lsls	r3, r2
    2c9a:	4a08      	ldr	r2, [pc, #32]	; (2cbc <tmr_enable_cc_interrupt+0x38>)
    2c9c:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2c9e:	7e63      	ldrb	r3, [r4, #25]
    2ca0:	2210      	movs	r2, #16
    2ca2:	4313      	orrs	r3, r2
    2ca4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2ca6:	6823      	ldr	r3, [r4, #0]
    2ca8:	2210      	movs	r2, #16
    2caa:	735a      	strb	r2, [r3, #13]
}
    2cac:	bd10      	pop	{r4, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	200009a8 	.word	0x200009a8
    2cb4:	000022c5 	.word	0x000022c5
    2cb8:	00008924 	.word	0x00008924
    2cbc:	e000e100 	.word	0xe000e100

00002cc0 <tmr_write_cmpreg>:
{
    2cc0:	b510      	push	{r4, lr}
    2cc2:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2cc4:	2100      	movs	r1, #0
    2cc6:	4802      	ldr	r0, [pc, #8]	; (2cd0 <tmr_write_cmpreg+0x10>)
    2cc8:	4b02      	ldr	r3, [pc, #8]	; (2cd4 <tmr_write_cmpreg+0x14>)
    2cca:	4798      	blx	r3
}
    2ccc:	bd10      	pop	{r4, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	200009a8 	.word	0x200009a8
    2cd4:	00002565 	.word	0x00002565

00002cd8 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cda:	46ce      	mov	lr, r9
    2cdc:	4647      	mov	r7, r8
    2cde:	b580      	push	{r7, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    2ce0:	4a2d      	ldr	r2, [pc, #180]	; (2d98 <tmr_init+0xc0>)
    2ce2:	2300      	movs	r3, #0
    2ce4:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2ce6:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2ce8:	2100      	movs	r1, #0
    2cea:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2cec:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2cee:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2cf0:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2cf2:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2cf4:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2cf6:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2cf8:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2cfa:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2cfc:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2cfe:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2d00:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2d02:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2d04:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2d06:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2d08:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2d0a:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2d0c:	3b01      	subs	r3, #1
    2d0e:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2d10:	4c22      	ldr	r4, [pc, #136]	; (2d9c <tmr_init+0xc4>)
    2d12:	4923      	ldr	r1, [pc, #140]	; (2da0 <tmr_init+0xc8>)
    2d14:	0020      	movs	r0, r4
    2d16:	4b23      	ldr	r3, [pc, #140]	; (2da4 <tmr_init+0xcc>)
    2d18:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2d1a:	2200      	movs	r2, #0
    2d1c:	4922      	ldr	r1, [pc, #136]	; (2da8 <tmr_init+0xd0>)
    2d1e:	0020      	movs	r0, r4
    2d20:	4d22      	ldr	r5, [pc, #136]	; (2dac <tmr_init+0xd4>)
    2d22:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2d24:	2202      	movs	r2, #2
    2d26:	4922      	ldr	r1, [pc, #136]	; (2db0 <tmr_init+0xd8>)
    2d28:	0020      	movs	r0, r4
    2d2a:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d2c:	6820      	ldr	r0, [r4, #0]
    2d2e:	4b21      	ldr	r3, [pc, #132]	; (2db4 <tmr_init+0xdc>)
    2d30:	4699      	mov	r9, r3
    2d32:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2d34:	4b20      	ldr	r3, [pc, #128]	; (2db8 <tmr_init+0xe0>)
    2d36:	4698      	mov	r8, r3
    2d38:	5c1b      	ldrb	r3, [r3, r0]
    2d3a:	261f      	movs	r6, #31
    2d3c:	4033      	ands	r3, r6
    2d3e:	2501      	movs	r5, #1
    2d40:	002a      	movs	r2, r5
    2d42:	409a      	lsls	r2, r3
    2d44:	4f1d      	ldr	r7, [pc, #116]	; (2dbc <tmr_init+0xe4>)
    2d46:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2d48:	7e63      	ldrb	r3, [r4, #25]
    2d4a:	2201      	movs	r2, #1
    2d4c:	4313      	orrs	r3, r2
    2d4e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2d50:	6823      	ldr	r3, [r4, #0]
    2d52:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2d54:	0018      	movs	r0, r3
    2d56:	47c8      	blx	r9
    2d58:	4643      	mov	r3, r8
    2d5a:	5c1b      	ldrb	r3, [r3, r0]
    2d5c:	401e      	ands	r6, r3
    2d5e:	40b5      	lsls	r5, r6
    2d60:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2d62:	7e63      	ldrb	r3, [r4, #25]
    2d64:	2210      	movs	r2, #16
    2d66:	4313      	orrs	r3, r2
    2d68:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2d6a:	6822      	ldr	r2, [r4, #0]
    2d6c:	2310      	movs	r3, #16
    2d6e:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2d70:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2d72:	b25b      	sxtb	r3, r3
    2d74:	2b00      	cmp	r3, #0
    2d76:	dbfb      	blt.n	2d70 <tmr_init+0x98>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2d78:	8813      	ldrh	r3, [r2, #0]
    2d7a:	2102      	movs	r1, #2
    2d7c:	430b      	orrs	r3, r1
    2d7e:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2d80:	2000      	movs	r0, #0
    2d82:	4b0f      	ldr	r3, [pc, #60]	; (2dc0 <tmr_init+0xe8>)
    2d84:	4798      	blx	r3
    2d86:	490f      	ldr	r1, [pc, #60]	; (2dc4 <tmr_init+0xec>)
    2d88:	4b0f      	ldr	r3, [pc, #60]	; (2dc8 <tmr_init+0xf0>)
    2d8a:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2d8c:	b2c0      	uxtb	r0, r0
}
    2d8e:	bc0c      	pop	{r2, r3}
    2d90:	4690      	mov	r8, r2
    2d92:	4699      	mov	r9, r3
    2d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	20000974 	.word	0x20000974
    2d9c:	200009a8 	.word	0x200009a8
    2da0:	42002c00 	.word	0x42002c00
    2da4:	000022fd 	.word	0x000022fd
    2da8:	00002c51 	.word	0x00002c51
    2dac:	000021fd 	.word	0x000021fd
    2db0:	00002c45 	.word	0x00002c45
    2db4:	000022c5 	.word	0x000022c5
    2db8:	00008924 	.word	0x00008924
    2dbc:	e000e100 	.word	0xe000e100
    2dc0:	00001f8d 	.word	0x00001f8d
    2dc4:	000f4240 	.word	0x000f4240
    2dc8:	00005d15 	.word	0x00005d15

00002dcc <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2dcc:	4770      	bx	lr
	...

00002dd0 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2dd0:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    2dd2:	2201      	movs	r2, #1
    2dd4:	4b03      	ldr	r3, [pc, #12]	; (2de4 <AT86RFX_ISR+0x14>)
    2dd6:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2dd8:	4b03      	ldr	r3, [pc, #12]	; (2de8 <AT86RFX_ISR+0x18>)
    2dda:	681b      	ldr	r3, [r3, #0]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d000      	beq.n	2de2 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2de0:	4798      	blx	r3
	}
}
    2de2:	bd10      	pop	{r4, pc}
    2de4:	40001800 	.word	0x40001800
    2de8:	20000794 	.word	0x20000794

00002dec <trx_spi_init>:

void trx_spi_init(void)
{
    2dec:	b530      	push	{r4, r5, lr}
    2dee:	b085      	sub	sp, #20
	config->address_enabled = false;
    2df0:	4a34      	ldr	r2, [pc, #208]	; (2ec4 <trx_spi_init+0xd8>)
    2df2:	2300      	movs	r3, #0
    2df4:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    2df6:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    2df8:	213f      	movs	r1, #63	; 0x3f
    2dfa:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    2dfc:	4c32      	ldr	r4, [pc, #200]	; (2ec8 <trx_spi_init+0xdc>)
    2dfe:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2e00:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2e02:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2e04:	2201      	movs	r2, #1
    2e06:	4669      	mov	r1, sp
    2e08:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2e0a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2e0c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2e0e:	203f      	movs	r0, #63	; 0x3f
    2e10:	4b2e      	ldr	r3, [pc, #184]	; (2ecc <trx_spi_init+0xe0>)
    2e12:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2e14:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    2e16:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2e18:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2e1a:	2900      	cmp	r1, #0
    2e1c:	d104      	bne.n	2e28 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2e1e:	0953      	lsrs	r3, r2, #5
    2e20:	01db      	lsls	r3, r3, #7
    2e22:	492b      	ldr	r1, [pc, #172]	; (2ed0 <trx_spi_init+0xe4>)
    2e24:	468c      	mov	ip, r1
    2e26:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2e28:	211f      	movs	r1, #31
    2e2a:	4011      	ands	r1, r2
    2e2c:	2201      	movs	r2, #1
    2e2e:	0010      	movs	r0, r2
    2e30:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    2e32:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    2e34:	4c27      	ldr	r4, [pc, #156]	; (2ed4 <trx_spi_init+0xe8>)
    2e36:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2e38:	2300      	movs	r3, #0
    2e3a:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2e3c:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2e3e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2e40:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2e42:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2e44:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    2e46:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2e48:	3223      	adds	r2, #35	; 0x23
    2e4a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2e4c:	0020      	movs	r0, r4
    2e4e:	3018      	adds	r0, #24
    2e50:	3a18      	subs	r2, #24
    2e52:	2100      	movs	r1, #0
    2e54:	4b20      	ldr	r3, [pc, #128]	; (2ed8 <trx_spi_init+0xec>)
    2e56:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    2e58:	2380      	movs	r3, #128	; 0x80
    2e5a:	025b      	lsls	r3, r3, #9
    2e5c:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    2e5e:	4b1f      	ldr	r3, [pc, #124]	; (2edc <trx_spi_init+0xf0>)
    2e60:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    2e62:	4b1f      	ldr	r3, [pc, #124]	; (2ee0 <trx_spi_init+0xf4>)
    2e64:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    2e66:	2301      	movs	r3, #1
    2e68:	425b      	negs	r3, r3
    2e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    2e6c:	4b1d      	ldr	r3, [pc, #116]	; (2ee4 <trx_spi_init+0xf8>)
    2e6e:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    2e70:	4b1d      	ldr	r3, [pc, #116]	; (2ee8 <trx_spi_init+0xfc>)
    2e72:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    2e74:	4d1d      	ldr	r5, [pc, #116]	; (2eec <trx_spi_init+0x100>)
    2e76:	0022      	movs	r2, r4
    2e78:	491d      	ldr	r1, [pc, #116]	; (2ef0 <trx_spi_init+0x104>)
    2e7a:	0028      	movs	r0, r5
    2e7c:	4b1d      	ldr	r3, [pc, #116]	; (2ef4 <trx_spi_init+0x108>)
    2e7e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2e80:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2e82:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2e84:	2b00      	cmp	r3, #0
    2e86:	d1fc      	bne.n	2e82 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2e88:	6813      	ldr	r3, [r2, #0]
    2e8a:	2502      	movs	r5, #2
    2e8c:	432b      	orrs	r3, r5
    2e8e:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2e90:	ac01      	add	r4, sp, #4
    2e92:	0020      	movs	r0, r4
    2e94:	4b18      	ldr	r3, [pc, #96]	; (2ef8 <trx_spi_init+0x10c>)
    2e96:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    2e98:	2320      	movs	r3, #32
    2e9a:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    2e9c:	2380      	movs	r3, #128	; 0x80
    2e9e:	039b      	lsls	r3, r3, #14
    2ea0:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    2ea2:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    2ea4:	2301      	movs	r3, #1
    2ea6:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    2ea8:	2200      	movs	r2, #0
    2eaa:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    2eac:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    2eae:	0021      	movs	r1, r4
    2eb0:	2000      	movs	r0, #0
    2eb2:	4b12      	ldr	r3, [pc, #72]	; (2efc <trx_spi_init+0x110>)
    2eb4:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    2eb6:	2200      	movs	r2, #0
    2eb8:	2100      	movs	r1, #0
    2eba:	4811      	ldr	r0, [pc, #68]	; (2f00 <trx_spi_init+0x114>)
    2ebc:	4b11      	ldr	r3, [pc, #68]	; (2f04 <trx_spi_init+0x118>)
    2ebe:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    2ec0:	b005      	add	sp, #20
    2ec2:	bd30      	pop	{r4, r5, pc}
    2ec4:	200009c8 	.word	0x200009c8
    2ec8:	200009cc 	.word	0x200009cc
    2ecc:	00000a5d 	.word	0x00000a5d
    2ed0:	41004400 	.word	0x41004400
    2ed4:	200009d0 	.word	0x200009d0
    2ed8:	00003357 	.word	0x00003357
    2edc:	004c4b40 	.word	0x004c4b40
    2ee0:	00530005 	.word	0x00530005
    2ee4:	003e0005 	.word	0x003e0005
    2ee8:	00520005 	.word	0x00520005
    2eec:	20000a08 	.word	0x20000a08
    2ef0:	42001800 	.word	0x42001800
    2ef4:	00000f45 	.word	0x00000f45
    2ef8:	000009d1 	.word	0x000009d1
    2efc:	000009e5 	.word	0x000009e5
    2f00:	00002dd1 	.word	0x00002dd1
    2f04:	000008cd 	.word	0x000008cd

00002f08 <PhyReset>:

void PhyReset(void)
{
    2f08:	b570      	push	{r4, r5, r6, lr}
    2f0a:	4c08      	ldr	r4, [pc, #32]	; (2f2c <PhyReset+0x24>)
    2f0c:	2580      	movs	r5, #128	; 0x80
    2f0e:	022d      	lsls	r5, r5, #8
    2f10:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    2f12:	2280      	movs	r2, #128	; 0x80
    2f14:	0352      	lsls	r2, r2, #13
    2f16:	4b06      	ldr	r3, [pc, #24]	; (2f30 <PhyReset+0x28>)
    2f18:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    2f1a:	20a5      	movs	r0, #165	; 0xa5
    2f1c:	0040      	lsls	r0, r0, #1
    2f1e:	4e05      	ldr	r6, [pc, #20]	; (2f34 <PhyReset+0x2c>)
    2f20:	47b0      	blx	r6
    2f22:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    2f24:	200a      	movs	r0, #10
    2f26:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    2f28:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    2f2a:	bd70      	pop	{r4, r5, r6, pc}
    2f2c:	41004480 	.word	0x41004480
    2f30:	41004400 	.word	0x41004400
    2f34:	0000075d 	.word	0x0000075d

00002f38 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    2f38:	b570      	push	{r4, r5, r6, lr}
    2f3a:	b082      	sub	sp, #8
    2f3c:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f3e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2f42:	425a      	negs	r2, r3
    2f44:	4153      	adcs	r3, r2
    2f46:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2f48:	b672      	cpsid	i
    2f4a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2f4e:	2200      	movs	r2, #0
    2f50:	4b33      	ldr	r3, [pc, #204]	; (3020 <trx_reg_read+0xe8>)
    2f52:	701a      	strb	r2, [r3, #0]
	return flags;
    2f54:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    2f56:	4e33      	ldr	r6, [pc, #204]	; (3024 <trx_reg_read+0xec>)
    2f58:	3201      	adds	r2, #1
    2f5a:	4933      	ldr	r1, [pc, #204]	; (3028 <trx_reg_read+0xf0>)
    2f5c:	0030      	movs	r0, r6
    2f5e:	4b33      	ldr	r3, [pc, #204]	; (302c <trx_reg_read+0xf4>)
    2f60:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2f62:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    2f64:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2f66:	7e1a      	ldrb	r2, [r3, #24]
    2f68:	420a      	tst	r2, r1
    2f6a:	d0fc      	beq.n	2f66 <trx_reg_read+0x2e>
    2f6c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2f6e:	07d2      	lsls	r2, r2, #31
    2f70:	d502      	bpl.n	2f78 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2f72:	2280      	movs	r2, #128	; 0x80
    2f74:	4315      	orrs	r5, r2
    2f76:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    2f78:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2f7a:	7e1a      	ldrb	r2, [r3, #24]
    2f7c:	420a      	tst	r2, r1
    2f7e:	d0fc      	beq.n	2f7a <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    2f80:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2f82:	7e1a      	ldrb	r2, [r3, #24]
    2f84:	420a      	tst	r2, r1
    2f86:	d0fc      	beq.n	2f82 <trx_reg_read+0x4a>
    2f88:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    2f8a:	0752      	lsls	r2, r2, #29
    2f8c:	d50c      	bpl.n	2fa8 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2f8e:	8b5a      	ldrh	r2, [r3, #26]
    2f90:	0752      	lsls	r2, r2, #29
    2f92:	d501      	bpl.n	2f98 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2f94:	2204      	movs	r2, #4
    2f96:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2f98:	4a22      	ldr	r2, [pc, #136]	; (3024 <trx_reg_read+0xec>)
    2f9a:	7992      	ldrb	r2, [r2, #6]
    2f9c:	2a01      	cmp	r2, #1
    2f9e:	d034      	beq.n	300a <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fa2:	b2d2      	uxtb	r2, r2
    2fa4:	4922      	ldr	r1, [pc, #136]	; (3030 <trx_reg_read+0xf8>)
    2fa6:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    2fa8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2faa:	7e1a      	ldrb	r2, [r3, #24]
    2fac:	420a      	tst	r2, r1
    2fae:	d0fc      	beq.n	2faa <trx_reg_read+0x72>
    2fb0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2fb2:	07d2      	lsls	r2, r2, #31
    2fb4:	d501      	bpl.n	2fba <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2fb6:	2200      	movs	r2, #0
    2fb8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    2fba:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2fbc:	7e1a      	ldrb	r2, [r3, #24]
    2fbe:	420a      	tst	r2, r1
    2fc0:	d0fc      	beq.n	2fbc <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    2fc2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2fc4:	7e1a      	ldrb	r2, [r3, #24]
    2fc6:	420a      	tst	r2, r1
    2fc8:	d0fc      	beq.n	2fc4 <trx_reg_read+0x8c>
    2fca:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    2fcc:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    2fce:	0752      	lsls	r2, r2, #29
    2fd0:	d50a      	bpl.n	2fe8 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2fd2:	8b5a      	ldrh	r2, [r3, #26]
    2fd4:	0752      	lsls	r2, r2, #29
    2fd6:	d501      	bpl.n	2fdc <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2fd8:	2204      	movs	r2, #4
    2fda:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2fdc:	4a11      	ldr	r2, [pc, #68]	; (3024 <trx_reg_read+0xec>)
    2fde:	7992      	ldrb	r2, [r2, #6]
    2fe0:	2a01      	cmp	r2, #1
    2fe2:	d018      	beq.n	3016 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2fe4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    2fe6:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    2fe8:	2200      	movs	r2, #0
    2fea:	490f      	ldr	r1, [pc, #60]	; (3028 <trx_reg_read+0xf0>)
    2fec:	480d      	ldr	r0, [pc, #52]	; (3024 <trx_reg_read+0xec>)
    2fee:	4b0f      	ldr	r3, [pc, #60]	; (302c <trx_reg_read+0xf4>)
    2ff0:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2ff2:	23ff      	movs	r3, #255	; 0xff
    2ff4:	4223      	tst	r3, r4
    2ff6:	d005      	beq.n	3004 <trx_reg_read+0xcc>
		cpu_irq_enable();
    2ff8:	2201      	movs	r2, #1
    2ffa:	4b09      	ldr	r3, [pc, #36]	; (3020 <trx_reg_read+0xe8>)
    2ffc:	701a      	strb	r2, [r3, #0]
    2ffe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3002:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3004:	b2e8      	uxtb	r0, r5
}
    3006:	b002      	add	sp, #8
    3008:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    300a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    300c:	05d2      	lsls	r2, r2, #23
    300e:	0dd2      	lsrs	r2, r2, #23
    3010:	4907      	ldr	r1, [pc, #28]	; (3030 <trx_reg_read+0xf8>)
    3012:	800a      	strh	r2, [r1, #0]
    3014:	e7c8      	b.n	2fa8 <trx_reg_read+0x70>
    3016:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3018:	05ed      	lsls	r5, r5, #23
    301a:	0ded      	lsrs	r5, r5, #23
    301c:	e7e4      	b.n	2fe8 <trx_reg_read+0xb0>
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	20000008 	.word	0x20000008
    3024:	20000a08 	.word	0x20000a08
    3028:	200009cc 	.word	0x200009cc
    302c:	00001209 	.word	0x00001209
    3030:	200009c4 	.word	0x200009c4

00003034 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3034:	b5f0      	push	{r4, r5, r6, r7, lr}
    3036:	b083      	sub	sp, #12
    3038:	0006      	movs	r6, r0
    303a:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    303c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3040:	425a      	negs	r2, r3
    3042:	4153      	adcs	r3, r2
    3044:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3046:	b672      	cpsid	i
    3048:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    304c:	2200      	movs	r2, #0
    304e:	4b34      	ldr	r3, [pc, #208]	; (3120 <trx_reg_write+0xec>)
    3050:	701a      	strb	r2, [r3, #0]
	return flags;
    3052:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3054:	4f33      	ldr	r7, [pc, #204]	; (3124 <trx_reg_write+0xf0>)
    3056:	3201      	adds	r2, #1
    3058:	4933      	ldr	r1, [pc, #204]	; (3128 <trx_reg_write+0xf4>)
    305a:	0038      	movs	r0, r7
    305c:	4b33      	ldr	r3, [pc, #204]	; (312c <trx_reg_write+0xf8>)
    305e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3060:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3062:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3064:	7e1a      	ldrb	r2, [r3, #24]
    3066:	420a      	tst	r2, r1
    3068:	d0fc      	beq.n	3064 <trx_reg_write+0x30>
    306a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    306c:	07d2      	lsls	r2, r2, #31
    306e:	d502      	bpl.n	3076 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3070:	22c0      	movs	r2, #192	; 0xc0
    3072:	4316      	orrs	r6, r2
    3074:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3076:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3078:	7e1a      	ldrb	r2, [r3, #24]
    307a:	420a      	tst	r2, r1
    307c:	d0fc      	beq.n	3078 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    307e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3080:	7e1a      	ldrb	r2, [r3, #24]
    3082:	420a      	tst	r2, r1
    3084:	d0fc      	beq.n	3080 <trx_reg_write+0x4c>
    3086:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3088:	0752      	lsls	r2, r2, #29
    308a:	d50c      	bpl.n	30a6 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    308c:	8b5a      	ldrh	r2, [r3, #26]
    308e:	0752      	lsls	r2, r2, #29
    3090:	d501      	bpl.n	3096 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3092:	2204      	movs	r2, #4
    3094:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3096:	4a23      	ldr	r2, [pc, #140]	; (3124 <trx_reg_write+0xf0>)
    3098:	7992      	ldrb	r2, [r2, #6]
    309a:	2a01      	cmp	r2, #1
    309c:	d033      	beq.n	3106 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    309e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30a0:	b2d2      	uxtb	r2, r2
    30a2:	4923      	ldr	r1, [pc, #140]	; (3130 <trx_reg_write+0xfc>)
    30a4:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    30a6:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    30a8:	7e1a      	ldrb	r2, [r3, #24]
    30aa:	420a      	tst	r2, r1
    30ac:	d0fc      	beq.n	30a8 <trx_reg_write+0x74>
    30ae:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    30b0:	07d2      	lsls	r2, r2, #31
    30b2:	d500      	bpl.n	30b6 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    30b4:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    30b6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    30b8:	7e1a      	ldrb	r2, [r3, #24]
    30ba:	420a      	tst	r2, r1
    30bc:	d0fc      	beq.n	30b8 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    30be:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    30c0:	7e1a      	ldrb	r2, [r3, #24]
    30c2:	420a      	tst	r2, r1
    30c4:	d0fc      	beq.n	30c0 <trx_reg_write+0x8c>
    30c6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    30c8:	0752      	lsls	r2, r2, #29
    30ca:	d50c      	bpl.n	30e6 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    30cc:	8b5a      	ldrh	r2, [r3, #26]
    30ce:	0752      	lsls	r2, r2, #29
    30d0:	d501      	bpl.n	30d6 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    30d2:	2204      	movs	r2, #4
    30d4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    30d6:	4a13      	ldr	r2, [pc, #76]	; (3124 <trx_reg_write+0xf0>)
    30d8:	7992      	ldrb	r2, [r2, #6]
    30da:	2a01      	cmp	r2, #1
    30dc:	d019      	beq.n	3112 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    30de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30e0:	b2db      	uxtb	r3, r3
    30e2:	4a13      	ldr	r2, [pc, #76]	; (3130 <trx_reg_write+0xfc>)
    30e4:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    30e6:	2200      	movs	r2, #0
    30e8:	490f      	ldr	r1, [pc, #60]	; (3128 <trx_reg_write+0xf4>)
    30ea:	480e      	ldr	r0, [pc, #56]	; (3124 <trx_reg_write+0xf0>)
    30ec:	4b0f      	ldr	r3, [pc, #60]	; (312c <trx_reg_write+0xf8>)
    30ee:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    30f0:	23ff      	movs	r3, #255	; 0xff
    30f2:	422b      	tst	r3, r5
    30f4:	d005      	beq.n	3102 <trx_reg_write+0xce>
		cpu_irq_enable();
    30f6:	2201      	movs	r2, #1
    30f8:	4b09      	ldr	r3, [pc, #36]	; (3120 <trx_reg_write+0xec>)
    30fa:	701a      	strb	r2, [r3, #0]
    30fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3100:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3102:	b003      	add	sp, #12
    3104:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3108:	05d2      	lsls	r2, r2, #23
    310a:	0dd2      	lsrs	r2, r2, #23
    310c:	4908      	ldr	r1, [pc, #32]	; (3130 <trx_reg_write+0xfc>)
    310e:	800a      	strh	r2, [r1, #0]
    3110:	e7c9      	b.n	30a6 <trx_reg_write+0x72>
    3112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3114:	05db      	lsls	r3, r3, #23
    3116:	0ddb      	lsrs	r3, r3, #23
    3118:	4a05      	ldr	r2, [pc, #20]	; (3130 <trx_reg_write+0xfc>)
    311a:	8013      	strh	r3, [r2, #0]
    311c:	e7e3      	b.n	30e6 <trx_reg_write+0xb2>
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	20000008 	.word	0x20000008
    3124:	20000a08 	.word	0x20000a08
    3128:	200009cc 	.word	0x200009cc
    312c:	00001209 	.word	0x00001209
    3130:	200009c4 	.word	0x200009c4

00003134 <setup>:
#include "sys.h"
#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    3136:	4b1a      	ldr	r3, [pc, #104]	; (31a0 <setup+0x6c>)
    3138:	4798      	blx	r3
	delay_init();
    313a:	4b1a      	ldr	r3, [pc, #104]	; (31a4 <setup+0x70>)
    313c:	4798      	blx	r3
	SYS_Init();	
    313e:	4b1a      	ldr	r3, [pc, #104]	; (31a8 <setup+0x74>)
    3140:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    3142:	4b1a      	ldr	r3, [pc, #104]	; (31ac <setup+0x78>)
    3144:	4798      	blx	r3
	artist_scheduler_tc_configure();
    3146:	4b1a      	ldr	r3, [pc, #104]	; (31b0 <setup+0x7c>)
    3148:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    314a:	4b1a      	ldr	r3, [pc, #104]	; (31b4 <setup+0x80>)
    314c:	4798      	blx	r3

	cpu_irq_enable();
    314e:	4e1a      	ldr	r6, [pc, #104]	; (31b8 <setup+0x84>)
    3150:	2701      	movs	r7, #1
    3152:	7037      	strb	r7, [r6, #0]
    3154:	f3bf 8f5f 	dmb	sy
    3158:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    315a:	4c18      	ldr	r4, [pc, #96]	; (31bc <setup+0x88>)
    315c:	220f      	movs	r2, #15
    315e:	211c      	movs	r1, #28
    3160:	0020      	movs	r0, r4
    3162:	4d17      	ldr	r5, [pc, #92]	; (31c0 <setup+0x8c>)
    3164:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    3166:	0020      	movs	r0, r4
    3168:	3810      	subs	r0, #16
    316a:	220f      	movs	r2, #15
    316c:	210d      	movs	r1, #13
    316e:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    3170:	0020      	movs	r0, r4
    3172:	3808      	subs	r0, #8
    3174:	220f      	movs	r2, #15
    3176:	2117      	movs	r1, #23
    3178:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    317a:	4b12      	ldr	r3, [pc, #72]	; (31c4 <setup+0x90>)
    317c:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    317e:	3c4c      	subs	r4, #76	; 0x4c
    3180:	0020      	movs	r0, r4
    3182:	4b11      	ldr	r3, [pc, #68]	; (31c8 <setup+0x94>)
    3184:	4798      	blx	r3
	cpu_irq_enable();
    3186:	7037      	strb	r7, [r6, #0]
    3188:	f3bf 8f5f 	dmb	sy
    318c:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    318e:	2205      	movs	r2, #5
    3190:	490e      	ldr	r1, [pc, #56]	; (31cc <setup+0x98>)
    3192:	0020      	movs	r0, r4
    3194:	4b0e      	ldr	r3, [pc, #56]	; (31d0 <setup+0x9c>)
    3196:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	printf("front node setup complete\n"); 
    3198:	480e      	ldr	r0, [pc, #56]	; (31d4 <setup+0xa0>)
    319a:	4b0f      	ldr	r3, [pc, #60]	; (31d8 <setup+0xa4>)
    319c:	4798      	blx	r3
	
}
    319e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31a0:	000021d1 	.word	0x000021d1
    31a4:	0000071d 	.word	0x0000071d
    31a8:	00002b21 	.word	0x00002b21
    31ac:	00000465 	.word	0x00000465
    31b0:	0000065d 	.word	0x0000065d
    31b4:	000006cd 	.word	0x000006cd
    31b8:	20000008 	.word	0x20000008
    31bc:	20000878 	.word	0x20000878
    31c0:	00000115 	.word	0x00000115
    31c4:	00000125 	.word	0x00000125
    31c8:	000004f9 	.word	0x000004f9
    31cc:	2000088c 	.word	0x2000088c
    31d0:	0000179d 	.word	0x0000179d
    31d4:	00008930 	.word	0x00008930
    31d8:	00003d3d 	.word	0x00003d3d

000031dc <main>:
	
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    31dc:	b510      	push	{r4, lr}
	setup();
    31de:	4b04      	ldr	r3, [pc, #16]	; (31f0 <main+0x14>)
    31e0:	4798      	blx	r3
	usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
    31e2:	2205      	movs	r2, #5
    31e4:	4903      	ldr	r1, [pc, #12]	; (31f4 <main+0x18>)
    31e6:	4804      	ldr	r0, [pc, #16]	; (31f8 <main+0x1c>)
    31e8:	4b04      	ldr	r3, [pc, #16]	; (31fc <main+0x20>)
    31ea:	4798      	blx	r3
    31ec:	e7fe      	b.n	31ec <main+0x10>
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00003135 	.word	0x00003135
    31f4:	00008928 	.word	0x00008928
    31f8:	2000082c 	.word	0x2000082c
    31fc:	0000177d 	.word	0x0000177d

00003200 <common_tc_delay>:
    3200:	b510      	push	{r4, lr}
    3202:	1c04      	adds	r4, r0, #0
    3204:	4b13      	ldr	r3, [pc, #76]	; (3254 <common_tc_delay+0x54>)
    3206:	4798      	blx	r3
    3208:	4b13      	ldr	r3, [pc, #76]	; (3258 <common_tc_delay+0x58>)
    320a:	781a      	ldrb	r2, [r3, #0]
    320c:	4362      	muls	r2, r4
    320e:	1881      	adds	r1, r0, r2
    3210:	4b12      	ldr	r3, [pc, #72]	; (325c <common_tc_delay+0x5c>)
    3212:	6059      	str	r1, [r3, #4]
    3214:	6859      	ldr	r1, [r3, #4]
    3216:	0c09      	lsrs	r1, r1, #16
    3218:	6059      	str	r1, [r3, #4]
    321a:	685b      	ldr	r3, [r3, #4]
    321c:	2b00      	cmp	r3, #0
    321e:	d007      	beq.n	3230 <common_tc_delay+0x30>
    3220:	4b0e      	ldr	r3, [pc, #56]	; (325c <common_tc_delay+0x5c>)
    3222:	6859      	ldr	r1, [r3, #4]
    3224:	3201      	adds	r2, #1
    3226:	1880      	adds	r0, r0, r2
    3228:	8118      	strh	r0, [r3, #8]
    322a:	4b0d      	ldr	r3, [pc, #52]	; (3260 <common_tc_delay+0x60>)
    322c:	4798      	blx	r3
    322e:	e004      	b.n	323a <common_tc_delay+0x3a>
    3230:	1882      	adds	r2, r0, r2
    3232:	4b0a      	ldr	r3, [pc, #40]	; (325c <common_tc_delay+0x5c>)
    3234:	811a      	strh	r2, [r3, #8]
    3236:	4b0b      	ldr	r3, [pc, #44]	; (3264 <common_tc_delay+0x64>)
    3238:	4798      	blx	r3
    323a:	4b08      	ldr	r3, [pc, #32]	; (325c <common_tc_delay+0x5c>)
    323c:	891b      	ldrh	r3, [r3, #8]
    323e:	2b63      	cmp	r3, #99	; 0x63
    3240:	d802      	bhi.n	3248 <common_tc_delay+0x48>
    3242:	3364      	adds	r3, #100	; 0x64
    3244:	4a05      	ldr	r2, [pc, #20]	; (325c <common_tc_delay+0x5c>)
    3246:	8113      	strh	r3, [r2, #8]
    3248:	4b04      	ldr	r3, [pc, #16]	; (325c <common_tc_delay+0x5c>)
    324a:	8918      	ldrh	r0, [r3, #8]
    324c:	4b06      	ldr	r3, [pc, #24]	; (3268 <common_tc_delay+0x68>)
    324e:	4798      	blx	r3
    3250:	bd10      	pop	{r4, pc}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	00002c5d 	.word	0x00002c5d
    3258:	20000a14 	.word	0x20000a14
    325c:	20000798 	.word	0x20000798
    3260:	00002c71 	.word	0x00002c71
    3264:	00002c85 	.word	0x00002c85
    3268:	00002cc1 	.word	0x00002cc1

0000326c <common_tc_init>:
    326c:	b508      	push	{r3, lr}
    326e:	2200      	movs	r2, #0
    3270:	4b03      	ldr	r3, [pc, #12]	; (3280 <common_tc_init+0x14>)
    3272:	701a      	strb	r2, [r3, #0]
    3274:	4b03      	ldr	r3, [pc, #12]	; (3284 <common_tc_init+0x18>)
    3276:	4798      	blx	r3
    3278:	4b03      	ldr	r3, [pc, #12]	; (3288 <common_tc_init+0x1c>)
    327a:	7018      	strb	r0, [r3, #0]
    327c:	bd08      	pop	{r3, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	20000798 	.word	0x20000798
    3284:	00002cd9 	.word	0x00002cd9
    3288:	20000a14 	.word	0x20000a14

0000328c <tmr_ovf_callback>:
    328c:	b508      	push	{r3, lr}
    328e:	4b0e      	ldr	r3, [pc, #56]	; (32c8 <tmr_ovf_callback+0x3c>)
    3290:	685b      	ldr	r3, [r3, #4]
    3292:	2b00      	cmp	r3, #0
    3294:	d007      	beq.n	32a6 <tmr_ovf_callback+0x1a>
    3296:	4a0c      	ldr	r2, [pc, #48]	; (32c8 <tmr_ovf_callback+0x3c>)
    3298:	6853      	ldr	r3, [r2, #4]
    329a:	3b01      	subs	r3, #1
    329c:	6053      	str	r3, [r2, #4]
    329e:	2b00      	cmp	r3, #0
    32a0:	d101      	bne.n	32a6 <tmr_ovf_callback+0x1a>
    32a2:	4b0a      	ldr	r3, [pc, #40]	; (32cc <tmr_ovf_callback+0x40>)
    32a4:	4798      	blx	r3
    32a6:	4a08      	ldr	r2, [pc, #32]	; (32c8 <tmr_ovf_callback+0x3c>)
    32a8:	7813      	ldrb	r3, [r2, #0]
    32aa:	3301      	adds	r3, #1
    32ac:	b2db      	uxtb	r3, r3
    32ae:	7013      	strb	r3, [r2, #0]
    32b0:	4a07      	ldr	r2, [pc, #28]	; (32d0 <tmr_ovf_callback+0x44>)
    32b2:	7812      	ldrb	r2, [r2, #0]
    32b4:	429a      	cmp	r2, r3
    32b6:	d806      	bhi.n	32c6 <tmr_ovf_callback+0x3a>
    32b8:	4b03      	ldr	r3, [pc, #12]	; (32c8 <tmr_ovf_callback+0x3c>)
    32ba:	2200      	movs	r2, #0
    32bc:	701a      	strb	r2, [r3, #0]
    32be:	68db      	ldr	r3, [r3, #12]
    32c0:	2b00      	cmp	r3, #0
    32c2:	d000      	beq.n	32c6 <tmr_ovf_callback+0x3a>
    32c4:	4798      	blx	r3
    32c6:	bd08      	pop	{r3, pc}
    32c8:	20000798 	.word	0x20000798
    32cc:	00002c85 	.word	0x00002c85
    32d0:	20000a14 	.word	0x20000a14

000032d4 <tmr_cca_callback>:
    32d4:	b508      	push	{r3, lr}
    32d6:	4b04      	ldr	r3, [pc, #16]	; (32e8 <tmr_cca_callback+0x14>)
    32d8:	4798      	blx	r3
    32da:	4b04      	ldr	r3, [pc, #16]	; (32ec <tmr_cca_callback+0x18>)
    32dc:	691b      	ldr	r3, [r3, #16]
    32de:	2b00      	cmp	r3, #0
    32e0:	d000      	beq.n	32e4 <tmr_cca_callback+0x10>
    32e2:	4798      	blx	r3
    32e4:	bd08      	pop	{r3, pc}
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	00002c71 	.word	0x00002c71
    32ec:	20000798 	.word	0x20000798

000032f0 <set_common_tc_expiry_callback>:
    32f0:	4b01      	ldr	r3, [pc, #4]	; (32f8 <set_common_tc_expiry_callback+0x8>)
    32f2:	6118      	str	r0, [r3, #16]
    32f4:	4770      	bx	lr
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	20000798 	.word	0x20000798

000032fc <__libc_init_array>:
    32fc:	b570      	push	{r4, r5, r6, lr}
    32fe:	2600      	movs	r6, #0
    3300:	4d0c      	ldr	r5, [pc, #48]	; (3334 <__libc_init_array+0x38>)
    3302:	4c0d      	ldr	r4, [pc, #52]	; (3338 <__libc_init_array+0x3c>)
    3304:	1b64      	subs	r4, r4, r5
    3306:	10a4      	asrs	r4, r4, #2
    3308:	42a6      	cmp	r6, r4
    330a:	d109      	bne.n	3320 <__libc_init_array+0x24>
    330c:	2600      	movs	r6, #0
    330e:	f005 fd1f 	bl	8d50 <_init>
    3312:	4d0a      	ldr	r5, [pc, #40]	; (333c <__libc_init_array+0x40>)
    3314:	4c0a      	ldr	r4, [pc, #40]	; (3340 <__libc_init_array+0x44>)
    3316:	1b64      	subs	r4, r4, r5
    3318:	10a4      	asrs	r4, r4, #2
    331a:	42a6      	cmp	r6, r4
    331c:	d105      	bne.n	332a <__libc_init_array+0x2e>
    331e:	bd70      	pop	{r4, r5, r6, pc}
    3320:	00b3      	lsls	r3, r6, #2
    3322:	58eb      	ldr	r3, [r5, r3]
    3324:	4798      	blx	r3
    3326:	3601      	adds	r6, #1
    3328:	e7ee      	b.n	3308 <__libc_init_array+0xc>
    332a:	00b3      	lsls	r3, r6, #2
    332c:	58eb      	ldr	r3, [r5, r3]
    332e:	4798      	blx	r3
    3330:	3601      	adds	r6, #1
    3332:	e7f2      	b.n	331a <__libc_init_array+0x1e>
    3334:	00008d5c 	.word	0x00008d5c
    3338:	00008d5c 	.word	0x00008d5c
    333c:	00008d5c 	.word	0x00008d5c
    3340:	00008d60 	.word	0x00008d60

00003344 <memcpy>:
    3344:	2300      	movs	r3, #0
    3346:	b510      	push	{r4, lr}
    3348:	429a      	cmp	r2, r3
    334a:	d100      	bne.n	334e <memcpy+0xa>
    334c:	bd10      	pop	{r4, pc}
    334e:	5ccc      	ldrb	r4, [r1, r3]
    3350:	54c4      	strb	r4, [r0, r3]
    3352:	3301      	adds	r3, #1
    3354:	e7f8      	b.n	3348 <memcpy+0x4>

00003356 <memset>:
    3356:	0003      	movs	r3, r0
    3358:	1882      	adds	r2, r0, r2
    335a:	4293      	cmp	r3, r2
    335c:	d100      	bne.n	3360 <memset+0xa>
    335e:	4770      	bx	lr
    3360:	7019      	strb	r1, [r3, #0]
    3362:	3301      	adds	r3, #1
    3364:	e7f9      	b.n	335a <memset+0x4>

00003366 <__cvt>:
    3366:	b5f0      	push	{r4, r5, r6, r7, lr}
    3368:	b08b      	sub	sp, #44	; 0x2c
    336a:	0014      	movs	r4, r2
    336c:	1e1d      	subs	r5, r3, #0
    336e:	9912      	ldr	r1, [sp, #72]	; 0x48
    3370:	da53      	bge.n	341a <__cvt+0xb4>
    3372:	2480      	movs	r4, #128	; 0x80
    3374:	0624      	lsls	r4, r4, #24
    3376:	191b      	adds	r3, r3, r4
    3378:	001d      	movs	r5, r3
    337a:	0014      	movs	r4, r2
    337c:	232d      	movs	r3, #45	; 0x2d
    337e:	700b      	strb	r3, [r1, #0]
    3380:	2320      	movs	r3, #32
    3382:	9e14      	ldr	r6, [sp, #80]	; 0x50
    3384:	2203      	movs	r2, #3
    3386:	439e      	bics	r6, r3
    3388:	2e46      	cmp	r6, #70	; 0x46
    338a:	d007      	beq.n	339c <__cvt+0x36>
    338c:	0033      	movs	r3, r6
    338e:	3b45      	subs	r3, #69	; 0x45
    3390:	4259      	negs	r1, r3
    3392:	414b      	adcs	r3, r1
    3394:	9910      	ldr	r1, [sp, #64]	; 0x40
    3396:	3a01      	subs	r2, #1
    3398:	18cb      	adds	r3, r1, r3
    339a:	9310      	str	r3, [sp, #64]	; 0x40
    339c:	ab09      	add	r3, sp, #36	; 0x24
    339e:	9304      	str	r3, [sp, #16]
    33a0:	ab08      	add	r3, sp, #32
    33a2:	9303      	str	r3, [sp, #12]
    33a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    33a6:	9200      	str	r2, [sp, #0]
    33a8:	9302      	str	r3, [sp, #8]
    33aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    33ac:	0022      	movs	r2, r4
    33ae:	9301      	str	r3, [sp, #4]
    33b0:	002b      	movs	r3, r5
    33b2:	f000 fedb 	bl	416c <_dtoa_r>
    33b6:	0007      	movs	r7, r0
    33b8:	2e47      	cmp	r6, #71	; 0x47
    33ba:	d102      	bne.n	33c2 <__cvt+0x5c>
    33bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    33be:	07db      	lsls	r3, r3, #31
    33c0:	d524      	bpl.n	340c <__cvt+0xa6>
    33c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	9307      	str	r3, [sp, #28]
    33c8:	2e46      	cmp	r6, #70	; 0x46
    33ca:	d114      	bne.n	33f6 <__cvt+0x90>
    33cc:	783b      	ldrb	r3, [r7, #0]
    33ce:	2b30      	cmp	r3, #48	; 0x30
    33d0:	d10c      	bne.n	33ec <__cvt+0x86>
    33d2:	2200      	movs	r2, #0
    33d4:	2300      	movs	r3, #0
    33d6:	0020      	movs	r0, r4
    33d8:	0029      	movs	r1, r5
    33da:	f002 fe21 	bl	6020 <__aeabi_dcmpeq>
    33de:	2800      	cmp	r0, #0
    33e0:	d104      	bne.n	33ec <__cvt+0x86>
    33e2:	2301      	movs	r3, #1
    33e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    33e6:	1a9b      	subs	r3, r3, r2
    33e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    33ea:	6013      	str	r3, [r2, #0]
    33ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    33ee:	9a07      	ldr	r2, [sp, #28]
    33f0:	681b      	ldr	r3, [r3, #0]
    33f2:	18d3      	adds	r3, r2, r3
    33f4:	9307      	str	r3, [sp, #28]
    33f6:	2200      	movs	r2, #0
    33f8:	2300      	movs	r3, #0
    33fa:	0020      	movs	r0, r4
    33fc:	0029      	movs	r1, r5
    33fe:	f002 fe0f 	bl	6020 <__aeabi_dcmpeq>
    3402:	2230      	movs	r2, #48	; 0x30
    3404:	2800      	cmp	r0, #0
    3406:	d00d      	beq.n	3424 <__cvt+0xbe>
    3408:	9b07      	ldr	r3, [sp, #28]
    340a:	9309      	str	r3, [sp, #36]	; 0x24
    340c:	0038      	movs	r0, r7
    340e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3410:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3412:	1bdb      	subs	r3, r3, r7
    3414:	6013      	str	r3, [r2, #0]
    3416:	b00b      	add	sp, #44	; 0x2c
    3418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    341a:	2300      	movs	r3, #0
    341c:	e7af      	b.n	337e <__cvt+0x18>
    341e:	1c59      	adds	r1, r3, #1
    3420:	9109      	str	r1, [sp, #36]	; 0x24
    3422:	701a      	strb	r2, [r3, #0]
    3424:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3426:	9907      	ldr	r1, [sp, #28]
    3428:	4299      	cmp	r1, r3
    342a:	d8f8      	bhi.n	341e <__cvt+0xb8>
    342c:	e7ee      	b.n	340c <__cvt+0xa6>

0000342e <__exponent>:
    342e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3430:	232b      	movs	r3, #43	; 0x2b
    3432:	b085      	sub	sp, #20
    3434:	0007      	movs	r7, r0
    3436:	000c      	movs	r4, r1
    3438:	7002      	strb	r2, [r0, #0]
    343a:	1c86      	adds	r6, r0, #2
    343c:	2900      	cmp	r1, #0
    343e:	da01      	bge.n	3444 <__exponent+0x16>
    3440:	232d      	movs	r3, #45	; 0x2d
    3442:	424c      	negs	r4, r1
    3444:	707b      	strb	r3, [r7, #1]
    3446:	2c09      	cmp	r4, #9
    3448:	dd23      	ble.n	3492 <__exponent+0x64>
    344a:	ab02      	add	r3, sp, #8
    344c:	1ddd      	adds	r5, r3, #7
    344e:	1e6b      	subs	r3, r5, #1
    3450:	0020      	movs	r0, r4
    3452:	210a      	movs	r1, #10
    3454:	9301      	str	r3, [sp, #4]
    3456:	f002 fdcd 	bl	5ff4 <__aeabi_idivmod>
    345a:	1e6b      	subs	r3, r5, #1
    345c:	3130      	adds	r1, #48	; 0x30
    345e:	7019      	strb	r1, [r3, #0]
    3460:	0020      	movs	r0, r4
    3462:	210a      	movs	r1, #10
    3464:	f002 fce0 	bl	5e28 <__divsi3>
    3468:	0004      	movs	r4, r0
    346a:	2809      	cmp	r0, #9
    346c:	dc0a      	bgt.n	3484 <__exponent+0x56>
    346e:	3d02      	subs	r5, #2
    3470:	3430      	adds	r4, #48	; 0x30
    3472:	702c      	strb	r4, [r5, #0]
    3474:	ab02      	add	r3, sp, #8
    3476:	3307      	adds	r3, #7
    3478:	0030      	movs	r0, r6
    347a:	42ab      	cmp	r3, r5
    347c:	d804      	bhi.n	3488 <__exponent+0x5a>
    347e:	1bc0      	subs	r0, r0, r7
    3480:	b005      	add	sp, #20
    3482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3484:	9d01      	ldr	r5, [sp, #4]
    3486:	e7e2      	b.n	344e <__exponent+0x20>
    3488:	782b      	ldrb	r3, [r5, #0]
    348a:	3501      	adds	r5, #1
    348c:	7033      	strb	r3, [r6, #0]
    348e:	3601      	adds	r6, #1
    3490:	e7f0      	b.n	3474 <__exponent+0x46>
    3492:	2330      	movs	r3, #48	; 0x30
    3494:	18e4      	adds	r4, r4, r3
    3496:	7033      	strb	r3, [r6, #0]
    3498:	1cb0      	adds	r0, r6, #2
    349a:	7074      	strb	r4, [r6, #1]
    349c:	e7ef      	b.n	347e <__exponent+0x50>
	...

000034a0 <_printf_float>:
    34a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34a2:	b095      	sub	sp, #84	; 0x54
    34a4:	000c      	movs	r4, r1
    34a6:	920a      	str	r2, [sp, #40]	; 0x28
    34a8:	930b      	str	r3, [sp, #44]	; 0x2c
    34aa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    34ac:	9009      	str	r0, [sp, #36]	; 0x24
    34ae:	f001 fdd3 	bl	5058 <_localeconv_r>
    34b2:	6803      	ldr	r3, [r0, #0]
    34b4:	0018      	movs	r0, r3
    34b6:	930d      	str	r3, [sp, #52]	; 0x34
    34b8:	f000 fd00 	bl	3ebc <strlen>
    34bc:	2300      	movs	r3, #0
    34be:	9312      	str	r3, [sp, #72]	; 0x48
    34c0:	6823      	ldr	r3, [r4, #0]
    34c2:	900e      	str	r0, [sp, #56]	; 0x38
    34c4:	930c      	str	r3, [sp, #48]	; 0x30
    34c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    34c8:	7e27      	ldrb	r7, [r4, #24]
    34ca:	682b      	ldr	r3, [r5, #0]
    34cc:	2207      	movs	r2, #7
    34ce:	05c9      	lsls	r1, r1, #23
    34d0:	d547      	bpl.n	3562 <_printf_float+0xc2>
    34d2:	189b      	adds	r3, r3, r2
    34d4:	4393      	bics	r3, r2
    34d6:	001a      	movs	r2, r3
    34d8:	3208      	adds	r2, #8
    34da:	602a      	str	r2, [r5, #0]
    34dc:	681a      	ldr	r2, [r3, #0]
    34de:	685b      	ldr	r3, [r3, #4]
    34e0:	64a2      	str	r2, [r4, #72]	; 0x48
    34e2:	64e3      	str	r3, [r4, #76]	; 0x4c
    34e4:	2201      	movs	r2, #1
    34e6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    34e8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    34ea:	006b      	lsls	r3, r5, #1
    34ec:	085b      	lsrs	r3, r3, #1
    34ee:	930f      	str	r3, [sp, #60]	; 0x3c
    34f0:	4252      	negs	r2, r2
    34f2:	4ba7      	ldr	r3, [pc, #668]	; (3790 <_printf_float+0x2f0>)
    34f4:	0030      	movs	r0, r6
    34f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    34f8:	f004 fff0 	bl	84dc <__aeabi_dcmpun>
    34fc:	2800      	cmp	r0, #0
    34fe:	d000      	beq.n	3502 <_printf_float+0x62>
    3500:	e206      	b.n	3910 <_printf_float+0x470>
    3502:	2201      	movs	r2, #1
    3504:	4ba2      	ldr	r3, [pc, #648]	; (3790 <_printf_float+0x2f0>)
    3506:	4252      	negs	r2, r2
    3508:	0030      	movs	r0, r6
    350a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    350c:	f002 fd98 	bl	6040 <__aeabi_dcmple>
    3510:	2800      	cmp	r0, #0
    3512:	d000      	beq.n	3516 <_printf_float+0x76>
    3514:	e1fc      	b.n	3910 <_printf_float+0x470>
    3516:	2200      	movs	r2, #0
    3518:	2300      	movs	r3, #0
    351a:	0030      	movs	r0, r6
    351c:	0029      	movs	r1, r5
    351e:	f002 fd85 	bl	602c <__aeabi_dcmplt>
    3522:	2800      	cmp	r0, #0
    3524:	d003      	beq.n	352e <_printf_float+0x8e>
    3526:	0023      	movs	r3, r4
    3528:	222d      	movs	r2, #45	; 0x2d
    352a:	3343      	adds	r3, #67	; 0x43
    352c:	701a      	strb	r2, [r3, #0]
    352e:	4d99      	ldr	r5, [pc, #612]	; (3794 <_printf_float+0x2f4>)
    3530:	2f47      	cmp	r7, #71	; 0x47
    3532:	d800      	bhi.n	3536 <_printf_float+0x96>
    3534:	4d98      	ldr	r5, [pc, #608]	; (3798 <_printf_float+0x2f8>)
    3536:	2303      	movs	r3, #3
    3538:	2600      	movs	r6, #0
    353a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    353c:	6123      	str	r3, [r4, #16]
    353e:	3301      	adds	r3, #1
    3540:	439a      	bics	r2, r3
    3542:	6022      	str	r2, [r4, #0]
    3544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3546:	aa13      	add	r2, sp, #76	; 0x4c
    3548:	9300      	str	r3, [sp, #0]
    354a:	0021      	movs	r1, r4
    354c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    354e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3550:	f000 f9f2 	bl	3938 <_printf_common>
    3554:	1c43      	adds	r3, r0, #1
    3556:	d000      	beq.n	355a <_printf_float+0xba>
    3558:	e09c      	b.n	3694 <_printf_float+0x1f4>
    355a:	2001      	movs	r0, #1
    355c:	4240      	negs	r0, r0
    355e:	b015      	add	sp, #84	; 0x54
    3560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3562:	3307      	adds	r3, #7
    3564:	e7b6      	b.n	34d4 <_printf_float+0x34>
    3566:	2380      	movs	r3, #128	; 0x80
    3568:	6862      	ldr	r2, [r4, #4]
    356a:	00db      	lsls	r3, r3, #3
    356c:	1c51      	adds	r1, r2, #1
    356e:	d145      	bne.n	35fc <_printf_float+0x15c>
    3570:	3207      	adds	r2, #7
    3572:	6062      	str	r2, [r4, #4]
    3574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3576:	2100      	movs	r1, #0
    3578:	4313      	orrs	r3, r2
    357a:	aa12      	add	r2, sp, #72	; 0x48
    357c:	9205      	str	r2, [sp, #20]
    357e:	aa11      	add	r2, sp, #68	; 0x44
    3580:	9203      	str	r2, [sp, #12]
    3582:	2223      	movs	r2, #35	; 0x23
    3584:	6023      	str	r3, [r4, #0]
    3586:	9106      	str	r1, [sp, #24]
    3588:	9301      	str	r3, [sp, #4]
    358a:	a908      	add	r1, sp, #32
    358c:	6863      	ldr	r3, [r4, #4]
    358e:	1852      	adds	r2, r2, r1
    3590:	9202      	str	r2, [sp, #8]
    3592:	9300      	str	r3, [sp, #0]
    3594:	0032      	movs	r2, r6
    3596:	002b      	movs	r3, r5
    3598:	9704      	str	r7, [sp, #16]
    359a:	9809      	ldr	r0, [sp, #36]	; 0x24
    359c:	f7ff fee3 	bl	3366 <__cvt>
    35a0:	2320      	movs	r3, #32
    35a2:	003a      	movs	r2, r7
    35a4:	0005      	movs	r5, r0
    35a6:	439a      	bics	r2, r3
    35a8:	2a47      	cmp	r2, #71	; 0x47
    35aa:	d107      	bne.n	35bc <_printf_float+0x11c>
    35ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    35ae:	1cda      	adds	r2, r3, #3
    35b0:	db02      	blt.n	35b8 <_printf_float+0x118>
    35b2:	6862      	ldr	r2, [r4, #4]
    35b4:	4293      	cmp	r3, r2
    35b6:	dd5b      	ble.n	3670 <_printf_float+0x1d0>
    35b8:	3f02      	subs	r7, #2
    35ba:	b2ff      	uxtb	r7, r7
    35bc:	9911      	ldr	r1, [sp, #68]	; 0x44
    35be:	2f65      	cmp	r7, #101	; 0x65
    35c0:	d83b      	bhi.n	363a <_printf_float+0x19a>
    35c2:	0020      	movs	r0, r4
    35c4:	3901      	subs	r1, #1
    35c6:	003a      	movs	r2, r7
    35c8:	3050      	adds	r0, #80	; 0x50
    35ca:	9111      	str	r1, [sp, #68]	; 0x44
    35cc:	f7ff ff2f 	bl	342e <__exponent>
    35d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    35d2:	0006      	movs	r6, r0
    35d4:	1883      	adds	r3, r0, r2
    35d6:	6123      	str	r3, [r4, #16]
    35d8:	2a01      	cmp	r2, #1
    35da:	dc02      	bgt.n	35e2 <_printf_float+0x142>
    35dc:	6822      	ldr	r2, [r4, #0]
    35de:	07d2      	lsls	r2, r2, #31
    35e0:	d501      	bpl.n	35e6 <_printf_float+0x146>
    35e2:	3301      	adds	r3, #1
    35e4:	6123      	str	r3, [r4, #16]
    35e6:	2323      	movs	r3, #35	; 0x23
    35e8:	aa08      	add	r2, sp, #32
    35ea:	189b      	adds	r3, r3, r2
    35ec:	781b      	ldrb	r3, [r3, #0]
    35ee:	2b00      	cmp	r3, #0
    35f0:	d0a8      	beq.n	3544 <_printf_float+0xa4>
    35f2:	0023      	movs	r3, r4
    35f4:	222d      	movs	r2, #45	; 0x2d
    35f6:	3343      	adds	r3, #67	; 0x43
    35f8:	701a      	strb	r2, [r3, #0]
    35fa:	e7a3      	b.n	3544 <_printf_float+0xa4>
    35fc:	2f67      	cmp	r7, #103	; 0x67
    35fe:	d001      	beq.n	3604 <_printf_float+0x164>
    3600:	2f47      	cmp	r7, #71	; 0x47
    3602:	d1b7      	bne.n	3574 <_printf_float+0xd4>
    3604:	2a00      	cmp	r2, #0
    3606:	d016      	beq.n	3636 <_printf_float+0x196>
    3608:	990c      	ldr	r1, [sp, #48]	; 0x30
    360a:	a808      	add	r0, sp, #32
    360c:	430b      	orrs	r3, r1
    360e:	2100      	movs	r1, #0
    3610:	9106      	str	r1, [sp, #24]
    3612:	a912      	add	r1, sp, #72	; 0x48
    3614:	9105      	str	r1, [sp, #20]
    3616:	a911      	add	r1, sp, #68	; 0x44
    3618:	9103      	str	r1, [sp, #12]
    361a:	2123      	movs	r1, #35	; 0x23
    361c:	1809      	adds	r1, r1, r0
    361e:	6023      	str	r3, [r4, #0]
    3620:	9301      	str	r3, [sp, #4]
    3622:	9200      	str	r2, [sp, #0]
    3624:	002b      	movs	r3, r5
    3626:	9704      	str	r7, [sp, #16]
    3628:	9102      	str	r1, [sp, #8]
    362a:	0032      	movs	r2, r6
    362c:	9809      	ldr	r0, [sp, #36]	; 0x24
    362e:	f7ff fe9a 	bl	3366 <__cvt>
    3632:	0005      	movs	r5, r0
    3634:	e7ba      	b.n	35ac <_printf_float+0x10c>
    3636:	2201      	movs	r2, #1
    3638:	e79b      	b.n	3572 <_printf_float+0xd2>
    363a:	2f66      	cmp	r7, #102	; 0x66
    363c:	d119      	bne.n	3672 <_printf_float+0x1d2>
    363e:	6863      	ldr	r3, [r4, #4]
    3640:	2900      	cmp	r1, #0
    3642:	dd0c      	ble.n	365e <_printf_float+0x1be>
    3644:	6121      	str	r1, [r4, #16]
    3646:	2b00      	cmp	r3, #0
    3648:	d102      	bne.n	3650 <_printf_float+0x1b0>
    364a:	6822      	ldr	r2, [r4, #0]
    364c:	07d2      	lsls	r2, r2, #31
    364e:	d502      	bpl.n	3656 <_printf_float+0x1b6>
    3650:	3301      	adds	r3, #1
    3652:	185b      	adds	r3, r3, r1
    3654:	6123      	str	r3, [r4, #16]
    3656:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3658:	2600      	movs	r6, #0
    365a:	65a3      	str	r3, [r4, #88]	; 0x58
    365c:	e7c3      	b.n	35e6 <_printf_float+0x146>
    365e:	2b00      	cmp	r3, #0
    3660:	d103      	bne.n	366a <_printf_float+0x1ca>
    3662:	2201      	movs	r2, #1
    3664:	6821      	ldr	r1, [r4, #0]
    3666:	4211      	tst	r1, r2
    3668:	d000      	beq.n	366c <_printf_float+0x1cc>
    366a:	1c9a      	adds	r2, r3, #2
    366c:	6122      	str	r2, [r4, #16]
    366e:	e7f2      	b.n	3656 <_printf_float+0x1b6>
    3670:	2767      	movs	r7, #103	; 0x67
    3672:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3674:	9812      	ldr	r0, [sp, #72]	; 0x48
    3676:	4283      	cmp	r3, r0
    3678:	db05      	blt.n	3686 <_printf_float+0x1e6>
    367a:	6822      	ldr	r2, [r4, #0]
    367c:	6123      	str	r3, [r4, #16]
    367e:	07d2      	lsls	r2, r2, #31
    3680:	d5e9      	bpl.n	3656 <_printf_float+0x1b6>
    3682:	3301      	adds	r3, #1
    3684:	e7e6      	b.n	3654 <_printf_float+0x1b4>
    3686:	2201      	movs	r2, #1
    3688:	2b00      	cmp	r3, #0
    368a:	dc01      	bgt.n	3690 <_printf_float+0x1f0>
    368c:	1892      	adds	r2, r2, r2
    368e:	1ad2      	subs	r2, r2, r3
    3690:	1812      	adds	r2, r2, r0
    3692:	e7eb      	b.n	366c <_printf_float+0x1cc>
    3694:	6822      	ldr	r2, [r4, #0]
    3696:	0553      	lsls	r3, r2, #21
    3698:	d408      	bmi.n	36ac <_printf_float+0x20c>
    369a:	6923      	ldr	r3, [r4, #16]
    369c:	002a      	movs	r2, r5
    369e:	990a      	ldr	r1, [sp, #40]	; 0x28
    36a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    36a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    36a4:	47a8      	blx	r5
    36a6:	1c43      	adds	r3, r0, #1
    36a8:	d129      	bne.n	36fe <_printf_float+0x25e>
    36aa:	e756      	b.n	355a <_printf_float+0xba>
    36ac:	2f65      	cmp	r7, #101	; 0x65
    36ae:	d800      	bhi.n	36b2 <_printf_float+0x212>
    36b0:	e0dc      	b.n	386c <_printf_float+0x3cc>
    36b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    36b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    36b6:	2200      	movs	r2, #0
    36b8:	2300      	movs	r3, #0
    36ba:	f002 fcb1 	bl	6020 <__aeabi_dcmpeq>
    36be:	2800      	cmp	r0, #0
    36c0:	d035      	beq.n	372e <_printf_float+0x28e>
    36c2:	2301      	movs	r3, #1
    36c4:	4a35      	ldr	r2, [pc, #212]	; (379c <_printf_float+0x2fc>)
    36c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    36c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    36ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    36cc:	47a8      	blx	r5
    36ce:	1c43      	adds	r3, r0, #1
    36d0:	d100      	bne.n	36d4 <_printf_float+0x234>
    36d2:	e742      	b.n	355a <_printf_float+0xba>
    36d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    36d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    36d8:	4293      	cmp	r3, r2
    36da:	db02      	blt.n	36e2 <_printf_float+0x242>
    36dc:	6823      	ldr	r3, [r4, #0]
    36de:	07db      	lsls	r3, r3, #31
    36e0:	d50d      	bpl.n	36fe <_printf_float+0x25e>
    36e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    36e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    36e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    36e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    36ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    36ec:	47a8      	blx	r5
    36ee:	2500      	movs	r5, #0
    36f0:	1c43      	adds	r3, r0, #1
    36f2:	d100      	bne.n	36f6 <_printf_float+0x256>
    36f4:	e731      	b.n	355a <_printf_float+0xba>
    36f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    36f8:	3b01      	subs	r3, #1
    36fa:	429d      	cmp	r5, r3
    36fc:	db0b      	blt.n	3716 <_printf_float+0x276>
    36fe:	6823      	ldr	r3, [r4, #0]
    3700:	2500      	movs	r5, #0
    3702:	079b      	lsls	r3, r3, #30
    3704:	d500      	bpl.n	3708 <_printf_float+0x268>
    3706:	e0fd      	b.n	3904 <_printf_float+0x464>
    3708:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    370a:	68e0      	ldr	r0, [r4, #12]
    370c:	4298      	cmp	r0, r3
    370e:	db00      	blt.n	3712 <_printf_float+0x272>
    3710:	e725      	b.n	355e <_printf_float+0xbe>
    3712:	0018      	movs	r0, r3
    3714:	e723      	b.n	355e <_printf_float+0xbe>
    3716:	0022      	movs	r2, r4
    3718:	2301      	movs	r3, #1
    371a:	321a      	adds	r2, #26
    371c:	990a      	ldr	r1, [sp, #40]	; 0x28
    371e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3720:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3722:	47b0      	blx	r6
    3724:	1c43      	adds	r3, r0, #1
    3726:	d100      	bne.n	372a <_printf_float+0x28a>
    3728:	e717      	b.n	355a <_printf_float+0xba>
    372a:	3501      	adds	r5, #1
    372c:	e7e3      	b.n	36f6 <_printf_float+0x256>
    372e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3730:	2b00      	cmp	r3, #0
    3732:	dc35      	bgt.n	37a0 <_printf_float+0x300>
    3734:	2301      	movs	r3, #1
    3736:	4a19      	ldr	r2, [pc, #100]	; (379c <_printf_float+0x2fc>)
    3738:	990a      	ldr	r1, [sp, #40]	; 0x28
    373a:	9809      	ldr	r0, [sp, #36]	; 0x24
    373c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    373e:	47b0      	blx	r6
    3740:	1c43      	adds	r3, r0, #1
    3742:	d100      	bne.n	3746 <_printf_float+0x2a6>
    3744:	e709      	b.n	355a <_printf_float+0xba>
    3746:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3748:	2b00      	cmp	r3, #0
    374a:	d105      	bne.n	3758 <_printf_float+0x2b8>
    374c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    374e:	2b00      	cmp	r3, #0
    3750:	d102      	bne.n	3758 <_printf_float+0x2b8>
    3752:	6823      	ldr	r3, [r4, #0]
    3754:	07db      	lsls	r3, r3, #31
    3756:	d5d2      	bpl.n	36fe <_printf_float+0x25e>
    3758:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    375a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    375c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    375e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3760:	9809      	ldr	r0, [sp, #36]	; 0x24
    3762:	47b0      	blx	r6
    3764:	2600      	movs	r6, #0
    3766:	1c43      	adds	r3, r0, #1
    3768:	d100      	bne.n	376c <_printf_float+0x2cc>
    376a:	e6f6      	b.n	355a <_printf_float+0xba>
    376c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    376e:	425b      	negs	r3, r3
    3770:	429e      	cmp	r6, r3
    3772:	db01      	blt.n	3778 <_printf_float+0x2d8>
    3774:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3776:	e791      	b.n	369c <_printf_float+0x1fc>
    3778:	0022      	movs	r2, r4
    377a:	2301      	movs	r3, #1
    377c:	321a      	adds	r2, #26
    377e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3780:	9809      	ldr	r0, [sp, #36]	; 0x24
    3782:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3784:	47b8      	blx	r7
    3786:	1c43      	adds	r3, r0, #1
    3788:	d100      	bne.n	378c <_printf_float+0x2ec>
    378a:	e6e6      	b.n	355a <_printf_float+0xba>
    378c:	3601      	adds	r6, #1
    378e:	e7ed      	b.n	376c <_printf_float+0x2cc>
    3790:	7fefffff 	.word	0x7fefffff
    3794:	00008954 	.word	0x00008954
    3798:	00008950 	.word	0x00008950
    379c:	00008960 	.word	0x00008960
    37a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    37a2:	9e12      	ldr	r6, [sp, #72]	; 0x48
    37a4:	429e      	cmp	r6, r3
    37a6:	dd00      	ble.n	37aa <_printf_float+0x30a>
    37a8:	001e      	movs	r6, r3
    37aa:	2e00      	cmp	r6, #0
    37ac:	dc35      	bgt.n	381a <_printf_float+0x37a>
    37ae:	2300      	movs	r3, #0
    37b0:	930c      	str	r3, [sp, #48]	; 0x30
    37b2:	43f3      	mvns	r3, r6
    37b4:	17db      	asrs	r3, r3, #31
    37b6:	930f      	str	r3, [sp, #60]	; 0x3c
    37b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    37ba:	6da7      	ldr	r7, [r4, #88]	; 0x58
    37bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    37be:	4033      	ands	r3, r6
    37c0:	1afb      	subs	r3, r7, r3
    37c2:	429a      	cmp	r2, r3
    37c4:	db32      	blt.n	382c <_printf_float+0x38c>
    37c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    37ca:	4293      	cmp	r3, r2
    37cc:	db3c      	blt.n	3848 <_printf_float+0x3a8>
    37ce:	6823      	ldr	r3, [r4, #0]
    37d0:	07db      	lsls	r3, r3, #31
    37d2:	d439      	bmi.n	3848 <_printf_float+0x3a8>
    37d4:	9e12      	ldr	r6, [sp, #72]	; 0x48
    37d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    37d8:	1bf3      	subs	r3, r6, r7
    37da:	1ab6      	subs	r6, r6, r2
    37dc:	429e      	cmp	r6, r3
    37de:	dd00      	ble.n	37e2 <_printf_float+0x342>
    37e0:	001e      	movs	r6, r3
    37e2:	2e00      	cmp	r6, #0
    37e4:	dc39      	bgt.n	385a <_printf_float+0x3ba>
    37e6:	43f7      	mvns	r7, r6
    37e8:	2500      	movs	r5, #0
    37ea:	17fb      	asrs	r3, r7, #31
    37ec:	930c      	str	r3, [sp, #48]	; 0x30
    37ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
    37f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    37f2:	990c      	ldr	r1, [sp, #48]	; 0x30
    37f4:	1a9b      	subs	r3, r3, r2
    37f6:	0032      	movs	r2, r6
    37f8:	400a      	ands	r2, r1
    37fa:	1a9b      	subs	r3, r3, r2
    37fc:	429d      	cmp	r5, r3
    37fe:	db00      	blt.n	3802 <_printf_float+0x362>
    3800:	e77d      	b.n	36fe <_printf_float+0x25e>
    3802:	0022      	movs	r2, r4
    3804:	2301      	movs	r3, #1
    3806:	321a      	adds	r2, #26
    3808:	990a      	ldr	r1, [sp, #40]	; 0x28
    380a:	9809      	ldr	r0, [sp, #36]	; 0x24
    380c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    380e:	47b8      	blx	r7
    3810:	1c43      	adds	r3, r0, #1
    3812:	d100      	bne.n	3816 <_printf_float+0x376>
    3814:	e6a1      	b.n	355a <_printf_float+0xba>
    3816:	3501      	adds	r5, #1
    3818:	e7e9      	b.n	37ee <_printf_float+0x34e>
    381a:	0033      	movs	r3, r6
    381c:	002a      	movs	r2, r5
    381e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3820:	9809      	ldr	r0, [sp, #36]	; 0x24
    3822:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3824:	47b8      	blx	r7
    3826:	1c43      	adds	r3, r0, #1
    3828:	d1c1      	bne.n	37ae <_printf_float+0x30e>
    382a:	e696      	b.n	355a <_printf_float+0xba>
    382c:	0022      	movs	r2, r4
    382e:	2301      	movs	r3, #1
    3830:	321a      	adds	r2, #26
    3832:	990a      	ldr	r1, [sp, #40]	; 0x28
    3834:	9809      	ldr	r0, [sp, #36]	; 0x24
    3836:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3838:	47b8      	blx	r7
    383a:	1c43      	adds	r3, r0, #1
    383c:	d100      	bne.n	3840 <_printf_float+0x3a0>
    383e:	e68c      	b.n	355a <_printf_float+0xba>
    3840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3842:	3301      	adds	r3, #1
    3844:	930c      	str	r3, [sp, #48]	; 0x30
    3846:	e7b7      	b.n	37b8 <_printf_float+0x318>
    3848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    384a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    384c:	990a      	ldr	r1, [sp, #40]	; 0x28
    384e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3850:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3852:	47b0      	blx	r6
    3854:	1c43      	adds	r3, r0, #1
    3856:	d1bd      	bne.n	37d4 <_printf_float+0x334>
    3858:	e67f      	b.n	355a <_printf_float+0xba>
    385a:	19ea      	adds	r2, r5, r7
    385c:	0033      	movs	r3, r6
    385e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3860:	9809      	ldr	r0, [sp, #36]	; 0x24
    3862:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3864:	47a8      	blx	r5
    3866:	1c43      	adds	r3, r0, #1
    3868:	d1bd      	bne.n	37e6 <_printf_float+0x346>
    386a:	e676      	b.n	355a <_printf_float+0xba>
    386c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    386e:	2b01      	cmp	r3, #1
    3870:	dc02      	bgt.n	3878 <_printf_float+0x3d8>
    3872:	2301      	movs	r3, #1
    3874:	421a      	tst	r2, r3
    3876:	d038      	beq.n	38ea <_printf_float+0x44a>
    3878:	2301      	movs	r3, #1
    387a:	002a      	movs	r2, r5
    387c:	990a      	ldr	r1, [sp, #40]	; 0x28
    387e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3880:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3882:	47b8      	blx	r7
    3884:	1c43      	adds	r3, r0, #1
    3886:	d100      	bne.n	388a <_printf_float+0x3ea>
    3888:	e667      	b.n	355a <_printf_float+0xba>
    388a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    388c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    388e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3890:	9809      	ldr	r0, [sp, #36]	; 0x24
    3892:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3894:	47b8      	blx	r7
    3896:	1c43      	adds	r3, r0, #1
    3898:	d100      	bne.n	389c <_printf_float+0x3fc>
    389a:	e65e      	b.n	355a <_printf_float+0xba>
    389c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    389e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    38a0:	2200      	movs	r2, #0
    38a2:	2300      	movs	r3, #0
    38a4:	f002 fbbc 	bl	6020 <__aeabi_dcmpeq>
    38a8:	2800      	cmp	r0, #0
    38aa:	d008      	beq.n	38be <_printf_float+0x41e>
    38ac:	2500      	movs	r5, #0
    38ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38b0:	3b01      	subs	r3, #1
    38b2:	429d      	cmp	r5, r3
    38b4:	db0d      	blt.n	38d2 <_printf_float+0x432>
    38b6:	0022      	movs	r2, r4
    38b8:	0033      	movs	r3, r6
    38ba:	3250      	adds	r2, #80	; 0x50
    38bc:	e6ef      	b.n	369e <_printf_float+0x1fe>
    38be:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38c0:	1c6a      	adds	r2, r5, #1
    38c2:	3b01      	subs	r3, #1
    38c4:	990a      	ldr	r1, [sp, #40]	; 0x28
    38c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    38c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38ca:	47a8      	blx	r5
    38cc:	1c43      	adds	r3, r0, #1
    38ce:	d1f2      	bne.n	38b6 <_printf_float+0x416>
    38d0:	e643      	b.n	355a <_printf_float+0xba>
    38d2:	0022      	movs	r2, r4
    38d4:	2301      	movs	r3, #1
    38d6:	321a      	adds	r2, #26
    38d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    38da:	9809      	ldr	r0, [sp, #36]	; 0x24
    38dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    38de:	47b8      	blx	r7
    38e0:	1c43      	adds	r3, r0, #1
    38e2:	d100      	bne.n	38e6 <_printf_float+0x446>
    38e4:	e639      	b.n	355a <_printf_float+0xba>
    38e6:	3501      	adds	r5, #1
    38e8:	e7e1      	b.n	38ae <_printf_float+0x40e>
    38ea:	002a      	movs	r2, r5
    38ec:	e7ea      	b.n	38c4 <_printf_float+0x424>
    38ee:	0022      	movs	r2, r4
    38f0:	2301      	movs	r3, #1
    38f2:	3219      	adds	r2, #25
    38f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    38f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    38f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    38fa:	47b0      	blx	r6
    38fc:	1c43      	adds	r3, r0, #1
    38fe:	d100      	bne.n	3902 <_printf_float+0x462>
    3900:	e62b      	b.n	355a <_printf_float+0xba>
    3902:	3501      	adds	r5, #1
    3904:	68e3      	ldr	r3, [r4, #12]
    3906:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3908:	1a9b      	subs	r3, r3, r2
    390a:	429d      	cmp	r5, r3
    390c:	dbef      	blt.n	38ee <_printf_float+0x44e>
    390e:	e6fb      	b.n	3708 <_printf_float+0x268>
    3910:	0032      	movs	r2, r6
    3912:	002b      	movs	r3, r5
    3914:	0030      	movs	r0, r6
    3916:	0029      	movs	r1, r5
    3918:	f004 fde0 	bl	84dc <__aeabi_dcmpun>
    391c:	2800      	cmp	r0, #0
    391e:	d100      	bne.n	3922 <_printf_float+0x482>
    3920:	e621      	b.n	3566 <_printf_float+0xc6>
    3922:	4d03      	ldr	r5, [pc, #12]	; (3930 <_printf_float+0x490>)
    3924:	2f47      	cmp	r7, #71	; 0x47
    3926:	d900      	bls.n	392a <_printf_float+0x48a>
    3928:	e605      	b.n	3536 <_printf_float+0x96>
    392a:	4d02      	ldr	r5, [pc, #8]	; (3934 <_printf_float+0x494>)
    392c:	e603      	b.n	3536 <_printf_float+0x96>
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	0000895c 	.word	0x0000895c
    3934:	00008958 	.word	0x00008958

00003938 <_printf_common>:
    3938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    393a:	0015      	movs	r5, r2
    393c:	9301      	str	r3, [sp, #4]
    393e:	688a      	ldr	r2, [r1, #8]
    3940:	690b      	ldr	r3, [r1, #16]
    3942:	9000      	str	r0, [sp, #0]
    3944:	000c      	movs	r4, r1
    3946:	4293      	cmp	r3, r2
    3948:	da00      	bge.n	394c <_printf_common+0x14>
    394a:	0013      	movs	r3, r2
    394c:	0022      	movs	r2, r4
    394e:	602b      	str	r3, [r5, #0]
    3950:	3243      	adds	r2, #67	; 0x43
    3952:	7812      	ldrb	r2, [r2, #0]
    3954:	2a00      	cmp	r2, #0
    3956:	d001      	beq.n	395c <_printf_common+0x24>
    3958:	3301      	adds	r3, #1
    395a:	602b      	str	r3, [r5, #0]
    395c:	6823      	ldr	r3, [r4, #0]
    395e:	069b      	lsls	r3, r3, #26
    3960:	d502      	bpl.n	3968 <_printf_common+0x30>
    3962:	682b      	ldr	r3, [r5, #0]
    3964:	3302      	adds	r3, #2
    3966:	602b      	str	r3, [r5, #0]
    3968:	2706      	movs	r7, #6
    396a:	6823      	ldr	r3, [r4, #0]
    396c:	401f      	ands	r7, r3
    396e:	d027      	beq.n	39c0 <_printf_common+0x88>
    3970:	0023      	movs	r3, r4
    3972:	3343      	adds	r3, #67	; 0x43
    3974:	781b      	ldrb	r3, [r3, #0]
    3976:	1e5a      	subs	r2, r3, #1
    3978:	4193      	sbcs	r3, r2
    397a:	6822      	ldr	r2, [r4, #0]
    397c:	0692      	lsls	r2, r2, #26
    397e:	d430      	bmi.n	39e2 <_printf_common+0xaa>
    3980:	0022      	movs	r2, r4
    3982:	9901      	ldr	r1, [sp, #4]
    3984:	3243      	adds	r2, #67	; 0x43
    3986:	9800      	ldr	r0, [sp, #0]
    3988:	9e08      	ldr	r6, [sp, #32]
    398a:	47b0      	blx	r6
    398c:	1c43      	adds	r3, r0, #1
    398e:	d025      	beq.n	39dc <_printf_common+0xa4>
    3990:	2306      	movs	r3, #6
    3992:	6820      	ldr	r0, [r4, #0]
    3994:	682a      	ldr	r2, [r5, #0]
    3996:	68e1      	ldr	r1, [r4, #12]
    3998:	4003      	ands	r3, r0
    399a:	2500      	movs	r5, #0
    399c:	2b04      	cmp	r3, #4
    399e:	d103      	bne.n	39a8 <_printf_common+0x70>
    39a0:	1a8d      	subs	r5, r1, r2
    39a2:	43eb      	mvns	r3, r5
    39a4:	17db      	asrs	r3, r3, #31
    39a6:	401d      	ands	r5, r3
    39a8:	68a3      	ldr	r3, [r4, #8]
    39aa:	6922      	ldr	r2, [r4, #16]
    39ac:	4293      	cmp	r3, r2
    39ae:	dd01      	ble.n	39b4 <_printf_common+0x7c>
    39b0:	1a9b      	subs	r3, r3, r2
    39b2:	18ed      	adds	r5, r5, r3
    39b4:	2700      	movs	r7, #0
    39b6:	42bd      	cmp	r5, r7
    39b8:	d120      	bne.n	39fc <_printf_common+0xc4>
    39ba:	2000      	movs	r0, #0
    39bc:	e010      	b.n	39e0 <_printf_common+0xa8>
    39be:	3701      	adds	r7, #1
    39c0:	68e3      	ldr	r3, [r4, #12]
    39c2:	682a      	ldr	r2, [r5, #0]
    39c4:	1a9b      	subs	r3, r3, r2
    39c6:	429f      	cmp	r7, r3
    39c8:	dad2      	bge.n	3970 <_printf_common+0x38>
    39ca:	0022      	movs	r2, r4
    39cc:	2301      	movs	r3, #1
    39ce:	3219      	adds	r2, #25
    39d0:	9901      	ldr	r1, [sp, #4]
    39d2:	9800      	ldr	r0, [sp, #0]
    39d4:	9e08      	ldr	r6, [sp, #32]
    39d6:	47b0      	blx	r6
    39d8:	1c43      	adds	r3, r0, #1
    39da:	d1f0      	bne.n	39be <_printf_common+0x86>
    39dc:	2001      	movs	r0, #1
    39de:	4240      	negs	r0, r0
    39e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    39e2:	2030      	movs	r0, #48	; 0x30
    39e4:	18e1      	adds	r1, r4, r3
    39e6:	3143      	adds	r1, #67	; 0x43
    39e8:	7008      	strb	r0, [r1, #0]
    39ea:	0021      	movs	r1, r4
    39ec:	1c5a      	adds	r2, r3, #1
    39ee:	3145      	adds	r1, #69	; 0x45
    39f0:	7809      	ldrb	r1, [r1, #0]
    39f2:	18a2      	adds	r2, r4, r2
    39f4:	3243      	adds	r2, #67	; 0x43
    39f6:	3302      	adds	r3, #2
    39f8:	7011      	strb	r1, [r2, #0]
    39fa:	e7c1      	b.n	3980 <_printf_common+0x48>
    39fc:	0022      	movs	r2, r4
    39fe:	2301      	movs	r3, #1
    3a00:	321a      	adds	r2, #26
    3a02:	9901      	ldr	r1, [sp, #4]
    3a04:	9800      	ldr	r0, [sp, #0]
    3a06:	9e08      	ldr	r6, [sp, #32]
    3a08:	47b0      	blx	r6
    3a0a:	1c43      	adds	r3, r0, #1
    3a0c:	d0e6      	beq.n	39dc <_printf_common+0xa4>
    3a0e:	3701      	adds	r7, #1
    3a10:	e7d1      	b.n	39b6 <_printf_common+0x7e>
	...

00003a14 <_printf_i>:
    3a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a16:	b08b      	sub	sp, #44	; 0x2c
    3a18:	9206      	str	r2, [sp, #24]
    3a1a:	000a      	movs	r2, r1
    3a1c:	3243      	adds	r2, #67	; 0x43
    3a1e:	9307      	str	r3, [sp, #28]
    3a20:	9005      	str	r0, [sp, #20]
    3a22:	9204      	str	r2, [sp, #16]
    3a24:	7e0a      	ldrb	r2, [r1, #24]
    3a26:	000c      	movs	r4, r1
    3a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3a2a:	2a6e      	cmp	r2, #110	; 0x6e
    3a2c:	d100      	bne.n	3a30 <_printf_i+0x1c>
    3a2e:	e08f      	b.n	3b50 <_printf_i+0x13c>
    3a30:	d817      	bhi.n	3a62 <_printf_i+0x4e>
    3a32:	2a63      	cmp	r2, #99	; 0x63
    3a34:	d02c      	beq.n	3a90 <_printf_i+0x7c>
    3a36:	d808      	bhi.n	3a4a <_printf_i+0x36>
    3a38:	2a00      	cmp	r2, #0
    3a3a:	d100      	bne.n	3a3e <_printf_i+0x2a>
    3a3c:	e099      	b.n	3b72 <_printf_i+0x15e>
    3a3e:	2a58      	cmp	r2, #88	; 0x58
    3a40:	d054      	beq.n	3aec <_printf_i+0xd8>
    3a42:	0026      	movs	r6, r4
    3a44:	3642      	adds	r6, #66	; 0x42
    3a46:	7032      	strb	r2, [r6, #0]
    3a48:	e029      	b.n	3a9e <_printf_i+0x8a>
    3a4a:	2a64      	cmp	r2, #100	; 0x64
    3a4c:	d001      	beq.n	3a52 <_printf_i+0x3e>
    3a4e:	2a69      	cmp	r2, #105	; 0x69
    3a50:	d1f7      	bne.n	3a42 <_printf_i+0x2e>
    3a52:	6821      	ldr	r1, [r4, #0]
    3a54:	681a      	ldr	r2, [r3, #0]
    3a56:	0608      	lsls	r0, r1, #24
    3a58:	d523      	bpl.n	3aa2 <_printf_i+0x8e>
    3a5a:	1d11      	adds	r1, r2, #4
    3a5c:	6019      	str	r1, [r3, #0]
    3a5e:	6815      	ldr	r5, [r2, #0]
    3a60:	e025      	b.n	3aae <_printf_i+0x9a>
    3a62:	2a73      	cmp	r2, #115	; 0x73
    3a64:	d100      	bne.n	3a68 <_printf_i+0x54>
    3a66:	e088      	b.n	3b7a <_printf_i+0x166>
    3a68:	d808      	bhi.n	3a7c <_printf_i+0x68>
    3a6a:	2a6f      	cmp	r2, #111	; 0x6f
    3a6c:	d029      	beq.n	3ac2 <_printf_i+0xae>
    3a6e:	2a70      	cmp	r2, #112	; 0x70
    3a70:	d1e7      	bne.n	3a42 <_printf_i+0x2e>
    3a72:	2220      	movs	r2, #32
    3a74:	6809      	ldr	r1, [r1, #0]
    3a76:	430a      	orrs	r2, r1
    3a78:	6022      	str	r2, [r4, #0]
    3a7a:	e003      	b.n	3a84 <_printf_i+0x70>
    3a7c:	2a75      	cmp	r2, #117	; 0x75
    3a7e:	d020      	beq.n	3ac2 <_printf_i+0xae>
    3a80:	2a78      	cmp	r2, #120	; 0x78
    3a82:	d1de      	bne.n	3a42 <_printf_i+0x2e>
    3a84:	0022      	movs	r2, r4
    3a86:	2178      	movs	r1, #120	; 0x78
    3a88:	3245      	adds	r2, #69	; 0x45
    3a8a:	7011      	strb	r1, [r2, #0]
    3a8c:	4a6c      	ldr	r2, [pc, #432]	; (3c40 <_printf_i+0x22c>)
    3a8e:	e030      	b.n	3af2 <_printf_i+0xde>
    3a90:	000e      	movs	r6, r1
    3a92:	681a      	ldr	r2, [r3, #0]
    3a94:	3642      	adds	r6, #66	; 0x42
    3a96:	1d11      	adds	r1, r2, #4
    3a98:	6019      	str	r1, [r3, #0]
    3a9a:	6813      	ldr	r3, [r2, #0]
    3a9c:	7033      	strb	r3, [r6, #0]
    3a9e:	2301      	movs	r3, #1
    3aa0:	e079      	b.n	3b96 <_printf_i+0x182>
    3aa2:	0649      	lsls	r1, r1, #25
    3aa4:	d5d9      	bpl.n	3a5a <_printf_i+0x46>
    3aa6:	1d11      	adds	r1, r2, #4
    3aa8:	6019      	str	r1, [r3, #0]
    3aaa:	2300      	movs	r3, #0
    3aac:	5ed5      	ldrsh	r5, [r2, r3]
    3aae:	2d00      	cmp	r5, #0
    3ab0:	da03      	bge.n	3aba <_printf_i+0xa6>
    3ab2:	232d      	movs	r3, #45	; 0x2d
    3ab4:	9a04      	ldr	r2, [sp, #16]
    3ab6:	426d      	negs	r5, r5
    3ab8:	7013      	strb	r3, [r2, #0]
    3aba:	4b62      	ldr	r3, [pc, #392]	; (3c44 <_printf_i+0x230>)
    3abc:	270a      	movs	r7, #10
    3abe:	9303      	str	r3, [sp, #12]
    3ac0:	e02f      	b.n	3b22 <_printf_i+0x10e>
    3ac2:	6820      	ldr	r0, [r4, #0]
    3ac4:	6819      	ldr	r1, [r3, #0]
    3ac6:	0605      	lsls	r5, r0, #24
    3ac8:	d503      	bpl.n	3ad2 <_printf_i+0xbe>
    3aca:	1d08      	adds	r0, r1, #4
    3acc:	6018      	str	r0, [r3, #0]
    3ace:	680d      	ldr	r5, [r1, #0]
    3ad0:	e005      	b.n	3ade <_printf_i+0xca>
    3ad2:	0640      	lsls	r0, r0, #25
    3ad4:	d5f9      	bpl.n	3aca <_printf_i+0xb6>
    3ad6:	680d      	ldr	r5, [r1, #0]
    3ad8:	1d08      	adds	r0, r1, #4
    3ada:	6018      	str	r0, [r3, #0]
    3adc:	b2ad      	uxth	r5, r5
    3ade:	4b59      	ldr	r3, [pc, #356]	; (3c44 <_printf_i+0x230>)
    3ae0:	2708      	movs	r7, #8
    3ae2:	9303      	str	r3, [sp, #12]
    3ae4:	2a6f      	cmp	r2, #111	; 0x6f
    3ae6:	d018      	beq.n	3b1a <_printf_i+0x106>
    3ae8:	270a      	movs	r7, #10
    3aea:	e016      	b.n	3b1a <_printf_i+0x106>
    3aec:	3145      	adds	r1, #69	; 0x45
    3aee:	700a      	strb	r2, [r1, #0]
    3af0:	4a54      	ldr	r2, [pc, #336]	; (3c44 <_printf_i+0x230>)
    3af2:	9203      	str	r2, [sp, #12]
    3af4:	681a      	ldr	r2, [r3, #0]
    3af6:	6821      	ldr	r1, [r4, #0]
    3af8:	1d10      	adds	r0, r2, #4
    3afa:	6018      	str	r0, [r3, #0]
    3afc:	6815      	ldr	r5, [r2, #0]
    3afe:	0608      	lsls	r0, r1, #24
    3b00:	d522      	bpl.n	3b48 <_printf_i+0x134>
    3b02:	07cb      	lsls	r3, r1, #31
    3b04:	d502      	bpl.n	3b0c <_printf_i+0xf8>
    3b06:	2320      	movs	r3, #32
    3b08:	4319      	orrs	r1, r3
    3b0a:	6021      	str	r1, [r4, #0]
    3b0c:	2710      	movs	r7, #16
    3b0e:	2d00      	cmp	r5, #0
    3b10:	d103      	bne.n	3b1a <_printf_i+0x106>
    3b12:	2320      	movs	r3, #32
    3b14:	6822      	ldr	r2, [r4, #0]
    3b16:	439a      	bics	r2, r3
    3b18:	6022      	str	r2, [r4, #0]
    3b1a:	0023      	movs	r3, r4
    3b1c:	2200      	movs	r2, #0
    3b1e:	3343      	adds	r3, #67	; 0x43
    3b20:	701a      	strb	r2, [r3, #0]
    3b22:	6863      	ldr	r3, [r4, #4]
    3b24:	60a3      	str	r3, [r4, #8]
    3b26:	2b00      	cmp	r3, #0
    3b28:	db5c      	blt.n	3be4 <_printf_i+0x1d0>
    3b2a:	2204      	movs	r2, #4
    3b2c:	6821      	ldr	r1, [r4, #0]
    3b2e:	4391      	bics	r1, r2
    3b30:	6021      	str	r1, [r4, #0]
    3b32:	2d00      	cmp	r5, #0
    3b34:	d158      	bne.n	3be8 <_printf_i+0x1d4>
    3b36:	9e04      	ldr	r6, [sp, #16]
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d064      	beq.n	3c06 <_printf_i+0x1f2>
    3b3c:	0026      	movs	r6, r4
    3b3e:	9b03      	ldr	r3, [sp, #12]
    3b40:	3642      	adds	r6, #66	; 0x42
    3b42:	781b      	ldrb	r3, [r3, #0]
    3b44:	7033      	strb	r3, [r6, #0]
    3b46:	e05e      	b.n	3c06 <_printf_i+0x1f2>
    3b48:	0648      	lsls	r0, r1, #25
    3b4a:	d5da      	bpl.n	3b02 <_printf_i+0xee>
    3b4c:	b2ad      	uxth	r5, r5
    3b4e:	e7d8      	b.n	3b02 <_printf_i+0xee>
    3b50:	6809      	ldr	r1, [r1, #0]
    3b52:	681a      	ldr	r2, [r3, #0]
    3b54:	0608      	lsls	r0, r1, #24
    3b56:	d505      	bpl.n	3b64 <_printf_i+0x150>
    3b58:	1d11      	adds	r1, r2, #4
    3b5a:	6019      	str	r1, [r3, #0]
    3b5c:	6813      	ldr	r3, [r2, #0]
    3b5e:	6962      	ldr	r2, [r4, #20]
    3b60:	601a      	str	r2, [r3, #0]
    3b62:	e006      	b.n	3b72 <_printf_i+0x15e>
    3b64:	0649      	lsls	r1, r1, #25
    3b66:	d5f7      	bpl.n	3b58 <_printf_i+0x144>
    3b68:	1d11      	adds	r1, r2, #4
    3b6a:	6019      	str	r1, [r3, #0]
    3b6c:	6813      	ldr	r3, [r2, #0]
    3b6e:	8aa2      	ldrh	r2, [r4, #20]
    3b70:	801a      	strh	r2, [r3, #0]
    3b72:	2300      	movs	r3, #0
    3b74:	9e04      	ldr	r6, [sp, #16]
    3b76:	6123      	str	r3, [r4, #16]
    3b78:	e054      	b.n	3c24 <_printf_i+0x210>
    3b7a:	681a      	ldr	r2, [r3, #0]
    3b7c:	1d11      	adds	r1, r2, #4
    3b7e:	6019      	str	r1, [r3, #0]
    3b80:	6816      	ldr	r6, [r2, #0]
    3b82:	2100      	movs	r1, #0
    3b84:	6862      	ldr	r2, [r4, #4]
    3b86:	0030      	movs	r0, r6
    3b88:	f001 fae2 	bl	5150 <memchr>
    3b8c:	2800      	cmp	r0, #0
    3b8e:	d001      	beq.n	3b94 <_printf_i+0x180>
    3b90:	1b80      	subs	r0, r0, r6
    3b92:	6060      	str	r0, [r4, #4]
    3b94:	6863      	ldr	r3, [r4, #4]
    3b96:	6123      	str	r3, [r4, #16]
    3b98:	2300      	movs	r3, #0
    3b9a:	9a04      	ldr	r2, [sp, #16]
    3b9c:	7013      	strb	r3, [r2, #0]
    3b9e:	e041      	b.n	3c24 <_printf_i+0x210>
    3ba0:	6923      	ldr	r3, [r4, #16]
    3ba2:	0032      	movs	r2, r6
    3ba4:	9906      	ldr	r1, [sp, #24]
    3ba6:	9805      	ldr	r0, [sp, #20]
    3ba8:	9d07      	ldr	r5, [sp, #28]
    3baa:	47a8      	blx	r5
    3bac:	1c43      	adds	r3, r0, #1
    3bae:	d043      	beq.n	3c38 <_printf_i+0x224>
    3bb0:	6823      	ldr	r3, [r4, #0]
    3bb2:	2500      	movs	r5, #0
    3bb4:	079b      	lsls	r3, r3, #30
    3bb6:	d40f      	bmi.n	3bd8 <_printf_i+0x1c4>
    3bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3bba:	68e0      	ldr	r0, [r4, #12]
    3bbc:	4298      	cmp	r0, r3
    3bbe:	da3d      	bge.n	3c3c <_printf_i+0x228>
    3bc0:	0018      	movs	r0, r3
    3bc2:	e03b      	b.n	3c3c <_printf_i+0x228>
    3bc4:	0022      	movs	r2, r4
    3bc6:	2301      	movs	r3, #1
    3bc8:	3219      	adds	r2, #25
    3bca:	9906      	ldr	r1, [sp, #24]
    3bcc:	9805      	ldr	r0, [sp, #20]
    3bce:	9e07      	ldr	r6, [sp, #28]
    3bd0:	47b0      	blx	r6
    3bd2:	1c43      	adds	r3, r0, #1
    3bd4:	d030      	beq.n	3c38 <_printf_i+0x224>
    3bd6:	3501      	adds	r5, #1
    3bd8:	68e3      	ldr	r3, [r4, #12]
    3bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3bdc:	1a9b      	subs	r3, r3, r2
    3bde:	429d      	cmp	r5, r3
    3be0:	dbf0      	blt.n	3bc4 <_printf_i+0x1b0>
    3be2:	e7e9      	b.n	3bb8 <_printf_i+0x1a4>
    3be4:	2d00      	cmp	r5, #0
    3be6:	d0a9      	beq.n	3b3c <_printf_i+0x128>
    3be8:	9e04      	ldr	r6, [sp, #16]
    3bea:	0028      	movs	r0, r5
    3bec:	0039      	movs	r1, r7
    3bee:	f002 f917 	bl	5e20 <__aeabi_uidivmod>
    3bf2:	9b03      	ldr	r3, [sp, #12]
    3bf4:	3e01      	subs	r6, #1
    3bf6:	5c5b      	ldrb	r3, [r3, r1]
    3bf8:	0028      	movs	r0, r5
    3bfa:	7033      	strb	r3, [r6, #0]
    3bfc:	0039      	movs	r1, r7
    3bfe:	f002 f889 	bl	5d14 <__udivsi3>
    3c02:	1e05      	subs	r5, r0, #0
    3c04:	d1f1      	bne.n	3bea <_printf_i+0x1d6>
    3c06:	2f08      	cmp	r7, #8
    3c08:	d109      	bne.n	3c1e <_printf_i+0x20a>
    3c0a:	6823      	ldr	r3, [r4, #0]
    3c0c:	07db      	lsls	r3, r3, #31
    3c0e:	d506      	bpl.n	3c1e <_printf_i+0x20a>
    3c10:	6863      	ldr	r3, [r4, #4]
    3c12:	6922      	ldr	r2, [r4, #16]
    3c14:	4293      	cmp	r3, r2
    3c16:	dc02      	bgt.n	3c1e <_printf_i+0x20a>
    3c18:	2330      	movs	r3, #48	; 0x30
    3c1a:	3e01      	subs	r6, #1
    3c1c:	7033      	strb	r3, [r6, #0]
    3c1e:	9b04      	ldr	r3, [sp, #16]
    3c20:	1b9b      	subs	r3, r3, r6
    3c22:	6123      	str	r3, [r4, #16]
    3c24:	9b07      	ldr	r3, [sp, #28]
    3c26:	aa09      	add	r2, sp, #36	; 0x24
    3c28:	9300      	str	r3, [sp, #0]
    3c2a:	0021      	movs	r1, r4
    3c2c:	9b06      	ldr	r3, [sp, #24]
    3c2e:	9805      	ldr	r0, [sp, #20]
    3c30:	f7ff fe82 	bl	3938 <_printf_common>
    3c34:	1c43      	adds	r3, r0, #1
    3c36:	d1b3      	bne.n	3ba0 <_printf_i+0x18c>
    3c38:	2001      	movs	r0, #1
    3c3a:	4240      	negs	r0, r0
    3c3c:	b00b      	add	sp, #44	; 0x2c
    3c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c40:	00008973 	.word	0x00008973
    3c44:	00008962 	.word	0x00008962

00003c48 <iprintf>:
    3c48:	b40f      	push	{r0, r1, r2, r3}
    3c4a:	4b0b      	ldr	r3, [pc, #44]	; (3c78 <iprintf+0x30>)
    3c4c:	b513      	push	{r0, r1, r4, lr}
    3c4e:	681c      	ldr	r4, [r3, #0]
    3c50:	2c00      	cmp	r4, #0
    3c52:	d005      	beq.n	3c60 <iprintf+0x18>
    3c54:	69a3      	ldr	r3, [r4, #24]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d102      	bne.n	3c60 <iprintf+0x18>
    3c5a:	0020      	movs	r0, r4
    3c5c:	f001 f966 	bl	4f2c <__sinit>
    3c60:	ab05      	add	r3, sp, #20
    3c62:	9a04      	ldr	r2, [sp, #16]
    3c64:	68a1      	ldr	r1, [r4, #8]
    3c66:	0020      	movs	r0, r4
    3c68:	9301      	str	r3, [sp, #4]
    3c6a:	f001 fe3d 	bl	58e8 <_vfiprintf_r>
    3c6e:	bc16      	pop	{r1, r2, r4}
    3c70:	bc08      	pop	{r3}
    3c72:	b004      	add	sp, #16
    3c74:	4718      	bx	r3
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	2000000c 	.word	0x2000000c

00003c7c <_puts_r>:
    3c7c:	b570      	push	{r4, r5, r6, lr}
    3c7e:	0005      	movs	r5, r0
    3c80:	000e      	movs	r6, r1
    3c82:	2800      	cmp	r0, #0
    3c84:	d004      	beq.n	3c90 <_puts_r+0x14>
    3c86:	6983      	ldr	r3, [r0, #24]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d101      	bne.n	3c90 <_puts_r+0x14>
    3c8c:	f001 f94e 	bl	4f2c <__sinit>
    3c90:	69ab      	ldr	r3, [r5, #24]
    3c92:	68ac      	ldr	r4, [r5, #8]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d102      	bne.n	3c9e <_puts_r+0x22>
    3c98:	0028      	movs	r0, r5
    3c9a:	f001 f947 	bl	4f2c <__sinit>
    3c9e:	4b24      	ldr	r3, [pc, #144]	; (3d30 <_puts_r+0xb4>)
    3ca0:	429c      	cmp	r4, r3
    3ca2:	d10f      	bne.n	3cc4 <_puts_r+0x48>
    3ca4:	686c      	ldr	r4, [r5, #4]
    3ca6:	89a3      	ldrh	r3, [r4, #12]
    3ca8:	071b      	lsls	r3, r3, #28
    3caa:	d502      	bpl.n	3cb2 <_puts_r+0x36>
    3cac:	6923      	ldr	r3, [r4, #16]
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d120      	bne.n	3cf4 <_puts_r+0x78>
    3cb2:	0021      	movs	r1, r4
    3cb4:	0028      	movs	r0, r5
    3cb6:	f000 f95f 	bl	3f78 <__swsetup_r>
    3cba:	2800      	cmp	r0, #0
    3cbc:	d01a      	beq.n	3cf4 <_puts_r+0x78>
    3cbe:	2001      	movs	r0, #1
    3cc0:	4240      	negs	r0, r0
    3cc2:	bd70      	pop	{r4, r5, r6, pc}
    3cc4:	4b1b      	ldr	r3, [pc, #108]	; (3d34 <_puts_r+0xb8>)
    3cc6:	429c      	cmp	r4, r3
    3cc8:	d101      	bne.n	3cce <_puts_r+0x52>
    3cca:	68ac      	ldr	r4, [r5, #8]
    3ccc:	e7eb      	b.n	3ca6 <_puts_r+0x2a>
    3cce:	4b1a      	ldr	r3, [pc, #104]	; (3d38 <_puts_r+0xbc>)
    3cd0:	429c      	cmp	r4, r3
    3cd2:	d1e8      	bne.n	3ca6 <_puts_r+0x2a>
    3cd4:	68ec      	ldr	r4, [r5, #12]
    3cd6:	e7e6      	b.n	3ca6 <_puts_r+0x2a>
    3cd8:	3b01      	subs	r3, #1
    3cda:	3601      	adds	r6, #1
    3cdc:	60a3      	str	r3, [r4, #8]
    3cde:	2b00      	cmp	r3, #0
    3ce0:	da04      	bge.n	3cec <_puts_r+0x70>
    3ce2:	69a2      	ldr	r2, [r4, #24]
    3ce4:	4293      	cmp	r3, r2
    3ce6:	db16      	blt.n	3d16 <_puts_r+0x9a>
    3ce8:	290a      	cmp	r1, #10
    3cea:	d014      	beq.n	3d16 <_puts_r+0x9a>
    3cec:	6823      	ldr	r3, [r4, #0]
    3cee:	1c5a      	adds	r2, r3, #1
    3cf0:	6022      	str	r2, [r4, #0]
    3cf2:	7019      	strb	r1, [r3, #0]
    3cf4:	7831      	ldrb	r1, [r6, #0]
    3cf6:	68a3      	ldr	r3, [r4, #8]
    3cf8:	2900      	cmp	r1, #0
    3cfa:	d1ed      	bne.n	3cd8 <_puts_r+0x5c>
    3cfc:	3b01      	subs	r3, #1
    3cfe:	60a3      	str	r3, [r4, #8]
    3d00:	2b00      	cmp	r3, #0
    3d02:	da0f      	bge.n	3d24 <_puts_r+0xa8>
    3d04:	0022      	movs	r2, r4
    3d06:	310a      	adds	r1, #10
    3d08:	0028      	movs	r0, r5
    3d0a:	f000 f8df 	bl	3ecc <__swbuf_r>
    3d0e:	1c43      	adds	r3, r0, #1
    3d10:	d0d5      	beq.n	3cbe <_puts_r+0x42>
    3d12:	200a      	movs	r0, #10
    3d14:	e7d5      	b.n	3cc2 <_puts_r+0x46>
    3d16:	0022      	movs	r2, r4
    3d18:	0028      	movs	r0, r5
    3d1a:	f000 f8d7 	bl	3ecc <__swbuf_r>
    3d1e:	1c43      	adds	r3, r0, #1
    3d20:	d1e8      	bne.n	3cf4 <_puts_r+0x78>
    3d22:	e7cc      	b.n	3cbe <_puts_r+0x42>
    3d24:	200a      	movs	r0, #10
    3d26:	6823      	ldr	r3, [r4, #0]
    3d28:	1c5a      	adds	r2, r3, #1
    3d2a:	6022      	str	r2, [r4, #0]
    3d2c:	7018      	strb	r0, [r3, #0]
    3d2e:	e7c8      	b.n	3cc2 <_puts_r+0x46>
    3d30:	000089b4 	.word	0x000089b4
    3d34:	000089d4 	.word	0x000089d4
    3d38:	00008994 	.word	0x00008994

00003d3c <puts>:
    3d3c:	b510      	push	{r4, lr}
    3d3e:	4b03      	ldr	r3, [pc, #12]	; (3d4c <puts+0x10>)
    3d40:	0001      	movs	r1, r0
    3d42:	6818      	ldr	r0, [r3, #0]
    3d44:	f7ff ff9a 	bl	3c7c <_puts_r>
    3d48:	bd10      	pop	{r4, pc}
    3d4a:	46c0      	nop			; (mov r8, r8)
    3d4c:	2000000c 	.word	0x2000000c

00003d50 <setbuf>:
    3d50:	424a      	negs	r2, r1
    3d52:	414a      	adcs	r2, r1
    3d54:	2380      	movs	r3, #128	; 0x80
    3d56:	b510      	push	{r4, lr}
    3d58:	0052      	lsls	r2, r2, #1
    3d5a:	00db      	lsls	r3, r3, #3
    3d5c:	f000 f802 	bl	3d64 <setvbuf>
    3d60:	bd10      	pop	{r4, pc}
	...

00003d64 <setvbuf>:
    3d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d66:	001d      	movs	r5, r3
    3d68:	4b4f      	ldr	r3, [pc, #316]	; (3ea8 <setvbuf+0x144>)
    3d6a:	b085      	sub	sp, #20
    3d6c:	681e      	ldr	r6, [r3, #0]
    3d6e:	0004      	movs	r4, r0
    3d70:	000f      	movs	r7, r1
    3d72:	9200      	str	r2, [sp, #0]
    3d74:	2e00      	cmp	r6, #0
    3d76:	d005      	beq.n	3d84 <setvbuf+0x20>
    3d78:	69b3      	ldr	r3, [r6, #24]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d102      	bne.n	3d84 <setvbuf+0x20>
    3d7e:	0030      	movs	r0, r6
    3d80:	f001 f8d4 	bl	4f2c <__sinit>
    3d84:	4b49      	ldr	r3, [pc, #292]	; (3eac <setvbuf+0x148>)
    3d86:	429c      	cmp	r4, r3
    3d88:	d150      	bne.n	3e2c <setvbuf+0xc8>
    3d8a:	6874      	ldr	r4, [r6, #4]
    3d8c:	9b00      	ldr	r3, [sp, #0]
    3d8e:	2b02      	cmp	r3, #2
    3d90:	d005      	beq.n	3d9e <setvbuf+0x3a>
    3d92:	2b01      	cmp	r3, #1
    3d94:	d900      	bls.n	3d98 <setvbuf+0x34>
    3d96:	e084      	b.n	3ea2 <setvbuf+0x13e>
    3d98:	2d00      	cmp	r5, #0
    3d9a:	da00      	bge.n	3d9e <setvbuf+0x3a>
    3d9c:	e081      	b.n	3ea2 <setvbuf+0x13e>
    3d9e:	0021      	movs	r1, r4
    3da0:	0030      	movs	r0, r6
    3da2:	f001 f855 	bl	4e50 <_fflush_r>
    3da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3da8:	2900      	cmp	r1, #0
    3daa:	d008      	beq.n	3dbe <setvbuf+0x5a>
    3dac:	0023      	movs	r3, r4
    3dae:	3344      	adds	r3, #68	; 0x44
    3db0:	4299      	cmp	r1, r3
    3db2:	d002      	beq.n	3dba <setvbuf+0x56>
    3db4:	0030      	movs	r0, r6
    3db6:	f001 fcc7 	bl	5748 <_free_r>
    3dba:	2300      	movs	r3, #0
    3dbc:	6363      	str	r3, [r4, #52]	; 0x34
    3dbe:	2300      	movs	r3, #0
    3dc0:	61a3      	str	r3, [r4, #24]
    3dc2:	6063      	str	r3, [r4, #4]
    3dc4:	89a3      	ldrh	r3, [r4, #12]
    3dc6:	061b      	lsls	r3, r3, #24
    3dc8:	d503      	bpl.n	3dd2 <setvbuf+0x6e>
    3dca:	6921      	ldr	r1, [r4, #16]
    3dcc:	0030      	movs	r0, r6
    3dce:	f001 fcbb 	bl	5748 <_free_r>
    3dd2:	89a3      	ldrh	r3, [r4, #12]
    3dd4:	4a36      	ldr	r2, [pc, #216]	; (3eb0 <setvbuf+0x14c>)
    3dd6:	4013      	ands	r3, r2
    3dd8:	81a3      	strh	r3, [r4, #12]
    3dda:	9b00      	ldr	r3, [sp, #0]
    3ddc:	2b02      	cmp	r3, #2
    3dde:	d05a      	beq.n	3e96 <setvbuf+0x132>
    3de0:	ab03      	add	r3, sp, #12
    3de2:	aa02      	add	r2, sp, #8
    3de4:	0021      	movs	r1, r4
    3de6:	0030      	movs	r0, r6
    3de8:	f001 f942 	bl	5070 <__swhatbuf_r>
    3dec:	89a3      	ldrh	r3, [r4, #12]
    3dee:	4318      	orrs	r0, r3
    3df0:	81a0      	strh	r0, [r4, #12]
    3df2:	2d00      	cmp	r5, #0
    3df4:	d124      	bne.n	3e40 <setvbuf+0xdc>
    3df6:	9d02      	ldr	r5, [sp, #8]
    3df8:	0028      	movs	r0, r5
    3dfa:	f001 f99f 	bl	513c <malloc>
    3dfe:	9501      	str	r5, [sp, #4]
    3e00:	1e07      	subs	r7, r0, #0
    3e02:	d142      	bne.n	3e8a <setvbuf+0x126>
    3e04:	9b02      	ldr	r3, [sp, #8]
    3e06:	9301      	str	r3, [sp, #4]
    3e08:	42ab      	cmp	r3, r5
    3e0a:	d139      	bne.n	3e80 <setvbuf+0x11c>
    3e0c:	2001      	movs	r0, #1
    3e0e:	4240      	negs	r0, r0
    3e10:	2302      	movs	r3, #2
    3e12:	89a2      	ldrh	r2, [r4, #12]
    3e14:	4313      	orrs	r3, r2
    3e16:	81a3      	strh	r3, [r4, #12]
    3e18:	2300      	movs	r3, #0
    3e1a:	60a3      	str	r3, [r4, #8]
    3e1c:	0023      	movs	r3, r4
    3e1e:	3347      	adds	r3, #71	; 0x47
    3e20:	6023      	str	r3, [r4, #0]
    3e22:	6123      	str	r3, [r4, #16]
    3e24:	2301      	movs	r3, #1
    3e26:	6163      	str	r3, [r4, #20]
    3e28:	b005      	add	sp, #20
    3e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e2c:	4b21      	ldr	r3, [pc, #132]	; (3eb4 <setvbuf+0x150>)
    3e2e:	429c      	cmp	r4, r3
    3e30:	d101      	bne.n	3e36 <setvbuf+0xd2>
    3e32:	68b4      	ldr	r4, [r6, #8]
    3e34:	e7aa      	b.n	3d8c <setvbuf+0x28>
    3e36:	4b20      	ldr	r3, [pc, #128]	; (3eb8 <setvbuf+0x154>)
    3e38:	429c      	cmp	r4, r3
    3e3a:	d1a7      	bne.n	3d8c <setvbuf+0x28>
    3e3c:	68f4      	ldr	r4, [r6, #12]
    3e3e:	e7a5      	b.n	3d8c <setvbuf+0x28>
    3e40:	2f00      	cmp	r7, #0
    3e42:	d0d9      	beq.n	3df8 <setvbuf+0x94>
    3e44:	69b3      	ldr	r3, [r6, #24]
    3e46:	2b00      	cmp	r3, #0
    3e48:	d102      	bne.n	3e50 <setvbuf+0xec>
    3e4a:	0030      	movs	r0, r6
    3e4c:	f001 f86e 	bl	4f2c <__sinit>
    3e50:	9b00      	ldr	r3, [sp, #0]
    3e52:	2b01      	cmp	r3, #1
    3e54:	d103      	bne.n	3e5e <setvbuf+0xfa>
    3e56:	89a3      	ldrh	r3, [r4, #12]
    3e58:	9a00      	ldr	r2, [sp, #0]
    3e5a:	431a      	orrs	r2, r3
    3e5c:	81a2      	strh	r2, [r4, #12]
    3e5e:	2008      	movs	r0, #8
    3e60:	89a3      	ldrh	r3, [r4, #12]
    3e62:	6027      	str	r7, [r4, #0]
    3e64:	6127      	str	r7, [r4, #16]
    3e66:	6165      	str	r5, [r4, #20]
    3e68:	4018      	ands	r0, r3
    3e6a:	d018      	beq.n	3e9e <setvbuf+0x13a>
    3e6c:	2001      	movs	r0, #1
    3e6e:	4018      	ands	r0, r3
    3e70:	2300      	movs	r3, #0
    3e72:	4298      	cmp	r0, r3
    3e74:	d011      	beq.n	3e9a <setvbuf+0x136>
    3e76:	426d      	negs	r5, r5
    3e78:	60a3      	str	r3, [r4, #8]
    3e7a:	61a5      	str	r5, [r4, #24]
    3e7c:	0018      	movs	r0, r3
    3e7e:	e7d3      	b.n	3e28 <setvbuf+0xc4>
    3e80:	9801      	ldr	r0, [sp, #4]
    3e82:	f001 f95b 	bl	513c <malloc>
    3e86:	1e07      	subs	r7, r0, #0
    3e88:	d0c0      	beq.n	3e0c <setvbuf+0xa8>
    3e8a:	2380      	movs	r3, #128	; 0x80
    3e8c:	89a2      	ldrh	r2, [r4, #12]
    3e8e:	9d01      	ldr	r5, [sp, #4]
    3e90:	4313      	orrs	r3, r2
    3e92:	81a3      	strh	r3, [r4, #12]
    3e94:	e7d6      	b.n	3e44 <setvbuf+0xe0>
    3e96:	2000      	movs	r0, #0
    3e98:	e7ba      	b.n	3e10 <setvbuf+0xac>
    3e9a:	60a5      	str	r5, [r4, #8]
    3e9c:	e7c4      	b.n	3e28 <setvbuf+0xc4>
    3e9e:	60a0      	str	r0, [r4, #8]
    3ea0:	e7c2      	b.n	3e28 <setvbuf+0xc4>
    3ea2:	2001      	movs	r0, #1
    3ea4:	4240      	negs	r0, r0
    3ea6:	e7bf      	b.n	3e28 <setvbuf+0xc4>
    3ea8:	2000000c 	.word	0x2000000c
    3eac:	000089b4 	.word	0x000089b4
    3eb0:	fffff35c 	.word	0xfffff35c
    3eb4:	000089d4 	.word	0x000089d4
    3eb8:	00008994 	.word	0x00008994

00003ebc <strlen>:
    3ebc:	2300      	movs	r3, #0
    3ebe:	5cc2      	ldrb	r2, [r0, r3]
    3ec0:	3301      	adds	r3, #1
    3ec2:	2a00      	cmp	r2, #0
    3ec4:	d1fb      	bne.n	3ebe <strlen+0x2>
    3ec6:	1e58      	subs	r0, r3, #1
    3ec8:	4770      	bx	lr
	...

00003ecc <__swbuf_r>:
    3ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ece:	0005      	movs	r5, r0
    3ed0:	000e      	movs	r6, r1
    3ed2:	0014      	movs	r4, r2
    3ed4:	2800      	cmp	r0, #0
    3ed6:	d004      	beq.n	3ee2 <__swbuf_r+0x16>
    3ed8:	6983      	ldr	r3, [r0, #24]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d101      	bne.n	3ee2 <__swbuf_r+0x16>
    3ede:	f001 f825 	bl	4f2c <__sinit>
    3ee2:	4b22      	ldr	r3, [pc, #136]	; (3f6c <__swbuf_r+0xa0>)
    3ee4:	429c      	cmp	r4, r3
    3ee6:	d12d      	bne.n	3f44 <__swbuf_r+0x78>
    3ee8:	686c      	ldr	r4, [r5, #4]
    3eea:	69a3      	ldr	r3, [r4, #24]
    3eec:	60a3      	str	r3, [r4, #8]
    3eee:	89a3      	ldrh	r3, [r4, #12]
    3ef0:	071b      	lsls	r3, r3, #28
    3ef2:	d531      	bpl.n	3f58 <__swbuf_r+0x8c>
    3ef4:	6923      	ldr	r3, [r4, #16]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d02e      	beq.n	3f58 <__swbuf_r+0x8c>
    3efa:	6823      	ldr	r3, [r4, #0]
    3efc:	6922      	ldr	r2, [r4, #16]
    3efe:	b2f7      	uxtb	r7, r6
    3f00:	1a98      	subs	r0, r3, r2
    3f02:	6963      	ldr	r3, [r4, #20]
    3f04:	b2f6      	uxtb	r6, r6
    3f06:	4298      	cmp	r0, r3
    3f08:	db05      	blt.n	3f16 <__swbuf_r+0x4a>
    3f0a:	0021      	movs	r1, r4
    3f0c:	0028      	movs	r0, r5
    3f0e:	f000 ff9f 	bl	4e50 <_fflush_r>
    3f12:	2800      	cmp	r0, #0
    3f14:	d126      	bne.n	3f64 <__swbuf_r+0x98>
    3f16:	68a3      	ldr	r3, [r4, #8]
    3f18:	3001      	adds	r0, #1
    3f1a:	3b01      	subs	r3, #1
    3f1c:	60a3      	str	r3, [r4, #8]
    3f1e:	6823      	ldr	r3, [r4, #0]
    3f20:	1c5a      	adds	r2, r3, #1
    3f22:	6022      	str	r2, [r4, #0]
    3f24:	701f      	strb	r7, [r3, #0]
    3f26:	6963      	ldr	r3, [r4, #20]
    3f28:	4298      	cmp	r0, r3
    3f2a:	d004      	beq.n	3f36 <__swbuf_r+0x6a>
    3f2c:	89a3      	ldrh	r3, [r4, #12]
    3f2e:	07db      	lsls	r3, r3, #31
    3f30:	d51a      	bpl.n	3f68 <__swbuf_r+0x9c>
    3f32:	2e0a      	cmp	r6, #10
    3f34:	d118      	bne.n	3f68 <__swbuf_r+0x9c>
    3f36:	0021      	movs	r1, r4
    3f38:	0028      	movs	r0, r5
    3f3a:	f000 ff89 	bl	4e50 <_fflush_r>
    3f3e:	2800      	cmp	r0, #0
    3f40:	d012      	beq.n	3f68 <__swbuf_r+0x9c>
    3f42:	e00f      	b.n	3f64 <__swbuf_r+0x98>
    3f44:	4b0a      	ldr	r3, [pc, #40]	; (3f70 <__swbuf_r+0xa4>)
    3f46:	429c      	cmp	r4, r3
    3f48:	d101      	bne.n	3f4e <__swbuf_r+0x82>
    3f4a:	68ac      	ldr	r4, [r5, #8]
    3f4c:	e7cd      	b.n	3eea <__swbuf_r+0x1e>
    3f4e:	4b09      	ldr	r3, [pc, #36]	; (3f74 <__swbuf_r+0xa8>)
    3f50:	429c      	cmp	r4, r3
    3f52:	d1ca      	bne.n	3eea <__swbuf_r+0x1e>
    3f54:	68ec      	ldr	r4, [r5, #12]
    3f56:	e7c8      	b.n	3eea <__swbuf_r+0x1e>
    3f58:	0021      	movs	r1, r4
    3f5a:	0028      	movs	r0, r5
    3f5c:	f000 f80c 	bl	3f78 <__swsetup_r>
    3f60:	2800      	cmp	r0, #0
    3f62:	d0ca      	beq.n	3efa <__swbuf_r+0x2e>
    3f64:	2601      	movs	r6, #1
    3f66:	4276      	negs	r6, r6
    3f68:	0030      	movs	r0, r6
    3f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f6c:	000089b4 	.word	0x000089b4
    3f70:	000089d4 	.word	0x000089d4
    3f74:	00008994 	.word	0x00008994

00003f78 <__swsetup_r>:
    3f78:	4b36      	ldr	r3, [pc, #216]	; (4054 <__swsetup_r+0xdc>)
    3f7a:	b570      	push	{r4, r5, r6, lr}
    3f7c:	681d      	ldr	r5, [r3, #0]
    3f7e:	0006      	movs	r6, r0
    3f80:	000c      	movs	r4, r1
    3f82:	2d00      	cmp	r5, #0
    3f84:	d005      	beq.n	3f92 <__swsetup_r+0x1a>
    3f86:	69ab      	ldr	r3, [r5, #24]
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d102      	bne.n	3f92 <__swsetup_r+0x1a>
    3f8c:	0028      	movs	r0, r5
    3f8e:	f000 ffcd 	bl	4f2c <__sinit>
    3f92:	4b31      	ldr	r3, [pc, #196]	; (4058 <__swsetup_r+0xe0>)
    3f94:	429c      	cmp	r4, r3
    3f96:	d10f      	bne.n	3fb8 <__swsetup_r+0x40>
    3f98:	686c      	ldr	r4, [r5, #4]
    3f9a:	230c      	movs	r3, #12
    3f9c:	5ee2      	ldrsh	r2, [r4, r3]
    3f9e:	b293      	uxth	r3, r2
    3fa0:	0719      	lsls	r1, r3, #28
    3fa2:	d42d      	bmi.n	4000 <__swsetup_r+0x88>
    3fa4:	06d9      	lsls	r1, r3, #27
    3fa6:	d411      	bmi.n	3fcc <__swsetup_r+0x54>
    3fa8:	2309      	movs	r3, #9
    3faa:	2001      	movs	r0, #1
    3fac:	6033      	str	r3, [r6, #0]
    3fae:	3337      	adds	r3, #55	; 0x37
    3fb0:	4313      	orrs	r3, r2
    3fb2:	81a3      	strh	r3, [r4, #12]
    3fb4:	4240      	negs	r0, r0
    3fb6:	bd70      	pop	{r4, r5, r6, pc}
    3fb8:	4b28      	ldr	r3, [pc, #160]	; (405c <__swsetup_r+0xe4>)
    3fba:	429c      	cmp	r4, r3
    3fbc:	d101      	bne.n	3fc2 <__swsetup_r+0x4a>
    3fbe:	68ac      	ldr	r4, [r5, #8]
    3fc0:	e7eb      	b.n	3f9a <__swsetup_r+0x22>
    3fc2:	4b27      	ldr	r3, [pc, #156]	; (4060 <__swsetup_r+0xe8>)
    3fc4:	429c      	cmp	r4, r3
    3fc6:	d1e8      	bne.n	3f9a <__swsetup_r+0x22>
    3fc8:	68ec      	ldr	r4, [r5, #12]
    3fca:	e7e6      	b.n	3f9a <__swsetup_r+0x22>
    3fcc:	075b      	lsls	r3, r3, #29
    3fce:	d513      	bpl.n	3ff8 <__swsetup_r+0x80>
    3fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3fd2:	2900      	cmp	r1, #0
    3fd4:	d008      	beq.n	3fe8 <__swsetup_r+0x70>
    3fd6:	0023      	movs	r3, r4
    3fd8:	3344      	adds	r3, #68	; 0x44
    3fda:	4299      	cmp	r1, r3
    3fdc:	d002      	beq.n	3fe4 <__swsetup_r+0x6c>
    3fde:	0030      	movs	r0, r6
    3fe0:	f001 fbb2 	bl	5748 <_free_r>
    3fe4:	2300      	movs	r3, #0
    3fe6:	6363      	str	r3, [r4, #52]	; 0x34
    3fe8:	2224      	movs	r2, #36	; 0x24
    3fea:	89a3      	ldrh	r3, [r4, #12]
    3fec:	4393      	bics	r3, r2
    3fee:	81a3      	strh	r3, [r4, #12]
    3ff0:	2300      	movs	r3, #0
    3ff2:	6063      	str	r3, [r4, #4]
    3ff4:	6923      	ldr	r3, [r4, #16]
    3ff6:	6023      	str	r3, [r4, #0]
    3ff8:	2308      	movs	r3, #8
    3ffa:	89a2      	ldrh	r2, [r4, #12]
    3ffc:	4313      	orrs	r3, r2
    3ffe:	81a3      	strh	r3, [r4, #12]
    4000:	6923      	ldr	r3, [r4, #16]
    4002:	2b00      	cmp	r3, #0
    4004:	d10b      	bne.n	401e <__swsetup_r+0xa6>
    4006:	21a0      	movs	r1, #160	; 0xa0
    4008:	2280      	movs	r2, #128	; 0x80
    400a:	89a3      	ldrh	r3, [r4, #12]
    400c:	0089      	lsls	r1, r1, #2
    400e:	0092      	lsls	r2, r2, #2
    4010:	400b      	ands	r3, r1
    4012:	4293      	cmp	r3, r2
    4014:	d003      	beq.n	401e <__swsetup_r+0xa6>
    4016:	0021      	movs	r1, r4
    4018:	0030      	movs	r0, r6
    401a:	f001 f851 	bl	50c0 <__smakebuf_r>
    401e:	2301      	movs	r3, #1
    4020:	89a2      	ldrh	r2, [r4, #12]
    4022:	4013      	ands	r3, r2
    4024:	d011      	beq.n	404a <__swsetup_r+0xd2>
    4026:	2300      	movs	r3, #0
    4028:	60a3      	str	r3, [r4, #8]
    402a:	6963      	ldr	r3, [r4, #20]
    402c:	425b      	negs	r3, r3
    402e:	61a3      	str	r3, [r4, #24]
    4030:	2000      	movs	r0, #0
    4032:	6923      	ldr	r3, [r4, #16]
    4034:	4283      	cmp	r3, r0
    4036:	d1be      	bne.n	3fb6 <__swsetup_r+0x3e>
    4038:	230c      	movs	r3, #12
    403a:	5ee2      	ldrsh	r2, [r4, r3]
    403c:	0613      	lsls	r3, r2, #24
    403e:	d5ba      	bpl.n	3fb6 <__swsetup_r+0x3e>
    4040:	2340      	movs	r3, #64	; 0x40
    4042:	4313      	orrs	r3, r2
    4044:	81a3      	strh	r3, [r4, #12]
    4046:	3801      	subs	r0, #1
    4048:	e7b5      	b.n	3fb6 <__swsetup_r+0x3e>
    404a:	0792      	lsls	r2, r2, #30
    404c:	d400      	bmi.n	4050 <__swsetup_r+0xd8>
    404e:	6963      	ldr	r3, [r4, #20]
    4050:	60a3      	str	r3, [r4, #8]
    4052:	e7ed      	b.n	4030 <__swsetup_r+0xb8>
    4054:	2000000c 	.word	0x2000000c
    4058:	000089b4 	.word	0x000089b4
    405c:	000089d4 	.word	0x000089d4
    4060:	00008994 	.word	0x00008994

00004064 <quorem>:
    4064:	b5f0      	push	{r4, r5, r6, r7, lr}
    4066:	6903      	ldr	r3, [r0, #16]
    4068:	690c      	ldr	r4, [r1, #16]
    406a:	b089      	sub	sp, #36	; 0x24
    406c:	0007      	movs	r7, r0
    406e:	9105      	str	r1, [sp, #20]
    4070:	2600      	movs	r6, #0
    4072:	429c      	cmp	r4, r3
    4074:	dc6d      	bgt.n	4152 <quorem+0xee>
    4076:	000b      	movs	r3, r1
    4078:	3c01      	subs	r4, #1
    407a:	3314      	adds	r3, #20
    407c:	00a5      	lsls	r5, r4, #2
    407e:	9303      	str	r3, [sp, #12]
    4080:	195b      	adds	r3, r3, r5
    4082:	9304      	str	r3, [sp, #16]
    4084:	0003      	movs	r3, r0
    4086:	3314      	adds	r3, #20
    4088:	9302      	str	r3, [sp, #8]
    408a:	195d      	adds	r5, r3, r5
    408c:	9b04      	ldr	r3, [sp, #16]
    408e:	6828      	ldr	r0, [r5, #0]
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	1c59      	adds	r1, r3, #1
    4094:	9301      	str	r3, [sp, #4]
    4096:	f001 fe3d 	bl	5d14 <__udivsi3>
    409a:	9001      	str	r0, [sp, #4]
    409c:	42b0      	cmp	r0, r6
    409e:	d02d      	beq.n	40fc <quorem+0x98>
    40a0:	9b03      	ldr	r3, [sp, #12]
    40a2:	9802      	ldr	r0, [sp, #8]
    40a4:	469c      	mov	ip, r3
    40a6:	9606      	str	r6, [sp, #24]
    40a8:	4662      	mov	r2, ip
    40aa:	ca08      	ldmia	r2!, {r3}
    40ac:	4694      	mov	ip, r2
    40ae:	9a01      	ldr	r2, [sp, #4]
    40b0:	b299      	uxth	r1, r3
    40b2:	4351      	muls	r1, r2
    40b4:	0c1b      	lsrs	r3, r3, #16
    40b6:	4353      	muls	r3, r2
    40b8:	1989      	adds	r1, r1, r6
    40ba:	0c0a      	lsrs	r2, r1, #16
    40bc:	189b      	adds	r3, r3, r2
    40be:	9307      	str	r3, [sp, #28]
    40c0:	8802      	ldrh	r2, [r0, #0]
    40c2:	0c1e      	lsrs	r6, r3, #16
    40c4:	9b06      	ldr	r3, [sp, #24]
    40c6:	b289      	uxth	r1, r1
    40c8:	18d2      	adds	r2, r2, r3
    40ca:	6803      	ldr	r3, [r0, #0]
    40cc:	1a52      	subs	r2, r2, r1
    40ce:	0c19      	lsrs	r1, r3, #16
    40d0:	466b      	mov	r3, sp
    40d2:	8b9b      	ldrh	r3, [r3, #28]
    40d4:	1acb      	subs	r3, r1, r3
    40d6:	1411      	asrs	r1, r2, #16
    40d8:	185b      	adds	r3, r3, r1
    40da:	1419      	asrs	r1, r3, #16
    40dc:	b292      	uxth	r2, r2
    40de:	041b      	lsls	r3, r3, #16
    40e0:	431a      	orrs	r2, r3
    40e2:	9b04      	ldr	r3, [sp, #16]
    40e4:	9106      	str	r1, [sp, #24]
    40e6:	c004      	stmia	r0!, {r2}
    40e8:	4563      	cmp	r3, ip
    40ea:	d2dd      	bcs.n	40a8 <quorem+0x44>
    40ec:	682b      	ldr	r3, [r5, #0]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d104      	bne.n	40fc <quorem+0x98>
    40f2:	9b02      	ldr	r3, [sp, #8]
    40f4:	3d04      	subs	r5, #4
    40f6:	42ab      	cmp	r3, r5
    40f8:	d32e      	bcc.n	4158 <quorem+0xf4>
    40fa:	613c      	str	r4, [r7, #16]
    40fc:	9905      	ldr	r1, [sp, #20]
    40fe:	0038      	movs	r0, r7
    4100:	f001 fa43 	bl	558a <__mcmp>
    4104:	2800      	cmp	r0, #0
    4106:	db23      	blt.n	4150 <quorem+0xec>
    4108:	2500      	movs	r5, #0
    410a:	9b01      	ldr	r3, [sp, #4]
    410c:	9802      	ldr	r0, [sp, #8]
    410e:	3301      	adds	r3, #1
    4110:	9903      	ldr	r1, [sp, #12]
    4112:	9301      	str	r3, [sp, #4]
    4114:	c908      	ldmia	r1!, {r3}
    4116:	8802      	ldrh	r2, [r0, #0]
    4118:	1955      	adds	r5, r2, r5
    411a:	b29a      	uxth	r2, r3
    411c:	1aaa      	subs	r2, r5, r2
    411e:	6805      	ldr	r5, [r0, #0]
    4120:	0c1b      	lsrs	r3, r3, #16
    4122:	0c2d      	lsrs	r5, r5, #16
    4124:	1aeb      	subs	r3, r5, r3
    4126:	1415      	asrs	r5, r2, #16
    4128:	195b      	adds	r3, r3, r5
    412a:	141d      	asrs	r5, r3, #16
    412c:	b292      	uxth	r2, r2
    412e:	041b      	lsls	r3, r3, #16
    4130:	4313      	orrs	r3, r2
    4132:	c008      	stmia	r0!, {r3}
    4134:	9b04      	ldr	r3, [sp, #16]
    4136:	428b      	cmp	r3, r1
    4138:	d2ec      	bcs.n	4114 <quorem+0xb0>
    413a:	9a02      	ldr	r2, [sp, #8]
    413c:	00a3      	lsls	r3, r4, #2
    413e:	18d3      	adds	r3, r2, r3
    4140:	681a      	ldr	r2, [r3, #0]
    4142:	2a00      	cmp	r2, #0
    4144:	d104      	bne.n	4150 <quorem+0xec>
    4146:	9a02      	ldr	r2, [sp, #8]
    4148:	3b04      	subs	r3, #4
    414a:	429a      	cmp	r2, r3
    414c:	d309      	bcc.n	4162 <quorem+0xfe>
    414e:	613c      	str	r4, [r7, #16]
    4150:	9e01      	ldr	r6, [sp, #4]
    4152:	0030      	movs	r0, r6
    4154:	b009      	add	sp, #36	; 0x24
    4156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4158:	682b      	ldr	r3, [r5, #0]
    415a:	2b00      	cmp	r3, #0
    415c:	d1cd      	bne.n	40fa <quorem+0x96>
    415e:	3c01      	subs	r4, #1
    4160:	e7c7      	b.n	40f2 <quorem+0x8e>
    4162:	681a      	ldr	r2, [r3, #0]
    4164:	2a00      	cmp	r2, #0
    4166:	d1f2      	bne.n	414e <quorem+0xea>
    4168:	3c01      	subs	r4, #1
    416a:	e7ec      	b.n	4146 <quorem+0xe2>

0000416c <_dtoa_r>:
    416c:	b5f0      	push	{r4, r5, r6, r7, lr}
    416e:	0016      	movs	r6, r2
    4170:	001f      	movs	r7, r3
    4172:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4174:	b09d      	sub	sp, #116	; 0x74
    4176:	9004      	str	r0, [sp, #16]
    4178:	9d25      	ldr	r5, [sp, #148]	; 0x94
    417a:	9606      	str	r6, [sp, #24]
    417c:	9707      	str	r7, [sp, #28]
    417e:	2c00      	cmp	r4, #0
    4180:	d108      	bne.n	4194 <_dtoa_r+0x28>
    4182:	2010      	movs	r0, #16
    4184:	f000 ffda 	bl	513c <malloc>
    4188:	9b04      	ldr	r3, [sp, #16]
    418a:	6258      	str	r0, [r3, #36]	; 0x24
    418c:	6044      	str	r4, [r0, #4]
    418e:	6084      	str	r4, [r0, #8]
    4190:	6004      	str	r4, [r0, #0]
    4192:	60c4      	str	r4, [r0, #12]
    4194:	9b04      	ldr	r3, [sp, #16]
    4196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4198:	6819      	ldr	r1, [r3, #0]
    419a:	2900      	cmp	r1, #0
    419c:	d00b      	beq.n	41b6 <_dtoa_r+0x4a>
    419e:	685a      	ldr	r2, [r3, #4]
    41a0:	2301      	movs	r3, #1
    41a2:	4093      	lsls	r3, r2
    41a4:	604a      	str	r2, [r1, #4]
    41a6:	608b      	str	r3, [r1, #8]
    41a8:	9804      	ldr	r0, [sp, #16]
    41aa:	f001 f814 	bl	51d6 <_Bfree>
    41ae:	2200      	movs	r2, #0
    41b0:	9b04      	ldr	r3, [sp, #16]
    41b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41b4:	601a      	str	r2, [r3, #0]
    41b6:	9b07      	ldr	r3, [sp, #28]
    41b8:	2b00      	cmp	r3, #0
    41ba:	da1f      	bge.n	41fc <_dtoa_r+0x90>
    41bc:	2301      	movs	r3, #1
    41be:	602b      	str	r3, [r5, #0]
    41c0:	007b      	lsls	r3, r7, #1
    41c2:	085b      	lsrs	r3, r3, #1
    41c4:	9307      	str	r3, [sp, #28]
    41c6:	9c07      	ldr	r4, [sp, #28]
    41c8:	4bb7      	ldr	r3, [pc, #732]	; (44a8 <_dtoa_r+0x33c>)
    41ca:	0022      	movs	r2, r4
    41cc:	9319      	str	r3, [sp, #100]	; 0x64
    41ce:	401a      	ands	r2, r3
    41d0:	429a      	cmp	r2, r3
    41d2:	d116      	bne.n	4202 <_dtoa_r+0x96>
    41d4:	4bb5      	ldr	r3, [pc, #724]	; (44ac <_dtoa_r+0x340>)
    41d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    41d8:	6013      	str	r3, [r2, #0]
    41da:	9b06      	ldr	r3, [sp, #24]
    41dc:	2b00      	cmp	r3, #0
    41de:	d103      	bne.n	41e8 <_dtoa_r+0x7c>
    41e0:	0324      	lsls	r4, r4, #12
    41e2:	d101      	bne.n	41e8 <_dtoa_r+0x7c>
    41e4:	f000 fd91 	bl	4d0a <_dtoa_r+0xb9e>
    41e8:	4bb1      	ldr	r3, [pc, #708]	; (44b0 <_dtoa_r+0x344>)
    41ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
    41ec:	930a      	str	r3, [sp, #40]	; 0x28
    41ee:	4bb1      	ldr	r3, [pc, #708]	; (44b4 <_dtoa_r+0x348>)
    41f0:	2a00      	cmp	r2, #0
    41f2:	d001      	beq.n	41f8 <_dtoa_r+0x8c>
    41f4:	f000 fd8f 	bl	4d16 <_dtoa_r+0xbaa>
    41f8:	f000 fd8f 	bl	4d1a <_dtoa_r+0xbae>
    41fc:	2300      	movs	r3, #0
    41fe:	602b      	str	r3, [r5, #0]
    4200:	e7e1      	b.n	41c6 <_dtoa_r+0x5a>
    4202:	9e06      	ldr	r6, [sp, #24]
    4204:	9f07      	ldr	r7, [sp, #28]
    4206:	2200      	movs	r2, #0
    4208:	2300      	movs	r3, #0
    420a:	0030      	movs	r0, r6
    420c:	0039      	movs	r1, r7
    420e:	f001 ff07 	bl	6020 <__aeabi_dcmpeq>
    4212:	1e05      	subs	r5, r0, #0
    4214:	d00e      	beq.n	4234 <_dtoa_r+0xc8>
    4216:	2301      	movs	r3, #1
    4218:	9a24      	ldr	r2, [sp, #144]	; 0x90
    421a:	6013      	str	r3, [r2, #0]
    421c:	4ba6      	ldr	r3, [pc, #664]	; (44b8 <_dtoa_r+0x34c>)
    421e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4220:	930a      	str	r3, [sp, #40]	; 0x28
    4222:	2a00      	cmp	r2, #0
    4224:	d101      	bne.n	422a <_dtoa_r+0xbe>
    4226:	f000 fd78 	bl	4d1a <_dtoa_r+0xbae>
    422a:	4aa4      	ldr	r2, [pc, #656]	; (44bc <_dtoa_r+0x350>)
    422c:	9926      	ldr	r1, [sp, #152]	; 0x98
    422e:	600a      	str	r2, [r1, #0]
    4230:	f000 fd73 	bl	4d1a <_dtoa_r+0xbae>
    4234:	ab1a      	add	r3, sp, #104	; 0x68
    4236:	9301      	str	r3, [sp, #4]
    4238:	ab1b      	add	r3, sp, #108	; 0x6c
    423a:	9300      	str	r3, [sp, #0]
    423c:	0032      	movs	r2, r6
    423e:	003b      	movs	r3, r7
    4240:	9804      	ldr	r0, [sp, #16]
    4242:	f001 fa1f 	bl	5684 <__d2b>
    4246:	0063      	lsls	r3, r4, #1
    4248:	9005      	str	r0, [sp, #20]
    424a:	0d5b      	lsrs	r3, r3, #21
    424c:	d100      	bne.n	4250 <_dtoa_r+0xe4>
    424e:	e07f      	b.n	4350 <_dtoa_r+0x1e4>
    4250:	033a      	lsls	r2, r7, #12
    4252:	4c9b      	ldr	r4, [pc, #620]	; (44c0 <_dtoa_r+0x354>)
    4254:	0b12      	lsrs	r2, r2, #12
    4256:	4314      	orrs	r4, r2
    4258:	0021      	movs	r1, r4
    425a:	4a9a      	ldr	r2, [pc, #616]	; (44c4 <_dtoa_r+0x358>)
    425c:	0030      	movs	r0, r6
    425e:	9518      	str	r5, [sp, #96]	; 0x60
    4260:	189e      	adds	r6, r3, r2
    4262:	2200      	movs	r2, #0
    4264:	4b98      	ldr	r3, [pc, #608]	; (44c8 <_dtoa_r+0x35c>)
    4266:	f003 fe23 	bl	7eb0 <__aeabi_dsub>
    426a:	4a98      	ldr	r2, [pc, #608]	; (44cc <_dtoa_r+0x360>)
    426c:	4b98      	ldr	r3, [pc, #608]	; (44d0 <_dtoa_r+0x364>)
    426e:	f003 fb9f 	bl	79b0 <__aeabi_dmul>
    4272:	4a98      	ldr	r2, [pc, #608]	; (44d4 <_dtoa_r+0x368>)
    4274:	4b98      	ldr	r3, [pc, #608]	; (44d8 <_dtoa_r+0x36c>)
    4276:	f002 fc57 	bl	6b28 <__aeabi_dadd>
    427a:	0004      	movs	r4, r0
    427c:	0030      	movs	r0, r6
    427e:	000d      	movs	r5, r1
    4280:	f004 f980 	bl	8584 <__aeabi_i2d>
    4284:	4a95      	ldr	r2, [pc, #596]	; (44dc <_dtoa_r+0x370>)
    4286:	4b96      	ldr	r3, [pc, #600]	; (44e0 <_dtoa_r+0x374>)
    4288:	f003 fb92 	bl	79b0 <__aeabi_dmul>
    428c:	0002      	movs	r2, r0
    428e:	000b      	movs	r3, r1
    4290:	0020      	movs	r0, r4
    4292:	0029      	movs	r1, r5
    4294:	f002 fc48 	bl	6b28 <__aeabi_dadd>
    4298:	0004      	movs	r4, r0
    429a:	000d      	movs	r5, r1
    429c:	f004 f93e 	bl	851c <__aeabi_d2iz>
    42a0:	2200      	movs	r2, #0
    42a2:	9003      	str	r0, [sp, #12]
    42a4:	2300      	movs	r3, #0
    42a6:	0020      	movs	r0, r4
    42a8:	0029      	movs	r1, r5
    42aa:	f001 febf 	bl	602c <__aeabi_dcmplt>
    42ae:	2800      	cmp	r0, #0
    42b0:	d00e      	beq.n	42d0 <_dtoa_r+0x164>
    42b2:	9803      	ldr	r0, [sp, #12]
    42b4:	f004 f966 	bl	8584 <__aeabi_i2d>
    42b8:	000b      	movs	r3, r1
    42ba:	0002      	movs	r2, r0
    42bc:	0029      	movs	r1, r5
    42be:	0020      	movs	r0, r4
    42c0:	f001 feae 	bl	6020 <__aeabi_dcmpeq>
    42c4:	0003      	movs	r3, r0
    42c6:	4258      	negs	r0, r3
    42c8:	4158      	adcs	r0, r3
    42ca:	9b03      	ldr	r3, [sp, #12]
    42cc:	1a1b      	subs	r3, r3, r0
    42ce:	9303      	str	r3, [sp, #12]
    42d0:	2301      	movs	r3, #1
    42d2:	9316      	str	r3, [sp, #88]	; 0x58
    42d4:	9b03      	ldr	r3, [sp, #12]
    42d6:	2b16      	cmp	r3, #22
    42d8:	d80f      	bhi.n	42fa <_dtoa_r+0x18e>
    42da:	4982      	ldr	r1, [pc, #520]	; (44e4 <_dtoa_r+0x378>)
    42dc:	00db      	lsls	r3, r3, #3
    42de:	18c9      	adds	r1, r1, r3
    42e0:	6808      	ldr	r0, [r1, #0]
    42e2:	6849      	ldr	r1, [r1, #4]
    42e4:	9a06      	ldr	r2, [sp, #24]
    42e6:	9b07      	ldr	r3, [sp, #28]
    42e8:	f001 feb4 	bl	6054 <__aeabi_dcmpgt>
    42ec:	2800      	cmp	r0, #0
    42ee:	d04b      	beq.n	4388 <_dtoa_r+0x21c>
    42f0:	9b03      	ldr	r3, [sp, #12]
    42f2:	3b01      	subs	r3, #1
    42f4:	9303      	str	r3, [sp, #12]
    42f6:	2300      	movs	r3, #0
    42f8:	9316      	str	r3, [sp, #88]	; 0x58
    42fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    42fc:	1b9e      	subs	r6, r3, r6
    42fe:	2300      	movs	r3, #0
    4300:	930b      	str	r3, [sp, #44]	; 0x2c
    4302:	0033      	movs	r3, r6
    4304:	3b01      	subs	r3, #1
    4306:	930c      	str	r3, [sp, #48]	; 0x30
    4308:	d504      	bpl.n	4314 <_dtoa_r+0x1a8>
    430a:	2301      	movs	r3, #1
    430c:	1b9b      	subs	r3, r3, r6
    430e:	930b      	str	r3, [sp, #44]	; 0x2c
    4310:	2300      	movs	r3, #0
    4312:	930c      	str	r3, [sp, #48]	; 0x30
    4314:	9b03      	ldr	r3, [sp, #12]
    4316:	2b00      	cmp	r3, #0
    4318:	db38      	blt.n	438c <_dtoa_r+0x220>
    431a:	9a03      	ldr	r2, [sp, #12]
    431c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    431e:	4694      	mov	ip, r2
    4320:	4463      	add	r3, ip
    4322:	930c      	str	r3, [sp, #48]	; 0x30
    4324:	2300      	movs	r3, #0
    4326:	920f      	str	r2, [sp, #60]	; 0x3c
    4328:	9308      	str	r3, [sp, #32]
    432a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    432c:	2501      	movs	r5, #1
    432e:	2b09      	cmp	r3, #9
    4330:	d900      	bls.n	4334 <_dtoa_r+0x1c8>
    4332:	e091      	b.n	4458 <_dtoa_r+0x2ec>
    4334:	2b05      	cmp	r3, #5
    4336:	dd02      	ble.n	433e <_dtoa_r+0x1d2>
    4338:	2500      	movs	r5, #0
    433a:	3b04      	subs	r3, #4
    433c:	9322      	str	r3, [sp, #136]	; 0x88
    433e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4340:	1e98      	subs	r0, r3, #2
    4342:	2803      	cmp	r0, #3
    4344:	d900      	bls.n	4348 <_dtoa_r+0x1dc>
    4346:	e091      	b.n	446c <_dtoa_r+0x300>
    4348:	f001 fcda 	bl	5d00 <__gnu_thumb1_case_uqi>
    434c:	76298482 	.word	0x76298482
    4350:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4352:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4354:	189e      	adds	r6, r3, r2
    4356:	4b64      	ldr	r3, [pc, #400]	; (44e8 <_dtoa_r+0x37c>)
    4358:	18f2      	adds	r2, r6, r3
    435a:	2a20      	cmp	r2, #32
    435c:	dd0f      	ble.n	437e <_dtoa_r+0x212>
    435e:	4b63      	ldr	r3, [pc, #396]	; (44ec <_dtoa_r+0x380>)
    4360:	9806      	ldr	r0, [sp, #24]
    4362:	18f3      	adds	r3, r6, r3
    4364:	40d8      	lsrs	r0, r3
    4366:	2340      	movs	r3, #64	; 0x40
    4368:	1a9b      	subs	r3, r3, r2
    436a:	409c      	lsls	r4, r3
    436c:	4320      	orrs	r0, r4
    436e:	f004 f94b 	bl	8608 <__aeabi_ui2d>
    4372:	2301      	movs	r3, #1
    4374:	4c5e      	ldr	r4, [pc, #376]	; (44f0 <_dtoa_r+0x384>)
    4376:	3e01      	subs	r6, #1
    4378:	1909      	adds	r1, r1, r4
    437a:	9318      	str	r3, [sp, #96]	; 0x60
    437c:	e771      	b.n	4262 <_dtoa_r+0xf6>
    437e:	2320      	movs	r3, #32
    4380:	9806      	ldr	r0, [sp, #24]
    4382:	1a9b      	subs	r3, r3, r2
    4384:	4098      	lsls	r0, r3
    4386:	e7f2      	b.n	436e <_dtoa_r+0x202>
    4388:	9016      	str	r0, [sp, #88]	; 0x58
    438a:	e7b6      	b.n	42fa <_dtoa_r+0x18e>
    438c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    438e:	9a03      	ldr	r2, [sp, #12]
    4390:	1a9b      	subs	r3, r3, r2
    4392:	930b      	str	r3, [sp, #44]	; 0x2c
    4394:	4253      	negs	r3, r2
    4396:	9308      	str	r3, [sp, #32]
    4398:	2300      	movs	r3, #0
    439a:	930f      	str	r3, [sp, #60]	; 0x3c
    439c:	e7c5      	b.n	432a <_dtoa_r+0x1be>
    439e:	2301      	movs	r3, #1
    43a0:	930e      	str	r3, [sp, #56]	; 0x38
    43a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    43a4:	2b00      	cmp	r3, #0
    43a6:	dd65      	ble.n	4474 <_dtoa_r+0x308>
    43a8:	001f      	movs	r7, r3
    43aa:	930d      	str	r3, [sp, #52]	; 0x34
    43ac:	9a04      	ldr	r2, [sp, #16]
    43ae:	6a54      	ldr	r4, [r2, #36]	; 0x24
    43b0:	2200      	movs	r2, #0
    43b2:	6062      	str	r2, [r4, #4]
    43b4:	3204      	adds	r2, #4
    43b6:	0011      	movs	r1, r2
    43b8:	3114      	adds	r1, #20
    43ba:	4299      	cmp	r1, r3
    43bc:	d95f      	bls.n	447e <_dtoa_r+0x312>
    43be:	6861      	ldr	r1, [r4, #4]
    43c0:	9804      	ldr	r0, [sp, #16]
    43c2:	f000 fed0 	bl	5166 <_Balloc>
    43c6:	9b04      	ldr	r3, [sp, #16]
    43c8:	6020      	str	r0, [r4, #0]
    43ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43cc:	681b      	ldr	r3, [r3, #0]
    43ce:	930a      	str	r3, [sp, #40]	; 0x28
    43d0:	2f0e      	cmp	r7, #14
    43d2:	d900      	bls.n	43d6 <_dtoa_r+0x26a>
    43d4:	e105      	b.n	45e2 <_dtoa_r+0x476>
    43d6:	2d00      	cmp	r5, #0
    43d8:	d100      	bne.n	43dc <_dtoa_r+0x270>
    43da:	e102      	b.n	45e2 <_dtoa_r+0x476>
    43dc:	9b06      	ldr	r3, [sp, #24]
    43de:	9c07      	ldr	r4, [sp, #28]
    43e0:	9314      	str	r3, [sp, #80]	; 0x50
    43e2:	9415      	str	r4, [sp, #84]	; 0x54
    43e4:	9b03      	ldr	r3, [sp, #12]
    43e6:	2b00      	cmp	r3, #0
    43e8:	dc00      	bgt.n	43ec <_dtoa_r+0x280>
    43ea:	e085      	b.n	44f8 <_dtoa_r+0x38c>
    43ec:	001a      	movs	r2, r3
    43ee:	210f      	movs	r1, #15
    43f0:	4b3c      	ldr	r3, [pc, #240]	; (44e4 <_dtoa_r+0x378>)
    43f2:	400a      	ands	r2, r1
    43f4:	00d2      	lsls	r2, r2, #3
    43f6:	189b      	adds	r3, r3, r2
    43f8:	685c      	ldr	r4, [r3, #4]
    43fa:	681b      	ldr	r3, [r3, #0]
    43fc:	9310      	str	r3, [sp, #64]	; 0x40
    43fe:	9411      	str	r4, [sp, #68]	; 0x44
    4400:	9b03      	ldr	r3, [sp, #12]
    4402:	2402      	movs	r4, #2
    4404:	111d      	asrs	r5, r3, #4
    4406:	06eb      	lsls	r3, r5, #27
    4408:	d50a      	bpl.n	4420 <_dtoa_r+0x2b4>
    440a:	4b3a      	ldr	r3, [pc, #232]	; (44f4 <_dtoa_r+0x388>)
    440c:	400d      	ands	r5, r1
    440e:	6a1a      	ldr	r2, [r3, #32]
    4410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4412:	9814      	ldr	r0, [sp, #80]	; 0x50
    4414:	9915      	ldr	r1, [sp, #84]	; 0x54
    4416:	f002 fe97 	bl	7148 <__aeabi_ddiv>
    441a:	9006      	str	r0, [sp, #24]
    441c:	9107      	str	r1, [sp, #28]
    441e:	3401      	adds	r4, #1
    4420:	4e34      	ldr	r6, [pc, #208]	; (44f4 <_dtoa_r+0x388>)
    4422:	2d00      	cmp	r5, #0
    4424:	d130      	bne.n	4488 <_dtoa_r+0x31c>
    4426:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4428:	9b11      	ldr	r3, [sp, #68]	; 0x44
    442a:	9806      	ldr	r0, [sp, #24]
    442c:	9907      	ldr	r1, [sp, #28]
    442e:	f002 fe8b 	bl	7148 <__aeabi_ddiv>
    4432:	9006      	str	r0, [sp, #24]
    4434:	9107      	str	r1, [sp, #28]
    4436:	e07a      	b.n	452e <_dtoa_r+0x3c2>
    4438:	2301      	movs	r3, #1
    443a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    443c:	930e      	str	r3, [sp, #56]	; 0x38
    443e:	4694      	mov	ip, r2
    4440:	9b03      	ldr	r3, [sp, #12]
    4442:	4463      	add	r3, ip
    4444:	1c5f      	adds	r7, r3, #1
    4446:	930d      	str	r3, [sp, #52]	; 0x34
    4448:	1e3b      	subs	r3, r7, #0
    444a:	dcaf      	bgt.n	43ac <_dtoa_r+0x240>
    444c:	2301      	movs	r3, #1
    444e:	e7ad      	b.n	43ac <_dtoa_r+0x240>
    4450:	2300      	movs	r3, #0
    4452:	e7a5      	b.n	43a0 <_dtoa_r+0x234>
    4454:	2300      	movs	r3, #0
    4456:	e7f0      	b.n	443a <_dtoa_r+0x2ce>
    4458:	2300      	movs	r3, #0
    445a:	950e      	str	r5, [sp, #56]	; 0x38
    445c:	9322      	str	r3, [sp, #136]	; 0x88
    445e:	3b01      	subs	r3, #1
    4460:	2200      	movs	r2, #0
    4462:	930d      	str	r3, [sp, #52]	; 0x34
    4464:	001f      	movs	r7, r3
    4466:	3313      	adds	r3, #19
    4468:	9223      	str	r2, [sp, #140]	; 0x8c
    446a:	e79f      	b.n	43ac <_dtoa_r+0x240>
    446c:	2301      	movs	r3, #1
    446e:	930e      	str	r3, [sp, #56]	; 0x38
    4470:	3b02      	subs	r3, #2
    4472:	e7f5      	b.n	4460 <_dtoa_r+0x2f4>
    4474:	2301      	movs	r3, #1
    4476:	930d      	str	r3, [sp, #52]	; 0x34
    4478:	001f      	movs	r7, r3
    447a:	001a      	movs	r2, r3
    447c:	e7f4      	b.n	4468 <_dtoa_r+0x2fc>
    447e:	6861      	ldr	r1, [r4, #4]
    4480:	0052      	lsls	r2, r2, #1
    4482:	3101      	adds	r1, #1
    4484:	6061      	str	r1, [r4, #4]
    4486:	e796      	b.n	43b6 <_dtoa_r+0x24a>
    4488:	2301      	movs	r3, #1
    448a:	421d      	tst	r5, r3
    448c:	d008      	beq.n	44a0 <_dtoa_r+0x334>
    448e:	9810      	ldr	r0, [sp, #64]	; 0x40
    4490:	9911      	ldr	r1, [sp, #68]	; 0x44
    4492:	18e4      	adds	r4, r4, r3
    4494:	6832      	ldr	r2, [r6, #0]
    4496:	6873      	ldr	r3, [r6, #4]
    4498:	f003 fa8a 	bl	79b0 <__aeabi_dmul>
    449c:	9010      	str	r0, [sp, #64]	; 0x40
    449e:	9111      	str	r1, [sp, #68]	; 0x44
    44a0:	106d      	asrs	r5, r5, #1
    44a2:	3608      	adds	r6, #8
    44a4:	e7bd      	b.n	4422 <_dtoa_r+0x2b6>
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	7ff00000 	.word	0x7ff00000
    44ac:	0000270f 	.word	0x0000270f
    44b0:	0000898d 	.word	0x0000898d
    44b4:	00008990 	.word	0x00008990
    44b8:	00008960 	.word	0x00008960
    44bc:	00008961 	.word	0x00008961
    44c0:	3ff00000 	.word	0x3ff00000
    44c4:	fffffc01 	.word	0xfffffc01
    44c8:	3ff80000 	.word	0x3ff80000
    44cc:	636f4361 	.word	0x636f4361
    44d0:	3fd287a7 	.word	0x3fd287a7
    44d4:	8b60c8b3 	.word	0x8b60c8b3
    44d8:	3fc68a28 	.word	0x3fc68a28
    44dc:	509f79fb 	.word	0x509f79fb
    44e0:	3fd34413 	.word	0x3fd34413
    44e4:	00008a20 	.word	0x00008a20
    44e8:	00000432 	.word	0x00000432
    44ec:	00000412 	.word	0x00000412
    44f0:	fe100000 	.word	0xfe100000
    44f4:	000089f8 	.word	0x000089f8
    44f8:	9b03      	ldr	r3, [sp, #12]
    44fa:	2402      	movs	r4, #2
    44fc:	2b00      	cmp	r3, #0
    44fe:	d016      	beq.n	452e <_dtoa_r+0x3c2>
    4500:	9814      	ldr	r0, [sp, #80]	; 0x50
    4502:	9915      	ldr	r1, [sp, #84]	; 0x54
    4504:	425d      	negs	r5, r3
    4506:	230f      	movs	r3, #15
    4508:	4aca      	ldr	r2, [pc, #808]	; (4834 <_dtoa_r+0x6c8>)
    450a:	402b      	ands	r3, r5
    450c:	00db      	lsls	r3, r3, #3
    450e:	18d3      	adds	r3, r2, r3
    4510:	681a      	ldr	r2, [r3, #0]
    4512:	685b      	ldr	r3, [r3, #4]
    4514:	f003 fa4c 	bl	79b0 <__aeabi_dmul>
    4518:	2300      	movs	r3, #0
    451a:	9006      	str	r0, [sp, #24]
    451c:	9107      	str	r1, [sp, #28]
    451e:	4ec6      	ldr	r6, [pc, #792]	; (4838 <_dtoa_r+0x6cc>)
    4520:	112d      	asrs	r5, r5, #4
    4522:	2d00      	cmp	r5, #0
    4524:	d000      	beq.n	4528 <_dtoa_r+0x3bc>
    4526:	e08c      	b.n	4642 <_dtoa_r+0x4d6>
    4528:	2b00      	cmp	r3, #0
    452a:	d000      	beq.n	452e <_dtoa_r+0x3c2>
    452c:	e781      	b.n	4432 <_dtoa_r+0x2c6>
    452e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4530:	2b00      	cmp	r3, #0
    4532:	d100      	bne.n	4536 <_dtoa_r+0x3ca>
    4534:	e091      	b.n	465a <_dtoa_r+0x4ee>
    4536:	9a06      	ldr	r2, [sp, #24]
    4538:	9b07      	ldr	r3, [sp, #28]
    453a:	9210      	str	r2, [sp, #64]	; 0x40
    453c:	9311      	str	r3, [sp, #68]	; 0x44
    453e:	9810      	ldr	r0, [sp, #64]	; 0x40
    4540:	9911      	ldr	r1, [sp, #68]	; 0x44
    4542:	2200      	movs	r2, #0
    4544:	4bbd      	ldr	r3, [pc, #756]	; (483c <_dtoa_r+0x6d0>)
    4546:	f001 fd71 	bl	602c <__aeabi_dcmplt>
    454a:	2800      	cmp	r0, #0
    454c:	d100      	bne.n	4550 <_dtoa_r+0x3e4>
    454e:	e084      	b.n	465a <_dtoa_r+0x4ee>
    4550:	2f00      	cmp	r7, #0
    4552:	d100      	bne.n	4556 <_dtoa_r+0x3ea>
    4554:	e081      	b.n	465a <_dtoa_r+0x4ee>
    4556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4558:	2b00      	cmp	r3, #0
    455a:	dd3e      	ble.n	45da <_dtoa_r+0x46e>
    455c:	9810      	ldr	r0, [sp, #64]	; 0x40
    455e:	9911      	ldr	r1, [sp, #68]	; 0x44
    4560:	9b03      	ldr	r3, [sp, #12]
    4562:	2200      	movs	r2, #0
    4564:	1e5e      	subs	r6, r3, #1
    4566:	4bb6      	ldr	r3, [pc, #728]	; (4840 <_dtoa_r+0x6d4>)
    4568:	f003 fa22 	bl	79b0 <__aeabi_dmul>
    456c:	9006      	str	r0, [sp, #24]
    456e:	9107      	str	r1, [sp, #28]
    4570:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4572:	3401      	adds	r4, #1
    4574:	0020      	movs	r0, r4
    4576:	f004 f805 	bl	8584 <__aeabi_i2d>
    457a:	9a06      	ldr	r2, [sp, #24]
    457c:	9b07      	ldr	r3, [sp, #28]
    457e:	f003 fa17 	bl	79b0 <__aeabi_dmul>
    4582:	2200      	movs	r2, #0
    4584:	4baf      	ldr	r3, [pc, #700]	; (4844 <_dtoa_r+0x6d8>)
    4586:	f002 facf 	bl	6b28 <__aeabi_dadd>
    458a:	9012      	str	r0, [sp, #72]	; 0x48
    458c:	9113      	str	r1, [sp, #76]	; 0x4c
    458e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4590:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    4592:	4aad      	ldr	r2, [pc, #692]	; (4848 <_dtoa_r+0x6dc>)
    4594:	9310      	str	r3, [sp, #64]	; 0x40
    4596:	9411      	str	r4, [sp, #68]	; 0x44
    4598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    459a:	189c      	adds	r4, r3, r2
    459c:	9411      	str	r4, [sp, #68]	; 0x44
    459e:	2d00      	cmp	r5, #0
    45a0:	d15e      	bne.n	4660 <_dtoa_r+0x4f4>
    45a2:	9806      	ldr	r0, [sp, #24]
    45a4:	9907      	ldr	r1, [sp, #28]
    45a6:	2200      	movs	r2, #0
    45a8:	4ba8      	ldr	r3, [pc, #672]	; (484c <_dtoa_r+0x6e0>)
    45aa:	f003 fc81 	bl	7eb0 <__aeabi_dsub>
    45ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    45b0:	0023      	movs	r3, r4
    45b2:	9006      	str	r0, [sp, #24]
    45b4:	9107      	str	r1, [sp, #28]
    45b6:	f001 fd4d 	bl	6054 <__aeabi_dcmpgt>
    45ba:	2800      	cmp	r0, #0
    45bc:	d000      	beq.n	45c0 <_dtoa_r+0x454>
    45be:	e301      	b.n	4bc4 <_dtoa_r+0xa58>
    45c0:	48a3      	ldr	r0, [pc, #652]	; (4850 <_dtoa_r+0x6e4>)
    45c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    45c4:	4684      	mov	ip, r0
    45c6:	4461      	add	r1, ip
    45c8:	000b      	movs	r3, r1
    45ca:	9806      	ldr	r0, [sp, #24]
    45cc:	9907      	ldr	r1, [sp, #28]
    45ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    45d0:	f001 fd2c 	bl	602c <__aeabi_dcmplt>
    45d4:	2800      	cmp	r0, #0
    45d6:	d000      	beq.n	45da <_dtoa_r+0x46e>
    45d8:	e2e8      	b.n	4bac <_dtoa_r+0xa40>
    45da:	9b14      	ldr	r3, [sp, #80]	; 0x50
    45dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
    45de:	9306      	str	r3, [sp, #24]
    45e0:	9407      	str	r4, [sp, #28]
    45e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    45e4:	2b00      	cmp	r3, #0
    45e6:	da00      	bge.n	45ea <_dtoa_r+0x47e>
    45e8:	e157      	b.n	489a <_dtoa_r+0x72e>
    45ea:	9a03      	ldr	r2, [sp, #12]
    45ec:	2a0e      	cmp	r2, #14
    45ee:	dd00      	ble.n	45f2 <_dtoa_r+0x486>
    45f0:	e153      	b.n	489a <_dtoa_r+0x72e>
    45f2:	4b90      	ldr	r3, [pc, #576]	; (4834 <_dtoa_r+0x6c8>)
    45f4:	00d2      	lsls	r2, r2, #3
    45f6:	189b      	adds	r3, r3, r2
    45f8:	685c      	ldr	r4, [r3, #4]
    45fa:	681b      	ldr	r3, [r3, #0]
    45fc:	9308      	str	r3, [sp, #32]
    45fe:	9409      	str	r4, [sp, #36]	; 0x24
    4600:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4602:	2b00      	cmp	r3, #0
    4604:	db00      	blt.n	4608 <_dtoa_r+0x49c>
    4606:	e0ce      	b.n	47a6 <_dtoa_r+0x63a>
    4608:	2f00      	cmp	r7, #0
    460a:	dd00      	ble.n	460e <_dtoa_r+0x4a2>
    460c:	e0cb      	b.n	47a6 <_dtoa_r+0x63a>
    460e:	d000      	beq.n	4612 <_dtoa_r+0x4a6>
    4610:	e2cf      	b.n	4bb2 <_dtoa_r+0xa46>
    4612:	9808      	ldr	r0, [sp, #32]
    4614:	9909      	ldr	r1, [sp, #36]	; 0x24
    4616:	2200      	movs	r2, #0
    4618:	4b8c      	ldr	r3, [pc, #560]	; (484c <_dtoa_r+0x6e0>)
    461a:	f003 f9c9 	bl	79b0 <__aeabi_dmul>
    461e:	9a06      	ldr	r2, [sp, #24]
    4620:	9b07      	ldr	r3, [sp, #28]
    4622:	f001 fd21 	bl	6068 <__aeabi_dcmpge>
    4626:	003e      	movs	r6, r7
    4628:	9708      	str	r7, [sp, #32]
    462a:	2800      	cmp	r0, #0
    462c:	d000      	beq.n	4630 <_dtoa_r+0x4c4>
    462e:	e2a4      	b.n	4b7a <_dtoa_r+0xa0e>
    4630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4634:	1c5d      	adds	r5, r3, #1
    4636:	2331      	movs	r3, #49	; 0x31
    4638:	7013      	strb	r3, [r2, #0]
    463a:	9b03      	ldr	r3, [sp, #12]
    463c:	3301      	adds	r3, #1
    463e:	9303      	str	r3, [sp, #12]
    4640:	e29f      	b.n	4b82 <_dtoa_r+0xa16>
    4642:	2201      	movs	r2, #1
    4644:	4215      	tst	r5, r2
    4646:	d005      	beq.n	4654 <_dtoa_r+0x4e8>
    4648:	18a4      	adds	r4, r4, r2
    464a:	6832      	ldr	r2, [r6, #0]
    464c:	6873      	ldr	r3, [r6, #4]
    464e:	f003 f9af 	bl	79b0 <__aeabi_dmul>
    4652:	2301      	movs	r3, #1
    4654:	106d      	asrs	r5, r5, #1
    4656:	3608      	adds	r6, #8
    4658:	e763      	b.n	4522 <_dtoa_r+0x3b6>
    465a:	9e03      	ldr	r6, [sp, #12]
    465c:	003d      	movs	r5, r7
    465e:	e789      	b.n	4574 <_dtoa_r+0x408>
    4660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4662:	1e69      	subs	r1, r5, #1
    4664:	1952      	adds	r2, r2, r5
    4666:	9217      	str	r2, [sp, #92]	; 0x5c
    4668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    466a:	4b72      	ldr	r3, [pc, #456]	; (4834 <_dtoa_r+0x6c8>)
    466c:	00c9      	lsls	r1, r1, #3
    466e:	2a00      	cmp	r2, #0
    4670:	d04a      	beq.n	4708 <_dtoa_r+0x59c>
    4672:	185b      	adds	r3, r3, r1
    4674:	681a      	ldr	r2, [r3, #0]
    4676:	685b      	ldr	r3, [r3, #4]
    4678:	2000      	movs	r0, #0
    467a:	4976      	ldr	r1, [pc, #472]	; (4854 <_dtoa_r+0x6e8>)
    467c:	f002 fd64 	bl	7148 <__aeabi_ddiv>
    4680:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4682:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4684:	f003 fc14 	bl	7eb0 <__aeabi_dsub>
    4688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    468a:	9010      	str	r0, [sp, #64]	; 0x40
    468c:	9111      	str	r1, [sp, #68]	; 0x44
    468e:	9312      	str	r3, [sp, #72]	; 0x48
    4690:	9806      	ldr	r0, [sp, #24]
    4692:	9907      	ldr	r1, [sp, #28]
    4694:	f003 ff42 	bl	851c <__aeabi_d2iz>
    4698:	0004      	movs	r4, r0
    469a:	f003 ff73 	bl	8584 <__aeabi_i2d>
    469e:	0002      	movs	r2, r0
    46a0:	000b      	movs	r3, r1
    46a2:	9806      	ldr	r0, [sp, #24]
    46a4:	9907      	ldr	r1, [sp, #28]
    46a6:	f003 fc03 	bl	7eb0 <__aeabi_dsub>
    46aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    46ac:	3430      	adds	r4, #48	; 0x30
    46ae:	1c5d      	adds	r5, r3, #1
    46b0:	701c      	strb	r4, [r3, #0]
    46b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    46b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    46b6:	9006      	str	r0, [sp, #24]
    46b8:	9107      	str	r1, [sp, #28]
    46ba:	f001 fcb7 	bl	602c <__aeabi_dcmplt>
    46be:	2800      	cmp	r0, #0
    46c0:	d165      	bne.n	478e <_dtoa_r+0x622>
    46c2:	9a06      	ldr	r2, [sp, #24]
    46c4:	9b07      	ldr	r3, [sp, #28]
    46c6:	2000      	movs	r0, #0
    46c8:	495c      	ldr	r1, [pc, #368]	; (483c <_dtoa_r+0x6d0>)
    46ca:	f003 fbf1 	bl	7eb0 <__aeabi_dsub>
    46ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    46d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    46d2:	f001 fcab 	bl	602c <__aeabi_dcmplt>
    46d6:	2800      	cmp	r0, #0
    46d8:	d000      	beq.n	46dc <_dtoa_r+0x570>
    46da:	e0be      	b.n	485a <_dtoa_r+0x6ee>
    46dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    46de:	429d      	cmp	r5, r3
    46e0:	d100      	bne.n	46e4 <_dtoa_r+0x578>
    46e2:	e77a      	b.n	45da <_dtoa_r+0x46e>
    46e4:	9810      	ldr	r0, [sp, #64]	; 0x40
    46e6:	9911      	ldr	r1, [sp, #68]	; 0x44
    46e8:	2200      	movs	r2, #0
    46ea:	4b55      	ldr	r3, [pc, #340]	; (4840 <_dtoa_r+0x6d4>)
    46ec:	f003 f960 	bl	79b0 <__aeabi_dmul>
    46f0:	2200      	movs	r2, #0
    46f2:	9010      	str	r0, [sp, #64]	; 0x40
    46f4:	9111      	str	r1, [sp, #68]	; 0x44
    46f6:	9806      	ldr	r0, [sp, #24]
    46f8:	9907      	ldr	r1, [sp, #28]
    46fa:	4b51      	ldr	r3, [pc, #324]	; (4840 <_dtoa_r+0x6d4>)
    46fc:	f003 f958 	bl	79b0 <__aeabi_dmul>
    4700:	9512      	str	r5, [sp, #72]	; 0x48
    4702:	9006      	str	r0, [sp, #24]
    4704:	9107      	str	r1, [sp, #28]
    4706:	e7c3      	b.n	4690 <_dtoa_r+0x524>
    4708:	1859      	adds	r1, r3, r1
    470a:	6808      	ldr	r0, [r1, #0]
    470c:	6849      	ldr	r1, [r1, #4]
    470e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4710:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4712:	f003 f94d 	bl	79b0 <__aeabi_dmul>
    4716:	9010      	str	r0, [sp, #64]	; 0x40
    4718:	9111      	str	r1, [sp, #68]	; 0x44
    471a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    471c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    471e:	9806      	ldr	r0, [sp, #24]
    4720:	9907      	ldr	r1, [sp, #28]
    4722:	f003 fefb 	bl	851c <__aeabi_d2iz>
    4726:	9012      	str	r0, [sp, #72]	; 0x48
    4728:	f003 ff2c 	bl	8584 <__aeabi_i2d>
    472c:	0002      	movs	r2, r0
    472e:	000b      	movs	r3, r1
    4730:	9806      	ldr	r0, [sp, #24]
    4732:	9907      	ldr	r1, [sp, #28]
    4734:	f003 fbbc 	bl	7eb0 <__aeabi_dsub>
    4738:	9b12      	ldr	r3, [sp, #72]	; 0x48
    473a:	9006      	str	r0, [sp, #24]
    473c:	9107      	str	r1, [sp, #28]
    473e:	3330      	adds	r3, #48	; 0x30
    4740:	7023      	strb	r3, [r4, #0]
    4742:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4744:	3401      	adds	r4, #1
    4746:	2200      	movs	r2, #0
    4748:	42a3      	cmp	r3, r4
    474a:	d124      	bne.n	4796 <_dtoa_r+0x62a>
    474c:	4b41      	ldr	r3, [pc, #260]	; (4854 <_dtoa_r+0x6e8>)
    474e:	9810      	ldr	r0, [sp, #64]	; 0x40
    4750:	9911      	ldr	r1, [sp, #68]	; 0x44
    4752:	f002 f9e9 	bl	6b28 <__aeabi_dadd>
    4756:	0002      	movs	r2, r0
    4758:	000b      	movs	r3, r1
    475a:	9806      	ldr	r0, [sp, #24]
    475c:	9907      	ldr	r1, [sp, #28]
    475e:	f001 fc79 	bl	6054 <__aeabi_dcmpgt>
    4762:	2800      	cmp	r0, #0
    4764:	d000      	beq.n	4768 <_dtoa_r+0x5fc>
    4766:	e078      	b.n	485a <_dtoa_r+0x6ee>
    4768:	9a10      	ldr	r2, [sp, #64]	; 0x40
    476a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    476c:	2000      	movs	r0, #0
    476e:	4939      	ldr	r1, [pc, #228]	; (4854 <_dtoa_r+0x6e8>)
    4770:	f003 fb9e 	bl	7eb0 <__aeabi_dsub>
    4774:	0002      	movs	r2, r0
    4776:	000b      	movs	r3, r1
    4778:	9806      	ldr	r0, [sp, #24]
    477a:	9907      	ldr	r1, [sp, #28]
    477c:	f001 fc56 	bl	602c <__aeabi_dcmplt>
    4780:	2800      	cmp	r0, #0
    4782:	d100      	bne.n	4786 <_dtoa_r+0x61a>
    4784:	e729      	b.n	45da <_dtoa_r+0x46e>
    4786:	1e6b      	subs	r3, r5, #1
    4788:	781a      	ldrb	r2, [r3, #0]
    478a:	2a30      	cmp	r2, #48	; 0x30
    478c:	d001      	beq.n	4792 <_dtoa_r+0x626>
    478e:	9603      	str	r6, [sp, #12]
    4790:	e03f      	b.n	4812 <_dtoa_r+0x6a6>
    4792:	001d      	movs	r5, r3
    4794:	e7f7      	b.n	4786 <_dtoa_r+0x61a>
    4796:	9806      	ldr	r0, [sp, #24]
    4798:	9907      	ldr	r1, [sp, #28]
    479a:	4b29      	ldr	r3, [pc, #164]	; (4840 <_dtoa_r+0x6d4>)
    479c:	f003 f908 	bl	79b0 <__aeabi_dmul>
    47a0:	9006      	str	r0, [sp, #24]
    47a2:	9107      	str	r1, [sp, #28]
    47a4:	e7bb      	b.n	471e <_dtoa_r+0x5b2>
    47a6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    47a8:	9a08      	ldr	r2, [sp, #32]
    47aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47ac:	9806      	ldr	r0, [sp, #24]
    47ae:	9907      	ldr	r1, [sp, #28]
    47b0:	f002 fcca 	bl	7148 <__aeabi_ddiv>
    47b4:	f003 feb2 	bl	851c <__aeabi_d2iz>
    47b8:	0004      	movs	r4, r0
    47ba:	f003 fee3 	bl	8584 <__aeabi_i2d>
    47be:	9a08      	ldr	r2, [sp, #32]
    47c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47c2:	f003 f8f5 	bl	79b0 <__aeabi_dmul>
    47c6:	000b      	movs	r3, r1
    47c8:	0002      	movs	r2, r0
    47ca:	9806      	ldr	r0, [sp, #24]
    47cc:	9907      	ldr	r1, [sp, #28]
    47ce:	f003 fb6f 	bl	7eb0 <__aeabi_dsub>
    47d2:	0023      	movs	r3, r4
    47d4:	3330      	adds	r3, #48	; 0x30
    47d6:	7033      	strb	r3, [r6, #0]
    47d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    47da:	1c75      	adds	r5, r6, #1
    47dc:	1aeb      	subs	r3, r5, r3
    47de:	429f      	cmp	r7, r3
    47e0:	d14c      	bne.n	487c <_dtoa_r+0x710>
    47e2:	0002      	movs	r2, r0
    47e4:	000b      	movs	r3, r1
    47e6:	f002 f99f 	bl	6b28 <__aeabi_dadd>
    47ea:	0006      	movs	r6, r0
    47ec:	000f      	movs	r7, r1
    47ee:	0002      	movs	r2, r0
    47f0:	000b      	movs	r3, r1
    47f2:	9808      	ldr	r0, [sp, #32]
    47f4:	9909      	ldr	r1, [sp, #36]	; 0x24
    47f6:	f001 fc19 	bl	602c <__aeabi_dcmplt>
    47fa:	2800      	cmp	r0, #0
    47fc:	d12c      	bne.n	4858 <_dtoa_r+0x6ec>
    47fe:	9808      	ldr	r0, [sp, #32]
    4800:	9909      	ldr	r1, [sp, #36]	; 0x24
    4802:	0032      	movs	r2, r6
    4804:	003b      	movs	r3, r7
    4806:	f001 fc0b 	bl	6020 <__aeabi_dcmpeq>
    480a:	2800      	cmp	r0, #0
    480c:	d001      	beq.n	4812 <_dtoa_r+0x6a6>
    480e:	07e3      	lsls	r3, r4, #31
    4810:	d422      	bmi.n	4858 <_dtoa_r+0x6ec>
    4812:	9905      	ldr	r1, [sp, #20]
    4814:	9804      	ldr	r0, [sp, #16]
    4816:	f000 fcde 	bl	51d6 <_Bfree>
    481a:	2300      	movs	r3, #0
    481c:	702b      	strb	r3, [r5, #0]
    481e:	9b03      	ldr	r3, [sp, #12]
    4820:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4822:	3301      	adds	r3, #1
    4824:	6013      	str	r3, [r2, #0]
    4826:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4828:	2b00      	cmp	r3, #0
    482a:	d100      	bne.n	482e <_dtoa_r+0x6c2>
    482c:	e275      	b.n	4d1a <_dtoa_r+0xbae>
    482e:	601d      	str	r5, [r3, #0]
    4830:	e273      	b.n	4d1a <_dtoa_r+0xbae>
    4832:	46c0      	nop			; (mov r8, r8)
    4834:	00008a20 	.word	0x00008a20
    4838:	000089f8 	.word	0x000089f8
    483c:	3ff00000 	.word	0x3ff00000
    4840:	40240000 	.word	0x40240000
    4844:	401c0000 	.word	0x401c0000
    4848:	fcc00000 	.word	0xfcc00000
    484c:	40140000 	.word	0x40140000
    4850:	7cc00000 	.word	0x7cc00000
    4854:	3fe00000 	.word	0x3fe00000
    4858:	9e03      	ldr	r6, [sp, #12]
    485a:	1e6b      	subs	r3, r5, #1
    485c:	781a      	ldrb	r2, [r3, #0]
    485e:	2a39      	cmp	r2, #57	; 0x39
    4860:	d106      	bne.n	4870 <_dtoa_r+0x704>
    4862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4864:	429a      	cmp	r2, r3
    4866:	d107      	bne.n	4878 <_dtoa_r+0x70c>
    4868:	2330      	movs	r3, #48	; 0x30
    486a:	7013      	strb	r3, [r2, #0]
    486c:	0013      	movs	r3, r2
    486e:	3601      	adds	r6, #1
    4870:	781a      	ldrb	r2, [r3, #0]
    4872:	3201      	adds	r2, #1
    4874:	701a      	strb	r2, [r3, #0]
    4876:	e78a      	b.n	478e <_dtoa_r+0x622>
    4878:	001d      	movs	r5, r3
    487a:	e7ee      	b.n	485a <_dtoa_r+0x6ee>
    487c:	2200      	movs	r2, #0
    487e:	4bcf      	ldr	r3, [pc, #828]	; (4bbc <_dtoa_r+0xa50>)
    4880:	f003 f896 	bl	79b0 <__aeabi_dmul>
    4884:	2200      	movs	r2, #0
    4886:	2300      	movs	r3, #0
    4888:	9006      	str	r0, [sp, #24]
    488a:	9107      	str	r1, [sp, #28]
    488c:	002e      	movs	r6, r5
    488e:	f001 fbc7 	bl	6020 <__aeabi_dcmpeq>
    4892:	2800      	cmp	r0, #0
    4894:	d100      	bne.n	4898 <_dtoa_r+0x72c>
    4896:	e787      	b.n	47a8 <_dtoa_r+0x63c>
    4898:	e7bb      	b.n	4812 <_dtoa_r+0x6a6>
    489a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    489c:	2a00      	cmp	r2, #0
    489e:	d100      	bne.n	48a2 <_dtoa_r+0x736>
    48a0:	e087      	b.n	49b2 <_dtoa_r+0x846>
    48a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    48a4:	2a01      	cmp	r2, #1
    48a6:	dc6e      	bgt.n	4986 <_dtoa_r+0x81a>
    48a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    48aa:	2a00      	cmp	r2, #0
    48ac:	d067      	beq.n	497e <_dtoa_r+0x812>
    48ae:	4ac4      	ldr	r2, [pc, #784]	; (4bc0 <_dtoa_r+0xa54>)
    48b0:	189b      	adds	r3, r3, r2
    48b2:	9d08      	ldr	r5, [sp, #32]
    48b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    48b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    48b8:	2101      	movs	r1, #1
    48ba:	18d2      	adds	r2, r2, r3
    48bc:	920b      	str	r2, [sp, #44]	; 0x2c
    48be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    48c0:	9804      	ldr	r0, [sp, #16]
    48c2:	18d3      	adds	r3, r2, r3
    48c4:	930c      	str	r3, [sp, #48]	; 0x30
    48c6:	f000 fd24 	bl	5312 <__i2b>
    48ca:	0006      	movs	r6, r0
    48cc:	2c00      	cmp	r4, #0
    48ce:	dd0e      	ble.n	48ee <_dtoa_r+0x782>
    48d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    48d2:	2b00      	cmp	r3, #0
    48d4:	dd0b      	ble.n	48ee <_dtoa_r+0x782>
    48d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    48d8:	0023      	movs	r3, r4
    48da:	4294      	cmp	r4, r2
    48dc:	dd00      	ble.n	48e0 <_dtoa_r+0x774>
    48de:	0013      	movs	r3, r2
    48e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    48e2:	1ae4      	subs	r4, r4, r3
    48e4:	1ad2      	subs	r2, r2, r3
    48e6:	920b      	str	r2, [sp, #44]	; 0x2c
    48e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    48ea:	1ad3      	subs	r3, r2, r3
    48ec:	930c      	str	r3, [sp, #48]	; 0x30
    48ee:	9b08      	ldr	r3, [sp, #32]
    48f0:	2b00      	cmp	r3, #0
    48f2:	d01e      	beq.n	4932 <_dtoa_r+0x7c6>
    48f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    48f6:	2b00      	cmp	r3, #0
    48f8:	d05f      	beq.n	49ba <_dtoa_r+0x84e>
    48fa:	2d00      	cmp	r5, #0
    48fc:	dd11      	ble.n	4922 <_dtoa_r+0x7b6>
    48fe:	0031      	movs	r1, r6
    4900:	002a      	movs	r2, r5
    4902:	9804      	ldr	r0, [sp, #16]
    4904:	f000 fd9e 	bl	5444 <__pow5mult>
    4908:	9a05      	ldr	r2, [sp, #20]
    490a:	0001      	movs	r1, r0
    490c:	0006      	movs	r6, r0
    490e:	9804      	ldr	r0, [sp, #16]
    4910:	f000 fd08 	bl	5324 <__multiply>
    4914:	9905      	ldr	r1, [sp, #20]
    4916:	9010      	str	r0, [sp, #64]	; 0x40
    4918:	9804      	ldr	r0, [sp, #16]
    491a:	f000 fc5c 	bl	51d6 <_Bfree>
    491e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4920:	9305      	str	r3, [sp, #20]
    4922:	9b08      	ldr	r3, [sp, #32]
    4924:	1b5a      	subs	r2, r3, r5
    4926:	d004      	beq.n	4932 <_dtoa_r+0x7c6>
    4928:	9905      	ldr	r1, [sp, #20]
    492a:	9804      	ldr	r0, [sp, #16]
    492c:	f000 fd8a 	bl	5444 <__pow5mult>
    4930:	9005      	str	r0, [sp, #20]
    4932:	2101      	movs	r1, #1
    4934:	9804      	ldr	r0, [sp, #16]
    4936:	f000 fcec 	bl	5312 <__i2b>
    493a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    493c:	9008      	str	r0, [sp, #32]
    493e:	2b00      	cmp	r3, #0
    4940:	dd3d      	ble.n	49be <_dtoa_r+0x852>
    4942:	001a      	movs	r2, r3
    4944:	0001      	movs	r1, r0
    4946:	9804      	ldr	r0, [sp, #16]
    4948:	f000 fd7c 	bl	5444 <__pow5mult>
    494c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    494e:	9008      	str	r0, [sp, #32]
    4950:	2500      	movs	r5, #0
    4952:	2b01      	cmp	r3, #1
    4954:	dc3b      	bgt.n	49ce <_dtoa_r+0x862>
    4956:	2500      	movs	r5, #0
    4958:	9b06      	ldr	r3, [sp, #24]
    495a:	42ab      	cmp	r3, r5
    495c:	d133      	bne.n	49c6 <_dtoa_r+0x85a>
    495e:	9b07      	ldr	r3, [sp, #28]
    4960:	031b      	lsls	r3, r3, #12
    4962:	42ab      	cmp	r3, r5
    4964:	d12f      	bne.n	49c6 <_dtoa_r+0x85a>
    4966:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4968:	9a07      	ldr	r2, [sp, #28]
    496a:	4213      	tst	r3, r2
    496c:	d02b      	beq.n	49c6 <_dtoa_r+0x85a>
    496e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4970:	3501      	adds	r5, #1
    4972:	3301      	adds	r3, #1
    4974:	930b      	str	r3, [sp, #44]	; 0x2c
    4976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4978:	3301      	adds	r3, #1
    497a:	930c      	str	r3, [sp, #48]	; 0x30
    497c:	e023      	b.n	49c6 <_dtoa_r+0x85a>
    497e:	2336      	movs	r3, #54	; 0x36
    4980:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4982:	1a9b      	subs	r3, r3, r2
    4984:	e795      	b.n	48b2 <_dtoa_r+0x746>
    4986:	9b08      	ldr	r3, [sp, #32]
    4988:	1e7d      	subs	r5, r7, #1
    498a:	42ab      	cmp	r3, r5
    498c:	db06      	blt.n	499c <_dtoa_r+0x830>
    498e:	1b5d      	subs	r5, r3, r5
    4990:	2f00      	cmp	r7, #0
    4992:	da0b      	bge.n	49ac <_dtoa_r+0x840>
    4994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4996:	1bdc      	subs	r4, r3, r7
    4998:	2300      	movs	r3, #0
    499a:	e78c      	b.n	48b6 <_dtoa_r+0x74a>
    499c:	9b08      	ldr	r3, [sp, #32]
    499e:	9508      	str	r5, [sp, #32]
    49a0:	1aea      	subs	r2, r5, r3
    49a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    49a4:	2500      	movs	r5, #0
    49a6:	189b      	adds	r3, r3, r2
    49a8:	930f      	str	r3, [sp, #60]	; 0x3c
    49aa:	e7f1      	b.n	4990 <_dtoa_r+0x824>
    49ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    49ae:	003b      	movs	r3, r7
    49b0:	e781      	b.n	48b6 <_dtoa_r+0x74a>
    49b2:	9d08      	ldr	r5, [sp, #32]
    49b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    49b6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    49b8:	e788      	b.n	48cc <_dtoa_r+0x760>
    49ba:	9a08      	ldr	r2, [sp, #32]
    49bc:	e7b4      	b.n	4928 <_dtoa_r+0x7bc>
    49be:	9b22      	ldr	r3, [sp, #136]	; 0x88
    49c0:	2500      	movs	r5, #0
    49c2:	2b01      	cmp	r3, #1
    49c4:	ddc7      	ble.n	4956 <_dtoa_r+0x7ea>
    49c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    49c8:	2001      	movs	r0, #1
    49ca:	2b00      	cmp	r3, #0
    49cc:	d00b      	beq.n	49e6 <_dtoa_r+0x87a>
    49ce:	9b08      	ldr	r3, [sp, #32]
    49d0:	9a08      	ldr	r2, [sp, #32]
    49d2:	691b      	ldr	r3, [r3, #16]
    49d4:	930f      	str	r3, [sp, #60]	; 0x3c
    49d6:	3303      	adds	r3, #3
    49d8:	009b      	lsls	r3, r3, #2
    49da:	18d3      	adds	r3, r2, r3
    49dc:	6858      	ldr	r0, [r3, #4]
    49de:	f000 fc4f 	bl	5280 <__hi0bits>
    49e2:	2320      	movs	r3, #32
    49e4:	1a18      	subs	r0, r3, r0
    49e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    49e8:	18c0      	adds	r0, r0, r3
    49ea:	231f      	movs	r3, #31
    49ec:	4018      	ands	r0, r3
    49ee:	d100      	bne.n	49f2 <_dtoa_r+0x886>
    49f0:	e0ab      	b.n	4b4a <_dtoa_r+0x9de>
    49f2:	3301      	adds	r3, #1
    49f4:	1a1b      	subs	r3, r3, r0
    49f6:	2b04      	cmp	r3, #4
    49f8:	dc00      	bgt.n	49fc <_dtoa_r+0x890>
    49fa:	e09b      	b.n	4b34 <_dtoa_r+0x9c8>
    49fc:	231c      	movs	r3, #28
    49fe:	1a18      	subs	r0, r3, r0
    4a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a02:	1824      	adds	r4, r4, r0
    4a04:	181b      	adds	r3, r3, r0
    4a06:	930b      	str	r3, [sp, #44]	; 0x2c
    4a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4a0a:	181b      	adds	r3, r3, r0
    4a0c:	930c      	str	r3, [sp, #48]	; 0x30
    4a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a10:	2b00      	cmp	r3, #0
    4a12:	dd05      	ble.n	4a20 <_dtoa_r+0x8b4>
    4a14:	001a      	movs	r2, r3
    4a16:	9905      	ldr	r1, [sp, #20]
    4a18:	9804      	ldr	r0, [sp, #16]
    4a1a:	f000 fd65 	bl	54e8 <__lshift>
    4a1e:	9005      	str	r0, [sp, #20]
    4a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4a22:	2b00      	cmp	r3, #0
    4a24:	dd05      	ble.n	4a32 <_dtoa_r+0x8c6>
    4a26:	001a      	movs	r2, r3
    4a28:	9908      	ldr	r1, [sp, #32]
    4a2a:	9804      	ldr	r0, [sp, #16]
    4a2c:	f000 fd5c 	bl	54e8 <__lshift>
    4a30:	9008      	str	r0, [sp, #32]
    4a32:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4a34:	2b00      	cmp	r3, #0
    4a36:	d100      	bne.n	4a3a <_dtoa_r+0x8ce>
    4a38:	e089      	b.n	4b4e <_dtoa_r+0x9e2>
    4a3a:	9908      	ldr	r1, [sp, #32]
    4a3c:	9805      	ldr	r0, [sp, #20]
    4a3e:	f000 fda4 	bl	558a <__mcmp>
    4a42:	2800      	cmp	r0, #0
    4a44:	db00      	blt.n	4a48 <_dtoa_r+0x8dc>
    4a46:	e082      	b.n	4b4e <_dtoa_r+0x9e2>
    4a48:	9b03      	ldr	r3, [sp, #12]
    4a4a:	220a      	movs	r2, #10
    4a4c:	3b01      	subs	r3, #1
    4a4e:	9303      	str	r3, [sp, #12]
    4a50:	9905      	ldr	r1, [sp, #20]
    4a52:	2300      	movs	r3, #0
    4a54:	9804      	ldr	r0, [sp, #16]
    4a56:	f000 fbd7 	bl	5208 <__multadd>
    4a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4a5c:	9005      	str	r0, [sp, #20]
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d100      	bne.n	4a64 <_dtoa_r+0x8f8>
    4a62:	e15d      	b.n	4d20 <_dtoa_r+0xbb4>
    4a64:	2300      	movs	r3, #0
    4a66:	0031      	movs	r1, r6
    4a68:	220a      	movs	r2, #10
    4a6a:	9804      	ldr	r0, [sp, #16]
    4a6c:	f000 fbcc 	bl	5208 <__multadd>
    4a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a72:	0006      	movs	r6, r0
    4a74:	2b00      	cmp	r3, #0
    4a76:	dc02      	bgt.n	4a7e <_dtoa_r+0x912>
    4a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4a7a:	2b02      	cmp	r3, #2
    4a7c:	dc6d      	bgt.n	4b5a <_dtoa_r+0x9ee>
    4a7e:	2c00      	cmp	r4, #0
    4a80:	dd05      	ble.n	4a8e <_dtoa_r+0x922>
    4a82:	0031      	movs	r1, r6
    4a84:	0022      	movs	r2, r4
    4a86:	9804      	ldr	r0, [sp, #16]
    4a88:	f000 fd2e 	bl	54e8 <__lshift>
    4a8c:	0006      	movs	r6, r0
    4a8e:	0030      	movs	r0, r6
    4a90:	2d00      	cmp	r5, #0
    4a92:	d011      	beq.n	4ab8 <_dtoa_r+0x94c>
    4a94:	6871      	ldr	r1, [r6, #4]
    4a96:	9804      	ldr	r0, [sp, #16]
    4a98:	f000 fb65 	bl	5166 <_Balloc>
    4a9c:	0031      	movs	r1, r6
    4a9e:	0004      	movs	r4, r0
    4aa0:	6933      	ldr	r3, [r6, #16]
    4aa2:	310c      	adds	r1, #12
    4aa4:	1c9a      	adds	r2, r3, #2
    4aa6:	0092      	lsls	r2, r2, #2
    4aa8:	300c      	adds	r0, #12
    4aaa:	f7fe fc4b 	bl	3344 <memcpy>
    4aae:	2201      	movs	r2, #1
    4ab0:	0021      	movs	r1, r4
    4ab2:	9804      	ldr	r0, [sp, #16]
    4ab4:	f000 fd18 	bl	54e8 <__lshift>
    4ab8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4abc:	3f01      	subs	r7, #1
    4abe:	930b      	str	r3, [sp, #44]	; 0x2c
    4ac0:	19db      	adds	r3, r3, r7
    4ac2:	0037      	movs	r7, r6
    4ac4:	0006      	movs	r6, r0
    4ac6:	930f      	str	r3, [sp, #60]	; 0x3c
    4ac8:	9908      	ldr	r1, [sp, #32]
    4aca:	9805      	ldr	r0, [sp, #20]
    4acc:	f7ff faca 	bl	4064 <quorem>
    4ad0:	0039      	movs	r1, r7
    4ad2:	900d      	str	r0, [sp, #52]	; 0x34
    4ad4:	0004      	movs	r4, r0
    4ad6:	9805      	ldr	r0, [sp, #20]
    4ad8:	f000 fd57 	bl	558a <__mcmp>
    4adc:	0032      	movs	r2, r6
    4ade:	900e      	str	r0, [sp, #56]	; 0x38
    4ae0:	9908      	ldr	r1, [sp, #32]
    4ae2:	9804      	ldr	r0, [sp, #16]
    4ae4:	f000 fd6a 	bl	55bc <__mdiff>
    4ae8:	2301      	movs	r3, #1
    4aea:	930c      	str	r3, [sp, #48]	; 0x30
    4aec:	68c3      	ldr	r3, [r0, #12]
    4aee:	3430      	adds	r4, #48	; 0x30
    4af0:	0005      	movs	r5, r0
    4af2:	2b00      	cmp	r3, #0
    4af4:	d104      	bne.n	4b00 <_dtoa_r+0x994>
    4af6:	0001      	movs	r1, r0
    4af8:	9805      	ldr	r0, [sp, #20]
    4afa:	f000 fd46 	bl	558a <__mcmp>
    4afe:	900c      	str	r0, [sp, #48]	; 0x30
    4b00:	0029      	movs	r1, r5
    4b02:	9804      	ldr	r0, [sp, #16]
    4b04:	f000 fb67 	bl	51d6 <_Bfree>
    4b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4b0c:	4313      	orrs	r3, r2
    4b0e:	d000      	beq.n	4b12 <_dtoa_r+0x9a6>
    4b10:	e089      	b.n	4c26 <_dtoa_r+0xaba>
    4b12:	9a06      	ldr	r2, [sp, #24]
    4b14:	3301      	adds	r3, #1
    4b16:	4213      	tst	r3, r2
    4b18:	d000      	beq.n	4b1c <_dtoa_r+0x9b0>
    4b1a:	e084      	b.n	4c26 <_dtoa_r+0xaba>
    4b1c:	2c39      	cmp	r4, #57	; 0x39
    4b1e:	d100      	bne.n	4b22 <_dtoa_r+0x9b6>
    4b20:	e0a3      	b.n	4c6a <_dtoa_r+0xafe>
    4b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4b24:	2b00      	cmp	r3, #0
    4b26:	dd01      	ble.n	4b2c <_dtoa_r+0x9c0>
    4b28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4b2a:	3431      	adds	r4, #49	; 0x31
    4b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b2e:	1c5d      	adds	r5, r3, #1
    4b30:	701c      	strb	r4, [r3, #0]
    4b32:	e027      	b.n	4b84 <_dtoa_r+0xa18>
    4b34:	2b04      	cmp	r3, #4
    4b36:	d100      	bne.n	4b3a <_dtoa_r+0x9ce>
    4b38:	e769      	b.n	4a0e <_dtoa_r+0x8a2>
    4b3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4b3c:	331c      	adds	r3, #28
    4b3e:	18d2      	adds	r2, r2, r3
    4b40:	920b      	str	r2, [sp, #44]	; 0x2c
    4b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4b44:	18e4      	adds	r4, r4, r3
    4b46:	18d3      	adds	r3, r2, r3
    4b48:	e760      	b.n	4a0c <_dtoa_r+0x8a0>
    4b4a:	0003      	movs	r3, r0
    4b4c:	e7f5      	b.n	4b3a <_dtoa_r+0x9ce>
    4b4e:	2f00      	cmp	r7, #0
    4b50:	dc3c      	bgt.n	4bcc <_dtoa_r+0xa60>
    4b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4b54:	2b02      	cmp	r3, #2
    4b56:	dd39      	ble.n	4bcc <_dtoa_r+0xa60>
    4b58:	970d      	str	r7, [sp, #52]	; 0x34
    4b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	d10c      	bne.n	4b7a <_dtoa_r+0xa0e>
    4b60:	9908      	ldr	r1, [sp, #32]
    4b62:	2205      	movs	r2, #5
    4b64:	9804      	ldr	r0, [sp, #16]
    4b66:	f000 fb4f 	bl	5208 <__multadd>
    4b6a:	9008      	str	r0, [sp, #32]
    4b6c:	0001      	movs	r1, r0
    4b6e:	9805      	ldr	r0, [sp, #20]
    4b70:	f000 fd0b 	bl	558a <__mcmp>
    4b74:	2800      	cmp	r0, #0
    4b76:	dd00      	ble.n	4b7a <_dtoa_r+0xa0e>
    4b78:	e55a      	b.n	4630 <_dtoa_r+0x4c4>
    4b7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4b7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4b7e:	43db      	mvns	r3, r3
    4b80:	9303      	str	r3, [sp, #12]
    4b82:	2700      	movs	r7, #0
    4b84:	9908      	ldr	r1, [sp, #32]
    4b86:	9804      	ldr	r0, [sp, #16]
    4b88:	f000 fb25 	bl	51d6 <_Bfree>
    4b8c:	2e00      	cmp	r6, #0
    4b8e:	d100      	bne.n	4b92 <_dtoa_r+0xa26>
    4b90:	e63f      	b.n	4812 <_dtoa_r+0x6a6>
    4b92:	2f00      	cmp	r7, #0
    4b94:	d005      	beq.n	4ba2 <_dtoa_r+0xa36>
    4b96:	42b7      	cmp	r7, r6
    4b98:	d003      	beq.n	4ba2 <_dtoa_r+0xa36>
    4b9a:	0039      	movs	r1, r7
    4b9c:	9804      	ldr	r0, [sp, #16]
    4b9e:	f000 fb1a 	bl	51d6 <_Bfree>
    4ba2:	0031      	movs	r1, r6
    4ba4:	9804      	ldr	r0, [sp, #16]
    4ba6:	f000 fb16 	bl	51d6 <_Bfree>
    4baa:	e632      	b.n	4812 <_dtoa_r+0x6a6>
    4bac:	9508      	str	r5, [sp, #32]
    4bae:	002e      	movs	r6, r5
    4bb0:	e7e3      	b.n	4b7a <_dtoa_r+0xa0e>
    4bb2:	2300      	movs	r3, #0
    4bb4:	9308      	str	r3, [sp, #32]
    4bb6:	001e      	movs	r6, r3
    4bb8:	e7df      	b.n	4b7a <_dtoa_r+0xa0e>
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	40240000 	.word	0x40240000
    4bc0:	00000433 	.word	0x00000433
    4bc4:	9603      	str	r6, [sp, #12]
    4bc6:	9508      	str	r5, [sp, #32]
    4bc8:	002e      	movs	r6, r5
    4bca:	e531      	b.n	4630 <_dtoa_r+0x4c4>
    4bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4bce:	970d      	str	r7, [sp, #52]	; 0x34
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	d000      	beq.n	4bd6 <_dtoa_r+0xa6a>
    4bd4:	e753      	b.n	4a7e <_dtoa_r+0x912>
    4bd6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4bd8:	9908      	ldr	r1, [sp, #32]
    4bda:	9805      	ldr	r0, [sp, #20]
    4bdc:	f7ff fa42 	bl	4064 <quorem>
    4be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4be2:	3030      	adds	r0, #48	; 0x30
    4be4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4be6:	7028      	strb	r0, [r5, #0]
    4be8:	3501      	adds	r5, #1
    4bea:	0004      	movs	r4, r0
    4bec:	1aeb      	subs	r3, r5, r3
    4bee:	429a      	cmp	r2, r3
    4bf0:	dc78      	bgt.n	4ce4 <_dtoa_r+0xb78>
    4bf2:	1e15      	subs	r5, r2, #0
    4bf4:	dc00      	bgt.n	4bf8 <_dtoa_r+0xa8c>
    4bf6:	2501      	movs	r5, #1
    4bf8:	2700      	movs	r7, #0
    4bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4bfc:	195d      	adds	r5, r3, r5
    4bfe:	9905      	ldr	r1, [sp, #20]
    4c00:	2201      	movs	r2, #1
    4c02:	9804      	ldr	r0, [sp, #16]
    4c04:	f000 fc70 	bl	54e8 <__lshift>
    4c08:	9908      	ldr	r1, [sp, #32]
    4c0a:	9005      	str	r0, [sp, #20]
    4c0c:	f000 fcbd 	bl	558a <__mcmp>
    4c10:	2800      	cmp	r0, #0
    4c12:	dc2f      	bgt.n	4c74 <_dtoa_r+0xb08>
    4c14:	d101      	bne.n	4c1a <_dtoa_r+0xaae>
    4c16:	07e3      	lsls	r3, r4, #31
    4c18:	d42c      	bmi.n	4c74 <_dtoa_r+0xb08>
    4c1a:	1e6b      	subs	r3, r5, #1
    4c1c:	781a      	ldrb	r2, [r3, #0]
    4c1e:	2a30      	cmp	r2, #48	; 0x30
    4c20:	d1b0      	bne.n	4b84 <_dtoa_r+0xa18>
    4c22:	001d      	movs	r5, r3
    4c24:	e7f9      	b.n	4c1a <_dtoa_r+0xaae>
    4c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c28:	2b00      	cmp	r3, #0
    4c2a:	db07      	blt.n	4c3c <_dtoa_r+0xad0>
    4c2c:	001d      	movs	r5, r3
    4c2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c30:	431d      	orrs	r5, r3
    4c32:	d126      	bne.n	4c82 <_dtoa_r+0xb16>
    4c34:	2301      	movs	r3, #1
    4c36:	9a06      	ldr	r2, [sp, #24]
    4c38:	4213      	tst	r3, r2
    4c3a:	d122      	bne.n	4c82 <_dtoa_r+0xb16>
    4c3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c3e:	2b00      	cmp	r3, #0
    4c40:	dc00      	bgt.n	4c44 <_dtoa_r+0xad8>
    4c42:	e773      	b.n	4b2c <_dtoa_r+0x9c0>
    4c44:	9905      	ldr	r1, [sp, #20]
    4c46:	2201      	movs	r2, #1
    4c48:	9804      	ldr	r0, [sp, #16]
    4c4a:	f000 fc4d 	bl	54e8 <__lshift>
    4c4e:	9908      	ldr	r1, [sp, #32]
    4c50:	9005      	str	r0, [sp, #20]
    4c52:	f000 fc9a 	bl	558a <__mcmp>
    4c56:	2800      	cmp	r0, #0
    4c58:	dc04      	bgt.n	4c64 <_dtoa_r+0xaf8>
    4c5a:	d000      	beq.n	4c5e <_dtoa_r+0xaf2>
    4c5c:	e766      	b.n	4b2c <_dtoa_r+0x9c0>
    4c5e:	07e3      	lsls	r3, r4, #31
    4c60:	d400      	bmi.n	4c64 <_dtoa_r+0xaf8>
    4c62:	e763      	b.n	4b2c <_dtoa_r+0x9c0>
    4c64:	2c39      	cmp	r4, #57	; 0x39
    4c66:	d000      	beq.n	4c6a <_dtoa_r+0xafe>
    4c68:	e75e      	b.n	4b28 <_dtoa_r+0x9bc>
    4c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4c6e:	1c5d      	adds	r5, r3, #1
    4c70:	2339      	movs	r3, #57	; 0x39
    4c72:	7013      	strb	r3, [r2, #0]
    4c74:	1e6b      	subs	r3, r5, #1
    4c76:	781a      	ldrb	r2, [r3, #0]
    4c78:	2a39      	cmp	r2, #57	; 0x39
    4c7a:	d03b      	beq.n	4cf4 <_dtoa_r+0xb88>
    4c7c:	3201      	adds	r2, #1
    4c7e:	701a      	strb	r2, [r3, #0]
    4c80:	e780      	b.n	4b84 <_dtoa_r+0xa18>
    4c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c84:	3301      	adds	r3, #1
    4c86:	930d      	str	r3, [sp, #52]	; 0x34
    4c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	dd05      	ble.n	4c9a <_dtoa_r+0xb2e>
    4c8e:	2c39      	cmp	r4, #57	; 0x39
    4c90:	d0eb      	beq.n	4c6a <_dtoa_r+0xafe>
    4c92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4c94:	3401      	adds	r4, #1
    4c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c98:	e74a      	b.n	4b30 <_dtoa_r+0x9c4>
    4c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4c9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4ca0:	701c      	strb	r4, [r3, #0]
    4ca2:	4293      	cmp	r3, r2
    4ca4:	d0ab      	beq.n	4bfe <_dtoa_r+0xa92>
    4ca6:	2300      	movs	r3, #0
    4ca8:	220a      	movs	r2, #10
    4caa:	9905      	ldr	r1, [sp, #20]
    4cac:	9804      	ldr	r0, [sp, #16]
    4cae:	f000 faab 	bl	5208 <__multadd>
    4cb2:	2300      	movs	r3, #0
    4cb4:	9005      	str	r0, [sp, #20]
    4cb6:	220a      	movs	r2, #10
    4cb8:	0039      	movs	r1, r7
    4cba:	9804      	ldr	r0, [sp, #16]
    4cbc:	42b7      	cmp	r7, r6
    4cbe:	d106      	bne.n	4cce <_dtoa_r+0xb62>
    4cc0:	f000 faa2 	bl	5208 <__multadd>
    4cc4:	0007      	movs	r7, r0
    4cc6:	0006      	movs	r6, r0
    4cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4cca:	930b      	str	r3, [sp, #44]	; 0x2c
    4ccc:	e6fc      	b.n	4ac8 <_dtoa_r+0x95c>
    4cce:	f000 fa9b 	bl	5208 <__multadd>
    4cd2:	0031      	movs	r1, r6
    4cd4:	0007      	movs	r7, r0
    4cd6:	2300      	movs	r3, #0
    4cd8:	220a      	movs	r2, #10
    4cda:	9804      	ldr	r0, [sp, #16]
    4cdc:	f000 fa94 	bl	5208 <__multadd>
    4ce0:	0006      	movs	r6, r0
    4ce2:	e7f1      	b.n	4cc8 <_dtoa_r+0xb5c>
    4ce4:	2300      	movs	r3, #0
    4ce6:	220a      	movs	r2, #10
    4ce8:	9905      	ldr	r1, [sp, #20]
    4cea:	9804      	ldr	r0, [sp, #16]
    4cec:	f000 fa8c 	bl	5208 <__multadd>
    4cf0:	9005      	str	r0, [sp, #20]
    4cf2:	e771      	b.n	4bd8 <_dtoa_r+0xa6c>
    4cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4cf6:	429a      	cmp	r2, r3
    4cf8:	d105      	bne.n	4d06 <_dtoa_r+0xb9a>
    4cfa:	9b03      	ldr	r3, [sp, #12]
    4cfc:	3301      	adds	r3, #1
    4cfe:	9303      	str	r3, [sp, #12]
    4d00:	2331      	movs	r3, #49	; 0x31
    4d02:	7013      	strb	r3, [r2, #0]
    4d04:	e73e      	b.n	4b84 <_dtoa_r+0xa18>
    4d06:	001d      	movs	r5, r3
    4d08:	e7b4      	b.n	4c74 <_dtoa_r+0xb08>
    4d0a:	4b0a      	ldr	r3, [pc, #40]	; (4d34 <_dtoa_r+0xbc8>)
    4d0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4d0e:	930a      	str	r3, [sp, #40]	; 0x28
    4d10:	4b09      	ldr	r3, [pc, #36]	; (4d38 <_dtoa_r+0xbcc>)
    4d12:	2a00      	cmp	r2, #0
    4d14:	d001      	beq.n	4d1a <_dtoa_r+0xbae>
    4d16:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4d18:	6013      	str	r3, [r2, #0]
    4d1a:	980a      	ldr	r0, [sp, #40]	; 0x28
    4d1c:	b01d      	add	sp, #116	; 0x74
    4d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d22:	2b00      	cmp	r3, #0
    4d24:	dd00      	ble.n	4d28 <_dtoa_r+0xbbc>
    4d26:	e756      	b.n	4bd6 <_dtoa_r+0xa6a>
    4d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d2a:	2b02      	cmp	r3, #2
    4d2c:	dc00      	bgt.n	4d30 <_dtoa_r+0xbc4>
    4d2e:	e752      	b.n	4bd6 <_dtoa_r+0xa6a>
    4d30:	e713      	b.n	4b5a <_dtoa_r+0x9ee>
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	00008984 	.word	0x00008984
    4d38:	0000898c 	.word	0x0000898c

00004d3c <__sflush_r>:
    4d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d3e:	898a      	ldrh	r2, [r1, #12]
    4d40:	0005      	movs	r5, r0
    4d42:	000c      	movs	r4, r1
    4d44:	0713      	lsls	r3, r2, #28
    4d46:	d460      	bmi.n	4e0a <__sflush_r+0xce>
    4d48:	684b      	ldr	r3, [r1, #4]
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	dc04      	bgt.n	4d58 <__sflush_r+0x1c>
    4d4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4d50:	2b00      	cmp	r3, #0
    4d52:	dc01      	bgt.n	4d58 <__sflush_r+0x1c>
    4d54:	2000      	movs	r0, #0
    4d56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4d58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4d5a:	2f00      	cmp	r7, #0
    4d5c:	d0fa      	beq.n	4d54 <__sflush_r+0x18>
    4d5e:	2300      	movs	r3, #0
    4d60:	682e      	ldr	r6, [r5, #0]
    4d62:	602b      	str	r3, [r5, #0]
    4d64:	2380      	movs	r3, #128	; 0x80
    4d66:	015b      	lsls	r3, r3, #5
    4d68:	401a      	ands	r2, r3
    4d6a:	d034      	beq.n	4dd6 <__sflush_r+0x9a>
    4d6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4d6e:	89a3      	ldrh	r3, [r4, #12]
    4d70:	075b      	lsls	r3, r3, #29
    4d72:	d506      	bpl.n	4d82 <__sflush_r+0x46>
    4d74:	6863      	ldr	r3, [r4, #4]
    4d76:	1ac0      	subs	r0, r0, r3
    4d78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d001      	beq.n	4d82 <__sflush_r+0x46>
    4d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4d80:	1ac0      	subs	r0, r0, r3
    4d82:	0002      	movs	r2, r0
    4d84:	6a21      	ldr	r1, [r4, #32]
    4d86:	2300      	movs	r3, #0
    4d88:	0028      	movs	r0, r5
    4d8a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4d8c:	47b8      	blx	r7
    4d8e:	89a1      	ldrh	r1, [r4, #12]
    4d90:	1c43      	adds	r3, r0, #1
    4d92:	d106      	bne.n	4da2 <__sflush_r+0x66>
    4d94:	682b      	ldr	r3, [r5, #0]
    4d96:	2b1d      	cmp	r3, #29
    4d98:	d831      	bhi.n	4dfe <__sflush_r+0xc2>
    4d9a:	4a2c      	ldr	r2, [pc, #176]	; (4e4c <__sflush_r+0x110>)
    4d9c:	40da      	lsrs	r2, r3
    4d9e:	07d3      	lsls	r3, r2, #31
    4da0:	d52d      	bpl.n	4dfe <__sflush_r+0xc2>
    4da2:	2300      	movs	r3, #0
    4da4:	6063      	str	r3, [r4, #4]
    4da6:	6923      	ldr	r3, [r4, #16]
    4da8:	6023      	str	r3, [r4, #0]
    4daa:	04cb      	lsls	r3, r1, #19
    4dac:	d505      	bpl.n	4dba <__sflush_r+0x7e>
    4dae:	1c43      	adds	r3, r0, #1
    4db0:	d102      	bne.n	4db8 <__sflush_r+0x7c>
    4db2:	682b      	ldr	r3, [r5, #0]
    4db4:	2b00      	cmp	r3, #0
    4db6:	d100      	bne.n	4dba <__sflush_r+0x7e>
    4db8:	6560      	str	r0, [r4, #84]	; 0x54
    4dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4dbc:	602e      	str	r6, [r5, #0]
    4dbe:	2900      	cmp	r1, #0
    4dc0:	d0c8      	beq.n	4d54 <__sflush_r+0x18>
    4dc2:	0023      	movs	r3, r4
    4dc4:	3344      	adds	r3, #68	; 0x44
    4dc6:	4299      	cmp	r1, r3
    4dc8:	d002      	beq.n	4dd0 <__sflush_r+0x94>
    4dca:	0028      	movs	r0, r5
    4dcc:	f000 fcbc 	bl	5748 <_free_r>
    4dd0:	2000      	movs	r0, #0
    4dd2:	6360      	str	r0, [r4, #52]	; 0x34
    4dd4:	e7bf      	b.n	4d56 <__sflush_r+0x1a>
    4dd6:	2301      	movs	r3, #1
    4dd8:	6a21      	ldr	r1, [r4, #32]
    4dda:	0028      	movs	r0, r5
    4ddc:	47b8      	blx	r7
    4dde:	1c43      	adds	r3, r0, #1
    4de0:	d1c5      	bne.n	4d6e <__sflush_r+0x32>
    4de2:	682b      	ldr	r3, [r5, #0]
    4de4:	2b00      	cmp	r3, #0
    4de6:	d0c2      	beq.n	4d6e <__sflush_r+0x32>
    4de8:	2b1d      	cmp	r3, #29
    4dea:	d001      	beq.n	4df0 <__sflush_r+0xb4>
    4dec:	2b16      	cmp	r3, #22
    4dee:	d101      	bne.n	4df4 <__sflush_r+0xb8>
    4df0:	602e      	str	r6, [r5, #0]
    4df2:	e7af      	b.n	4d54 <__sflush_r+0x18>
    4df4:	2340      	movs	r3, #64	; 0x40
    4df6:	89a2      	ldrh	r2, [r4, #12]
    4df8:	4313      	orrs	r3, r2
    4dfa:	81a3      	strh	r3, [r4, #12]
    4dfc:	e7ab      	b.n	4d56 <__sflush_r+0x1a>
    4dfe:	2340      	movs	r3, #64	; 0x40
    4e00:	430b      	orrs	r3, r1
    4e02:	2001      	movs	r0, #1
    4e04:	81a3      	strh	r3, [r4, #12]
    4e06:	4240      	negs	r0, r0
    4e08:	e7a5      	b.n	4d56 <__sflush_r+0x1a>
    4e0a:	690f      	ldr	r7, [r1, #16]
    4e0c:	2f00      	cmp	r7, #0
    4e0e:	d0a1      	beq.n	4d54 <__sflush_r+0x18>
    4e10:	680b      	ldr	r3, [r1, #0]
    4e12:	600f      	str	r7, [r1, #0]
    4e14:	1bdb      	subs	r3, r3, r7
    4e16:	9301      	str	r3, [sp, #4]
    4e18:	2300      	movs	r3, #0
    4e1a:	0792      	lsls	r2, r2, #30
    4e1c:	d100      	bne.n	4e20 <__sflush_r+0xe4>
    4e1e:	694b      	ldr	r3, [r1, #20]
    4e20:	60a3      	str	r3, [r4, #8]
    4e22:	9b01      	ldr	r3, [sp, #4]
    4e24:	2b00      	cmp	r3, #0
    4e26:	dc00      	bgt.n	4e2a <__sflush_r+0xee>
    4e28:	e794      	b.n	4d54 <__sflush_r+0x18>
    4e2a:	9b01      	ldr	r3, [sp, #4]
    4e2c:	003a      	movs	r2, r7
    4e2e:	6a21      	ldr	r1, [r4, #32]
    4e30:	0028      	movs	r0, r5
    4e32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4e34:	47b0      	blx	r6
    4e36:	2800      	cmp	r0, #0
    4e38:	dc03      	bgt.n	4e42 <__sflush_r+0x106>
    4e3a:	2340      	movs	r3, #64	; 0x40
    4e3c:	89a2      	ldrh	r2, [r4, #12]
    4e3e:	4313      	orrs	r3, r2
    4e40:	e7df      	b.n	4e02 <__sflush_r+0xc6>
    4e42:	9b01      	ldr	r3, [sp, #4]
    4e44:	183f      	adds	r7, r7, r0
    4e46:	1a1b      	subs	r3, r3, r0
    4e48:	9301      	str	r3, [sp, #4]
    4e4a:	e7ea      	b.n	4e22 <__sflush_r+0xe6>
    4e4c:	20400001 	.word	0x20400001

00004e50 <_fflush_r>:
    4e50:	690b      	ldr	r3, [r1, #16]
    4e52:	b570      	push	{r4, r5, r6, lr}
    4e54:	0005      	movs	r5, r0
    4e56:	000c      	movs	r4, r1
    4e58:	2b00      	cmp	r3, #0
    4e5a:	d101      	bne.n	4e60 <_fflush_r+0x10>
    4e5c:	2000      	movs	r0, #0
    4e5e:	bd70      	pop	{r4, r5, r6, pc}
    4e60:	2800      	cmp	r0, #0
    4e62:	d004      	beq.n	4e6e <_fflush_r+0x1e>
    4e64:	6983      	ldr	r3, [r0, #24]
    4e66:	2b00      	cmp	r3, #0
    4e68:	d101      	bne.n	4e6e <_fflush_r+0x1e>
    4e6a:	f000 f85f 	bl	4f2c <__sinit>
    4e6e:	4b0b      	ldr	r3, [pc, #44]	; (4e9c <_fflush_r+0x4c>)
    4e70:	429c      	cmp	r4, r3
    4e72:	d109      	bne.n	4e88 <_fflush_r+0x38>
    4e74:	686c      	ldr	r4, [r5, #4]
    4e76:	220c      	movs	r2, #12
    4e78:	5ea3      	ldrsh	r3, [r4, r2]
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d0ee      	beq.n	4e5c <_fflush_r+0xc>
    4e7e:	0021      	movs	r1, r4
    4e80:	0028      	movs	r0, r5
    4e82:	f7ff ff5b 	bl	4d3c <__sflush_r>
    4e86:	e7ea      	b.n	4e5e <_fflush_r+0xe>
    4e88:	4b05      	ldr	r3, [pc, #20]	; (4ea0 <_fflush_r+0x50>)
    4e8a:	429c      	cmp	r4, r3
    4e8c:	d101      	bne.n	4e92 <_fflush_r+0x42>
    4e8e:	68ac      	ldr	r4, [r5, #8]
    4e90:	e7f1      	b.n	4e76 <_fflush_r+0x26>
    4e92:	4b04      	ldr	r3, [pc, #16]	; (4ea4 <_fflush_r+0x54>)
    4e94:	429c      	cmp	r4, r3
    4e96:	d1ee      	bne.n	4e76 <_fflush_r+0x26>
    4e98:	68ec      	ldr	r4, [r5, #12]
    4e9a:	e7ec      	b.n	4e76 <_fflush_r+0x26>
    4e9c:	000089b4 	.word	0x000089b4
    4ea0:	000089d4 	.word	0x000089d4
    4ea4:	00008994 	.word	0x00008994

00004ea8 <_cleanup_r>:
    4ea8:	b510      	push	{r4, lr}
    4eaa:	4902      	ldr	r1, [pc, #8]	; (4eb4 <_cleanup_r+0xc>)
    4eac:	f000 f8b2 	bl	5014 <_fwalk_reent>
    4eb0:	bd10      	pop	{r4, pc}
    4eb2:	46c0      	nop			; (mov r8, r8)
    4eb4:	00004e51 	.word	0x00004e51

00004eb8 <std.isra.0>:
    4eb8:	2300      	movs	r3, #0
    4eba:	b510      	push	{r4, lr}
    4ebc:	0004      	movs	r4, r0
    4ebe:	6003      	str	r3, [r0, #0]
    4ec0:	6043      	str	r3, [r0, #4]
    4ec2:	6083      	str	r3, [r0, #8]
    4ec4:	8181      	strh	r1, [r0, #12]
    4ec6:	6643      	str	r3, [r0, #100]	; 0x64
    4ec8:	81c2      	strh	r2, [r0, #14]
    4eca:	6103      	str	r3, [r0, #16]
    4ecc:	6143      	str	r3, [r0, #20]
    4ece:	6183      	str	r3, [r0, #24]
    4ed0:	0019      	movs	r1, r3
    4ed2:	2208      	movs	r2, #8
    4ed4:	305c      	adds	r0, #92	; 0x5c
    4ed6:	f7fe fa3e 	bl	3356 <memset>
    4eda:	4b05      	ldr	r3, [pc, #20]	; (4ef0 <std.isra.0+0x38>)
    4edc:	6224      	str	r4, [r4, #32]
    4ede:	6263      	str	r3, [r4, #36]	; 0x24
    4ee0:	4b04      	ldr	r3, [pc, #16]	; (4ef4 <std.isra.0+0x3c>)
    4ee2:	62a3      	str	r3, [r4, #40]	; 0x28
    4ee4:	4b04      	ldr	r3, [pc, #16]	; (4ef8 <std.isra.0+0x40>)
    4ee6:	62e3      	str	r3, [r4, #44]	; 0x2c
    4ee8:	4b04      	ldr	r3, [pc, #16]	; (4efc <std.isra.0+0x44>)
    4eea:	6323      	str	r3, [r4, #48]	; 0x30
    4eec:	bd10      	pop	{r4, pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	00005b45 	.word	0x00005b45
    4ef4:	00005b6d 	.word	0x00005b6d
    4ef8:	00005ba5 	.word	0x00005ba5
    4efc:	00005bd1 	.word	0x00005bd1

00004f00 <__sfmoreglue>:
    4f00:	b570      	push	{r4, r5, r6, lr}
    4f02:	2568      	movs	r5, #104	; 0x68
    4f04:	1e4a      	subs	r2, r1, #1
    4f06:	4355      	muls	r5, r2
    4f08:	000e      	movs	r6, r1
    4f0a:	0029      	movs	r1, r5
    4f0c:	3174      	adds	r1, #116	; 0x74
    4f0e:	f000 fc65 	bl	57dc <_malloc_r>
    4f12:	1e04      	subs	r4, r0, #0
    4f14:	d008      	beq.n	4f28 <__sfmoreglue+0x28>
    4f16:	2100      	movs	r1, #0
    4f18:	002a      	movs	r2, r5
    4f1a:	6001      	str	r1, [r0, #0]
    4f1c:	6046      	str	r6, [r0, #4]
    4f1e:	300c      	adds	r0, #12
    4f20:	60a0      	str	r0, [r4, #8]
    4f22:	3268      	adds	r2, #104	; 0x68
    4f24:	f7fe fa17 	bl	3356 <memset>
    4f28:	0020      	movs	r0, r4
    4f2a:	bd70      	pop	{r4, r5, r6, pc}

00004f2c <__sinit>:
    4f2c:	6983      	ldr	r3, [r0, #24]
    4f2e:	b513      	push	{r0, r1, r4, lr}
    4f30:	0004      	movs	r4, r0
    4f32:	2b00      	cmp	r3, #0
    4f34:	d128      	bne.n	4f88 <__sinit+0x5c>
    4f36:	6483      	str	r3, [r0, #72]	; 0x48
    4f38:	64c3      	str	r3, [r0, #76]	; 0x4c
    4f3a:	6503      	str	r3, [r0, #80]	; 0x50
    4f3c:	4b13      	ldr	r3, [pc, #76]	; (4f8c <__sinit+0x60>)
    4f3e:	4a14      	ldr	r2, [pc, #80]	; (4f90 <__sinit+0x64>)
    4f40:	681b      	ldr	r3, [r3, #0]
    4f42:	6282      	str	r2, [r0, #40]	; 0x28
    4f44:	9301      	str	r3, [sp, #4]
    4f46:	4298      	cmp	r0, r3
    4f48:	d101      	bne.n	4f4e <__sinit+0x22>
    4f4a:	2301      	movs	r3, #1
    4f4c:	6183      	str	r3, [r0, #24]
    4f4e:	0020      	movs	r0, r4
    4f50:	f000 f820 	bl	4f94 <__sfp>
    4f54:	6060      	str	r0, [r4, #4]
    4f56:	0020      	movs	r0, r4
    4f58:	f000 f81c 	bl	4f94 <__sfp>
    4f5c:	60a0      	str	r0, [r4, #8]
    4f5e:	0020      	movs	r0, r4
    4f60:	f000 f818 	bl	4f94 <__sfp>
    4f64:	2200      	movs	r2, #0
    4f66:	60e0      	str	r0, [r4, #12]
    4f68:	2104      	movs	r1, #4
    4f6a:	6860      	ldr	r0, [r4, #4]
    4f6c:	f7ff ffa4 	bl	4eb8 <std.isra.0>
    4f70:	2201      	movs	r2, #1
    4f72:	2109      	movs	r1, #9
    4f74:	68a0      	ldr	r0, [r4, #8]
    4f76:	f7ff ff9f 	bl	4eb8 <std.isra.0>
    4f7a:	2202      	movs	r2, #2
    4f7c:	2112      	movs	r1, #18
    4f7e:	68e0      	ldr	r0, [r4, #12]
    4f80:	f7ff ff9a 	bl	4eb8 <std.isra.0>
    4f84:	2301      	movs	r3, #1
    4f86:	61a3      	str	r3, [r4, #24]
    4f88:	bd13      	pop	{r0, r1, r4, pc}
    4f8a:	46c0      	nop			; (mov r8, r8)
    4f8c:	0000894c 	.word	0x0000894c
    4f90:	00004ea9 	.word	0x00004ea9

00004f94 <__sfp>:
    4f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f96:	4b1e      	ldr	r3, [pc, #120]	; (5010 <__sfp+0x7c>)
    4f98:	0007      	movs	r7, r0
    4f9a:	681e      	ldr	r6, [r3, #0]
    4f9c:	69b3      	ldr	r3, [r6, #24]
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	d102      	bne.n	4fa8 <__sfp+0x14>
    4fa2:	0030      	movs	r0, r6
    4fa4:	f7ff ffc2 	bl	4f2c <__sinit>
    4fa8:	3648      	adds	r6, #72	; 0x48
    4faa:	68b4      	ldr	r4, [r6, #8]
    4fac:	6873      	ldr	r3, [r6, #4]
    4fae:	3b01      	subs	r3, #1
    4fb0:	d504      	bpl.n	4fbc <__sfp+0x28>
    4fb2:	6833      	ldr	r3, [r6, #0]
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d007      	beq.n	4fc8 <__sfp+0x34>
    4fb8:	6836      	ldr	r6, [r6, #0]
    4fba:	e7f6      	b.n	4faa <__sfp+0x16>
    4fbc:	220c      	movs	r2, #12
    4fbe:	5ea5      	ldrsh	r5, [r4, r2]
    4fc0:	2d00      	cmp	r5, #0
    4fc2:	d00d      	beq.n	4fe0 <__sfp+0x4c>
    4fc4:	3468      	adds	r4, #104	; 0x68
    4fc6:	e7f2      	b.n	4fae <__sfp+0x1a>
    4fc8:	2104      	movs	r1, #4
    4fca:	0038      	movs	r0, r7
    4fcc:	f7ff ff98 	bl	4f00 <__sfmoreglue>
    4fd0:	6030      	str	r0, [r6, #0]
    4fd2:	2800      	cmp	r0, #0
    4fd4:	d1f0      	bne.n	4fb8 <__sfp+0x24>
    4fd6:	230c      	movs	r3, #12
    4fd8:	0004      	movs	r4, r0
    4fda:	603b      	str	r3, [r7, #0]
    4fdc:	0020      	movs	r0, r4
    4fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fe0:	2301      	movs	r3, #1
    4fe2:	0020      	movs	r0, r4
    4fe4:	425b      	negs	r3, r3
    4fe6:	81e3      	strh	r3, [r4, #14]
    4fe8:	3302      	adds	r3, #2
    4fea:	81a3      	strh	r3, [r4, #12]
    4fec:	6665      	str	r5, [r4, #100]	; 0x64
    4fee:	6025      	str	r5, [r4, #0]
    4ff0:	60a5      	str	r5, [r4, #8]
    4ff2:	6065      	str	r5, [r4, #4]
    4ff4:	6125      	str	r5, [r4, #16]
    4ff6:	6165      	str	r5, [r4, #20]
    4ff8:	61a5      	str	r5, [r4, #24]
    4ffa:	2208      	movs	r2, #8
    4ffc:	0029      	movs	r1, r5
    4ffe:	305c      	adds	r0, #92	; 0x5c
    5000:	f7fe f9a9 	bl	3356 <memset>
    5004:	6365      	str	r5, [r4, #52]	; 0x34
    5006:	63a5      	str	r5, [r4, #56]	; 0x38
    5008:	64a5      	str	r5, [r4, #72]	; 0x48
    500a:	64e5      	str	r5, [r4, #76]	; 0x4c
    500c:	e7e6      	b.n	4fdc <__sfp+0x48>
    500e:	46c0      	nop			; (mov r8, r8)
    5010:	0000894c 	.word	0x0000894c

00005014 <_fwalk_reent>:
    5014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5016:	0004      	movs	r4, r0
    5018:	0007      	movs	r7, r0
    501a:	2600      	movs	r6, #0
    501c:	9101      	str	r1, [sp, #4]
    501e:	3448      	adds	r4, #72	; 0x48
    5020:	2c00      	cmp	r4, #0
    5022:	d101      	bne.n	5028 <_fwalk_reent+0x14>
    5024:	0030      	movs	r0, r6
    5026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5028:	6863      	ldr	r3, [r4, #4]
    502a:	68a5      	ldr	r5, [r4, #8]
    502c:	9300      	str	r3, [sp, #0]
    502e:	9b00      	ldr	r3, [sp, #0]
    5030:	3b01      	subs	r3, #1
    5032:	9300      	str	r3, [sp, #0]
    5034:	d501      	bpl.n	503a <_fwalk_reent+0x26>
    5036:	6824      	ldr	r4, [r4, #0]
    5038:	e7f2      	b.n	5020 <_fwalk_reent+0xc>
    503a:	89ab      	ldrh	r3, [r5, #12]
    503c:	2b01      	cmp	r3, #1
    503e:	d908      	bls.n	5052 <_fwalk_reent+0x3e>
    5040:	220e      	movs	r2, #14
    5042:	5eab      	ldrsh	r3, [r5, r2]
    5044:	3301      	adds	r3, #1
    5046:	d004      	beq.n	5052 <_fwalk_reent+0x3e>
    5048:	0029      	movs	r1, r5
    504a:	0038      	movs	r0, r7
    504c:	9b01      	ldr	r3, [sp, #4]
    504e:	4798      	blx	r3
    5050:	4306      	orrs	r6, r0
    5052:	3568      	adds	r5, #104	; 0x68
    5054:	e7eb      	b.n	502e <_fwalk_reent+0x1a>
	...

00005058 <_localeconv_r>:
    5058:	4b03      	ldr	r3, [pc, #12]	; (5068 <_localeconv_r+0x10>)
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	6a18      	ldr	r0, [r3, #32]
    505e:	2800      	cmp	r0, #0
    5060:	d100      	bne.n	5064 <_localeconv_r+0xc>
    5062:	4802      	ldr	r0, [pc, #8]	; (506c <_localeconv_r+0x14>)
    5064:	30f0      	adds	r0, #240	; 0xf0
    5066:	4770      	bx	lr
    5068:	2000000c 	.word	0x2000000c
    506c:	20000070 	.word	0x20000070

00005070 <__swhatbuf_r>:
    5070:	b570      	push	{r4, r5, r6, lr}
    5072:	000e      	movs	r6, r1
    5074:	001d      	movs	r5, r3
    5076:	230e      	movs	r3, #14
    5078:	5ec9      	ldrsh	r1, [r1, r3]
    507a:	b090      	sub	sp, #64	; 0x40
    507c:	0014      	movs	r4, r2
    507e:	2900      	cmp	r1, #0
    5080:	da07      	bge.n	5092 <__swhatbuf_r+0x22>
    5082:	2300      	movs	r3, #0
    5084:	602b      	str	r3, [r5, #0]
    5086:	89b3      	ldrh	r3, [r6, #12]
    5088:	061b      	lsls	r3, r3, #24
    508a:	d411      	bmi.n	50b0 <__swhatbuf_r+0x40>
    508c:	2380      	movs	r3, #128	; 0x80
    508e:	00db      	lsls	r3, r3, #3
    5090:	e00f      	b.n	50b2 <__swhatbuf_r+0x42>
    5092:	aa01      	add	r2, sp, #4
    5094:	f000 fdc8 	bl	5c28 <_fstat_r>
    5098:	2800      	cmp	r0, #0
    509a:	dbf2      	blt.n	5082 <__swhatbuf_r+0x12>
    509c:	22f0      	movs	r2, #240	; 0xf0
    509e:	9b02      	ldr	r3, [sp, #8]
    50a0:	0212      	lsls	r2, r2, #8
    50a2:	4013      	ands	r3, r2
    50a4:	4a05      	ldr	r2, [pc, #20]	; (50bc <__swhatbuf_r+0x4c>)
    50a6:	189b      	adds	r3, r3, r2
    50a8:	425a      	negs	r2, r3
    50aa:	4153      	adcs	r3, r2
    50ac:	602b      	str	r3, [r5, #0]
    50ae:	e7ed      	b.n	508c <__swhatbuf_r+0x1c>
    50b0:	2340      	movs	r3, #64	; 0x40
    50b2:	2000      	movs	r0, #0
    50b4:	6023      	str	r3, [r4, #0]
    50b6:	b010      	add	sp, #64	; 0x40
    50b8:	bd70      	pop	{r4, r5, r6, pc}
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	ffffe000 	.word	0xffffe000

000050c0 <__smakebuf_r>:
    50c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50c2:	2602      	movs	r6, #2
    50c4:	898b      	ldrh	r3, [r1, #12]
    50c6:	0005      	movs	r5, r0
    50c8:	000c      	movs	r4, r1
    50ca:	4233      	tst	r3, r6
    50cc:	d006      	beq.n	50dc <__smakebuf_r+0x1c>
    50ce:	0023      	movs	r3, r4
    50d0:	3347      	adds	r3, #71	; 0x47
    50d2:	6023      	str	r3, [r4, #0]
    50d4:	6123      	str	r3, [r4, #16]
    50d6:	2301      	movs	r3, #1
    50d8:	6163      	str	r3, [r4, #20]
    50da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    50dc:	ab01      	add	r3, sp, #4
    50de:	466a      	mov	r2, sp
    50e0:	f7ff ffc6 	bl	5070 <__swhatbuf_r>
    50e4:	9900      	ldr	r1, [sp, #0]
    50e6:	0007      	movs	r7, r0
    50e8:	0028      	movs	r0, r5
    50ea:	f000 fb77 	bl	57dc <_malloc_r>
    50ee:	2800      	cmp	r0, #0
    50f0:	d106      	bne.n	5100 <__smakebuf_r+0x40>
    50f2:	220c      	movs	r2, #12
    50f4:	5ea3      	ldrsh	r3, [r4, r2]
    50f6:	059a      	lsls	r2, r3, #22
    50f8:	d4ef      	bmi.n	50da <__smakebuf_r+0x1a>
    50fa:	431e      	orrs	r6, r3
    50fc:	81a6      	strh	r6, [r4, #12]
    50fe:	e7e6      	b.n	50ce <__smakebuf_r+0xe>
    5100:	4b0d      	ldr	r3, [pc, #52]	; (5138 <__smakebuf_r+0x78>)
    5102:	62ab      	str	r3, [r5, #40]	; 0x28
    5104:	2380      	movs	r3, #128	; 0x80
    5106:	89a2      	ldrh	r2, [r4, #12]
    5108:	6020      	str	r0, [r4, #0]
    510a:	4313      	orrs	r3, r2
    510c:	81a3      	strh	r3, [r4, #12]
    510e:	9b00      	ldr	r3, [sp, #0]
    5110:	6120      	str	r0, [r4, #16]
    5112:	6163      	str	r3, [r4, #20]
    5114:	9b01      	ldr	r3, [sp, #4]
    5116:	2b00      	cmp	r3, #0
    5118:	d00a      	beq.n	5130 <__smakebuf_r+0x70>
    511a:	230e      	movs	r3, #14
    511c:	5ee1      	ldrsh	r1, [r4, r3]
    511e:	0028      	movs	r0, r5
    5120:	f000 fd94 	bl	5c4c <_isatty_r>
    5124:	2800      	cmp	r0, #0
    5126:	d003      	beq.n	5130 <__smakebuf_r+0x70>
    5128:	2301      	movs	r3, #1
    512a:	89a2      	ldrh	r2, [r4, #12]
    512c:	4313      	orrs	r3, r2
    512e:	81a3      	strh	r3, [r4, #12]
    5130:	89a0      	ldrh	r0, [r4, #12]
    5132:	4338      	orrs	r0, r7
    5134:	81a0      	strh	r0, [r4, #12]
    5136:	e7d0      	b.n	50da <__smakebuf_r+0x1a>
    5138:	00004ea9 	.word	0x00004ea9

0000513c <malloc>:
    513c:	b510      	push	{r4, lr}
    513e:	4b03      	ldr	r3, [pc, #12]	; (514c <malloc+0x10>)
    5140:	0001      	movs	r1, r0
    5142:	6818      	ldr	r0, [r3, #0]
    5144:	f000 fb4a 	bl	57dc <_malloc_r>
    5148:	bd10      	pop	{r4, pc}
    514a:	46c0      	nop			; (mov r8, r8)
    514c:	2000000c 	.word	0x2000000c

00005150 <memchr>:
    5150:	b2c9      	uxtb	r1, r1
    5152:	1882      	adds	r2, r0, r2
    5154:	4290      	cmp	r0, r2
    5156:	d101      	bne.n	515c <memchr+0xc>
    5158:	2000      	movs	r0, #0
    515a:	4770      	bx	lr
    515c:	7803      	ldrb	r3, [r0, #0]
    515e:	428b      	cmp	r3, r1
    5160:	d0fb      	beq.n	515a <memchr+0xa>
    5162:	3001      	adds	r0, #1
    5164:	e7f6      	b.n	5154 <memchr+0x4>

00005166 <_Balloc>:
    5166:	b570      	push	{r4, r5, r6, lr}
    5168:	6a46      	ldr	r6, [r0, #36]	; 0x24
    516a:	0004      	movs	r4, r0
    516c:	000d      	movs	r5, r1
    516e:	2e00      	cmp	r6, #0
    5170:	d107      	bne.n	5182 <_Balloc+0x1c>
    5172:	2010      	movs	r0, #16
    5174:	f7ff ffe2 	bl	513c <malloc>
    5178:	6260      	str	r0, [r4, #36]	; 0x24
    517a:	6046      	str	r6, [r0, #4]
    517c:	6086      	str	r6, [r0, #8]
    517e:	6006      	str	r6, [r0, #0]
    5180:	60c6      	str	r6, [r0, #12]
    5182:	6a66      	ldr	r6, [r4, #36]	; 0x24
    5184:	68f3      	ldr	r3, [r6, #12]
    5186:	2b00      	cmp	r3, #0
    5188:	d013      	beq.n	51b2 <_Balloc+0x4c>
    518a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    518c:	00aa      	lsls	r2, r5, #2
    518e:	68db      	ldr	r3, [r3, #12]
    5190:	189b      	adds	r3, r3, r2
    5192:	6818      	ldr	r0, [r3, #0]
    5194:	2800      	cmp	r0, #0
    5196:	d118      	bne.n	51ca <_Balloc+0x64>
    5198:	2101      	movs	r1, #1
    519a:	000e      	movs	r6, r1
    519c:	40ae      	lsls	r6, r5
    519e:	1d72      	adds	r2, r6, #5
    51a0:	0092      	lsls	r2, r2, #2
    51a2:	0020      	movs	r0, r4
    51a4:	f000 fac2 	bl	572c <_calloc_r>
    51a8:	2800      	cmp	r0, #0
    51aa:	d00c      	beq.n	51c6 <_Balloc+0x60>
    51ac:	6045      	str	r5, [r0, #4]
    51ae:	6086      	str	r6, [r0, #8]
    51b0:	e00d      	b.n	51ce <_Balloc+0x68>
    51b2:	2221      	movs	r2, #33	; 0x21
    51b4:	2104      	movs	r1, #4
    51b6:	0020      	movs	r0, r4
    51b8:	f000 fab8 	bl	572c <_calloc_r>
    51bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51be:	60f0      	str	r0, [r6, #12]
    51c0:	68db      	ldr	r3, [r3, #12]
    51c2:	2b00      	cmp	r3, #0
    51c4:	d1e1      	bne.n	518a <_Balloc+0x24>
    51c6:	2000      	movs	r0, #0
    51c8:	bd70      	pop	{r4, r5, r6, pc}
    51ca:	6802      	ldr	r2, [r0, #0]
    51cc:	601a      	str	r2, [r3, #0]
    51ce:	2300      	movs	r3, #0
    51d0:	6103      	str	r3, [r0, #16]
    51d2:	60c3      	str	r3, [r0, #12]
    51d4:	e7f8      	b.n	51c8 <_Balloc+0x62>

000051d6 <_Bfree>:
    51d6:	b570      	push	{r4, r5, r6, lr}
    51d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
    51da:	0006      	movs	r6, r0
    51dc:	000d      	movs	r5, r1
    51de:	2c00      	cmp	r4, #0
    51e0:	d107      	bne.n	51f2 <_Bfree+0x1c>
    51e2:	2010      	movs	r0, #16
    51e4:	f7ff ffaa 	bl	513c <malloc>
    51e8:	6270      	str	r0, [r6, #36]	; 0x24
    51ea:	6044      	str	r4, [r0, #4]
    51ec:	6084      	str	r4, [r0, #8]
    51ee:	6004      	str	r4, [r0, #0]
    51f0:	60c4      	str	r4, [r0, #12]
    51f2:	2d00      	cmp	r5, #0
    51f4:	d007      	beq.n	5206 <_Bfree+0x30>
    51f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
    51f8:	686a      	ldr	r2, [r5, #4]
    51fa:	68db      	ldr	r3, [r3, #12]
    51fc:	0092      	lsls	r2, r2, #2
    51fe:	189b      	adds	r3, r3, r2
    5200:	681a      	ldr	r2, [r3, #0]
    5202:	602a      	str	r2, [r5, #0]
    5204:	601d      	str	r5, [r3, #0]
    5206:	bd70      	pop	{r4, r5, r6, pc}

00005208 <__multadd>:
    5208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    520a:	001e      	movs	r6, r3
    520c:	2314      	movs	r3, #20
    520e:	469c      	mov	ip, r3
    5210:	0007      	movs	r7, r0
    5212:	000c      	movs	r4, r1
    5214:	2000      	movs	r0, #0
    5216:	690d      	ldr	r5, [r1, #16]
    5218:	448c      	add	ip, r1
    521a:	4663      	mov	r3, ip
    521c:	8819      	ldrh	r1, [r3, #0]
    521e:	681b      	ldr	r3, [r3, #0]
    5220:	4351      	muls	r1, r2
    5222:	0c1b      	lsrs	r3, r3, #16
    5224:	4353      	muls	r3, r2
    5226:	1989      	adds	r1, r1, r6
    5228:	0c0e      	lsrs	r6, r1, #16
    522a:	199b      	adds	r3, r3, r6
    522c:	b289      	uxth	r1, r1
    522e:	0c1e      	lsrs	r6, r3, #16
    5230:	041b      	lsls	r3, r3, #16
    5232:	185b      	adds	r3, r3, r1
    5234:	4661      	mov	r1, ip
    5236:	3001      	adds	r0, #1
    5238:	c108      	stmia	r1!, {r3}
    523a:	468c      	mov	ip, r1
    523c:	4285      	cmp	r5, r0
    523e:	dcec      	bgt.n	521a <__multadd+0x12>
    5240:	2e00      	cmp	r6, #0
    5242:	d01b      	beq.n	527c <__multadd+0x74>
    5244:	68a3      	ldr	r3, [r4, #8]
    5246:	429d      	cmp	r5, r3
    5248:	db12      	blt.n	5270 <__multadd+0x68>
    524a:	6863      	ldr	r3, [r4, #4]
    524c:	0038      	movs	r0, r7
    524e:	1c59      	adds	r1, r3, #1
    5250:	f7ff ff89 	bl	5166 <_Balloc>
    5254:	0021      	movs	r1, r4
    5256:	6923      	ldr	r3, [r4, #16]
    5258:	9001      	str	r0, [sp, #4]
    525a:	1c9a      	adds	r2, r3, #2
    525c:	0092      	lsls	r2, r2, #2
    525e:	310c      	adds	r1, #12
    5260:	300c      	adds	r0, #12
    5262:	f7fe f86f 	bl	3344 <memcpy>
    5266:	0021      	movs	r1, r4
    5268:	0038      	movs	r0, r7
    526a:	f7ff ffb4 	bl	51d6 <_Bfree>
    526e:	9c01      	ldr	r4, [sp, #4]
    5270:	1d2b      	adds	r3, r5, #4
    5272:	009b      	lsls	r3, r3, #2
    5274:	18e3      	adds	r3, r4, r3
    5276:	3501      	adds	r5, #1
    5278:	605e      	str	r6, [r3, #4]
    527a:	6125      	str	r5, [r4, #16]
    527c:	0020      	movs	r0, r4
    527e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005280 <__hi0bits>:
    5280:	0003      	movs	r3, r0
    5282:	0c02      	lsrs	r2, r0, #16
    5284:	2000      	movs	r0, #0
    5286:	4282      	cmp	r2, r0
    5288:	d101      	bne.n	528e <__hi0bits+0xe>
    528a:	041b      	lsls	r3, r3, #16
    528c:	3010      	adds	r0, #16
    528e:	0e1a      	lsrs	r2, r3, #24
    5290:	d101      	bne.n	5296 <__hi0bits+0x16>
    5292:	3008      	adds	r0, #8
    5294:	021b      	lsls	r3, r3, #8
    5296:	0f1a      	lsrs	r2, r3, #28
    5298:	d101      	bne.n	529e <__hi0bits+0x1e>
    529a:	3004      	adds	r0, #4
    529c:	011b      	lsls	r3, r3, #4
    529e:	0f9a      	lsrs	r2, r3, #30
    52a0:	d101      	bne.n	52a6 <__hi0bits+0x26>
    52a2:	3002      	adds	r0, #2
    52a4:	009b      	lsls	r3, r3, #2
    52a6:	2b00      	cmp	r3, #0
    52a8:	db03      	blt.n	52b2 <__hi0bits+0x32>
    52aa:	3001      	adds	r0, #1
    52ac:	005b      	lsls	r3, r3, #1
    52ae:	d400      	bmi.n	52b2 <__hi0bits+0x32>
    52b0:	2020      	movs	r0, #32
    52b2:	4770      	bx	lr

000052b4 <__lo0bits>:
    52b4:	2207      	movs	r2, #7
    52b6:	6803      	ldr	r3, [r0, #0]
    52b8:	b510      	push	{r4, lr}
    52ba:	0001      	movs	r1, r0
    52bc:	401a      	ands	r2, r3
    52be:	d00d      	beq.n	52dc <__lo0bits+0x28>
    52c0:	2401      	movs	r4, #1
    52c2:	2000      	movs	r0, #0
    52c4:	4223      	tst	r3, r4
    52c6:	d105      	bne.n	52d4 <__lo0bits+0x20>
    52c8:	3002      	adds	r0, #2
    52ca:	4203      	tst	r3, r0
    52cc:	d003      	beq.n	52d6 <__lo0bits+0x22>
    52ce:	40e3      	lsrs	r3, r4
    52d0:	0020      	movs	r0, r4
    52d2:	600b      	str	r3, [r1, #0]
    52d4:	bd10      	pop	{r4, pc}
    52d6:	089b      	lsrs	r3, r3, #2
    52d8:	600b      	str	r3, [r1, #0]
    52da:	e7fb      	b.n	52d4 <__lo0bits+0x20>
    52dc:	b29c      	uxth	r4, r3
    52de:	0010      	movs	r0, r2
    52e0:	2c00      	cmp	r4, #0
    52e2:	d101      	bne.n	52e8 <__lo0bits+0x34>
    52e4:	2010      	movs	r0, #16
    52e6:	0c1b      	lsrs	r3, r3, #16
    52e8:	b2da      	uxtb	r2, r3
    52ea:	2a00      	cmp	r2, #0
    52ec:	d101      	bne.n	52f2 <__lo0bits+0x3e>
    52ee:	3008      	adds	r0, #8
    52f0:	0a1b      	lsrs	r3, r3, #8
    52f2:	071a      	lsls	r2, r3, #28
    52f4:	d101      	bne.n	52fa <__lo0bits+0x46>
    52f6:	3004      	adds	r0, #4
    52f8:	091b      	lsrs	r3, r3, #4
    52fa:	079a      	lsls	r2, r3, #30
    52fc:	d101      	bne.n	5302 <__lo0bits+0x4e>
    52fe:	3002      	adds	r0, #2
    5300:	089b      	lsrs	r3, r3, #2
    5302:	07da      	lsls	r2, r3, #31
    5304:	d4e8      	bmi.n	52d8 <__lo0bits+0x24>
    5306:	085b      	lsrs	r3, r3, #1
    5308:	d001      	beq.n	530e <__lo0bits+0x5a>
    530a:	3001      	adds	r0, #1
    530c:	e7e4      	b.n	52d8 <__lo0bits+0x24>
    530e:	2020      	movs	r0, #32
    5310:	e7e0      	b.n	52d4 <__lo0bits+0x20>

00005312 <__i2b>:
    5312:	b510      	push	{r4, lr}
    5314:	000c      	movs	r4, r1
    5316:	2101      	movs	r1, #1
    5318:	f7ff ff25 	bl	5166 <_Balloc>
    531c:	2301      	movs	r3, #1
    531e:	6144      	str	r4, [r0, #20]
    5320:	6103      	str	r3, [r0, #16]
    5322:	bd10      	pop	{r4, pc}

00005324 <__multiply>:
    5324:	b5f0      	push	{r4, r5, r6, r7, lr}
    5326:	690b      	ldr	r3, [r1, #16]
    5328:	0015      	movs	r5, r2
    532a:	6912      	ldr	r2, [r2, #16]
    532c:	b089      	sub	sp, #36	; 0x24
    532e:	000c      	movs	r4, r1
    5330:	4293      	cmp	r3, r2
    5332:	da01      	bge.n	5338 <__multiply+0x14>
    5334:	002c      	movs	r4, r5
    5336:	000d      	movs	r5, r1
    5338:	6927      	ldr	r7, [r4, #16]
    533a:	692e      	ldr	r6, [r5, #16]
    533c:	68a2      	ldr	r2, [r4, #8]
    533e:	19bb      	adds	r3, r7, r6
    5340:	6861      	ldr	r1, [r4, #4]
    5342:	9301      	str	r3, [sp, #4]
    5344:	4293      	cmp	r3, r2
    5346:	dd00      	ble.n	534a <__multiply+0x26>
    5348:	3101      	adds	r1, #1
    534a:	f7ff ff0c 	bl	5166 <_Balloc>
    534e:	0003      	movs	r3, r0
    5350:	3314      	adds	r3, #20
    5352:	9300      	str	r3, [sp, #0]
    5354:	9a00      	ldr	r2, [sp, #0]
    5356:	19bb      	adds	r3, r7, r6
    5358:	4694      	mov	ip, r2
    535a:	009b      	lsls	r3, r3, #2
    535c:	449c      	add	ip, r3
    535e:	0013      	movs	r3, r2
    5360:	2200      	movs	r2, #0
    5362:	9004      	str	r0, [sp, #16]
    5364:	4563      	cmp	r3, ip
    5366:	d31c      	bcc.n	53a2 <__multiply+0x7e>
    5368:	002a      	movs	r2, r5
    536a:	3414      	adds	r4, #20
    536c:	00bf      	lsls	r7, r7, #2
    536e:	19e3      	adds	r3, r4, r7
    5370:	3214      	adds	r2, #20
    5372:	00b6      	lsls	r6, r6, #2
    5374:	9305      	str	r3, [sp, #20]
    5376:	1993      	adds	r3, r2, r6
    5378:	9402      	str	r4, [sp, #8]
    537a:	9306      	str	r3, [sp, #24]
    537c:	9b06      	ldr	r3, [sp, #24]
    537e:	429a      	cmp	r2, r3
    5380:	d311      	bcc.n	53a6 <__multiply+0x82>
    5382:	9b01      	ldr	r3, [sp, #4]
    5384:	2b00      	cmp	r3, #0
    5386:	dd06      	ble.n	5396 <__multiply+0x72>
    5388:	2304      	movs	r3, #4
    538a:	425b      	negs	r3, r3
    538c:	449c      	add	ip, r3
    538e:	4663      	mov	r3, ip
    5390:	681b      	ldr	r3, [r3, #0]
    5392:	2b00      	cmp	r3, #0
    5394:	d051      	beq.n	543a <__multiply+0x116>
    5396:	9b04      	ldr	r3, [sp, #16]
    5398:	9a01      	ldr	r2, [sp, #4]
    539a:	0018      	movs	r0, r3
    539c:	611a      	str	r2, [r3, #16]
    539e:	b009      	add	sp, #36	; 0x24
    53a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53a2:	c304      	stmia	r3!, {r2}
    53a4:	e7de      	b.n	5364 <__multiply+0x40>
    53a6:	8814      	ldrh	r4, [r2, #0]
    53a8:	2c00      	cmp	r4, #0
    53aa:	d01e      	beq.n	53ea <__multiply+0xc6>
    53ac:	2600      	movs	r6, #0
    53ae:	9d00      	ldr	r5, [sp, #0]
    53b0:	9f02      	ldr	r7, [sp, #8]
    53b2:	cf01      	ldmia	r7!, {r0}
    53b4:	9507      	str	r5, [sp, #28]
    53b6:	cd08      	ldmia	r5!, {r3}
    53b8:	9303      	str	r3, [sp, #12]
    53ba:	b283      	uxth	r3, r0
    53bc:	4363      	muls	r3, r4
    53be:	0019      	movs	r1, r3
    53c0:	466b      	mov	r3, sp
    53c2:	0c00      	lsrs	r0, r0, #16
    53c4:	899b      	ldrh	r3, [r3, #12]
    53c6:	4360      	muls	r0, r4
    53c8:	18cb      	adds	r3, r1, r3
    53ca:	9903      	ldr	r1, [sp, #12]
    53cc:	199b      	adds	r3, r3, r6
    53ce:	0c09      	lsrs	r1, r1, #16
    53d0:	1841      	adds	r1, r0, r1
    53d2:	0c18      	lsrs	r0, r3, #16
    53d4:	1809      	adds	r1, r1, r0
    53d6:	0c0e      	lsrs	r6, r1, #16
    53d8:	b29b      	uxth	r3, r3
    53da:	0409      	lsls	r1, r1, #16
    53dc:	430b      	orrs	r3, r1
    53de:	9907      	ldr	r1, [sp, #28]
    53e0:	600b      	str	r3, [r1, #0]
    53e2:	9b05      	ldr	r3, [sp, #20]
    53e4:	42bb      	cmp	r3, r7
    53e6:	d8e4      	bhi.n	53b2 <__multiply+0x8e>
    53e8:	602e      	str	r6, [r5, #0]
    53ea:	6813      	ldr	r3, [r2, #0]
    53ec:	0c1b      	lsrs	r3, r3, #16
    53ee:	9303      	str	r3, [sp, #12]
    53f0:	d01e      	beq.n	5430 <__multiply+0x10c>
    53f2:	2600      	movs	r6, #0
    53f4:	9b00      	ldr	r3, [sp, #0]
    53f6:	9c02      	ldr	r4, [sp, #8]
    53f8:	681b      	ldr	r3, [r3, #0]
    53fa:	9800      	ldr	r0, [sp, #0]
    53fc:	0007      	movs	r7, r0
    53fe:	8821      	ldrh	r1, [r4, #0]
    5400:	9d03      	ldr	r5, [sp, #12]
    5402:	b29b      	uxth	r3, r3
    5404:	4369      	muls	r1, r5
    5406:	c820      	ldmia	r0!, {r5}
    5408:	0c2d      	lsrs	r5, r5, #16
    540a:	1949      	adds	r1, r1, r5
    540c:	198e      	adds	r6, r1, r6
    540e:	0431      	lsls	r1, r6, #16
    5410:	430b      	orrs	r3, r1
    5412:	603b      	str	r3, [r7, #0]
    5414:	cc08      	ldmia	r4!, {r3}
    5416:	9903      	ldr	r1, [sp, #12]
    5418:	0c1b      	lsrs	r3, r3, #16
    541a:	434b      	muls	r3, r1
    541c:	6879      	ldr	r1, [r7, #4]
    541e:	0c36      	lsrs	r6, r6, #16
    5420:	b289      	uxth	r1, r1
    5422:	185b      	adds	r3, r3, r1
    5424:	9905      	ldr	r1, [sp, #20]
    5426:	199b      	adds	r3, r3, r6
    5428:	0c1e      	lsrs	r6, r3, #16
    542a:	42a1      	cmp	r1, r4
    542c:	d8e6      	bhi.n	53fc <__multiply+0xd8>
    542e:	6003      	str	r3, [r0, #0]
    5430:	9b00      	ldr	r3, [sp, #0]
    5432:	3204      	adds	r2, #4
    5434:	3304      	adds	r3, #4
    5436:	9300      	str	r3, [sp, #0]
    5438:	e7a0      	b.n	537c <__multiply+0x58>
    543a:	9b01      	ldr	r3, [sp, #4]
    543c:	3b01      	subs	r3, #1
    543e:	9301      	str	r3, [sp, #4]
    5440:	e79f      	b.n	5382 <__multiply+0x5e>
	...

00005444 <__pow5mult>:
    5444:	2303      	movs	r3, #3
    5446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5448:	4013      	ands	r3, r2
    544a:	0005      	movs	r5, r0
    544c:	000e      	movs	r6, r1
    544e:	0014      	movs	r4, r2
    5450:	2b00      	cmp	r3, #0
    5452:	d008      	beq.n	5466 <__pow5mult+0x22>
    5454:	4922      	ldr	r1, [pc, #136]	; (54e0 <__pow5mult+0x9c>)
    5456:	3b01      	subs	r3, #1
    5458:	009a      	lsls	r2, r3, #2
    545a:	5852      	ldr	r2, [r2, r1]
    545c:	2300      	movs	r3, #0
    545e:	0031      	movs	r1, r6
    5460:	f7ff fed2 	bl	5208 <__multadd>
    5464:	0006      	movs	r6, r0
    5466:	10a3      	asrs	r3, r4, #2
    5468:	9301      	str	r3, [sp, #4]
    546a:	d036      	beq.n	54da <__pow5mult+0x96>
    546c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    546e:	2c00      	cmp	r4, #0
    5470:	d107      	bne.n	5482 <__pow5mult+0x3e>
    5472:	2010      	movs	r0, #16
    5474:	f7ff fe62 	bl	513c <malloc>
    5478:	6268      	str	r0, [r5, #36]	; 0x24
    547a:	6044      	str	r4, [r0, #4]
    547c:	6084      	str	r4, [r0, #8]
    547e:	6004      	str	r4, [r0, #0]
    5480:	60c4      	str	r4, [r0, #12]
    5482:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    5484:	68bc      	ldr	r4, [r7, #8]
    5486:	2c00      	cmp	r4, #0
    5488:	d107      	bne.n	549a <__pow5mult+0x56>
    548a:	4916      	ldr	r1, [pc, #88]	; (54e4 <__pow5mult+0xa0>)
    548c:	0028      	movs	r0, r5
    548e:	f7ff ff40 	bl	5312 <__i2b>
    5492:	2300      	movs	r3, #0
    5494:	0004      	movs	r4, r0
    5496:	60b8      	str	r0, [r7, #8]
    5498:	6003      	str	r3, [r0, #0]
    549a:	2201      	movs	r2, #1
    549c:	9b01      	ldr	r3, [sp, #4]
    549e:	4213      	tst	r3, r2
    54a0:	d00a      	beq.n	54b8 <__pow5mult+0x74>
    54a2:	0031      	movs	r1, r6
    54a4:	0022      	movs	r2, r4
    54a6:	0028      	movs	r0, r5
    54a8:	f7ff ff3c 	bl	5324 <__multiply>
    54ac:	0007      	movs	r7, r0
    54ae:	0031      	movs	r1, r6
    54b0:	0028      	movs	r0, r5
    54b2:	f7ff fe90 	bl	51d6 <_Bfree>
    54b6:	003e      	movs	r6, r7
    54b8:	9b01      	ldr	r3, [sp, #4]
    54ba:	105b      	asrs	r3, r3, #1
    54bc:	9301      	str	r3, [sp, #4]
    54be:	d00c      	beq.n	54da <__pow5mult+0x96>
    54c0:	6820      	ldr	r0, [r4, #0]
    54c2:	2800      	cmp	r0, #0
    54c4:	d107      	bne.n	54d6 <__pow5mult+0x92>
    54c6:	0022      	movs	r2, r4
    54c8:	0021      	movs	r1, r4
    54ca:	0028      	movs	r0, r5
    54cc:	f7ff ff2a 	bl	5324 <__multiply>
    54d0:	2300      	movs	r3, #0
    54d2:	6020      	str	r0, [r4, #0]
    54d4:	6003      	str	r3, [r0, #0]
    54d6:	0004      	movs	r4, r0
    54d8:	e7df      	b.n	549a <__pow5mult+0x56>
    54da:	0030      	movs	r0, r6
    54dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    54de:	46c0      	nop			; (mov r8, r8)
    54e0:	00008ae8 	.word	0x00008ae8
    54e4:	00000271 	.word	0x00000271

000054e8 <__lshift>:
    54e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ea:	000d      	movs	r5, r1
    54ec:	0017      	movs	r7, r2
    54ee:	692b      	ldr	r3, [r5, #16]
    54f0:	1154      	asrs	r4, r2, #5
    54f2:	b085      	sub	sp, #20
    54f4:	18e3      	adds	r3, r4, r3
    54f6:	9302      	str	r3, [sp, #8]
    54f8:	3301      	adds	r3, #1
    54fa:	9301      	str	r3, [sp, #4]
    54fc:	6849      	ldr	r1, [r1, #4]
    54fe:	68ab      	ldr	r3, [r5, #8]
    5500:	9003      	str	r0, [sp, #12]
    5502:	9a01      	ldr	r2, [sp, #4]
    5504:	4293      	cmp	r3, r2
    5506:	db34      	blt.n	5572 <__lshift+0x8a>
    5508:	9803      	ldr	r0, [sp, #12]
    550a:	f7ff fe2c 	bl	5166 <_Balloc>
    550e:	2300      	movs	r3, #0
    5510:	0002      	movs	r2, r0
    5512:	0006      	movs	r6, r0
    5514:	0019      	movs	r1, r3
    5516:	3214      	adds	r2, #20
    5518:	42a3      	cmp	r3, r4
    551a:	db2d      	blt.n	5578 <__lshift+0x90>
    551c:	43e3      	mvns	r3, r4
    551e:	17db      	asrs	r3, r3, #31
    5520:	401c      	ands	r4, r3
    5522:	002b      	movs	r3, r5
    5524:	211f      	movs	r1, #31
    5526:	00a4      	lsls	r4, r4, #2
    5528:	1914      	adds	r4, r2, r4
    552a:	692a      	ldr	r2, [r5, #16]
    552c:	3314      	adds	r3, #20
    552e:	0092      	lsls	r2, r2, #2
    5530:	189a      	adds	r2, r3, r2
    5532:	400f      	ands	r7, r1
    5534:	d024      	beq.n	5580 <__lshift+0x98>
    5536:	3101      	adds	r1, #1
    5538:	1bc9      	subs	r1, r1, r7
    553a:	468c      	mov	ip, r1
    553c:	2100      	movs	r1, #0
    553e:	6818      	ldr	r0, [r3, #0]
    5540:	40b8      	lsls	r0, r7
    5542:	4301      	orrs	r1, r0
    5544:	4660      	mov	r0, ip
    5546:	6021      	str	r1, [r4, #0]
    5548:	cb02      	ldmia	r3!, {r1}
    554a:	3404      	adds	r4, #4
    554c:	40c1      	lsrs	r1, r0
    554e:	429a      	cmp	r2, r3
    5550:	d8f5      	bhi.n	553e <__lshift+0x56>
    5552:	6021      	str	r1, [r4, #0]
    5554:	2900      	cmp	r1, #0
    5556:	d002      	beq.n	555e <__lshift+0x76>
    5558:	9b02      	ldr	r3, [sp, #8]
    555a:	3302      	adds	r3, #2
    555c:	9301      	str	r3, [sp, #4]
    555e:	9b01      	ldr	r3, [sp, #4]
    5560:	9803      	ldr	r0, [sp, #12]
    5562:	3b01      	subs	r3, #1
    5564:	6133      	str	r3, [r6, #16]
    5566:	0029      	movs	r1, r5
    5568:	f7ff fe35 	bl	51d6 <_Bfree>
    556c:	0030      	movs	r0, r6
    556e:	b005      	add	sp, #20
    5570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5572:	3101      	adds	r1, #1
    5574:	005b      	lsls	r3, r3, #1
    5576:	e7c4      	b.n	5502 <__lshift+0x1a>
    5578:	0098      	lsls	r0, r3, #2
    557a:	5011      	str	r1, [r2, r0]
    557c:	3301      	adds	r3, #1
    557e:	e7cb      	b.n	5518 <__lshift+0x30>
    5580:	cb02      	ldmia	r3!, {r1}
    5582:	c402      	stmia	r4!, {r1}
    5584:	429a      	cmp	r2, r3
    5586:	d8fb      	bhi.n	5580 <__lshift+0x98>
    5588:	e7e9      	b.n	555e <__lshift+0x76>

0000558a <__mcmp>:
    558a:	690a      	ldr	r2, [r1, #16]
    558c:	6903      	ldr	r3, [r0, #16]
    558e:	b530      	push	{r4, r5, lr}
    5590:	1a9b      	subs	r3, r3, r2
    5592:	d10e      	bne.n	55b2 <__mcmp+0x28>
    5594:	0092      	lsls	r2, r2, #2
    5596:	3014      	adds	r0, #20
    5598:	3114      	adds	r1, #20
    559a:	1884      	adds	r4, r0, r2
    559c:	1889      	adds	r1, r1, r2
    559e:	3c04      	subs	r4, #4
    55a0:	3904      	subs	r1, #4
    55a2:	6822      	ldr	r2, [r4, #0]
    55a4:	680d      	ldr	r5, [r1, #0]
    55a6:	42aa      	cmp	r2, r5
    55a8:	d005      	beq.n	55b6 <__mcmp+0x2c>
    55aa:	42aa      	cmp	r2, r5
    55ac:	4192      	sbcs	r2, r2
    55ae:	2301      	movs	r3, #1
    55b0:	4313      	orrs	r3, r2
    55b2:	0018      	movs	r0, r3
    55b4:	bd30      	pop	{r4, r5, pc}
    55b6:	42a0      	cmp	r0, r4
    55b8:	d3f1      	bcc.n	559e <__mcmp+0x14>
    55ba:	e7fa      	b.n	55b2 <__mcmp+0x28>

000055bc <__mdiff>:
    55bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55be:	000d      	movs	r5, r1
    55c0:	b085      	sub	sp, #20
    55c2:	0007      	movs	r7, r0
    55c4:	0011      	movs	r1, r2
    55c6:	0028      	movs	r0, r5
    55c8:	0014      	movs	r4, r2
    55ca:	f7ff ffde 	bl	558a <__mcmp>
    55ce:	1e06      	subs	r6, r0, #0
    55d0:	d108      	bne.n	55e4 <__mdiff+0x28>
    55d2:	0001      	movs	r1, r0
    55d4:	0038      	movs	r0, r7
    55d6:	f7ff fdc6 	bl	5166 <_Balloc>
    55da:	2301      	movs	r3, #1
    55dc:	6146      	str	r6, [r0, #20]
    55de:	6103      	str	r3, [r0, #16]
    55e0:	b005      	add	sp, #20
    55e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55e4:	2301      	movs	r3, #1
    55e6:	9301      	str	r3, [sp, #4]
    55e8:	2800      	cmp	r0, #0
    55ea:	db04      	blt.n	55f6 <__mdiff+0x3a>
    55ec:	0023      	movs	r3, r4
    55ee:	002c      	movs	r4, r5
    55f0:	001d      	movs	r5, r3
    55f2:	2300      	movs	r3, #0
    55f4:	9301      	str	r3, [sp, #4]
    55f6:	6861      	ldr	r1, [r4, #4]
    55f8:	0038      	movs	r0, r7
    55fa:	f7ff fdb4 	bl	5166 <_Balloc>
    55fe:	002f      	movs	r7, r5
    5600:	2200      	movs	r2, #0
    5602:	9b01      	ldr	r3, [sp, #4]
    5604:	6926      	ldr	r6, [r4, #16]
    5606:	60c3      	str	r3, [r0, #12]
    5608:	3414      	adds	r4, #20
    560a:	00b3      	lsls	r3, r6, #2
    560c:	18e3      	adds	r3, r4, r3
    560e:	9302      	str	r3, [sp, #8]
    5610:	692b      	ldr	r3, [r5, #16]
    5612:	3714      	adds	r7, #20
    5614:	009b      	lsls	r3, r3, #2
    5616:	18fb      	adds	r3, r7, r3
    5618:	9303      	str	r3, [sp, #12]
    561a:	0003      	movs	r3, r0
    561c:	4694      	mov	ip, r2
    561e:	3314      	adds	r3, #20
    5620:	cc20      	ldmia	r4!, {r5}
    5622:	cf04      	ldmia	r7!, {r2}
    5624:	9201      	str	r2, [sp, #4]
    5626:	b2aa      	uxth	r2, r5
    5628:	4494      	add	ip, r2
    562a:	466a      	mov	r2, sp
    562c:	4661      	mov	r1, ip
    562e:	8892      	ldrh	r2, [r2, #4]
    5630:	0c2d      	lsrs	r5, r5, #16
    5632:	1a8a      	subs	r2, r1, r2
    5634:	9901      	ldr	r1, [sp, #4]
    5636:	0c09      	lsrs	r1, r1, #16
    5638:	1a69      	subs	r1, r5, r1
    563a:	1415      	asrs	r5, r2, #16
    563c:	1949      	adds	r1, r1, r5
    563e:	140d      	asrs	r5, r1, #16
    5640:	b292      	uxth	r2, r2
    5642:	0409      	lsls	r1, r1, #16
    5644:	430a      	orrs	r2, r1
    5646:	601a      	str	r2, [r3, #0]
    5648:	9a03      	ldr	r2, [sp, #12]
    564a:	46ac      	mov	ip, r5
    564c:	3304      	adds	r3, #4
    564e:	42ba      	cmp	r2, r7
    5650:	d8e6      	bhi.n	5620 <__mdiff+0x64>
    5652:	9902      	ldr	r1, [sp, #8]
    5654:	001a      	movs	r2, r3
    5656:	428c      	cmp	r4, r1
    5658:	d305      	bcc.n	5666 <__mdiff+0xaa>
    565a:	3a04      	subs	r2, #4
    565c:	6813      	ldr	r3, [r2, #0]
    565e:	2b00      	cmp	r3, #0
    5660:	d00e      	beq.n	5680 <__mdiff+0xc4>
    5662:	6106      	str	r6, [r0, #16]
    5664:	e7bc      	b.n	55e0 <__mdiff+0x24>
    5666:	cc04      	ldmia	r4!, {r2}
    5668:	b291      	uxth	r1, r2
    566a:	4461      	add	r1, ip
    566c:	140d      	asrs	r5, r1, #16
    566e:	0c12      	lsrs	r2, r2, #16
    5670:	1952      	adds	r2, r2, r5
    5672:	1415      	asrs	r5, r2, #16
    5674:	b289      	uxth	r1, r1
    5676:	0412      	lsls	r2, r2, #16
    5678:	430a      	orrs	r2, r1
    567a:	46ac      	mov	ip, r5
    567c:	c304      	stmia	r3!, {r2}
    567e:	e7e8      	b.n	5652 <__mdiff+0x96>
    5680:	3e01      	subs	r6, #1
    5682:	e7ea      	b.n	565a <__mdiff+0x9e>

00005684 <__d2b>:
    5684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5686:	001d      	movs	r5, r3
    5688:	2101      	movs	r1, #1
    568a:	9f08      	ldr	r7, [sp, #32]
    568c:	0014      	movs	r4, r2
    568e:	f7ff fd6a 	bl	5166 <_Balloc>
    5692:	032b      	lsls	r3, r5, #12
    5694:	006d      	lsls	r5, r5, #1
    5696:	0006      	movs	r6, r0
    5698:	0b1b      	lsrs	r3, r3, #12
    569a:	0d6d      	lsrs	r5, r5, #21
    569c:	d124      	bne.n	56e8 <__d2b+0x64>
    569e:	9301      	str	r3, [sp, #4]
    56a0:	2c00      	cmp	r4, #0
    56a2:	d027      	beq.n	56f4 <__d2b+0x70>
    56a4:	4668      	mov	r0, sp
    56a6:	9400      	str	r4, [sp, #0]
    56a8:	f7ff fe04 	bl	52b4 <__lo0bits>
    56ac:	9c00      	ldr	r4, [sp, #0]
    56ae:	2800      	cmp	r0, #0
    56b0:	d01e      	beq.n	56f0 <__d2b+0x6c>
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	2120      	movs	r1, #32
    56b6:	001a      	movs	r2, r3
    56b8:	1a09      	subs	r1, r1, r0
    56ba:	408a      	lsls	r2, r1
    56bc:	40c3      	lsrs	r3, r0
    56be:	4322      	orrs	r2, r4
    56c0:	6172      	str	r2, [r6, #20]
    56c2:	9301      	str	r3, [sp, #4]
    56c4:	9c01      	ldr	r4, [sp, #4]
    56c6:	61b4      	str	r4, [r6, #24]
    56c8:	1e63      	subs	r3, r4, #1
    56ca:	419c      	sbcs	r4, r3
    56cc:	3401      	adds	r4, #1
    56ce:	6134      	str	r4, [r6, #16]
    56d0:	2d00      	cmp	r5, #0
    56d2:	d018      	beq.n	5706 <__d2b+0x82>
    56d4:	4b12      	ldr	r3, [pc, #72]	; (5720 <__d2b+0x9c>)
    56d6:	18ed      	adds	r5, r5, r3
    56d8:	2335      	movs	r3, #53	; 0x35
    56da:	182d      	adds	r5, r5, r0
    56dc:	603d      	str	r5, [r7, #0]
    56de:	1a18      	subs	r0, r3, r0
    56e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    56e2:	6018      	str	r0, [r3, #0]
    56e4:	0030      	movs	r0, r6
    56e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    56e8:	2280      	movs	r2, #128	; 0x80
    56ea:	0352      	lsls	r2, r2, #13
    56ec:	4313      	orrs	r3, r2
    56ee:	e7d6      	b.n	569e <__d2b+0x1a>
    56f0:	6174      	str	r4, [r6, #20]
    56f2:	e7e7      	b.n	56c4 <__d2b+0x40>
    56f4:	a801      	add	r0, sp, #4
    56f6:	f7ff fddd 	bl	52b4 <__lo0bits>
    56fa:	2401      	movs	r4, #1
    56fc:	9b01      	ldr	r3, [sp, #4]
    56fe:	6134      	str	r4, [r6, #16]
    5700:	6173      	str	r3, [r6, #20]
    5702:	3020      	adds	r0, #32
    5704:	e7e4      	b.n	56d0 <__d2b+0x4c>
    5706:	4b07      	ldr	r3, [pc, #28]	; (5724 <__d2b+0xa0>)
    5708:	18c0      	adds	r0, r0, r3
    570a:	4b07      	ldr	r3, [pc, #28]	; (5728 <__d2b+0xa4>)
    570c:	6038      	str	r0, [r7, #0]
    570e:	18e3      	adds	r3, r4, r3
    5710:	009b      	lsls	r3, r3, #2
    5712:	18f3      	adds	r3, r6, r3
    5714:	6958      	ldr	r0, [r3, #20]
    5716:	f7ff fdb3 	bl	5280 <__hi0bits>
    571a:	0164      	lsls	r4, r4, #5
    571c:	1a20      	subs	r0, r4, r0
    571e:	e7df      	b.n	56e0 <__d2b+0x5c>
    5720:	fffffbcd 	.word	0xfffffbcd
    5724:	fffffbce 	.word	0xfffffbce
    5728:	3fffffff 	.word	0x3fffffff

0000572c <_calloc_r>:
    572c:	434a      	muls	r2, r1
    572e:	b570      	push	{r4, r5, r6, lr}
    5730:	0011      	movs	r1, r2
    5732:	0014      	movs	r4, r2
    5734:	f000 f852 	bl	57dc <_malloc_r>
    5738:	1e05      	subs	r5, r0, #0
    573a:	d003      	beq.n	5744 <_calloc_r+0x18>
    573c:	0022      	movs	r2, r4
    573e:	2100      	movs	r1, #0
    5740:	f7fd fe09 	bl	3356 <memset>
    5744:	0028      	movs	r0, r5
    5746:	bd70      	pop	{r4, r5, r6, pc}

00005748 <_free_r>:
    5748:	b570      	push	{r4, r5, r6, lr}
    574a:	0005      	movs	r5, r0
    574c:	2900      	cmp	r1, #0
    574e:	d010      	beq.n	5772 <_free_r+0x2a>
    5750:	1f0c      	subs	r4, r1, #4
    5752:	6823      	ldr	r3, [r4, #0]
    5754:	2b00      	cmp	r3, #0
    5756:	da00      	bge.n	575a <_free_r+0x12>
    5758:	18e4      	adds	r4, r4, r3
    575a:	0028      	movs	r0, r5
    575c:	f000 faae 	bl	5cbc <__malloc_lock>
    5760:	4a1d      	ldr	r2, [pc, #116]	; (57d8 <_free_r+0x90>)
    5762:	6813      	ldr	r3, [r2, #0]
    5764:	2b00      	cmp	r3, #0
    5766:	d105      	bne.n	5774 <_free_r+0x2c>
    5768:	6063      	str	r3, [r4, #4]
    576a:	6014      	str	r4, [r2, #0]
    576c:	0028      	movs	r0, r5
    576e:	f000 faa6 	bl	5cbe <__malloc_unlock>
    5772:	bd70      	pop	{r4, r5, r6, pc}
    5774:	42a3      	cmp	r3, r4
    5776:	d909      	bls.n	578c <_free_r+0x44>
    5778:	6821      	ldr	r1, [r4, #0]
    577a:	1860      	adds	r0, r4, r1
    577c:	4283      	cmp	r3, r0
    577e:	d1f3      	bne.n	5768 <_free_r+0x20>
    5780:	6818      	ldr	r0, [r3, #0]
    5782:	685b      	ldr	r3, [r3, #4]
    5784:	1841      	adds	r1, r0, r1
    5786:	6021      	str	r1, [r4, #0]
    5788:	e7ee      	b.n	5768 <_free_r+0x20>
    578a:	0013      	movs	r3, r2
    578c:	685a      	ldr	r2, [r3, #4]
    578e:	2a00      	cmp	r2, #0
    5790:	d001      	beq.n	5796 <_free_r+0x4e>
    5792:	42a2      	cmp	r2, r4
    5794:	d9f9      	bls.n	578a <_free_r+0x42>
    5796:	6819      	ldr	r1, [r3, #0]
    5798:	1858      	adds	r0, r3, r1
    579a:	42a0      	cmp	r0, r4
    579c:	d10b      	bne.n	57b6 <_free_r+0x6e>
    579e:	6820      	ldr	r0, [r4, #0]
    57a0:	1809      	adds	r1, r1, r0
    57a2:	1858      	adds	r0, r3, r1
    57a4:	6019      	str	r1, [r3, #0]
    57a6:	4282      	cmp	r2, r0
    57a8:	d1e0      	bne.n	576c <_free_r+0x24>
    57aa:	6810      	ldr	r0, [r2, #0]
    57ac:	6852      	ldr	r2, [r2, #4]
    57ae:	1841      	adds	r1, r0, r1
    57b0:	6019      	str	r1, [r3, #0]
    57b2:	605a      	str	r2, [r3, #4]
    57b4:	e7da      	b.n	576c <_free_r+0x24>
    57b6:	42a0      	cmp	r0, r4
    57b8:	d902      	bls.n	57c0 <_free_r+0x78>
    57ba:	230c      	movs	r3, #12
    57bc:	602b      	str	r3, [r5, #0]
    57be:	e7d5      	b.n	576c <_free_r+0x24>
    57c0:	6821      	ldr	r1, [r4, #0]
    57c2:	1860      	adds	r0, r4, r1
    57c4:	4282      	cmp	r2, r0
    57c6:	d103      	bne.n	57d0 <_free_r+0x88>
    57c8:	6810      	ldr	r0, [r2, #0]
    57ca:	6852      	ldr	r2, [r2, #4]
    57cc:	1841      	adds	r1, r0, r1
    57ce:	6021      	str	r1, [r4, #0]
    57d0:	6062      	str	r2, [r4, #4]
    57d2:	605c      	str	r4, [r3, #4]
    57d4:	e7ca      	b.n	576c <_free_r+0x24>
    57d6:	46c0      	nop			; (mov r8, r8)
    57d8:	200007ac 	.word	0x200007ac

000057dc <_malloc_r>:
    57dc:	2303      	movs	r3, #3
    57de:	b570      	push	{r4, r5, r6, lr}
    57e0:	1ccd      	adds	r5, r1, #3
    57e2:	439d      	bics	r5, r3
    57e4:	3508      	adds	r5, #8
    57e6:	0006      	movs	r6, r0
    57e8:	2d0c      	cmp	r5, #12
    57ea:	d21e      	bcs.n	582a <_malloc_r+0x4e>
    57ec:	250c      	movs	r5, #12
    57ee:	42a9      	cmp	r1, r5
    57f0:	d81d      	bhi.n	582e <_malloc_r+0x52>
    57f2:	0030      	movs	r0, r6
    57f4:	f000 fa62 	bl	5cbc <__malloc_lock>
    57f8:	4a25      	ldr	r2, [pc, #148]	; (5890 <_malloc_r+0xb4>)
    57fa:	6814      	ldr	r4, [r2, #0]
    57fc:	0021      	movs	r1, r4
    57fe:	2900      	cmp	r1, #0
    5800:	d119      	bne.n	5836 <_malloc_r+0x5a>
    5802:	4c24      	ldr	r4, [pc, #144]	; (5894 <_malloc_r+0xb8>)
    5804:	6823      	ldr	r3, [r4, #0]
    5806:	2b00      	cmp	r3, #0
    5808:	d103      	bne.n	5812 <_malloc_r+0x36>
    580a:	0030      	movs	r0, r6
    580c:	f000 f988 	bl	5b20 <_sbrk_r>
    5810:	6020      	str	r0, [r4, #0]
    5812:	0029      	movs	r1, r5
    5814:	0030      	movs	r0, r6
    5816:	f000 f983 	bl	5b20 <_sbrk_r>
    581a:	1c43      	adds	r3, r0, #1
    581c:	d12c      	bne.n	5878 <_malloc_r+0x9c>
    581e:	230c      	movs	r3, #12
    5820:	0030      	movs	r0, r6
    5822:	6033      	str	r3, [r6, #0]
    5824:	f000 fa4b 	bl	5cbe <__malloc_unlock>
    5828:	e003      	b.n	5832 <_malloc_r+0x56>
    582a:	2d00      	cmp	r5, #0
    582c:	dadf      	bge.n	57ee <_malloc_r+0x12>
    582e:	230c      	movs	r3, #12
    5830:	6033      	str	r3, [r6, #0]
    5832:	2000      	movs	r0, #0
    5834:	bd70      	pop	{r4, r5, r6, pc}
    5836:	680b      	ldr	r3, [r1, #0]
    5838:	1b5b      	subs	r3, r3, r5
    583a:	d41a      	bmi.n	5872 <_malloc_r+0x96>
    583c:	2b0b      	cmp	r3, #11
    583e:	d903      	bls.n	5848 <_malloc_r+0x6c>
    5840:	600b      	str	r3, [r1, #0]
    5842:	18cc      	adds	r4, r1, r3
    5844:	6025      	str	r5, [r4, #0]
    5846:	e003      	b.n	5850 <_malloc_r+0x74>
    5848:	428c      	cmp	r4, r1
    584a:	d10e      	bne.n	586a <_malloc_r+0x8e>
    584c:	6863      	ldr	r3, [r4, #4]
    584e:	6013      	str	r3, [r2, #0]
    5850:	0030      	movs	r0, r6
    5852:	f000 fa34 	bl	5cbe <__malloc_unlock>
    5856:	0020      	movs	r0, r4
    5858:	2207      	movs	r2, #7
    585a:	300b      	adds	r0, #11
    585c:	1d23      	adds	r3, r4, #4
    585e:	4390      	bics	r0, r2
    5860:	1ac3      	subs	r3, r0, r3
    5862:	d0e7      	beq.n	5834 <_malloc_r+0x58>
    5864:	425a      	negs	r2, r3
    5866:	50e2      	str	r2, [r4, r3]
    5868:	e7e4      	b.n	5834 <_malloc_r+0x58>
    586a:	684b      	ldr	r3, [r1, #4]
    586c:	6063      	str	r3, [r4, #4]
    586e:	000c      	movs	r4, r1
    5870:	e7ee      	b.n	5850 <_malloc_r+0x74>
    5872:	000c      	movs	r4, r1
    5874:	6849      	ldr	r1, [r1, #4]
    5876:	e7c2      	b.n	57fe <_malloc_r+0x22>
    5878:	2303      	movs	r3, #3
    587a:	1cc4      	adds	r4, r0, #3
    587c:	439c      	bics	r4, r3
    587e:	42a0      	cmp	r0, r4
    5880:	d0e0      	beq.n	5844 <_malloc_r+0x68>
    5882:	1a21      	subs	r1, r4, r0
    5884:	0030      	movs	r0, r6
    5886:	f000 f94b 	bl	5b20 <_sbrk_r>
    588a:	1c43      	adds	r3, r0, #1
    588c:	d1da      	bne.n	5844 <_malloc_r+0x68>
    588e:	e7c6      	b.n	581e <_malloc_r+0x42>
    5890:	200007ac 	.word	0x200007ac
    5894:	200007b0 	.word	0x200007b0

00005898 <__sfputc_r>:
    5898:	6893      	ldr	r3, [r2, #8]
    589a:	b510      	push	{r4, lr}
    589c:	3b01      	subs	r3, #1
    589e:	6093      	str	r3, [r2, #8]
    58a0:	2b00      	cmp	r3, #0
    58a2:	da05      	bge.n	58b0 <__sfputc_r+0x18>
    58a4:	6994      	ldr	r4, [r2, #24]
    58a6:	42a3      	cmp	r3, r4
    58a8:	db08      	blt.n	58bc <__sfputc_r+0x24>
    58aa:	b2cb      	uxtb	r3, r1
    58ac:	2b0a      	cmp	r3, #10
    58ae:	d005      	beq.n	58bc <__sfputc_r+0x24>
    58b0:	6813      	ldr	r3, [r2, #0]
    58b2:	1c58      	adds	r0, r3, #1
    58b4:	6010      	str	r0, [r2, #0]
    58b6:	7019      	strb	r1, [r3, #0]
    58b8:	b2c8      	uxtb	r0, r1
    58ba:	bd10      	pop	{r4, pc}
    58bc:	f7fe fb06 	bl	3ecc <__swbuf_r>
    58c0:	e7fb      	b.n	58ba <__sfputc_r+0x22>

000058c2 <__sfputs_r>:
    58c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58c4:	0006      	movs	r6, r0
    58c6:	000f      	movs	r7, r1
    58c8:	0014      	movs	r4, r2
    58ca:	18d5      	adds	r5, r2, r3
    58cc:	42ac      	cmp	r4, r5
    58ce:	d101      	bne.n	58d4 <__sfputs_r+0x12>
    58d0:	2000      	movs	r0, #0
    58d2:	e007      	b.n	58e4 <__sfputs_r+0x22>
    58d4:	7821      	ldrb	r1, [r4, #0]
    58d6:	003a      	movs	r2, r7
    58d8:	0030      	movs	r0, r6
    58da:	f7ff ffdd 	bl	5898 <__sfputc_r>
    58de:	3401      	adds	r4, #1
    58e0:	1c43      	adds	r3, r0, #1
    58e2:	d1f3      	bne.n	58cc <__sfputs_r+0xa>
    58e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000058e8 <_vfiprintf_r>:
    58e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ea:	b09f      	sub	sp, #124	; 0x7c
    58ec:	0006      	movs	r6, r0
    58ee:	000f      	movs	r7, r1
    58f0:	0014      	movs	r4, r2
    58f2:	9305      	str	r3, [sp, #20]
    58f4:	2800      	cmp	r0, #0
    58f6:	d004      	beq.n	5902 <_vfiprintf_r+0x1a>
    58f8:	6983      	ldr	r3, [r0, #24]
    58fa:	2b00      	cmp	r3, #0
    58fc:	d101      	bne.n	5902 <_vfiprintf_r+0x1a>
    58fe:	f7ff fb15 	bl	4f2c <__sinit>
    5902:	4b7f      	ldr	r3, [pc, #508]	; (5b00 <_vfiprintf_r+0x218>)
    5904:	429f      	cmp	r7, r3
    5906:	d15c      	bne.n	59c2 <_vfiprintf_r+0xda>
    5908:	6877      	ldr	r7, [r6, #4]
    590a:	89bb      	ldrh	r3, [r7, #12]
    590c:	071b      	lsls	r3, r3, #28
    590e:	d562      	bpl.n	59d6 <_vfiprintf_r+0xee>
    5910:	693b      	ldr	r3, [r7, #16]
    5912:	2b00      	cmp	r3, #0
    5914:	d05f      	beq.n	59d6 <_vfiprintf_r+0xee>
    5916:	2300      	movs	r3, #0
    5918:	ad06      	add	r5, sp, #24
    591a:	616b      	str	r3, [r5, #20]
    591c:	3320      	adds	r3, #32
    591e:	766b      	strb	r3, [r5, #25]
    5920:	3310      	adds	r3, #16
    5922:	76ab      	strb	r3, [r5, #26]
    5924:	9402      	str	r4, [sp, #8]
    5926:	9c02      	ldr	r4, [sp, #8]
    5928:	7823      	ldrb	r3, [r4, #0]
    592a:	2b00      	cmp	r3, #0
    592c:	d15d      	bne.n	59ea <_vfiprintf_r+0x102>
    592e:	9b02      	ldr	r3, [sp, #8]
    5930:	1ae3      	subs	r3, r4, r3
    5932:	9304      	str	r3, [sp, #16]
    5934:	d00d      	beq.n	5952 <_vfiprintf_r+0x6a>
    5936:	9b04      	ldr	r3, [sp, #16]
    5938:	9a02      	ldr	r2, [sp, #8]
    593a:	0039      	movs	r1, r7
    593c:	0030      	movs	r0, r6
    593e:	f7ff ffc0 	bl	58c2 <__sfputs_r>
    5942:	1c43      	adds	r3, r0, #1
    5944:	d100      	bne.n	5948 <_vfiprintf_r+0x60>
    5946:	e0cc      	b.n	5ae2 <_vfiprintf_r+0x1fa>
    5948:	696a      	ldr	r2, [r5, #20]
    594a:	9b04      	ldr	r3, [sp, #16]
    594c:	4694      	mov	ip, r2
    594e:	4463      	add	r3, ip
    5950:	616b      	str	r3, [r5, #20]
    5952:	7823      	ldrb	r3, [r4, #0]
    5954:	2b00      	cmp	r3, #0
    5956:	d100      	bne.n	595a <_vfiprintf_r+0x72>
    5958:	e0c3      	b.n	5ae2 <_vfiprintf_r+0x1fa>
    595a:	2201      	movs	r2, #1
    595c:	2300      	movs	r3, #0
    595e:	4252      	negs	r2, r2
    5960:	606a      	str	r2, [r5, #4]
    5962:	a902      	add	r1, sp, #8
    5964:	3254      	adds	r2, #84	; 0x54
    5966:	1852      	adds	r2, r2, r1
    5968:	3401      	adds	r4, #1
    596a:	602b      	str	r3, [r5, #0]
    596c:	60eb      	str	r3, [r5, #12]
    596e:	60ab      	str	r3, [r5, #8]
    5970:	7013      	strb	r3, [r2, #0]
    5972:	65ab      	str	r3, [r5, #88]	; 0x58
    5974:	7821      	ldrb	r1, [r4, #0]
    5976:	2205      	movs	r2, #5
    5978:	4862      	ldr	r0, [pc, #392]	; (5b04 <_vfiprintf_r+0x21c>)
    597a:	f7ff fbe9 	bl	5150 <memchr>
    597e:	1c63      	adds	r3, r4, #1
    5980:	469c      	mov	ip, r3
    5982:	2800      	cmp	r0, #0
    5984:	d135      	bne.n	59f2 <_vfiprintf_r+0x10a>
    5986:	6829      	ldr	r1, [r5, #0]
    5988:	06cb      	lsls	r3, r1, #27
    598a:	d504      	bpl.n	5996 <_vfiprintf_r+0xae>
    598c:	2353      	movs	r3, #83	; 0x53
    598e:	aa02      	add	r2, sp, #8
    5990:	3020      	adds	r0, #32
    5992:	189b      	adds	r3, r3, r2
    5994:	7018      	strb	r0, [r3, #0]
    5996:	070b      	lsls	r3, r1, #28
    5998:	d504      	bpl.n	59a4 <_vfiprintf_r+0xbc>
    599a:	2353      	movs	r3, #83	; 0x53
    599c:	202b      	movs	r0, #43	; 0x2b
    599e:	aa02      	add	r2, sp, #8
    59a0:	189b      	adds	r3, r3, r2
    59a2:	7018      	strb	r0, [r3, #0]
    59a4:	7823      	ldrb	r3, [r4, #0]
    59a6:	2b2a      	cmp	r3, #42	; 0x2a
    59a8:	d02c      	beq.n	5a04 <_vfiprintf_r+0x11c>
    59aa:	2000      	movs	r0, #0
    59ac:	210a      	movs	r1, #10
    59ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59b0:	7822      	ldrb	r2, [r4, #0]
    59b2:	3a30      	subs	r2, #48	; 0x30
    59b4:	2a09      	cmp	r2, #9
    59b6:	d800      	bhi.n	59ba <_vfiprintf_r+0xd2>
    59b8:	e06b      	b.n	5a92 <_vfiprintf_r+0x1aa>
    59ba:	2800      	cmp	r0, #0
    59bc:	d02a      	beq.n	5a14 <_vfiprintf_r+0x12c>
    59be:	9309      	str	r3, [sp, #36]	; 0x24
    59c0:	e028      	b.n	5a14 <_vfiprintf_r+0x12c>
    59c2:	4b51      	ldr	r3, [pc, #324]	; (5b08 <_vfiprintf_r+0x220>)
    59c4:	429f      	cmp	r7, r3
    59c6:	d101      	bne.n	59cc <_vfiprintf_r+0xe4>
    59c8:	68b7      	ldr	r7, [r6, #8]
    59ca:	e79e      	b.n	590a <_vfiprintf_r+0x22>
    59cc:	4b4f      	ldr	r3, [pc, #316]	; (5b0c <_vfiprintf_r+0x224>)
    59ce:	429f      	cmp	r7, r3
    59d0:	d19b      	bne.n	590a <_vfiprintf_r+0x22>
    59d2:	68f7      	ldr	r7, [r6, #12]
    59d4:	e799      	b.n	590a <_vfiprintf_r+0x22>
    59d6:	0039      	movs	r1, r7
    59d8:	0030      	movs	r0, r6
    59da:	f7fe facd 	bl	3f78 <__swsetup_r>
    59de:	2800      	cmp	r0, #0
    59e0:	d099      	beq.n	5916 <_vfiprintf_r+0x2e>
    59e2:	2001      	movs	r0, #1
    59e4:	4240      	negs	r0, r0
    59e6:	b01f      	add	sp, #124	; 0x7c
    59e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59ea:	2b25      	cmp	r3, #37	; 0x25
    59ec:	d09f      	beq.n	592e <_vfiprintf_r+0x46>
    59ee:	3401      	adds	r4, #1
    59f0:	e79a      	b.n	5928 <_vfiprintf_r+0x40>
    59f2:	4b44      	ldr	r3, [pc, #272]	; (5b04 <_vfiprintf_r+0x21c>)
    59f4:	6829      	ldr	r1, [r5, #0]
    59f6:	1ac0      	subs	r0, r0, r3
    59f8:	2301      	movs	r3, #1
    59fa:	4083      	lsls	r3, r0
    59fc:	430b      	orrs	r3, r1
    59fe:	602b      	str	r3, [r5, #0]
    5a00:	4664      	mov	r4, ip
    5a02:	e7b7      	b.n	5974 <_vfiprintf_r+0x8c>
    5a04:	9b05      	ldr	r3, [sp, #20]
    5a06:	1d18      	adds	r0, r3, #4
    5a08:	681b      	ldr	r3, [r3, #0]
    5a0a:	9005      	str	r0, [sp, #20]
    5a0c:	2b00      	cmp	r3, #0
    5a0e:	db3a      	blt.n	5a86 <_vfiprintf_r+0x19e>
    5a10:	9309      	str	r3, [sp, #36]	; 0x24
    5a12:	4664      	mov	r4, ip
    5a14:	7823      	ldrb	r3, [r4, #0]
    5a16:	2b2e      	cmp	r3, #46	; 0x2e
    5a18:	d10b      	bne.n	5a32 <_vfiprintf_r+0x14a>
    5a1a:	7863      	ldrb	r3, [r4, #1]
    5a1c:	1c62      	adds	r2, r4, #1
    5a1e:	2b2a      	cmp	r3, #42	; 0x2a
    5a20:	d13f      	bne.n	5aa2 <_vfiprintf_r+0x1ba>
    5a22:	9b05      	ldr	r3, [sp, #20]
    5a24:	3402      	adds	r4, #2
    5a26:	1d1a      	adds	r2, r3, #4
    5a28:	681b      	ldr	r3, [r3, #0]
    5a2a:	9205      	str	r2, [sp, #20]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	db35      	blt.n	5a9c <_vfiprintf_r+0x1b4>
    5a30:	9307      	str	r3, [sp, #28]
    5a32:	7821      	ldrb	r1, [r4, #0]
    5a34:	2203      	movs	r2, #3
    5a36:	4836      	ldr	r0, [pc, #216]	; (5b10 <_vfiprintf_r+0x228>)
    5a38:	f7ff fb8a 	bl	5150 <memchr>
    5a3c:	2800      	cmp	r0, #0
    5a3e:	d007      	beq.n	5a50 <_vfiprintf_r+0x168>
    5a40:	4b33      	ldr	r3, [pc, #204]	; (5b10 <_vfiprintf_r+0x228>)
    5a42:	682a      	ldr	r2, [r5, #0]
    5a44:	1ac0      	subs	r0, r0, r3
    5a46:	2340      	movs	r3, #64	; 0x40
    5a48:	4083      	lsls	r3, r0
    5a4a:	4313      	orrs	r3, r2
    5a4c:	602b      	str	r3, [r5, #0]
    5a4e:	3401      	adds	r4, #1
    5a50:	7821      	ldrb	r1, [r4, #0]
    5a52:	1c63      	adds	r3, r4, #1
    5a54:	2206      	movs	r2, #6
    5a56:	482f      	ldr	r0, [pc, #188]	; (5b14 <_vfiprintf_r+0x22c>)
    5a58:	9302      	str	r3, [sp, #8]
    5a5a:	7629      	strb	r1, [r5, #24]
    5a5c:	f7ff fb78 	bl	5150 <memchr>
    5a60:	2800      	cmp	r0, #0
    5a62:	d044      	beq.n	5aee <_vfiprintf_r+0x206>
    5a64:	4b2c      	ldr	r3, [pc, #176]	; (5b18 <_vfiprintf_r+0x230>)
    5a66:	2b00      	cmp	r3, #0
    5a68:	d12f      	bne.n	5aca <_vfiprintf_r+0x1e2>
    5a6a:	6829      	ldr	r1, [r5, #0]
    5a6c:	9b05      	ldr	r3, [sp, #20]
    5a6e:	2207      	movs	r2, #7
    5a70:	05c9      	lsls	r1, r1, #23
    5a72:	d528      	bpl.n	5ac6 <_vfiprintf_r+0x1de>
    5a74:	189b      	adds	r3, r3, r2
    5a76:	4393      	bics	r3, r2
    5a78:	3308      	adds	r3, #8
    5a7a:	9305      	str	r3, [sp, #20]
    5a7c:	696b      	ldr	r3, [r5, #20]
    5a7e:	9a03      	ldr	r2, [sp, #12]
    5a80:	189b      	adds	r3, r3, r2
    5a82:	616b      	str	r3, [r5, #20]
    5a84:	e74f      	b.n	5926 <_vfiprintf_r+0x3e>
    5a86:	425b      	negs	r3, r3
    5a88:	60eb      	str	r3, [r5, #12]
    5a8a:	2302      	movs	r3, #2
    5a8c:	430b      	orrs	r3, r1
    5a8e:	602b      	str	r3, [r5, #0]
    5a90:	e7bf      	b.n	5a12 <_vfiprintf_r+0x12a>
    5a92:	434b      	muls	r3, r1
    5a94:	3401      	adds	r4, #1
    5a96:	189b      	adds	r3, r3, r2
    5a98:	2001      	movs	r0, #1
    5a9a:	e789      	b.n	59b0 <_vfiprintf_r+0xc8>
    5a9c:	2301      	movs	r3, #1
    5a9e:	425b      	negs	r3, r3
    5aa0:	e7c6      	b.n	5a30 <_vfiprintf_r+0x148>
    5aa2:	2300      	movs	r3, #0
    5aa4:	0014      	movs	r4, r2
    5aa6:	200a      	movs	r0, #10
    5aa8:	001a      	movs	r2, r3
    5aaa:	606b      	str	r3, [r5, #4]
    5aac:	7821      	ldrb	r1, [r4, #0]
    5aae:	3930      	subs	r1, #48	; 0x30
    5ab0:	2909      	cmp	r1, #9
    5ab2:	d903      	bls.n	5abc <_vfiprintf_r+0x1d4>
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	d0bc      	beq.n	5a32 <_vfiprintf_r+0x14a>
    5ab8:	9207      	str	r2, [sp, #28]
    5aba:	e7ba      	b.n	5a32 <_vfiprintf_r+0x14a>
    5abc:	4342      	muls	r2, r0
    5abe:	3401      	adds	r4, #1
    5ac0:	1852      	adds	r2, r2, r1
    5ac2:	2301      	movs	r3, #1
    5ac4:	e7f2      	b.n	5aac <_vfiprintf_r+0x1c4>
    5ac6:	3307      	adds	r3, #7
    5ac8:	e7d5      	b.n	5a76 <_vfiprintf_r+0x18e>
    5aca:	ab05      	add	r3, sp, #20
    5acc:	9300      	str	r3, [sp, #0]
    5ace:	003a      	movs	r2, r7
    5ad0:	4b12      	ldr	r3, [pc, #72]	; (5b1c <_vfiprintf_r+0x234>)
    5ad2:	0029      	movs	r1, r5
    5ad4:	0030      	movs	r0, r6
    5ad6:	f7fd fce3 	bl	34a0 <_printf_float>
    5ada:	9003      	str	r0, [sp, #12]
    5adc:	9b03      	ldr	r3, [sp, #12]
    5ade:	3301      	adds	r3, #1
    5ae0:	d1cc      	bne.n	5a7c <_vfiprintf_r+0x194>
    5ae2:	89bb      	ldrh	r3, [r7, #12]
    5ae4:	065b      	lsls	r3, r3, #25
    5ae6:	d500      	bpl.n	5aea <_vfiprintf_r+0x202>
    5ae8:	e77b      	b.n	59e2 <_vfiprintf_r+0xfa>
    5aea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5aec:	e77b      	b.n	59e6 <_vfiprintf_r+0xfe>
    5aee:	ab05      	add	r3, sp, #20
    5af0:	9300      	str	r3, [sp, #0]
    5af2:	003a      	movs	r2, r7
    5af4:	4b09      	ldr	r3, [pc, #36]	; (5b1c <_vfiprintf_r+0x234>)
    5af6:	0029      	movs	r1, r5
    5af8:	0030      	movs	r0, r6
    5afa:	f7fd ff8b 	bl	3a14 <_printf_i>
    5afe:	e7ec      	b.n	5ada <_vfiprintf_r+0x1f2>
    5b00:	000089b4 	.word	0x000089b4
    5b04:	00008af4 	.word	0x00008af4
    5b08:	000089d4 	.word	0x000089d4
    5b0c:	00008994 	.word	0x00008994
    5b10:	00008afa 	.word	0x00008afa
    5b14:	00008afe 	.word	0x00008afe
    5b18:	000034a1 	.word	0x000034a1
    5b1c:	000058c3 	.word	0x000058c3

00005b20 <_sbrk_r>:
    5b20:	2300      	movs	r3, #0
    5b22:	b570      	push	{r4, r5, r6, lr}
    5b24:	4c06      	ldr	r4, [pc, #24]	; (5b40 <_sbrk_r+0x20>)
    5b26:	0005      	movs	r5, r0
    5b28:	0008      	movs	r0, r1
    5b2a:	6023      	str	r3, [r4, #0]
    5b2c:	f7fc fe00 	bl	2730 <_sbrk>
    5b30:	1c43      	adds	r3, r0, #1
    5b32:	d103      	bne.n	5b3c <_sbrk_r+0x1c>
    5b34:	6823      	ldr	r3, [r4, #0]
    5b36:	2b00      	cmp	r3, #0
    5b38:	d000      	beq.n	5b3c <_sbrk_r+0x1c>
    5b3a:	602b      	str	r3, [r5, #0]
    5b3c:	bd70      	pop	{r4, r5, r6, pc}
    5b3e:	46c0      	nop			; (mov r8, r8)
    5b40:	20000a18 	.word	0x20000a18

00005b44 <__sread>:
    5b44:	b570      	push	{r4, r5, r6, lr}
    5b46:	000c      	movs	r4, r1
    5b48:	250e      	movs	r5, #14
    5b4a:	5f49      	ldrsh	r1, [r1, r5]
    5b4c:	f000 f8b8 	bl	5cc0 <_read_r>
    5b50:	2800      	cmp	r0, #0
    5b52:	db03      	blt.n	5b5c <__sread+0x18>
    5b54:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5b56:	181b      	adds	r3, r3, r0
    5b58:	6563      	str	r3, [r4, #84]	; 0x54
    5b5a:	bd70      	pop	{r4, r5, r6, pc}
    5b5c:	89a3      	ldrh	r3, [r4, #12]
    5b5e:	4a02      	ldr	r2, [pc, #8]	; (5b68 <__sread+0x24>)
    5b60:	4013      	ands	r3, r2
    5b62:	81a3      	strh	r3, [r4, #12]
    5b64:	e7f9      	b.n	5b5a <__sread+0x16>
    5b66:	46c0      	nop			; (mov r8, r8)
    5b68:	ffffefff 	.word	0xffffefff

00005b6c <__swrite>:
    5b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b6e:	001f      	movs	r7, r3
    5b70:	898b      	ldrh	r3, [r1, #12]
    5b72:	0005      	movs	r5, r0
    5b74:	000c      	movs	r4, r1
    5b76:	0016      	movs	r6, r2
    5b78:	05db      	lsls	r3, r3, #23
    5b7a:	d505      	bpl.n	5b88 <__swrite+0x1c>
    5b7c:	230e      	movs	r3, #14
    5b7e:	5ec9      	ldrsh	r1, [r1, r3]
    5b80:	2200      	movs	r2, #0
    5b82:	2302      	movs	r3, #2
    5b84:	f000 f874 	bl	5c70 <_lseek_r>
    5b88:	89a3      	ldrh	r3, [r4, #12]
    5b8a:	4a05      	ldr	r2, [pc, #20]	; (5ba0 <__swrite+0x34>)
    5b8c:	0028      	movs	r0, r5
    5b8e:	4013      	ands	r3, r2
    5b90:	81a3      	strh	r3, [r4, #12]
    5b92:	0032      	movs	r2, r6
    5b94:	230e      	movs	r3, #14
    5b96:	5ee1      	ldrsh	r1, [r4, r3]
    5b98:	003b      	movs	r3, r7
    5b9a:	f000 f81f 	bl	5bdc <_write_r>
    5b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ba0:	ffffefff 	.word	0xffffefff

00005ba4 <__sseek>:
    5ba4:	b570      	push	{r4, r5, r6, lr}
    5ba6:	000c      	movs	r4, r1
    5ba8:	250e      	movs	r5, #14
    5baa:	5f49      	ldrsh	r1, [r1, r5]
    5bac:	f000 f860 	bl	5c70 <_lseek_r>
    5bb0:	89a3      	ldrh	r3, [r4, #12]
    5bb2:	1c42      	adds	r2, r0, #1
    5bb4:	d103      	bne.n	5bbe <__sseek+0x1a>
    5bb6:	4a05      	ldr	r2, [pc, #20]	; (5bcc <__sseek+0x28>)
    5bb8:	4013      	ands	r3, r2
    5bba:	81a3      	strh	r3, [r4, #12]
    5bbc:	bd70      	pop	{r4, r5, r6, pc}
    5bbe:	2280      	movs	r2, #128	; 0x80
    5bc0:	0152      	lsls	r2, r2, #5
    5bc2:	4313      	orrs	r3, r2
    5bc4:	81a3      	strh	r3, [r4, #12]
    5bc6:	6560      	str	r0, [r4, #84]	; 0x54
    5bc8:	e7f8      	b.n	5bbc <__sseek+0x18>
    5bca:	46c0      	nop			; (mov r8, r8)
    5bcc:	ffffefff 	.word	0xffffefff

00005bd0 <__sclose>:
    5bd0:	b510      	push	{r4, lr}
    5bd2:	230e      	movs	r3, #14
    5bd4:	5ec9      	ldrsh	r1, [r1, r3]
    5bd6:	f000 f815 	bl	5c04 <_close_r>
    5bda:	bd10      	pop	{r4, pc}

00005bdc <_write_r>:
    5bdc:	b570      	push	{r4, r5, r6, lr}
    5bde:	0005      	movs	r5, r0
    5be0:	0008      	movs	r0, r1
    5be2:	0011      	movs	r1, r2
    5be4:	2200      	movs	r2, #0
    5be6:	4c06      	ldr	r4, [pc, #24]	; (5c00 <_write_r+0x24>)
    5be8:	6022      	str	r2, [r4, #0]
    5bea:	001a      	movs	r2, r3
    5bec:	f7fc fd78 	bl	26e0 <_write>
    5bf0:	1c43      	adds	r3, r0, #1
    5bf2:	d103      	bne.n	5bfc <_write_r+0x20>
    5bf4:	6823      	ldr	r3, [r4, #0]
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d000      	beq.n	5bfc <_write_r+0x20>
    5bfa:	602b      	str	r3, [r5, #0]
    5bfc:	bd70      	pop	{r4, r5, r6, pc}
    5bfe:	46c0      	nop			; (mov r8, r8)
    5c00:	20000a18 	.word	0x20000a18

00005c04 <_close_r>:
    5c04:	2300      	movs	r3, #0
    5c06:	b570      	push	{r4, r5, r6, lr}
    5c08:	4c06      	ldr	r4, [pc, #24]	; (5c24 <_close_r+0x20>)
    5c0a:	0005      	movs	r5, r0
    5c0c:	0008      	movs	r0, r1
    5c0e:	6023      	str	r3, [r4, #0]
    5c10:	f7fc fda0 	bl	2754 <_close>
    5c14:	1c43      	adds	r3, r0, #1
    5c16:	d103      	bne.n	5c20 <_close_r+0x1c>
    5c18:	6823      	ldr	r3, [r4, #0]
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d000      	beq.n	5c20 <_close_r+0x1c>
    5c1e:	602b      	str	r3, [r5, #0]
    5c20:	bd70      	pop	{r4, r5, r6, pc}
    5c22:	46c0      	nop			; (mov r8, r8)
    5c24:	20000a18 	.word	0x20000a18

00005c28 <_fstat_r>:
    5c28:	2300      	movs	r3, #0
    5c2a:	b570      	push	{r4, r5, r6, lr}
    5c2c:	4c06      	ldr	r4, [pc, #24]	; (5c48 <_fstat_r+0x20>)
    5c2e:	0005      	movs	r5, r0
    5c30:	0008      	movs	r0, r1
    5c32:	0011      	movs	r1, r2
    5c34:	6023      	str	r3, [r4, #0]
    5c36:	f7fc fd90 	bl	275a <_fstat>
    5c3a:	1c43      	adds	r3, r0, #1
    5c3c:	d103      	bne.n	5c46 <_fstat_r+0x1e>
    5c3e:	6823      	ldr	r3, [r4, #0]
    5c40:	2b00      	cmp	r3, #0
    5c42:	d000      	beq.n	5c46 <_fstat_r+0x1e>
    5c44:	602b      	str	r3, [r5, #0]
    5c46:	bd70      	pop	{r4, r5, r6, pc}
    5c48:	20000a18 	.word	0x20000a18

00005c4c <_isatty_r>:
    5c4c:	2300      	movs	r3, #0
    5c4e:	b570      	push	{r4, r5, r6, lr}
    5c50:	4c06      	ldr	r4, [pc, #24]	; (5c6c <_isatty_r+0x20>)
    5c52:	0005      	movs	r5, r0
    5c54:	0008      	movs	r0, r1
    5c56:	6023      	str	r3, [r4, #0]
    5c58:	f7fc fd84 	bl	2764 <_isatty>
    5c5c:	1c43      	adds	r3, r0, #1
    5c5e:	d103      	bne.n	5c68 <_isatty_r+0x1c>
    5c60:	6823      	ldr	r3, [r4, #0]
    5c62:	2b00      	cmp	r3, #0
    5c64:	d000      	beq.n	5c68 <_isatty_r+0x1c>
    5c66:	602b      	str	r3, [r5, #0]
    5c68:	bd70      	pop	{r4, r5, r6, pc}
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	20000a18 	.word	0x20000a18

00005c70 <_lseek_r>:
    5c70:	b570      	push	{r4, r5, r6, lr}
    5c72:	0005      	movs	r5, r0
    5c74:	0008      	movs	r0, r1
    5c76:	0011      	movs	r1, r2
    5c78:	2200      	movs	r2, #0
    5c7a:	4c06      	ldr	r4, [pc, #24]	; (5c94 <_lseek_r+0x24>)
    5c7c:	6022      	str	r2, [r4, #0]
    5c7e:	001a      	movs	r2, r3
    5c80:	f7fc fd72 	bl	2768 <_lseek>
    5c84:	1c43      	adds	r3, r0, #1
    5c86:	d103      	bne.n	5c90 <_lseek_r+0x20>
    5c88:	6823      	ldr	r3, [r4, #0]
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	d000      	beq.n	5c90 <_lseek_r+0x20>
    5c8e:	602b      	str	r3, [r5, #0]
    5c90:	bd70      	pop	{r4, r5, r6, pc}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	20000a18 	.word	0x20000a18

00005c98 <__ascii_mbtowc>:
    5c98:	b082      	sub	sp, #8
    5c9a:	2900      	cmp	r1, #0
    5c9c:	d100      	bne.n	5ca0 <__ascii_mbtowc+0x8>
    5c9e:	a901      	add	r1, sp, #4
    5ca0:	1e10      	subs	r0, r2, #0
    5ca2:	d006      	beq.n	5cb2 <__ascii_mbtowc+0x1a>
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d006      	beq.n	5cb6 <__ascii_mbtowc+0x1e>
    5ca8:	7813      	ldrb	r3, [r2, #0]
    5caa:	600b      	str	r3, [r1, #0]
    5cac:	7810      	ldrb	r0, [r2, #0]
    5cae:	1e43      	subs	r3, r0, #1
    5cb0:	4198      	sbcs	r0, r3
    5cb2:	b002      	add	sp, #8
    5cb4:	4770      	bx	lr
    5cb6:	2002      	movs	r0, #2
    5cb8:	4240      	negs	r0, r0
    5cba:	e7fa      	b.n	5cb2 <__ascii_mbtowc+0x1a>

00005cbc <__malloc_lock>:
    5cbc:	4770      	bx	lr

00005cbe <__malloc_unlock>:
    5cbe:	4770      	bx	lr

00005cc0 <_read_r>:
    5cc0:	b570      	push	{r4, r5, r6, lr}
    5cc2:	0005      	movs	r5, r0
    5cc4:	0008      	movs	r0, r1
    5cc6:	0011      	movs	r1, r2
    5cc8:	2200      	movs	r2, #0
    5cca:	4c06      	ldr	r4, [pc, #24]	; (5ce4 <_read_r+0x24>)
    5ccc:	6022      	str	r2, [r4, #0]
    5cce:	001a      	movs	r2, r3
    5cd0:	f7fc fce4 	bl	269c <_read>
    5cd4:	1c43      	adds	r3, r0, #1
    5cd6:	d103      	bne.n	5ce0 <_read_r+0x20>
    5cd8:	6823      	ldr	r3, [r4, #0]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d000      	beq.n	5ce0 <_read_r+0x20>
    5cde:	602b      	str	r3, [r5, #0]
    5ce0:	bd70      	pop	{r4, r5, r6, pc}
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	20000a18 	.word	0x20000a18

00005ce8 <__ascii_wctomb>:
    5ce8:	1e0b      	subs	r3, r1, #0
    5cea:	d004      	beq.n	5cf6 <__ascii_wctomb+0xe>
    5cec:	2aff      	cmp	r2, #255	; 0xff
    5cee:	d904      	bls.n	5cfa <__ascii_wctomb+0x12>
    5cf0:	238a      	movs	r3, #138	; 0x8a
    5cf2:	6003      	str	r3, [r0, #0]
    5cf4:	3b8b      	subs	r3, #139	; 0x8b
    5cf6:	0018      	movs	r0, r3
    5cf8:	4770      	bx	lr
    5cfa:	700a      	strb	r2, [r1, #0]
    5cfc:	2301      	movs	r3, #1
    5cfe:	e7fa      	b.n	5cf6 <__ascii_wctomb+0xe>

00005d00 <__gnu_thumb1_case_uqi>:
    5d00:	b402      	push	{r1}
    5d02:	4671      	mov	r1, lr
    5d04:	0849      	lsrs	r1, r1, #1
    5d06:	0049      	lsls	r1, r1, #1
    5d08:	5c09      	ldrb	r1, [r1, r0]
    5d0a:	0049      	lsls	r1, r1, #1
    5d0c:	448e      	add	lr, r1
    5d0e:	bc02      	pop	{r1}
    5d10:	4770      	bx	lr
    5d12:	46c0      	nop			; (mov r8, r8)

00005d14 <__udivsi3>:
    5d14:	2200      	movs	r2, #0
    5d16:	0843      	lsrs	r3, r0, #1
    5d18:	428b      	cmp	r3, r1
    5d1a:	d374      	bcc.n	5e06 <__udivsi3+0xf2>
    5d1c:	0903      	lsrs	r3, r0, #4
    5d1e:	428b      	cmp	r3, r1
    5d20:	d35f      	bcc.n	5de2 <__udivsi3+0xce>
    5d22:	0a03      	lsrs	r3, r0, #8
    5d24:	428b      	cmp	r3, r1
    5d26:	d344      	bcc.n	5db2 <__udivsi3+0x9e>
    5d28:	0b03      	lsrs	r3, r0, #12
    5d2a:	428b      	cmp	r3, r1
    5d2c:	d328      	bcc.n	5d80 <__udivsi3+0x6c>
    5d2e:	0c03      	lsrs	r3, r0, #16
    5d30:	428b      	cmp	r3, r1
    5d32:	d30d      	bcc.n	5d50 <__udivsi3+0x3c>
    5d34:	22ff      	movs	r2, #255	; 0xff
    5d36:	0209      	lsls	r1, r1, #8
    5d38:	ba12      	rev	r2, r2
    5d3a:	0c03      	lsrs	r3, r0, #16
    5d3c:	428b      	cmp	r3, r1
    5d3e:	d302      	bcc.n	5d46 <__udivsi3+0x32>
    5d40:	1212      	asrs	r2, r2, #8
    5d42:	0209      	lsls	r1, r1, #8
    5d44:	d065      	beq.n	5e12 <__udivsi3+0xfe>
    5d46:	0b03      	lsrs	r3, r0, #12
    5d48:	428b      	cmp	r3, r1
    5d4a:	d319      	bcc.n	5d80 <__udivsi3+0x6c>
    5d4c:	e000      	b.n	5d50 <__udivsi3+0x3c>
    5d4e:	0a09      	lsrs	r1, r1, #8
    5d50:	0bc3      	lsrs	r3, r0, #15
    5d52:	428b      	cmp	r3, r1
    5d54:	d301      	bcc.n	5d5a <__udivsi3+0x46>
    5d56:	03cb      	lsls	r3, r1, #15
    5d58:	1ac0      	subs	r0, r0, r3
    5d5a:	4152      	adcs	r2, r2
    5d5c:	0b83      	lsrs	r3, r0, #14
    5d5e:	428b      	cmp	r3, r1
    5d60:	d301      	bcc.n	5d66 <__udivsi3+0x52>
    5d62:	038b      	lsls	r3, r1, #14
    5d64:	1ac0      	subs	r0, r0, r3
    5d66:	4152      	adcs	r2, r2
    5d68:	0b43      	lsrs	r3, r0, #13
    5d6a:	428b      	cmp	r3, r1
    5d6c:	d301      	bcc.n	5d72 <__udivsi3+0x5e>
    5d6e:	034b      	lsls	r3, r1, #13
    5d70:	1ac0      	subs	r0, r0, r3
    5d72:	4152      	adcs	r2, r2
    5d74:	0b03      	lsrs	r3, r0, #12
    5d76:	428b      	cmp	r3, r1
    5d78:	d301      	bcc.n	5d7e <__udivsi3+0x6a>
    5d7a:	030b      	lsls	r3, r1, #12
    5d7c:	1ac0      	subs	r0, r0, r3
    5d7e:	4152      	adcs	r2, r2
    5d80:	0ac3      	lsrs	r3, r0, #11
    5d82:	428b      	cmp	r3, r1
    5d84:	d301      	bcc.n	5d8a <__udivsi3+0x76>
    5d86:	02cb      	lsls	r3, r1, #11
    5d88:	1ac0      	subs	r0, r0, r3
    5d8a:	4152      	adcs	r2, r2
    5d8c:	0a83      	lsrs	r3, r0, #10
    5d8e:	428b      	cmp	r3, r1
    5d90:	d301      	bcc.n	5d96 <__udivsi3+0x82>
    5d92:	028b      	lsls	r3, r1, #10
    5d94:	1ac0      	subs	r0, r0, r3
    5d96:	4152      	adcs	r2, r2
    5d98:	0a43      	lsrs	r3, r0, #9
    5d9a:	428b      	cmp	r3, r1
    5d9c:	d301      	bcc.n	5da2 <__udivsi3+0x8e>
    5d9e:	024b      	lsls	r3, r1, #9
    5da0:	1ac0      	subs	r0, r0, r3
    5da2:	4152      	adcs	r2, r2
    5da4:	0a03      	lsrs	r3, r0, #8
    5da6:	428b      	cmp	r3, r1
    5da8:	d301      	bcc.n	5dae <__udivsi3+0x9a>
    5daa:	020b      	lsls	r3, r1, #8
    5dac:	1ac0      	subs	r0, r0, r3
    5dae:	4152      	adcs	r2, r2
    5db0:	d2cd      	bcs.n	5d4e <__udivsi3+0x3a>
    5db2:	09c3      	lsrs	r3, r0, #7
    5db4:	428b      	cmp	r3, r1
    5db6:	d301      	bcc.n	5dbc <__udivsi3+0xa8>
    5db8:	01cb      	lsls	r3, r1, #7
    5dba:	1ac0      	subs	r0, r0, r3
    5dbc:	4152      	adcs	r2, r2
    5dbe:	0983      	lsrs	r3, r0, #6
    5dc0:	428b      	cmp	r3, r1
    5dc2:	d301      	bcc.n	5dc8 <__udivsi3+0xb4>
    5dc4:	018b      	lsls	r3, r1, #6
    5dc6:	1ac0      	subs	r0, r0, r3
    5dc8:	4152      	adcs	r2, r2
    5dca:	0943      	lsrs	r3, r0, #5
    5dcc:	428b      	cmp	r3, r1
    5dce:	d301      	bcc.n	5dd4 <__udivsi3+0xc0>
    5dd0:	014b      	lsls	r3, r1, #5
    5dd2:	1ac0      	subs	r0, r0, r3
    5dd4:	4152      	adcs	r2, r2
    5dd6:	0903      	lsrs	r3, r0, #4
    5dd8:	428b      	cmp	r3, r1
    5dda:	d301      	bcc.n	5de0 <__udivsi3+0xcc>
    5ddc:	010b      	lsls	r3, r1, #4
    5dde:	1ac0      	subs	r0, r0, r3
    5de0:	4152      	adcs	r2, r2
    5de2:	08c3      	lsrs	r3, r0, #3
    5de4:	428b      	cmp	r3, r1
    5de6:	d301      	bcc.n	5dec <__udivsi3+0xd8>
    5de8:	00cb      	lsls	r3, r1, #3
    5dea:	1ac0      	subs	r0, r0, r3
    5dec:	4152      	adcs	r2, r2
    5dee:	0883      	lsrs	r3, r0, #2
    5df0:	428b      	cmp	r3, r1
    5df2:	d301      	bcc.n	5df8 <__udivsi3+0xe4>
    5df4:	008b      	lsls	r3, r1, #2
    5df6:	1ac0      	subs	r0, r0, r3
    5df8:	4152      	adcs	r2, r2
    5dfa:	0843      	lsrs	r3, r0, #1
    5dfc:	428b      	cmp	r3, r1
    5dfe:	d301      	bcc.n	5e04 <__udivsi3+0xf0>
    5e00:	004b      	lsls	r3, r1, #1
    5e02:	1ac0      	subs	r0, r0, r3
    5e04:	4152      	adcs	r2, r2
    5e06:	1a41      	subs	r1, r0, r1
    5e08:	d200      	bcs.n	5e0c <__udivsi3+0xf8>
    5e0a:	4601      	mov	r1, r0
    5e0c:	4152      	adcs	r2, r2
    5e0e:	4610      	mov	r0, r2
    5e10:	4770      	bx	lr
    5e12:	e7ff      	b.n	5e14 <__udivsi3+0x100>
    5e14:	b501      	push	{r0, lr}
    5e16:	2000      	movs	r0, #0
    5e18:	f000 f8f0 	bl	5ffc <__aeabi_idiv0>
    5e1c:	bd02      	pop	{r1, pc}
    5e1e:	46c0      	nop			; (mov r8, r8)

00005e20 <__aeabi_uidivmod>:
    5e20:	2900      	cmp	r1, #0
    5e22:	d0f7      	beq.n	5e14 <__udivsi3+0x100>
    5e24:	e776      	b.n	5d14 <__udivsi3>
    5e26:	4770      	bx	lr

00005e28 <__divsi3>:
    5e28:	4603      	mov	r3, r0
    5e2a:	430b      	orrs	r3, r1
    5e2c:	d47f      	bmi.n	5f2e <__divsi3+0x106>
    5e2e:	2200      	movs	r2, #0
    5e30:	0843      	lsrs	r3, r0, #1
    5e32:	428b      	cmp	r3, r1
    5e34:	d374      	bcc.n	5f20 <__divsi3+0xf8>
    5e36:	0903      	lsrs	r3, r0, #4
    5e38:	428b      	cmp	r3, r1
    5e3a:	d35f      	bcc.n	5efc <__divsi3+0xd4>
    5e3c:	0a03      	lsrs	r3, r0, #8
    5e3e:	428b      	cmp	r3, r1
    5e40:	d344      	bcc.n	5ecc <__divsi3+0xa4>
    5e42:	0b03      	lsrs	r3, r0, #12
    5e44:	428b      	cmp	r3, r1
    5e46:	d328      	bcc.n	5e9a <__divsi3+0x72>
    5e48:	0c03      	lsrs	r3, r0, #16
    5e4a:	428b      	cmp	r3, r1
    5e4c:	d30d      	bcc.n	5e6a <__divsi3+0x42>
    5e4e:	22ff      	movs	r2, #255	; 0xff
    5e50:	0209      	lsls	r1, r1, #8
    5e52:	ba12      	rev	r2, r2
    5e54:	0c03      	lsrs	r3, r0, #16
    5e56:	428b      	cmp	r3, r1
    5e58:	d302      	bcc.n	5e60 <__divsi3+0x38>
    5e5a:	1212      	asrs	r2, r2, #8
    5e5c:	0209      	lsls	r1, r1, #8
    5e5e:	d065      	beq.n	5f2c <__divsi3+0x104>
    5e60:	0b03      	lsrs	r3, r0, #12
    5e62:	428b      	cmp	r3, r1
    5e64:	d319      	bcc.n	5e9a <__divsi3+0x72>
    5e66:	e000      	b.n	5e6a <__divsi3+0x42>
    5e68:	0a09      	lsrs	r1, r1, #8
    5e6a:	0bc3      	lsrs	r3, r0, #15
    5e6c:	428b      	cmp	r3, r1
    5e6e:	d301      	bcc.n	5e74 <__divsi3+0x4c>
    5e70:	03cb      	lsls	r3, r1, #15
    5e72:	1ac0      	subs	r0, r0, r3
    5e74:	4152      	adcs	r2, r2
    5e76:	0b83      	lsrs	r3, r0, #14
    5e78:	428b      	cmp	r3, r1
    5e7a:	d301      	bcc.n	5e80 <__divsi3+0x58>
    5e7c:	038b      	lsls	r3, r1, #14
    5e7e:	1ac0      	subs	r0, r0, r3
    5e80:	4152      	adcs	r2, r2
    5e82:	0b43      	lsrs	r3, r0, #13
    5e84:	428b      	cmp	r3, r1
    5e86:	d301      	bcc.n	5e8c <__divsi3+0x64>
    5e88:	034b      	lsls	r3, r1, #13
    5e8a:	1ac0      	subs	r0, r0, r3
    5e8c:	4152      	adcs	r2, r2
    5e8e:	0b03      	lsrs	r3, r0, #12
    5e90:	428b      	cmp	r3, r1
    5e92:	d301      	bcc.n	5e98 <__divsi3+0x70>
    5e94:	030b      	lsls	r3, r1, #12
    5e96:	1ac0      	subs	r0, r0, r3
    5e98:	4152      	adcs	r2, r2
    5e9a:	0ac3      	lsrs	r3, r0, #11
    5e9c:	428b      	cmp	r3, r1
    5e9e:	d301      	bcc.n	5ea4 <__divsi3+0x7c>
    5ea0:	02cb      	lsls	r3, r1, #11
    5ea2:	1ac0      	subs	r0, r0, r3
    5ea4:	4152      	adcs	r2, r2
    5ea6:	0a83      	lsrs	r3, r0, #10
    5ea8:	428b      	cmp	r3, r1
    5eaa:	d301      	bcc.n	5eb0 <__divsi3+0x88>
    5eac:	028b      	lsls	r3, r1, #10
    5eae:	1ac0      	subs	r0, r0, r3
    5eb0:	4152      	adcs	r2, r2
    5eb2:	0a43      	lsrs	r3, r0, #9
    5eb4:	428b      	cmp	r3, r1
    5eb6:	d301      	bcc.n	5ebc <__divsi3+0x94>
    5eb8:	024b      	lsls	r3, r1, #9
    5eba:	1ac0      	subs	r0, r0, r3
    5ebc:	4152      	adcs	r2, r2
    5ebe:	0a03      	lsrs	r3, r0, #8
    5ec0:	428b      	cmp	r3, r1
    5ec2:	d301      	bcc.n	5ec8 <__divsi3+0xa0>
    5ec4:	020b      	lsls	r3, r1, #8
    5ec6:	1ac0      	subs	r0, r0, r3
    5ec8:	4152      	adcs	r2, r2
    5eca:	d2cd      	bcs.n	5e68 <__divsi3+0x40>
    5ecc:	09c3      	lsrs	r3, r0, #7
    5ece:	428b      	cmp	r3, r1
    5ed0:	d301      	bcc.n	5ed6 <__divsi3+0xae>
    5ed2:	01cb      	lsls	r3, r1, #7
    5ed4:	1ac0      	subs	r0, r0, r3
    5ed6:	4152      	adcs	r2, r2
    5ed8:	0983      	lsrs	r3, r0, #6
    5eda:	428b      	cmp	r3, r1
    5edc:	d301      	bcc.n	5ee2 <__divsi3+0xba>
    5ede:	018b      	lsls	r3, r1, #6
    5ee0:	1ac0      	subs	r0, r0, r3
    5ee2:	4152      	adcs	r2, r2
    5ee4:	0943      	lsrs	r3, r0, #5
    5ee6:	428b      	cmp	r3, r1
    5ee8:	d301      	bcc.n	5eee <__divsi3+0xc6>
    5eea:	014b      	lsls	r3, r1, #5
    5eec:	1ac0      	subs	r0, r0, r3
    5eee:	4152      	adcs	r2, r2
    5ef0:	0903      	lsrs	r3, r0, #4
    5ef2:	428b      	cmp	r3, r1
    5ef4:	d301      	bcc.n	5efa <__divsi3+0xd2>
    5ef6:	010b      	lsls	r3, r1, #4
    5ef8:	1ac0      	subs	r0, r0, r3
    5efa:	4152      	adcs	r2, r2
    5efc:	08c3      	lsrs	r3, r0, #3
    5efe:	428b      	cmp	r3, r1
    5f00:	d301      	bcc.n	5f06 <__divsi3+0xde>
    5f02:	00cb      	lsls	r3, r1, #3
    5f04:	1ac0      	subs	r0, r0, r3
    5f06:	4152      	adcs	r2, r2
    5f08:	0883      	lsrs	r3, r0, #2
    5f0a:	428b      	cmp	r3, r1
    5f0c:	d301      	bcc.n	5f12 <__divsi3+0xea>
    5f0e:	008b      	lsls	r3, r1, #2
    5f10:	1ac0      	subs	r0, r0, r3
    5f12:	4152      	adcs	r2, r2
    5f14:	0843      	lsrs	r3, r0, #1
    5f16:	428b      	cmp	r3, r1
    5f18:	d301      	bcc.n	5f1e <__divsi3+0xf6>
    5f1a:	004b      	lsls	r3, r1, #1
    5f1c:	1ac0      	subs	r0, r0, r3
    5f1e:	4152      	adcs	r2, r2
    5f20:	1a41      	subs	r1, r0, r1
    5f22:	d200      	bcs.n	5f26 <__divsi3+0xfe>
    5f24:	4601      	mov	r1, r0
    5f26:	4152      	adcs	r2, r2
    5f28:	4610      	mov	r0, r2
    5f2a:	4770      	bx	lr
    5f2c:	e05d      	b.n	5fea <__divsi3+0x1c2>
    5f2e:	0fca      	lsrs	r2, r1, #31
    5f30:	d000      	beq.n	5f34 <__divsi3+0x10c>
    5f32:	4249      	negs	r1, r1
    5f34:	1003      	asrs	r3, r0, #32
    5f36:	d300      	bcc.n	5f3a <__divsi3+0x112>
    5f38:	4240      	negs	r0, r0
    5f3a:	4053      	eors	r3, r2
    5f3c:	2200      	movs	r2, #0
    5f3e:	469c      	mov	ip, r3
    5f40:	0903      	lsrs	r3, r0, #4
    5f42:	428b      	cmp	r3, r1
    5f44:	d32d      	bcc.n	5fa2 <__divsi3+0x17a>
    5f46:	0a03      	lsrs	r3, r0, #8
    5f48:	428b      	cmp	r3, r1
    5f4a:	d312      	bcc.n	5f72 <__divsi3+0x14a>
    5f4c:	22fc      	movs	r2, #252	; 0xfc
    5f4e:	0189      	lsls	r1, r1, #6
    5f50:	ba12      	rev	r2, r2
    5f52:	0a03      	lsrs	r3, r0, #8
    5f54:	428b      	cmp	r3, r1
    5f56:	d30c      	bcc.n	5f72 <__divsi3+0x14a>
    5f58:	0189      	lsls	r1, r1, #6
    5f5a:	1192      	asrs	r2, r2, #6
    5f5c:	428b      	cmp	r3, r1
    5f5e:	d308      	bcc.n	5f72 <__divsi3+0x14a>
    5f60:	0189      	lsls	r1, r1, #6
    5f62:	1192      	asrs	r2, r2, #6
    5f64:	428b      	cmp	r3, r1
    5f66:	d304      	bcc.n	5f72 <__divsi3+0x14a>
    5f68:	0189      	lsls	r1, r1, #6
    5f6a:	d03a      	beq.n	5fe2 <__divsi3+0x1ba>
    5f6c:	1192      	asrs	r2, r2, #6
    5f6e:	e000      	b.n	5f72 <__divsi3+0x14a>
    5f70:	0989      	lsrs	r1, r1, #6
    5f72:	09c3      	lsrs	r3, r0, #7
    5f74:	428b      	cmp	r3, r1
    5f76:	d301      	bcc.n	5f7c <__divsi3+0x154>
    5f78:	01cb      	lsls	r3, r1, #7
    5f7a:	1ac0      	subs	r0, r0, r3
    5f7c:	4152      	adcs	r2, r2
    5f7e:	0983      	lsrs	r3, r0, #6
    5f80:	428b      	cmp	r3, r1
    5f82:	d301      	bcc.n	5f88 <__divsi3+0x160>
    5f84:	018b      	lsls	r3, r1, #6
    5f86:	1ac0      	subs	r0, r0, r3
    5f88:	4152      	adcs	r2, r2
    5f8a:	0943      	lsrs	r3, r0, #5
    5f8c:	428b      	cmp	r3, r1
    5f8e:	d301      	bcc.n	5f94 <__divsi3+0x16c>
    5f90:	014b      	lsls	r3, r1, #5
    5f92:	1ac0      	subs	r0, r0, r3
    5f94:	4152      	adcs	r2, r2
    5f96:	0903      	lsrs	r3, r0, #4
    5f98:	428b      	cmp	r3, r1
    5f9a:	d301      	bcc.n	5fa0 <__divsi3+0x178>
    5f9c:	010b      	lsls	r3, r1, #4
    5f9e:	1ac0      	subs	r0, r0, r3
    5fa0:	4152      	adcs	r2, r2
    5fa2:	08c3      	lsrs	r3, r0, #3
    5fa4:	428b      	cmp	r3, r1
    5fa6:	d301      	bcc.n	5fac <__divsi3+0x184>
    5fa8:	00cb      	lsls	r3, r1, #3
    5faa:	1ac0      	subs	r0, r0, r3
    5fac:	4152      	adcs	r2, r2
    5fae:	0883      	lsrs	r3, r0, #2
    5fb0:	428b      	cmp	r3, r1
    5fb2:	d301      	bcc.n	5fb8 <__divsi3+0x190>
    5fb4:	008b      	lsls	r3, r1, #2
    5fb6:	1ac0      	subs	r0, r0, r3
    5fb8:	4152      	adcs	r2, r2
    5fba:	d2d9      	bcs.n	5f70 <__divsi3+0x148>
    5fbc:	0843      	lsrs	r3, r0, #1
    5fbe:	428b      	cmp	r3, r1
    5fc0:	d301      	bcc.n	5fc6 <__divsi3+0x19e>
    5fc2:	004b      	lsls	r3, r1, #1
    5fc4:	1ac0      	subs	r0, r0, r3
    5fc6:	4152      	adcs	r2, r2
    5fc8:	1a41      	subs	r1, r0, r1
    5fca:	d200      	bcs.n	5fce <__divsi3+0x1a6>
    5fcc:	4601      	mov	r1, r0
    5fce:	4663      	mov	r3, ip
    5fd0:	4152      	adcs	r2, r2
    5fd2:	105b      	asrs	r3, r3, #1
    5fd4:	4610      	mov	r0, r2
    5fd6:	d301      	bcc.n	5fdc <__divsi3+0x1b4>
    5fd8:	4240      	negs	r0, r0
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d500      	bpl.n	5fe0 <__divsi3+0x1b8>
    5fde:	4249      	negs	r1, r1
    5fe0:	4770      	bx	lr
    5fe2:	4663      	mov	r3, ip
    5fe4:	105b      	asrs	r3, r3, #1
    5fe6:	d300      	bcc.n	5fea <__divsi3+0x1c2>
    5fe8:	4240      	negs	r0, r0
    5fea:	b501      	push	{r0, lr}
    5fec:	2000      	movs	r0, #0
    5fee:	f000 f805 	bl	5ffc <__aeabi_idiv0>
    5ff2:	bd02      	pop	{r1, pc}

00005ff4 <__aeabi_idivmod>:
    5ff4:	2900      	cmp	r1, #0
    5ff6:	d0f8      	beq.n	5fea <__divsi3+0x1c2>
    5ff8:	e716      	b.n	5e28 <__divsi3>
    5ffa:	4770      	bx	lr

00005ffc <__aeabi_idiv0>:
    5ffc:	4770      	bx	lr
    5ffe:	46c0      	nop			; (mov r8, r8)

00006000 <__aeabi_cdrcmple>:
    6000:	4684      	mov	ip, r0
    6002:	1c10      	adds	r0, r2, #0
    6004:	4662      	mov	r2, ip
    6006:	468c      	mov	ip, r1
    6008:	1c19      	adds	r1, r3, #0
    600a:	4663      	mov	r3, ip
    600c:	e000      	b.n	6010 <__aeabi_cdcmpeq>
    600e:	46c0      	nop			; (mov r8, r8)

00006010 <__aeabi_cdcmpeq>:
    6010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6012:	f001 fc6b 	bl	78ec <__ledf2>
    6016:	2800      	cmp	r0, #0
    6018:	d401      	bmi.n	601e <__aeabi_cdcmpeq+0xe>
    601a:	2100      	movs	r1, #0
    601c:	42c8      	cmn	r0, r1
    601e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006020 <__aeabi_dcmpeq>:
    6020:	b510      	push	{r4, lr}
    6022:	f001 fbc5 	bl	77b0 <__eqdf2>
    6026:	4240      	negs	r0, r0
    6028:	3001      	adds	r0, #1
    602a:	bd10      	pop	{r4, pc}

0000602c <__aeabi_dcmplt>:
    602c:	b510      	push	{r4, lr}
    602e:	f001 fc5d 	bl	78ec <__ledf2>
    6032:	2800      	cmp	r0, #0
    6034:	db01      	blt.n	603a <__aeabi_dcmplt+0xe>
    6036:	2000      	movs	r0, #0
    6038:	bd10      	pop	{r4, pc}
    603a:	2001      	movs	r0, #1
    603c:	bd10      	pop	{r4, pc}
    603e:	46c0      	nop			; (mov r8, r8)

00006040 <__aeabi_dcmple>:
    6040:	b510      	push	{r4, lr}
    6042:	f001 fc53 	bl	78ec <__ledf2>
    6046:	2800      	cmp	r0, #0
    6048:	dd01      	ble.n	604e <__aeabi_dcmple+0xe>
    604a:	2000      	movs	r0, #0
    604c:	bd10      	pop	{r4, pc}
    604e:	2001      	movs	r0, #1
    6050:	bd10      	pop	{r4, pc}
    6052:	46c0      	nop			; (mov r8, r8)

00006054 <__aeabi_dcmpgt>:
    6054:	b510      	push	{r4, lr}
    6056:	f001 fbe5 	bl	7824 <__gedf2>
    605a:	2800      	cmp	r0, #0
    605c:	dc01      	bgt.n	6062 <__aeabi_dcmpgt+0xe>
    605e:	2000      	movs	r0, #0
    6060:	bd10      	pop	{r4, pc}
    6062:	2001      	movs	r0, #1
    6064:	bd10      	pop	{r4, pc}
    6066:	46c0      	nop			; (mov r8, r8)

00006068 <__aeabi_dcmpge>:
    6068:	b510      	push	{r4, lr}
    606a:	f001 fbdb 	bl	7824 <__gedf2>
    606e:	2800      	cmp	r0, #0
    6070:	da01      	bge.n	6076 <__aeabi_dcmpge+0xe>
    6072:	2000      	movs	r0, #0
    6074:	bd10      	pop	{r4, pc}
    6076:	2001      	movs	r0, #1
    6078:	bd10      	pop	{r4, pc}
    607a:	46c0      	nop			; (mov r8, r8)

0000607c <__aeabi_cfrcmple>:
    607c:	4684      	mov	ip, r0
    607e:	1c08      	adds	r0, r1, #0
    6080:	4661      	mov	r1, ip
    6082:	e7ff      	b.n	6084 <__aeabi_cfcmpeq>

00006084 <__aeabi_cfcmpeq>:
    6084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6086:	f000 fb9d 	bl	67c4 <__lesf2>
    608a:	2800      	cmp	r0, #0
    608c:	d401      	bmi.n	6092 <__aeabi_cfcmpeq+0xe>
    608e:	2100      	movs	r1, #0
    6090:	42c8      	cmn	r0, r1
    6092:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006094 <__aeabi_fcmpeq>:
    6094:	b510      	push	{r4, lr}
    6096:	f000 fb2f 	bl	66f8 <__eqsf2>
    609a:	4240      	negs	r0, r0
    609c:	3001      	adds	r0, #1
    609e:	bd10      	pop	{r4, pc}

000060a0 <__aeabi_fcmplt>:
    60a0:	b510      	push	{r4, lr}
    60a2:	f000 fb8f 	bl	67c4 <__lesf2>
    60a6:	2800      	cmp	r0, #0
    60a8:	db01      	blt.n	60ae <__aeabi_fcmplt+0xe>
    60aa:	2000      	movs	r0, #0
    60ac:	bd10      	pop	{r4, pc}
    60ae:	2001      	movs	r0, #1
    60b0:	bd10      	pop	{r4, pc}
    60b2:	46c0      	nop			; (mov r8, r8)

000060b4 <__aeabi_fcmple>:
    60b4:	b510      	push	{r4, lr}
    60b6:	f000 fb85 	bl	67c4 <__lesf2>
    60ba:	2800      	cmp	r0, #0
    60bc:	dd01      	ble.n	60c2 <__aeabi_fcmple+0xe>
    60be:	2000      	movs	r0, #0
    60c0:	bd10      	pop	{r4, pc}
    60c2:	2001      	movs	r0, #1
    60c4:	bd10      	pop	{r4, pc}
    60c6:	46c0      	nop			; (mov r8, r8)

000060c8 <__aeabi_fcmpgt>:
    60c8:	b510      	push	{r4, lr}
    60ca:	f000 fb3b 	bl	6744 <__gesf2>
    60ce:	2800      	cmp	r0, #0
    60d0:	dc01      	bgt.n	60d6 <__aeabi_fcmpgt+0xe>
    60d2:	2000      	movs	r0, #0
    60d4:	bd10      	pop	{r4, pc}
    60d6:	2001      	movs	r0, #1
    60d8:	bd10      	pop	{r4, pc}
    60da:	46c0      	nop			; (mov r8, r8)

000060dc <__aeabi_fcmpge>:
    60dc:	b510      	push	{r4, lr}
    60de:	f000 fb31 	bl	6744 <__gesf2>
    60e2:	2800      	cmp	r0, #0
    60e4:	da01      	bge.n	60ea <__aeabi_fcmpge+0xe>
    60e6:	2000      	movs	r0, #0
    60e8:	bd10      	pop	{r4, pc}
    60ea:	2001      	movs	r0, #1
    60ec:	bd10      	pop	{r4, pc}
    60ee:	46c0      	nop			; (mov r8, r8)

000060f0 <__aeabi_lmul>:
    60f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60f2:	46ce      	mov	lr, r9
    60f4:	4647      	mov	r7, r8
    60f6:	0415      	lsls	r5, r2, #16
    60f8:	0c2d      	lsrs	r5, r5, #16
    60fa:	002e      	movs	r6, r5
    60fc:	b580      	push	{r7, lr}
    60fe:	0407      	lsls	r7, r0, #16
    6100:	0c14      	lsrs	r4, r2, #16
    6102:	0c3f      	lsrs	r7, r7, #16
    6104:	4699      	mov	r9, r3
    6106:	0c03      	lsrs	r3, r0, #16
    6108:	437e      	muls	r6, r7
    610a:	435d      	muls	r5, r3
    610c:	4367      	muls	r7, r4
    610e:	4363      	muls	r3, r4
    6110:	197f      	adds	r7, r7, r5
    6112:	0c34      	lsrs	r4, r6, #16
    6114:	19e4      	adds	r4, r4, r7
    6116:	469c      	mov	ip, r3
    6118:	42a5      	cmp	r5, r4
    611a:	d903      	bls.n	6124 <__aeabi_lmul+0x34>
    611c:	2380      	movs	r3, #128	; 0x80
    611e:	025b      	lsls	r3, r3, #9
    6120:	4698      	mov	r8, r3
    6122:	44c4      	add	ip, r8
    6124:	464b      	mov	r3, r9
    6126:	4351      	muls	r1, r2
    6128:	4343      	muls	r3, r0
    612a:	0436      	lsls	r6, r6, #16
    612c:	0c36      	lsrs	r6, r6, #16
    612e:	0c25      	lsrs	r5, r4, #16
    6130:	0424      	lsls	r4, r4, #16
    6132:	4465      	add	r5, ip
    6134:	19a4      	adds	r4, r4, r6
    6136:	1859      	adds	r1, r3, r1
    6138:	1949      	adds	r1, r1, r5
    613a:	0020      	movs	r0, r4
    613c:	bc0c      	pop	{r2, r3}
    613e:	4690      	mov	r8, r2
    6140:	4699      	mov	r9, r3
    6142:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006144 <__aeabi_fadd>:
    6144:	b5f0      	push	{r4, r5, r6, r7, lr}
    6146:	46c6      	mov	lr, r8
    6148:	024e      	lsls	r6, r1, #9
    614a:	0247      	lsls	r7, r0, #9
    614c:	0a76      	lsrs	r6, r6, #9
    614e:	0a7b      	lsrs	r3, r7, #9
    6150:	0044      	lsls	r4, r0, #1
    6152:	0fc5      	lsrs	r5, r0, #31
    6154:	00f7      	lsls	r7, r6, #3
    6156:	0048      	lsls	r0, r1, #1
    6158:	4698      	mov	r8, r3
    615a:	b500      	push	{lr}
    615c:	0e24      	lsrs	r4, r4, #24
    615e:	002a      	movs	r2, r5
    6160:	00db      	lsls	r3, r3, #3
    6162:	0e00      	lsrs	r0, r0, #24
    6164:	0fc9      	lsrs	r1, r1, #31
    6166:	46bc      	mov	ip, r7
    6168:	428d      	cmp	r5, r1
    616a:	d067      	beq.n	623c <__aeabi_fadd+0xf8>
    616c:	1a22      	subs	r2, r4, r0
    616e:	2a00      	cmp	r2, #0
    6170:	dc00      	bgt.n	6174 <__aeabi_fadd+0x30>
    6172:	e0a5      	b.n	62c0 <__aeabi_fadd+0x17c>
    6174:	2800      	cmp	r0, #0
    6176:	d13a      	bne.n	61ee <__aeabi_fadd+0xaa>
    6178:	2f00      	cmp	r7, #0
    617a:	d100      	bne.n	617e <__aeabi_fadd+0x3a>
    617c:	e093      	b.n	62a6 <__aeabi_fadd+0x162>
    617e:	1e51      	subs	r1, r2, #1
    6180:	2900      	cmp	r1, #0
    6182:	d000      	beq.n	6186 <__aeabi_fadd+0x42>
    6184:	e0bc      	b.n	6300 <__aeabi_fadd+0x1bc>
    6186:	2401      	movs	r4, #1
    6188:	1bdb      	subs	r3, r3, r7
    618a:	015a      	lsls	r2, r3, #5
    618c:	d546      	bpl.n	621c <__aeabi_fadd+0xd8>
    618e:	019b      	lsls	r3, r3, #6
    6190:	099e      	lsrs	r6, r3, #6
    6192:	0030      	movs	r0, r6
    6194:	f002 fb4c 	bl	8830 <__clzsi2>
    6198:	3805      	subs	r0, #5
    619a:	4086      	lsls	r6, r0
    619c:	4284      	cmp	r4, r0
    619e:	dd00      	ble.n	61a2 <__aeabi_fadd+0x5e>
    61a0:	e09d      	b.n	62de <__aeabi_fadd+0x19a>
    61a2:	1b04      	subs	r4, r0, r4
    61a4:	0032      	movs	r2, r6
    61a6:	2020      	movs	r0, #32
    61a8:	3401      	adds	r4, #1
    61aa:	40e2      	lsrs	r2, r4
    61ac:	1b04      	subs	r4, r0, r4
    61ae:	40a6      	lsls	r6, r4
    61b0:	0033      	movs	r3, r6
    61b2:	1e5e      	subs	r6, r3, #1
    61b4:	41b3      	sbcs	r3, r6
    61b6:	2400      	movs	r4, #0
    61b8:	4313      	orrs	r3, r2
    61ba:	075a      	lsls	r2, r3, #29
    61bc:	d004      	beq.n	61c8 <__aeabi_fadd+0x84>
    61be:	220f      	movs	r2, #15
    61c0:	401a      	ands	r2, r3
    61c2:	2a04      	cmp	r2, #4
    61c4:	d000      	beq.n	61c8 <__aeabi_fadd+0x84>
    61c6:	3304      	adds	r3, #4
    61c8:	015a      	lsls	r2, r3, #5
    61ca:	d529      	bpl.n	6220 <__aeabi_fadd+0xdc>
    61cc:	3401      	adds	r4, #1
    61ce:	2cff      	cmp	r4, #255	; 0xff
    61d0:	d100      	bne.n	61d4 <__aeabi_fadd+0x90>
    61d2:	e081      	b.n	62d8 <__aeabi_fadd+0x194>
    61d4:	002a      	movs	r2, r5
    61d6:	019b      	lsls	r3, r3, #6
    61d8:	0a5b      	lsrs	r3, r3, #9
    61da:	b2e4      	uxtb	r4, r4
    61dc:	025b      	lsls	r3, r3, #9
    61de:	05e4      	lsls	r4, r4, #23
    61e0:	0a58      	lsrs	r0, r3, #9
    61e2:	07d2      	lsls	r2, r2, #31
    61e4:	4320      	orrs	r0, r4
    61e6:	4310      	orrs	r0, r2
    61e8:	bc04      	pop	{r2}
    61ea:	4690      	mov	r8, r2
    61ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61ee:	2cff      	cmp	r4, #255	; 0xff
    61f0:	d0e3      	beq.n	61ba <__aeabi_fadd+0x76>
    61f2:	2180      	movs	r1, #128	; 0x80
    61f4:	0038      	movs	r0, r7
    61f6:	04c9      	lsls	r1, r1, #19
    61f8:	4308      	orrs	r0, r1
    61fa:	4684      	mov	ip, r0
    61fc:	2a1b      	cmp	r2, #27
    61fe:	dd00      	ble.n	6202 <__aeabi_fadd+0xbe>
    6200:	e082      	b.n	6308 <__aeabi_fadd+0x1c4>
    6202:	2020      	movs	r0, #32
    6204:	4661      	mov	r1, ip
    6206:	40d1      	lsrs	r1, r2
    6208:	1a82      	subs	r2, r0, r2
    620a:	4660      	mov	r0, ip
    620c:	4090      	lsls	r0, r2
    620e:	0002      	movs	r2, r0
    6210:	1e50      	subs	r0, r2, #1
    6212:	4182      	sbcs	r2, r0
    6214:	430a      	orrs	r2, r1
    6216:	1a9b      	subs	r3, r3, r2
    6218:	015a      	lsls	r2, r3, #5
    621a:	d4b8      	bmi.n	618e <__aeabi_fadd+0x4a>
    621c:	075a      	lsls	r2, r3, #29
    621e:	d1ce      	bne.n	61be <__aeabi_fadd+0x7a>
    6220:	08de      	lsrs	r6, r3, #3
    6222:	002a      	movs	r2, r5
    6224:	2cff      	cmp	r4, #255	; 0xff
    6226:	d13a      	bne.n	629e <__aeabi_fadd+0x15a>
    6228:	2e00      	cmp	r6, #0
    622a:	d100      	bne.n	622e <__aeabi_fadd+0xea>
    622c:	e0ae      	b.n	638c <__aeabi_fadd+0x248>
    622e:	2380      	movs	r3, #128	; 0x80
    6230:	03db      	lsls	r3, r3, #15
    6232:	4333      	orrs	r3, r6
    6234:	025b      	lsls	r3, r3, #9
    6236:	0a5b      	lsrs	r3, r3, #9
    6238:	24ff      	movs	r4, #255	; 0xff
    623a:	e7cf      	b.n	61dc <__aeabi_fadd+0x98>
    623c:	1a21      	subs	r1, r4, r0
    623e:	2900      	cmp	r1, #0
    6240:	dd52      	ble.n	62e8 <__aeabi_fadd+0x1a4>
    6242:	2800      	cmp	r0, #0
    6244:	d031      	beq.n	62aa <__aeabi_fadd+0x166>
    6246:	2cff      	cmp	r4, #255	; 0xff
    6248:	d0b7      	beq.n	61ba <__aeabi_fadd+0x76>
    624a:	2080      	movs	r0, #128	; 0x80
    624c:	003e      	movs	r6, r7
    624e:	04c0      	lsls	r0, r0, #19
    6250:	4306      	orrs	r6, r0
    6252:	46b4      	mov	ip, r6
    6254:	291b      	cmp	r1, #27
    6256:	dd00      	ble.n	625a <__aeabi_fadd+0x116>
    6258:	e0aa      	b.n	63b0 <__aeabi_fadd+0x26c>
    625a:	2620      	movs	r6, #32
    625c:	4660      	mov	r0, ip
    625e:	40c8      	lsrs	r0, r1
    6260:	1a71      	subs	r1, r6, r1
    6262:	4666      	mov	r6, ip
    6264:	408e      	lsls	r6, r1
    6266:	0031      	movs	r1, r6
    6268:	1e4e      	subs	r6, r1, #1
    626a:	41b1      	sbcs	r1, r6
    626c:	4301      	orrs	r1, r0
    626e:	185b      	adds	r3, r3, r1
    6270:	0159      	lsls	r1, r3, #5
    6272:	d5d3      	bpl.n	621c <__aeabi_fadd+0xd8>
    6274:	3401      	adds	r4, #1
    6276:	2cff      	cmp	r4, #255	; 0xff
    6278:	d100      	bne.n	627c <__aeabi_fadd+0x138>
    627a:	e087      	b.n	638c <__aeabi_fadd+0x248>
    627c:	2201      	movs	r2, #1
    627e:	4978      	ldr	r1, [pc, #480]	; (6460 <__aeabi_fadd+0x31c>)
    6280:	401a      	ands	r2, r3
    6282:	085b      	lsrs	r3, r3, #1
    6284:	400b      	ands	r3, r1
    6286:	4313      	orrs	r3, r2
    6288:	e797      	b.n	61ba <__aeabi_fadd+0x76>
    628a:	2c00      	cmp	r4, #0
    628c:	d000      	beq.n	6290 <__aeabi_fadd+0x14c>
    628e:	e0a7      	b.n	63e0 <__aeabi_fadd+0x29c>
    6290:	2b00      	cmp	r3, #0
    6292:	d000      	beq.n	6296 <__aeabi_fadd+0x152>
    6294:	e0b6      	b.n	6404 <__aeabi_fadd+0x2c0>
    6296:	1e3b      	subs	r3, r7, #0
    6298:	d162      	bne.n	6360 <__aeabi_fadd+0x21c>
    629a:	2600      	movs	r6, #0
    629c:	2200      	movs	r2, #0
    629e:	0273      	lsls	r3, r6, #9
    62a0:	0a5b      	lsrs	r3, r3, #9
    62a2:	b2e4      	uxtb	r4, r4
    62a4:	e79a      	b.n	61dc <__aeabi_fadd+0x98>
    62a6:	0014      	movs	r4, r2
    62a8:	e787      	b.n	61ba <__aeabi_fadd+0x76>
    62aa:	2f00      	cmp	r7, #0
    62ac:	d04d      	beq.n	634a <__aeabi_fadd+0x206>
    62ae:	1e48      	subs	r0, r1, #1
    62b0:	2800      	cmp	r0, #0
    62b2:	d157      	bne.n	6364 <__aeabi_fadd+0x220>
    62b4:	4463      	add	r3, ip
    62b6:	2401      	movs	r4, #1
    62b8:	015a      	lsls	r2, r3, #5
    62ba:	d5af      	bpl.n	621c <__aeabi_fadd+0xd8>
    62bc:	2402      	movs	r4, #2
    62be:	e7dd      	b.n	627c <__aeabi_fadd+0x138>
    62c0:	2a00      	cmp	r2, #0
    62c2:	d124      	bne.n	630e <__aeabi_fadd+0x1ca>
    62c4:	1c62      	adds	r2, r4, #1
    62c6:	b2d2      	uxtb	r2, r2
    62c8:	2a01      	cmp	r2, #1
    62ca:	ddde      	ble.n	628a <__aeabi_fadd+0x146>
    62cc:	1bde      	subs	r6, r3, r7
    62ce:	0172      	lsls	r2, r6, #5
    62d0:	d535      	bpl.n	633e <__aeabi_fadd+0x1fa>
    62d2:	1afe      	subs	r6, r7, r3
    62d4:	000d      	movs	r5, r1
    62d6:	e75c      	b.n	6192 <__aeabi_fadd+0x4e>
    62d8:	002a      	movs	r2, r5
    62da:	2300      	movs	r3, #0
    62dc:	e77e      	b.n	61dc <__aeabi_fadd+0x98>
    62de:	0033      	movs	r3, r6
    62e0:	4a60      	ldr	r2, [pc, #384]	; (6464 <__aeabi_fadd+0x320>)
    62e2:	1a24      	subs	r4, r4, r0
    62e4:	4013      	ands	r3, r2
    62e6:	e768      	b.n	61ba <__aeabi_fadd+0x76>
    62e8:	2900      	cmp	r1, #0
    62ea:	d163      	bne.n	63b4 <__aeabi_fadd+0x270>
    62ec:	1c61      	adds	r1, r4, #1
    62ee:	b2c8      	uxtb	r0, r1
    62f0:	2801      	cmp	r0, #1
    62f2:	dd4e      	ble.n	6392 <__aeabi_fadd+0x24e>
    62f4:	29ff      	cmp	r1, #255	; 0xff
    62f6:	d049      	beq.n	638c <__aeabi_fadd+0x248>
    62f8:	4463      	add	r3, ip
    62fa:	085b      	lsrs	r3, r3, #1
    62fc:	000c      	movs	r4, r1
    62fe:	e75c      	b.n	61ba <__aeabi_fadd+0x76>
    6300:	2aff      	cmp	r2, #255	; 0xff
    6302:	d041      	beq.n	6388 <__aeabi_fadd+0x244>
    6304:	000a      	movs	r2, r1
    6306:	e779      	b.n	61fc <__aeabi_fadd+0xb8>
    6308:	2201      	movs	r2, #1
    630a:	1a9b      	subs	r3, r3, r2
    630c:	e784      	b.n	6218 <__aeabi_fadd+0xd4>
    630e:	2c00      	cmp	r4, #0
    6310:	d01d      	beq.n	634e <__aeabi_fadd+0x20a>
    6312:	28ff      	cmp	r0, #255	; 0xff
    6314:	d022      	beq.n	635c <__aeabi_fadd+0x218>
    6316:	2480      	movs	r4, #128	; 0x80
    6318:	04e4      	lsls	r4, r4, #19
    631a:	4252      	negs	r2, r2
    631c:	4323      	orrs	r3, r4
    631e:	2a1b      	cmp	r2, #27
    6320:	dd00      	ble.n	6324 <__aeabi_fadd+0x1e0>
    6322:	e08a      	b.n	643a <__aeabi_fadd+0x2f6>
    6324:	001c      	movs	r4, r3
    6326:	2520      	movs	r5, #32
    6328:	40d4      	lsrs	r4, r2
    632a:	1aaa      	subs	r2, r5, r2
    632c:	4093      	lsls	r3, r2
    632e:	1e5a      	subs	r2, r3, #1
    6330:	4193      	sbcs	r3, r2
    6332:	4323      	orrs	r3, r4
    6334:	4662      	mov	r2, ip
    6336:	0004      	movs	r4, r0
    6338:	1ad3      	subs	r3, r2, r3
    633a:	000d      	movs	r5, r1
    633c:	e725      	b.n	618a <__aeabi_fadd+0x46>
    633e:	2e00      	cmp	r6, #0
    6340:	d000      	beq.n	6344 <__aeabi_fadd+0x200>
    6342:	e726      	b.n	6192 <__aeabi_fadd+0x4e>
    6344:	2200      	movs	r2, #0
    6346:	2400      	movs	r4, #0
    6348:	e7a9      	b.n	629e <__aeabi_fadd+0x15a>
    634a:	000c      	movs	r4, r1
    634c:	e735      	b.n	61ba <__aeabi_fadd+0x76>
    634e:	2b00      	cmp	r3, #0
    6350:	d04d      	beq.n	63ee <__aeabi_fadd+0x2aa>
    6352:	43d2      	mvns	r2, r2
    6354:	2a00      	cmp	r2, #0
    6356:	d0ed      	beq.n	6334 <__aeabi_fadd+0x1f0>
    6358:	28ff      	cmp	r0, #255	; 0xff
    635a:	d1e0      	bne.n	631e <__aeabi_fadd+0x1da>
    635c:	4663      	mov	r3, ip
    635e:	24ff      	movs	r4, #255	; 0xff
    6360:	000d      	movs	r5, r1
    6362:	e72a      	b.n	61ba <__aeabi_fadd+0x76>
    6364:	29ff      	cmp	r1, #255	; 0xff
    6366:	d00f      	beq.n	6388 <__aeabi_fadd+0x244>
    6368:	0001      	movs	r1, r0
    636a:	e773      	b.n	6254 <__aeabi_fadd+0x110>
    636c:	2b00      	cmp	r3, #0
    636e:	d061      	beq.n	6434 <__aeabi_fadd+0x2f0>
    6370:	24ff      	movs	r4, #255	; 0xff
    6372:	2f00      	cmp	r7, #0
    6374:	d100      	bne.n	6378 <__aeabi_fadd+0x234>
    6376:	e720      	b.n	61ba <__aeabi_fadd+0x76>
    6378:	2280      	movs	r2, #128	; 0x80
    637a:	4641      	mov	r1, r8
    637c:	03d2      	lsls	r2, r2, #15
    637e:	4211      	tst	r1, r2
    6380:	d002      	beq.n	6388 <__aeabi_fadd+0x244>
    6382:	4216      	tst	r6, r2
    6384:	d100      	bne.n	6388 <__aeabi_fadd+0x244>
    6386:	003b      	movs	r3, r7
    6388:	24ff      	movs	r4, #255	; 0xff
    638a:	e716      	b.n	61ba <__aeabi_fadd+0x76>
    638c:	24ff      	movs	r4, #255	; 0xff
    638e:	2300      	movs	r3, #0
    6390:	e724      	b.n	61dc <__aeabi_fadd+0x98>
    6392:	2c00      	cmp	r4, #0
    6394:	d1ea      	bne.n	636c <__aeabi_fadd+0x228>
    6396:	2b00      	cmp	r3, #0
    6398:	d058      	beq.n	644c <__aeabi_fadd+0x308>
    639a:	2f00      	cmp	r7, #0
    639c:	d100      	bne.n	63a0 <__aeabi_fadd+0x25c>
    639e:	e70c      	b.n	61ba <__aeabi_fadd+0x76>
    63a0:	4463      	add	r3, ip
    63a2:	015a      	lsls	r2, r3, #5
    63a4:	d400      	bmi.n	63a8 <__aeabi_fadd+0x264>
    63a6:	e739      	b.n	621c <__aeabi_fadd+0xd8>
    63a8:	4a2e      	ldr	r2, [pc, #184]	; (6464 <__aeabi_fadd+0x320>)
    63aa:	000c      	movs	r4, r1
    63ac:	4013      	ands	r3, r2
    63ae:	e704      	b.n	61ba <__aeabi_fadd+0x76>
    63b0:	2101      	movs	r1, #1
    63b2:	e75c      	b.n	626e <__aeabi_fadd+0x12a>
    63b4:	2c00      	cmp	r4, #0
    63b6:	d11e      	bne.n	63f6 <__aeabi_fadd+0x2b2>
    63b8:	2b00      	cmp	r3, #0
    63ba:	d040      	beq.n	643e <__aeabi_fadd+0x2fa>
    63bc:	43c9      	mvns	r1, r1
    63be:	2900      	cmp	r1, #0
    63c0:	d00b      	beq.n	63da <__aeabi_fadd+0x296>
    63c2:	28ff      	cmp	r0, #255	; 0xff
    63c4:	d036      	beq.n	6434 <__aeabi_fadd+0x2f0>
    63c6:	291b      	cmp	r1, #27
    63c8:	dc47      	bgt.n	645a <__aeabi_fadd+0x316>
    63ca:	001c      	movs	r4, r3
    63cc:	2620      	movs	r6, #32
    63ce:	40cc      	lsrs	r4, r1
    63d0:	1a71      	subs	r1, r6, r1
    63d2:	408b      	lsls	r3, r1
    63d4:	1e59      	subs	r1, r3, #1
    63d6:	418b      	sbcs	r3, r1
    63d8:	4323      	orrs	r3, r4
    63da:	4463      	add	r3, ip
    63dc:	0004      	movs	r4, r0
    63de:	e747      	b.n	6270 <__aeabi_fadd+0x12c>
    63e0:	2b00      	cmp	r3, #0
    63e2:	d118      	bne.n	6416 <__aeabi_fadd+0x2d2>
    63e4:	1e3b      	subs	r3, r7, #0
    63e6:	d02d      	beq.n	6444 <__aeabi_fadd+0x300>
    63e8:	000d      	movs	r5, r1
    63ea:	24ff      	movs	r4, #255	; 0xff
    63ec:	e6e5      	b.n	61ba <__aeabi_fadd+0x76>
    63ee:	003b      	movs	r3, r7
    63f0:	0004      	movs	r4, r0
    63f2:	000d      	movs	r5, r1
    63f4:	e6e1      	b.n	61ba <__aeabi_fadd+0x76>
    63f6:	28ff      	cmp	r0, #255	; 0xff
    63f8:	d01c      	beq.n	6434 <__aeabi_fadd+0x2f0>
    63fa:	2480      	movs	r4, #128	; 0x80
    63fc:	04e4      	lsls	r4, r4, #19
    63fe:	4249      	negs	r1, r1
    6400:	4323      	orrs	r3, r4
    6402:	e7e0      	b.n	63c6 <__aeabi_fadd+0x282>
    6404:	2f00      	cmp	r7, #0
    6406:	d100      	bne.n	640a <__aeabi_fadd+0x2c6>
    6408:	e6d7      	b.n	61ba <__aeabi_fadd+0x76>
    640a:	1bde      	subs	r6, r3, r7
    640c:	0172      	lsls	r2, r6, #5
    640e:	d51f      	bpl.n	6450 <__aeabi_fadd+0x30c>
    6410:	1afb      	subs	r3, r7, r3
    6412:	000d      	movs	r5, r1
    6414:	e6d1      	b.n	61ba <__aeabi_fadd+0x76>
    6416:	24ff      	movs	r4, #255	; 0xff
    6418:	2f00      	cmp	r7, #0
    641a:	d100      	bne.n	641e <__aeabi_fadd+0x2da>
    641c:	e6cd      	b.n	61ba <__aeabi_fadd+0x76>
    641e:	2280      	movs	r2, #128	; 0x80
    6420:	4640      	mov	r0, r8
    6422:	03d2      	lsls	r2, r2, #15
    6424:	4210      	tst	r0, r2
    6426:	d0af      	beq.n	6388 <__aeabi_fadd+0x244>
    6428:	4216      	tst	r6, r2
    642a:	d1ad      	bne.n	6388 <__aeabi_fadd+0x244>
    642c:	003b      	movs	r3, r7
    642e:	000d      	movs	r5, r1
    6430:	24ff      	movs	r4, #255	; 0xff
    6432:	e6c2      	b.n	61ba <__aeabi_fadd+0x76>
    6434:	4663      	mov	r3, ip
    6436:	24ff      	movs	r4, #255	; 0xff
    6438:	e6bf      	b.n	61ba <__aeabi_fadd+0x76>
    643a:	2301      	movs	r3, #1
    643c:	e77a      	b.n	6334 <__aeabi_fadd+0x1f0>
    643e:	003b      	movs	r3, r7
    6440:	0004      	movs	r4, r0
    6442:	e6ba      	b.n	61ba <__aeabi_fadd+0x76>
    6444:	2680      	movs	r6, #128	; 0x80
    6446:	2200      	movs	r2, #0
    6448:	03f6      	lsls	r6, r6, #15
    644a:	e6f0      	b.n	622e <__aeabi_fadd+0xea>
    644c:	003b      	movs	r3, r7
    644e:	e6b4      	b.n	61ba <__aeabi_fadd+0x76>
    6450:	1e33      	subs	r3, r6, #0
    6452:	d000      	beq.n	6456 <__aeabi_fadd+0x312>
    6454:	e6e2      	b.n	621c <__aeabi_fadd+0xd8>
    6456:	2200      	movs	r2, #0
    6458:	e721      	b.n	629e <__aeabi_fadd+0x15a>
    645a:	2301      	movs	r3, #1
    645c:	e7bd      	b.n	63da <__aeabi_fadd+0x296>
    645e:	46c0      	nop			; (mov r8, r8)
    6460:	7dffffff 	.word	0x7dffffff
    6464:	fbffffff 	.word	0xfbffffff

00006468 <__aeabi_fdiv>:
    6468:	b5f0      	push	{r4, r5, r6, r7, lr}
    646a:	4657      	mov	r7, sl
    646c:	464e      	mov	r6, r9
    646e:	46de      	mov	lr, fp
    6470:	4645      	mov	r5, r8
    6472:	b5e0      	push	{r5, r6, r7, lr}
    6474:	0244      	lsls	r4, r0, #9
    6476:	0043      	lsls	r3, r0, #1
    6478:	0fc6      	lsrs	r6, r0, #31
    647a:	b083      	sub	sp, #12
    647c:	1c0f      	adds	r7, r1, #0
    647e:	0a64      	lsrs	r4, r4, #9
    6480:	0e1b      	lsrs	r3, r3, #24
    6482:	46b2      	mov	sl, r6
    6484:	d053      	beq.n	652e <__aeabi_fdiv+0xc6>
    6486:	2bff      	cmp	r3, #255	; 0xff
    6488:	d027      	beq.n	64da <__aeabi_fdiv+0x72>
    648a:	2280      	movs	r2, #128	; 0x80
    648c:	00e4      	lsls	r4, r4, #3
    648e:	04d2      	lsls	r2, r2, #19
    6490:	4314      	orrs	r4, r2
    6492:	227f      	movs	r2, #127	; 0x7f
    6494:	4252      	negs	r2, r2
    6496:	4690      	mov	r8, r2
    6498:	4498      	add	r8, r3
    649a:	2300      	movs	r3, #0
    649c:	4699      	mov	r9, r3
    649e:	469b      	mov	fp, r3
    64a0:	027d      	lsls	r5, r7, #9
    64a2:	0078      	lsls	r0, r7, #1
    64a4:	0ffb      	lsrs	r3, r7, #31
    64a6:	0a6d      	lsrs	r5, r5, #9
    64a8:	0e00      	lsrs	r0, r0, #24
    64aa:	9300      	str	r3, [sp, #0]
    64ac:	d024      	beq.n	64f8 <__aeabi_fdiv+0x90>
    64ae:	28ff      	cmp	r0, #255	; 0xff
    64b0:	d046      	beq.n	6540 <__aeabi_fdiv+0xd8>
    64b2:	2380      	movs	r3, #128	; 0x80
    64b4:	2100      	movs	r1, #0
    64b6:	00ed      	lsls	r5, r5, #3
    64b8:	04db      	lsls	r3, r3, #19
    64ba:	431d      	orrs	r5, r3
    64bc:	387f      	subs	r0, #127	; 0x7f
    64be:	4647      	mov	r7, r8
    64c0:	1a38      	subs	r0, r7, r0
    64c2:	464f      	mov	r7, r9
    64c4:	430f      	orrs	r7, r1
    64c6:	00bf      	lsls	r7, r7, #2
    64c8:	46b9      	mov	r9, r7
    64ca:	0033      	movs	r3, r6
    64cc:	9a00      	ldr	r2, [sp, #0]
    64ce:	4f87      	ldr	r7, [pc, #540]	; (66ec <__aeabi_fdiv+0x284>)
    64d0:	4053      	eors	r3, r2
    64d2:	464a      	mov	r2, r9
    64d4:	58ba      	ldr	r2, [r7, r2]
    64d6:	9301      	str	r3, [sp, #4]
    64d8:	4697      	mov	pc, r2
    64da:	2c00      	cmp	r4, #0
    64dc:	d14e      	bne.n	657c <__aeabi_fdiv+0x114>
    64de:	2308      	movs	r3, #8
    64e0:	4699      	mov	r9, r3
    64e2:	33f7      	adds	r3, #247	; 0xf7
    64e4:	4698      	mov	r8, r3
    64e6:	3bfd      	subs	r3, #253	; 0xfd
    64e8:	469b      	mov	fp, r3
    64ea:	027d      	lsls	r5, r7, #9
    64ec:	0078      	lsls	r0, r7, #1
    64ee:	0ffb      	lsrs	r3, r7, #31
    64f0:	0a6d      	lsrs	r5, r5, #9
    64f2:	0e00      	lsrs	r0, r0, #24
    64f4:	9300      	str	r3, [sp, #0]
    64f6:	d1da      	bne.n	64ae <__aeabi_fdiv+0x46>
    64f8:	2d00      	cmp	r5, #0
    64fa:	d126      	bne.n	654a <__aeabi_fdiv+0xe2>
    64fc:	2000      	movs	r0, #0
    64fe:	2101      	movs	r1, #1
    6500:	0033      	movs	r3, r6
    6502:	9a00      	ldr	r2, [sp, #0]
    6504:	4f7a      	ldr	r7, [pc, #488]	; (66f0 <__aeabi_fdiv+0x288>)
    6506:	4053      	eors	r3, r2
    6508:	4642      	mov	r2, r8
    650a:	1a10      	subs	r0, r2, r0
    650c:	464a      	mov	r2, r9
    650e:	430a      	orrs	r2, r1
    6510:	0092      	lsls	r2, r2, #2
    6512:	58ba      	ldr	r2, [r7, r2]
    6514:	001d      	movs	r5, r3
    6516:	4697      	mov	pc, r2
    6518:	9b00      	ldr	r3, [sp, #0]
    651a:	002c      	movs	r4, r5
    651c:	469a      	mov	sl, r3
    651e:	468b      	mov	fp, r1
    6520:	465b      	mov	r3, fp
    6522:	2b02      	cmp	r3, #2
    6524:	d131      	bne.n	658a <__aeabi_fdiv+0x122>
    6526:	4653      	mov	r3, sl
    6528:	21ff      	movs	r1, #255	; 0xff
    652a:	2400      	movs	r4, #0
    652c:	e038      	b.n	65a0 <__aeabi_fdiv+0x138>
    652e:	2c00      	cmp	r4, #0
    6530:	d117      	bne.n	6562 <__aeabi_fdiv+0xfa>
    6532:	2304      	movs	r3, #4
    6534:	4699      	mov	r9, r3
    6536:	2300      	movs	r3, #0
    6538:	4698      	mov	r8, r3
    653a:	3301      	adds	r3, #1
    653c:	469b      	mov	fp, r3
    653e:	e7af      	b.n	64a0 <__aeabi_fdiv+0x38>
    6540:	20ff      	movs	r0, #255	; 0xff
    6542:	2d00      	cmp	r5, #0
    6544:	d10b      	bne.n	655e <__aeabi_fdiv+0xf6>
    6546:	2102      	movs	r1, #2
    6548:	e7da      	b.n	6500 <__aeabi_fdiv+0x98>
    654a:	0028      	movs	r0, r5
    654c:	f002 f970 	bl	8830 <__clzsi2>
    6550:	1f43      	subs	r3, r0, #5
    6552:	409d      	lsls	r5, r3
    6554:	2376      	movs	r3, #118	; 0x76
    6556:	425b      	negs	r3, r3
    6558:	1a18      	subs	r0, r3, r0
    655a:	2100      	movs	r1, #0
    655c:	e7af      	b.n	64be <__aeabi_fdiv+0x56>
    655e:	2103      	movs	r1, #3
    6560:	e7ad      	b.n	64be <__aeabi_fdiv+0x56>
    6562:	0020      	movs	r0, r4
    6564:	f002 f964 	bl	8830 <__clzsi2>
    6568:	1f43      	subs	r3, r0, #5
    656a:	409c      	lsls	r4, r3
    656c:	2376      	movs	r3, #118	; 0x76
    656e:	425b      	negs	r3, r3
    6570:	1a1b      	subs	r3, r3, r0
    6572:	4698      	mov	r8, r3
    6574:	2300      	movs	r3, #0
    6576:	4699      	mov	r9, r3
    6578:	469b      	mov	fp, r3
    657a:	e791      	b.n	64a0 <__aeabi_fdiv+0x38>
    657c:	230c      	movs	r3, #12
    657e:	4699      	mov	r9, r3
    6580:	33f3      	adds	r3, #243	; 0xf3
    6582:	4698      	mov	r8, r3
    6584:	3bfc      	subs	r3, #252	; 0xfc
    6586:	469b      	mov	fp, r3
    6588:	e78a      	b.n	64a0 <__aeabi_fdiv+0x38>
    658a:	2b03      	cmp	r3, #3
    658c:	d100      	bne.n	6590 <__aeabi_fdiv+0x128>
    658e:	e0a5      	b.n	66dc <__aeabi_fdiv+0x274>
    6590:	4655      	mov	r5, sl
    6592:	2b01      	cmp	r3, #1
    6594:	d000      	beq.n	6598 <__aeabi_fdiv+0x130>
    6596:	e081      	b.n	669c <__aeabi_fdiv+0x234>
    6598:	2301      	movs	r3, #1
    659a:	2100      	movs	r1, #0
    659c:	2400      	movs	r4, #0
    659e:	402b      	ands	r3, r5
    65a0:	0264      	lsls	r4, r4, #9
    65a2:	05c9      	lsls	r1, r1, #23
    65a4:	0a60      	lsrs	r0, r4, #9
    65a6:	07db      	lsls	r3, r3, #31
    65a8:	4308      	orrs	r0, r1
    65aa:	4318      	orrs	r0, r3
    65ac:	b003      	add	sp, #12
    65ae:	bc3c      	pop	{r2, r3, r4, r5}
    65b0:	4690      	mov	r8, r2
    65b2:	4699      	mov	r9, r3
    65b4:	46a2      	mov	sl, r4
    65b6:	46ab      	mov	fp, r5
    65b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65ba:	2480      	movs	r4, #128	; 0x80
    65bc:	2300      	movs	r3, #0
    65be:	03e4      	lsls	r4, r4, #15
    65c0:	21ff      	movs	r1, #255	; 0xff
    65c2:	e7ed      	b.n	65a0 <__aeabi_fdiv+0x138>
    65c4:	21ff      	movs	r1, #255	; 0xff
    65c6:	2400      	movs	r4, #0
    65c8:	e7ea      	b.n	65a0 <__aeabi_fdiv+0x138>
    65ca:	2301      	movs	r3, #1
    65cc:	1a59      	subs	r1, r3, r1
    65ce:	291b      	cmp	r1, #27
    65d0:	dd66      	ble.n	66a0 <__aeabi_fdiv+0x238>
    65d2:	9a01      	ldr	r2, [sp, #4]
    65d4:	4013      	ands	r3, r2
    65d6:	2100      	movs	r1, #0
    65d8:	2400      	movs	r4, #0
    65da:	e7e1      	b.n	65a0 <__aeabi_fdiv+0x138>
    65dc:	2380      	movs	r3, #128	; 0x80
    65de:	03db      	lsls	r3, r3, #15
    65e0:	421c      	tst	r4, r3
    65e2:	d038      	beq.n	6656 <__aeabi_fdiv+0x1ee>
    65e4:	421d      	tst	r5, r3
    65e6:	d051      	beq.n	668c <__aeabi_fdiv+0x224>
    65e8:	431c      	orrs	r4, r3
    65ea:	0264      	lsls	r4, r4, #9
    65ec:	0a64      	lsrs	r4, r4, #9
    65ee:	0033      	movs	r3, r6
    65f0:	21ff      	movs	r1, #255	; 0xff
    65f2:	e7d5      	b.n	65a0 <__aeabi_fdiv+0x138>
    65f4:	0163      	lsls	r3, r4, #5
    65f6:	016c      	lsls	r4, r5, #5
    65f8:	42a3      	cmp	r3, r4
    65fa:	d23b      	bcs.n	6674 <__aeabi_fdiv+0x20c>
    65fc:	261b      	movs	r6, #27
    65fe:	2100      	movs	r1, #0
    6600:	3801      	subs	r0, #1
    6602:	2501      	movs	r5, #1
    6604:	001f      	movs	r7, r3
    6606:	0049      	lsls	r1, r1, #1
    6608:	005b      	lsls	r3, r3, #1
    660a:	2f00      	cmp	r7, #0
    660c:	db01      	blt.n	6612 <__aeabi_fdiv+0x1aa>
    660e:	429c      	cmp	r4, r3
    6610:	d801      	bhi.n	6616 <__aeabi_fdiv+0x1ae>
    6612:	1b1b      	subs	r3, r3, r4
    6614:	4329      	orrs	r1, r5
    6616:	3e01      	subs	r6, #1
    6618:	2e00      	cmp	r6, #0
    661a:	d1f3      	bne.n	6604 <__aeabi_fdiv+0x19c>
    661c:	001c      	movs	r4, r3
    661e:	1e63      	subs	r3, r4, #1
    6620:	419c      	sbcs	r4, r3
    6622:	430c      	orrs	r4, r1
    6624:	0001      	movs	r1, r0
    6626:	317f      	adds	r1, #127	; 0x7f
    6628:	2900      	cmp	r1, #0
    662a:	ddce      	ble.n	65ca <__aeabi_fdiv+0x162>
    662c:	0763      	lsls	r3, r4, #29
    662e:	d004      	beq.n	663a <__aeabi_fdiv+0x1d2>
    6630:	230f      	movs	r3, #15
    6632:	4023      	ands	r3, r4
    6634:	2b04      	cmp	r3, #4
    6636:	d000      	beq.n	663a <__aeabi_fdiv+0x1d2>
    6638:	3404      	adds	r4, #4
    663a:	0123      	lsls	r3, r4, #4
    663c:	d503      	bpl.n	6646 <__aeabi_fdiv+0x1de>
    663e:	0001      	movs	r1, r0
    6640:	4b2c      	ldr	r3, [pc, #176]	; (66f4 <__aeabi_fdiv+0x28c>)
    6642:	3180      	adds	r1, #128	; 0x80
    6644:	401c      	ands	r4, r3
    6646:	29fe      	cmp	r1, #254	; 0xfe
    6648:	dd0d      	ble.n	6666 <__aeabi_fdiv+0x1fe>
    664a:	2301      	movs	r3, #1
    664c:	9a01      	ldr	r2, [sp, #4]
    664e:	21ff      	movs	r1, #255	; 0xff
    6650:	4013      	ands	r3, r2
    6652:	2400      	movs	r4, #0
    6654:	e7a4      	b.n	65a0 <__aeabi_fdiv+0x138>
    6656:	2380      	movs	r3, #128	; 0x80
    6658:	03db      	lsls	r3, r3, #15
    665a:	431c      	orrs	r4, r3
    665c:	0264      	lsls	r4, r4, #9
    665e:	0a64      	lsrs	r4, r4, #9
    6660:	0033      	movs	r3, r6
    6662:	21ff      	movs	r1, #255	; 0xff
    6664:	e79c      	b.n	65a0 <__aeabi_fdiv+0x138>
    6666:	2301      	movs	r3, #1
    6668:	9a01      	ldr	r2, [sp, #4]
    666a:	01a4      	lsls	r4, r4, #6
    666c:	0a64      	lsrs	r4, r4, #9
    666e:	b2c9      	uxtb	r1, r1
    6670:	4013      	ands	r3, r2
    6672:	e795      	b.n	65a0 <__aeabi_fdiv+0x138>
    6674:	1b1b      	subs	r3, r3, r4
    6676:	261a      	movs	r6, #26
    6678:	2101      	movs	r1, #1
    667a:	e7c2      	b.n	6602 <__aeabi_fdiv+0x19a>
    667c:	9b00      	ldr	r3, [sp, #0]
    667e:	468b      	mov	fp, r1
    6680:	469a      	mov	sl, r3
    6682:	2400      	movs	r4, #0
    6684:	e74c      	b.n	6520 <__aeabi_fdiv+0xb8>
    6686:	0263      	lsls	r3, r4, #9
    6688:	d5e5      	bpl.n	6656 <__aeabi_fdiv+0x1ee>
    668a:	2500      	movs	r5, #0
    668c:	2480      	movs	r4, #128	; 0x80
    668e:	03e4      	lsls	r4, r4, #15
    6690:	432c      	orrs	r4, r5
    6692:	0264      	lsls	r4, r4, #9
    6694:	0a64      	lsrs	r4, r4, #9
    6696:	9b00      	ldr	r3, [sp, #0]
    6698:	21ff      	movs	r1, #255	; 0xff
    669a:	e781      	b.n	65a0 <__aeabi_fdiv+0x138>
    669c:	9501      	str	r5, [sp, #4]
    669e:	e7c1      	b.n	6624 <__aeabi_fdiv+0x1bc>
    66a0:	0023      	movs	r3, r4
    66a2:	2020      	movs	r0, #32
    66a4:	40cb      	lsrs	r3, r1
    66a6:	1a41      	subs	r1, r0, r1
    66a8:	408c      	lsls	r4, r1
    66aa:	1e61      	subs	r1, r4, #1
    66ac:	418c      	sbcs	r4, r1
    66ae:	431c      	orrs	r4, r3
    66b0:	0763      	lsls	r3, r4, #29
    66b2:	d004      	beq.n	66be <__aeabi_fdiv+0x256>
    66b4:	230f      	movs	r3, #15
    66b6:	4023      	ands	r3, r4
    66b8:	2b04      	cmp	r3, #4
    66ba:	d000      	beq.n	66be <__aeabi_fdiv+0x256>
    66bc:	3404      	adds	r4, #4
    66be:	0163      	lsls	r3, r4, #5
    66c0:	d505      	bpl.n	66ce <__aeabi_fdiv+0x266>
    66c2:	2301      	movs	r3, #1
    66c4:	9a01      	ldr	r2, [sp, #4]
    66c6:	2101      	movs	r1, #1
    66c8:	4013      	ands	r3, r2
    66ca:	2400      	movs	r4, #0
    66cc:	e768      	b.n	65a0 <__aeabi_fdiv+0x138>
    66ce:	2301      	movs	r3, #1
    66d0:	9a01      	ldr	r2, [sp, #4]
    66d2:	01a4      	lsls	r4, r4, #6
    66d4:	0a64      	lsrs	r4, r4, #9
    66d6:	4013      	ands	r3, r2
    66d8:	2100      	movs	r1, #0
    66da:	e761      	b.n	65a0 <__aeabi_fdiv+0x138>
    66dc:	2380      	movs	r3, #128	; 0x80
    66de:	03db      	lsls	r3, r3, #15
    66e0:	431c      	orrs	r4, r3
    66e2:	0264      	lsls	r4, r4, #9
    66e4:	0a64      	lsrs	r4, r4, #9
    66e6:	4653      	mov	r3, sl
    66e8:	21ff      	movs	r1, #255	; 0xff
    66ea:	e759      	b.n	65a0 <__aeabi_fdiv+0x138>
    66ec:	00008c10 	.word	0x00008c10
    66f0:	00008c50 	.word	0x00008c50
    66f4:	f7ffffff 	.word	0xf7ffffff

000066f8 <__eqsf2>:
    66f8:	b570      	push	{r4, r5, r6, lr}
    66fa:	0042      	lsls	r2, r0, #1
    66fc:	0245      	lsls	r5, r0, #9
    66fe:	024e      	lsls	r6, r1, #9
    6700:	004c      	lsls	r4, r1, #1
    6702:	0fc3      	lsrs	r3, r0, #31
    6704:	0a6d      	lsrs	r5, r5, #9
    6706:	0e12      	lsrs	r2, r2, #24
    6708:	0a76      	lsrs	r6, r6, #9
    670a:	0e24      	lsrs	r4, r4, #24
    670c:	0fc9      	lsrs	r1, r1, #31
    670e:	2001      	movs	r0, #1
    6710:	2aff      	cmp	r2, #255	; 0xff
    6712:	d006      	beq.n	6722 <__eqsf2+0x2a>
    6714:	2cff      	cmp	r4, #255	; 0xff
    6716:	d003      	beq.n	6720 <__eqsf2+0x28>
    6718:	42a2      	cmp	r2, r4
    671a:	d101      	bne.n	6720 <__eqsf2+0x28>
    671c:	42b5      	cmp	r5, r6
    671e:	d006      	beq.n	672e <__eqsf2+0x36>
    6720:	bd70      	pop	{r4, r5, r6, pc}
    6722:	2d00      	cmp	r5, #0
    6724:	d1fc      	bne.n	6720 <__eqsf2+0x28>
    6726:	2cff      	cmp	r4, #255	; 0xff
    6728:	d1fa      	bne.n	6720 <__eqsf2+0x28>
    672a:	2e00      	cmp	r6, #0
    672c:	d1f8      	bne.n	6720 <__eqsf2+0x28>
    672e:	428b      	cmp	r3, r1
    6730:	d006      	beq.n	6740 <__eqsf2+0x48>
    6732:	2001      	movs	r0, #1
    6734:	2a00      	cmp	r2, #0
    6736:	d1f3      	bne.n	6720 <__eqsf2+0x28>
    6738:	0028      	movs	r0, r5
    673a:	1e45      	subs	r5, r0, #1
    673c:	41a8      	sbcs	r0, r5
    673e:	e7ef      	b.n	6720 <__eqsf2+0x28>
    6740:	2000      	movs	r0, #0
    6742:	e7ed      	b.n	6720 <__eqsf2+0x28>

00006744 <__gesf2>:
    6744:	b5f0      	push	{r4, r5, r6, r7, lr}
    6746:	0042      	lsls	r2, r0, #1
    6748:	0245      	lsls	r5, r0, #9
    674a:	024c      	lsls	r4, r1, #9
    674c:	0fc3      	lsrs	r3, r0, #31
    674e:	0048      	lsls	r0, r1, #1
    6750:	0a6d      	lsrs	r5, r5, #9
    6752:	0e12      	lsrs	r2, r2, #24
    6754:	0a64      	lsrs	r4, r4, #9
    6756:	0e00      	lsrs	r0, r0, #24
    6758:	0fc9      	lsrs	r1, r1, #31
    675a:	2aff      	cmp	r2, #255	; 0xff
    675c:	d01e      	beq.n	679c <__gesf2+0x58>
    675e:	28ff      	cmp	r0, #255	; 0xff
    6760:	d021      	beq.n	67a6 <__gesf2+0x62>
    6762:	2a00      	cmp	r2, #0
    6764:	d10a      	bne.n	677c <__gesf2+0x38>
    6766:	426e      	negs	r6, r5
    6768:	416e      	adcs	r6, r5
    676a:	b2f6      	uxtb	r6, r6
    676c:	2800      	cmp	r0, #0
    676e:	d10f      	bne.n	6790 <__gesf2+0x4c>
    6770:	2c00      	cmp	r4, #0
    6772:	d10d      	bne.n	6790 <__gesf2+0x4c>
    6774:	2000      	movs	r0, #0
    6776:	2d00      	cmp	r5, #0
    6778:	d009      	beq.n	678e <__gesf2+0x4a>
    677a:	e005      	b.n	6788 <__gesf2+0x44>
    677c:	2800      	cmp	r0, #0
    677e:	d101      	bne.n	6784 <__gesf2+0x40>
    6780:	2c00      	cmp	r4, #0
    6782:	d001      	beq.n	6788 <__gesf2+0x44>
    6784:	428b      	cmp	r3, r1
    6786:	d011      	beq.n	67ac <__gesf2+0x68>
    6788:	2101      	movs	r1, #1
    678a:	4258      	negs	r0, r3
    678c:	4308      	orrs	r0, r1
    678e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6790:	2e00      	cmp	r6, #0
    6792:	d0f7      	beq.n	6784 <__gesf2+0x40>
    6794:	2001      	movs	r0, #1
    6796:	3901      	subs	r1, #1
    6798:	4308      	orrs	r0, r1
    679a:	e7f8      	b.n	678e <__gesf2+0x4a>
    679c:	2d00      	cmp	r5, #0
    679e:	d0de      	beq.n	675e <__gesf2+0x1a>
    67a0:	2002      	movs	r0, #2
    67a2:	4240      	negs	r0, r0
    67a4:	e7f3      	b.n	678e <__gesf2+0x4a>
    67a6:	2c00      	cmp	r4, #0
    67a8:	d0db      	beq.n	6762 <__gesf2+0x1e>
    67aa:	e7f9      	b.n	67a0 <__gesf2+0x5c>
    67ac:	4282      	cmp	r2, r0
    67ae:	dceb      	bgt.n	6788 <__gesf2+0x44>
    67b0:	db04      	blt.n	67bc <__gesf2+0x78>
    67b2:	42a5      	cmp	r5, r4
    67b4:	d8e8      	bhi.n	6788 <__gesf2+0x44>
    67b6:	2000      	movs	r0, #0
    67b8:	42a5      	cmp	r5, r4
    67ba:	d2e8      	bcs.n	678e <__gesf2+0x4a>
    67bc:	2101      	movs	r1, #1
    67be:	1e58      	subs	r0, r3, #1
    67c0:	4308      	orrs	r0, r1
    67c2:	e7e4      	b.n	678e <__gesf2+0x4a>

000067c4 <__lesf2>:
    67c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67c6:	0042      	lsls	r2, r0, #1
    67c8:	024d      	lsls	r5, r1, #9
    67ca:	004c      	lsls	r4, r1, #1
    67cc:	0246      	lsls	r6, r0, #9
    67ce:	0a76      	lsrs	r6, r6, #9
    67d0:	0e12      	lsrs	r2, r2, #24
    67d2:	0fc3      	lsrs	r3, r0, #31
    67d4:	0a6d      	lsrs	r5, r5, #9
    67d6:	0e24      	lsrs	r4, r4, #24
    67d8:	0fc9      	lsrs	r1, r1, #31
    67da:	2aff      	cmp	r2, #255	; 0xff
    67dc:	d016      	beq.n	680c <__lesf2+0x48>
    67de:	2cff      	cmp	r4, #255	; 0xff
    67e0:	d018      	beq.n	6814 <__lesf2+0x50>
    67e2:	2a00      	cmp	r2, #0
    67e4:	d10a      	bne.n	67fc <__lesf2+0x38>
    67e6:	4270      	negs	r0, r6
    67e8:	4170      	adcs	r0, r6
    67ea:	b2c0      	uxtb	r0, r0
    67ec:	2c00      	cmp	r4, #0
    67ee:	d015      	beq.n	681c <__lesf2+0x58>
    67f0:	2800      	cmp	r0, #0
    67f2:	d005      	beq.n	6800 <__lesf2+0x3c>
    67f4:	2001      	movs	r0, #1
    67f6:	3901      	subs	r1, #1
    67f8:	4308      	orrs	r0, r1
    67fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67fc:	2c00      	cmp	r4, #0
    67fe:	d013      	beq.n	6828 <__lesf2+0x64>
    6800:	4299      	cmp	r1, r3
    6802:	d014      	beq.n	682e <__lesf2+0x6a>
    6804:	2001      	movs	r0, #1
    6806:	425b      	negs	r3, r3
    6808:	4318      	orrs	r0, r3
    680a:	e7f6      	b.n	67fa <__lesf2+0x36>
    680c:	2002      	movs	r0, #2
    680e:	2e00      	cmp	r6, #0
    6810:	d1f3      	bne.n	67fa <__lesf2+0x36>
    6812:	e7e4      	b.n	67de <__lesf2+0x1a>
    6814:	2002      	movs	r0, #2
    6816:	2d00      	cmp	r5, #0
    6818:	d1ef      	bne.n	67fa <__lesf2+0x36>
    681a:	e7e2      	b.n	67e2 <__lesf2+0x1e>
    681c:	2d00      	cmp	r5, #0
    681e:	d1e7      	bne.n	67f0 <__lesf2+0x2c>
    6820:	2000      	movs	r0, #0
    6822:	2e00      	cmp	r6, #0
    6824:	d0e9      	beq.n	67fa <__lesf2+0x36>
    6826:	e7ed      	b.n	6804 <__lesf2+0x40>
    6828:	2d00      	cmp	r5, #0
    682a:	d1e9      	bne.n	6800 <__lesf2+0x3c>
    682c:	e7ea      	b.n	6804 <__lesf2+0x40>
    682e:	42a2      	cmp	r2, r4
    6830:	dc06      	bgt.n	6840 <__lesf2+0x7c>
    6832:	dbdf      	blt.n	67f4 <__lesf2+0x30>
    6834:	42ae      	cmp	r6, r5
    6836:	d803      	bhi.n	6840 <__lesf2+0x7c>
    6838:	2000      	movs	r0, #0
    683a:	42ae      	cmp	r6, r5
    683c:	d3da      	bcc.n	67f4 <__lesf2+0x30>
    683e:	e7dc      	b.n	67fa <__lesf2+0x36>
    6840:	2001      	movs	r0, #1
    6842:	4249      	negs	r1, r1
    6844:	4308      	orrs	r0, r1
    6846:	e7d8      	b.n	67fa <__lesf2+0x36>

00006848 <__aeabi_fmul>:
    6848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    684a:	4657      	mov	r7, sl
    684c:	464e      	mov	r6, r9
    684e:	4645      	mov	r5, r8
    6850:	46de      	mov	lr, fp
    6852:	b5e0      	push	{r5, r6, r7, lr}
    6854:	0247      	lsls	r7, r0, #9
    6856:	0046      	lsls	r6, r0, #1
    6858:	4688      	mov	r8, r1
    685a:	0a7f      	lsrs	r7, r7, #9
    685c:	0e36      	lsrs	r6, r6, #24
    685e:	0fc4      	lsrs	r4, r0, #31
    6860:	2e00      	cmp	r6, #0
    6862:	d047      	beq.n	68f4 <__aeabi_fmul+0xac>
    6864:	2eff      	cmp	r6, #255	; 0xff
    6866:	d024      	beq.n	68b2 <__aeabi_fmul+0x6a>
    6868:	00fb      	lsls	r3, r7, #3
    686a:	2780      	movs	r7, #128	; 0x80
    686c:	04ff      	lsls	r7, r7, #19
    686e:	431f      	orrs	r7, r3
    6870:	2300      	movs	r3, #0
    6872:	4699      	mov	r9, r3
    6874:	469a      	mov	sl, r3
    6876:	3e7f      	subs	r6, #127	; 0x7f
    6878:	4643      	mov	r3, r8
    687a:	025d      	lsls	r5, r3, #9
    687c:	0058      	lsls	r0, r3, #1
    687e:	0fdb      	lsrs	r3, r3, #31
    6880:	0a6d      	lsrs	r5, r5, #9
    6882:	0e00      	lsrs	r0, r0, #24
    6884:	4698      	mov	r8, r3
    6886:	d043      	beq.n	6910 <__aeabi_fmul+0xc8>
    6888:	28ff      	cmp	r0, #255	; 0xff
    688a:	d03b      	beq.n	6904 <__aeabi_fmul+0xbc>
    688c:	00eb      	lsls	r3, r5, #3
    688e:	2580      	movs	r5, #128	; 0x80
    6890:	2200      	movs	r2, #0
    6892:	04ed      	lsls	r5, r5, #19
    6894:	431d      	orrs	r5, r3
    6896:	387f      	subs	r0, #127	; 0x7f
    6898:	1836      	adds	r6, r6, r0
    689a:	1c73      	adds	r3, r6, #1
    689c:	4641      	mov	r1, r8
    689e:	469b      	mov	fp, r3
    68a0:	464b      	mov	r3, r9
    68a2:	4061      	eors	r1, r4
    68a4:	4313      	orrs	r3, r2
    68a6:	2b0f      	cmp	r3, #15
    68a8:	d864      	bhi.n	6974 <__aeabi_fmul+0x12c>
    68aa:	4875      	ldr	r0, [pc, #468]	; (6a80 <__aeabi_fmul+0x238>)
    68ac:	009b      	lsls	r3, r3, #2
    68ae:	58c3      	ldr	r3, [r0, r3]
    68b0:	469f      	mov	pc, r3
    68b2:	2f00      	cmp	r7, #0
    68b4:	d142      	bne.n	693c <__aeabi_fmul+0xf4>
    68b6:	2308      	movs	r3, #8
    68b8:	4699      	mov	r9, r3
    68ba:	3b06      	subs	r3, #6
    68bc:	26ff      	movs	r6, #255	; 0xff
    68be:	469a      	mov	sl, r3
    68c0:	e7da      	b.n	6878 <__aeabi_fmul+0x30>
    68c2:	4641      	mov	r1, r8
    68c4:	2a02      	cmp	r2, #2
    68c6:	d028      	beq.n	691a <__aeabi_fmul+0xd2>
    68c8:	2a03      	cmp	r2, #3
    68ca:	d100      	bne.n	68ce <__aeabi_fmul+0x86>
    68cc:	e0ce      	b.n	6a6c <__aeabi_fmul+0x224>
    68ce:	2a01      	cmp	r2, #1
    68d0:	d000      	beq.n	68d4 <__aeabi_fmul+0x8c>
    68d2:	e0ac      	b.n	6a2e <__aeabi_fmul+0x1e6>
    68d4:	4011      	ands	r1, r2
    68d6:	2000      	movs	r0, #0
    68d8:	2200      	movs	r2, #0
    68da:	b2cc      	uxtb	r4, r1
    68dc:	0240      	lsls	r0, r0, #9
    68de:	05d2      	lsls	r2, r2, #23
    68e0:	0a40      	lsrs	r0, r0, #9
    68e2:	07e4      	lsls	r4, r4, #31
    68e4:	4310      	orrs	r0, r2
    68e6:	4320      	orrs	r0, r4
    68e8:	bc3c      	pop	{r2, r3, r4, r5}
    68ea:	4690      	mov	r8, r2
    68ec:	4699      	mov	r9, r3
    68ee:	46a2      	mov	sl, r4
    68f0:	46ab      	mov	fp, r5
    68f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68f4:	2f00      	cmp	r7, #0
    68f6:	d115      	bne.n	6924 <__aeabi_fmul+0xdc>
    68f8:	2304      	movs	r3, #4
    68fa:	4699      	mov	r9, r3
    68fc:	3b03      	subs	r3, #3
    68fe:	2600      	movs	r6, #0
    6900:	469a      	mov	sl, r3
    6902:	e7b9      	b.n	6878 <__aeabi_fmul+0x30>
    6904:	20ff      	movs	r0, #255	; 0xff
    6906:	2202      	movs	r2, #2
    6908:	2d00      	cmp	r5, #0
    690a:	d0c5      	beq.n	6898 <__aeabi_fmul+0x50>
    690c:	2203      	movs	r2, #3
    690e:	e7c3      	b.n	6898 <__aeabi_fmul+0x50>
    6910:	2d00      	cmp	r5, #0
    6912:	d119      	bne.n	6948 <__aeabi_fmul+0x100>
    6914:	2000      	movs	r0, #0
    6916:	2201      	movs	r2, #1
    6918:	e7be      	b.n	6898 <__aeabi_fmul+0x50>
    691a:	2401      	movs	r4, #1
    691c:	22ff      	movs	r2, #255	; 0xff
    691e:	400c      	ands	r4, r1
    6920:	2000      	movs	r0, #0
    6922:	e7db      	b.n	68dc <__aeabi_fmul+0x94>
    6924:	0038      	movs	r0, r7
    6926:	f001 ff83 	bl	8830 <__clzsi2>
    692a:	2676      	movs	r6, #118	; 0x76
    692c:	1f43      	subs	r3, r0, #5
    692e:	409f      	lsls	r7, r3
    6930:	2300      	movs	r3, #0
    6932:	4276      	negs	r6, r6
    6934:	1a36      	subs	r6, r6, r0
    6936:	4699      	mov	r9, r3
    6938:	469a      	mov	sl, r3
    693a:	e79d      	b.n	6878 <__aeabi_fmul+0x30>
    693c:	230c      	movs	r3, #12
    693e:	4699      	mov	r9, r3
    6940:	3b09      	subs	r3, #9
    6942:	26ff      	movs	r6, #255	; 0xff
    6944:	469a      	mov	sl, r3
    6946:	e797      	b.n	6878 <__aeabi_fmul+0x30>
    6948:	0028      	movs	r0, r5
    694a:	f001 ff71 	bl	8830 <__clzsi2>
    694e:	1f43      	subs	r3, r0, #5
    6950:	409d      	lsls	r5, r3
    6952:	2376      	movs	r3, #118	; 0x76
    6954:	425b      	negs	r3, r3
    6956:	1a18      	subs	r0, r3, r0
    6958:	2200      	movs	r2, #0
    695a:	e79d      	b.n	6898 <__aeabi_fmul+0x50>
    695c:	2080      	movs	r0, #128	; 0x80
    695e:	2400      	movs	r4, #0
    6960:	03c0      	lsls	r0, r0, #15
    6962:	22ff      	movs	r2, #255	; 0xff
    6964:	e7ba      	b.n	68dc <__aeabi_fmul+0x94>
    6966:	003d      	movs	r5, r7
    6968:	4652      	mov	r2, sl
    696a:	e7ab      	b.n	68c4 <__aeabi_fmul+0x7c>
    696c:	003d      	movs	r5, r7
    696e:	0021      	movs	r1, r4
    6970:	4652      	mov	r2, sl
    6972:	e7a7      	b.n	68c4 <__aeabi_fmul+0x7c>
    6974:	0c3b      	lsrs	r3, r7, #16
    6976:	469c      	mov	ip, r3
    6978:	042a      	lsls	r2, r5, #16
    697a:	0c12      	lsrs	r2, r2, #16
    697c:	0c2b      	lsrs	r3, r5, #16
    697e:	0014      	movs	r4, r2
    6980:	4660      	mov	r0, ip
    6982:	4665      	mov	r5, ip
    6984:	043f      	lsls	r7, r7, #16
    6986:	0c3f      	lsrs	r7, r7, #16
    6988:	437c      	muls	r4, r7
    698a:	4342      	muls	r2, r0
    698c:	435d      	muls	r5, r3
    698e:	437b      	muls	r3, r7
    6990:	0c27      	lsrs	r7, r4, #16
    6992:	189b      	adds	r3, r3, r2
    6994:	18ff      	adds	r7, r7, r3
    6996:	42ba      	cmp	r2, r7
    6998:	d903      	bls.n	69a2 <__aeabi_fmul+0x15a>
    699a:	2380      	movs	r3, #128	; 0x80
    699c:	025b      	lsls	r3, r3, #9
    699e:	469c      	mov	ip, r3
    69a0:	4465      	add	r5, ip
    69a2:	0424      	lsls	r4, r4, #16
    69a4:	043a      	lsls	r2, r7, #16
    69a6:	0c24      	lsrs	r4, r4, #16
    69a8:	1912      	adds	r2, r2, r4
    69aa:	0193      	lsls	r3, r2, #6
    69ac:	1e5c      	subs	r4, r3, #1
    69ae:	41a3      	sbcs	r3, r4
    69b0:	0c3f      	lsrs	r7, r7, #16
    69b2:	0e92      	lsrs	r2, r2, #26
    69b4:	197d      	adds	r5, r7, r5
    69b6:	431a      	orrs	r2, r3
    69b8:	01ad      	lsls	r5, r5, #6
    69ba:	4315      	orrs	r5, r2
    69bc:	012b      	lsls	r3, r5, #4
    69be:	d504      	bpl.n	69ca <__aeabi_fmul+0x182>
    69c0:	2301      	movs	r3, #1
    69c2:	465e      	mov	r6, fp
    69c4:	086a      	lsrs	r2, r5, #1
    69c6:	401d      	ands	r5, r3
    69c8:	4315      	orrs	r5, r2
    69ca:	0032      	movs	r2, r6
    69cc:	327f      	adds	r2, #127	; 0x7f
    69ce:	2a00      	cmp	r2, #0
    69d0:	dd25      	ble.n	6a1e <__aeabi_fmul+0x1d6>
    69d2:	076b      	lsls	r3, r5, #29
    69d4:	d004      	beq.n	69e0 <__aeabi_fmul+0x198>
    69d6:	230f      	movs	r3, #15
    69d8:	402b      	ands	r3, r5
    69da:	2b04      	cmp	r3, #4
    69dc:	d000      	beq.n	69e0 <__aeabi_fmul+0x198>
    69de:	3504      	adds	r5, #4
    69e0:	012b      	lsls	r3, r5, #4
    69e2:	d503      	bpl.n	69ec <__aeabi_fmul+0x1a4>
    69e4:	0032      	movs	r2, r6
    69e6:	4b27      	ldr	r3, [pc, #156]	; (6a84 <__aeabi_fmul+0x23c>)
    69e8:	3280      	adds	r2, #128	; 0x80
    69ea:	401d      	ands	r5, r3
    69ec:	2afe      	cmp	r2, #254	; 0xfe
    69ee:	dc94      	bgt.n	691a <__aeabi_fmul+0xd2>
    69f0:	2401      	movs	r4, #1
    69f2:	01a8      	lsls	r0, r5, #6
    69f4:	0a40      	lsrs	r0, r0, #9
    69f6:	b2d2      	uxtb	r2, r2
    69f8:	400c      	ands	r4, r1
    69fa:	e76f      	b.n	68dc <__aeabi_fmul+0x94>
    69fc:	2080      	movs	r0, #128	; 0x80
    69fe:	03c0      	lsls	r0, r0, #15
    6a00:	4207      	tst	r7, r0
    6a02:	d007      	beq.n	6a14 <__aeabi_fmul+0x1cc>
    6a04:	4205      	tst	r5, r0
    6a06:	d105      	bne.n	6a14 <__aeabi_fmul+0x1cc>
    6a08:	4328      	orrs	r0, r5
    6a0a:	0240      	lsls	r0, r0, #9
    6a0c:	0a40      	lsrs	r0, r0, #9
    6a0e:	4644      	mov	r4, r8
    6a10:	22ff      	movs	r2, #255	; 0xff
    6a12:	e763      	b.n	68dc <__aeabi_fmul+0x94>
    6a14:	4338      	orrs	r0, r7
    6a16:	0240      	lsls	r0, r0, #9
    6a18:	0a40      	lsrs	r0, r0, #9
    6a1a:	22ff      	movs	r2, #255	; 0xff
    6a1c:	e75e      	b.n	68dc <__aeabi_fmul+0x94>
    6a1e:	2401      	movs	r4, #1
    6a20:	1aa3      	subs	r3, r4, r2
    6a22:	2b1b      	cmp	r3, #27
    6a24:	dd05      	ble.n	6a32 <__aeabi_fmul+0x1ea>
    6a26:	400c      	ands	r4, r1
    6a28:	2200      	movs	r2, #0
    6a2a:	2000      	movs	r0, #0
    6a2c:	e756      	b.n	68dc <__aeabi_fmul+0x94>
    6a2e:	465e      	mov	r6, fp
    6a30:	e7cb      	b.n	69ca <__aeabi_fmul+0x182>
    6a32:	002a      	movs	r2, r5
    6a34:	2020      	movs	r0, #32
    6a36:	40da      	lsrs	r2, r3
    6a38:	1ac3      	subs	r3, r0, r3
    6a3a:	409d      	lsls	r5, r3
    6a3c:	002b      	movs	r3, r5
    6a3e:	1e5d      	subs	r5, r3, #1
    6a40:	41ab      	sbcs	r3, r5
    6a42:	4313      	orrs	r3, r2
    6a44:	075a      	lsls	r2, r3, #29
    6a46:	d004      	beq.n	6a52 <__aeabi_fmul+0x20a>
    6a48:	220f      	movs	r2, #15
    6a4a:	401a      	ands	r2, r3
    6a4c:	2a04      	cmp	r2, #4
    6a4e:	d000      	beq.n	6a52 <__aeabi_fmul+0x20a>
    6a50:	3304      	adds	r3, #4
    6a52:	015a      	lsls	r2, r3, #5
    6a54:	d504      	bpl.n	6a60 <__aeabi_fmul+0x218>
    6a56:	2401      	movs	r4, #1
    6a58:	2201      	movs	r2, #1
    6a5a:	400c      	ands	r4, r1
    6a5c:	2000      	movs	r0, #0
    6a5e:	e73d      	b.n	68dc <__aeabi_fmul+0x94>
    6a60:	2401      	movs	r4, #1
    6a62:	019b      	lsls	r3, r3, #6
    6a64:	0a58      	lsrs	r0, r3, #9
    6a66:	400c      	ands	r4, r1
    6a68:	2200      	movs	r2, #0
    6a6a:	e737      	b.n	68dc <__aeabi_fmul+0x94>
    6a6c:	2080      	movs	r0, #128	; 0x80
    6a6e:	2401      	movs	r4, #1
    6a70:	03c0      	lsls	r0, r0, #15
    6a72:	4328      	orrs	r0, r5
    6a74:	0240      	lsls	r0, r0, #9
    6a76:	0a40      	lsrs	r0, r0, #9
    6a78:	400c      	ands	r4, r1
    6a7a:	22ff      	movs	r2, #255	; 0xff
    6a7c:	e72e      	b.n	68dc <__aeabi_fmul+0x94>
    6a7e:	46c0      	nop			; (mov r8, r8)
    6a80:	00008c90 	.word	0x00008c90
    6a84:	f7ffffff 	.word	0xf7ffffff

00006a88 <__aeabi_i2f>:
    6a88:	b570      	push	{r4, r5, r6, lr}
    6a8a:	2800      	cmp	r0, #0
    6a8c:	d030      	beq.n	6af0 <__aeabi_i2f+0x68>
    6a8e:	17c3      	asrs	r3, r0, #31
    6a90:	18c4      	adds	r4, r0, r3
    6a92:	405c      	eors	r4, r3
    6a94:	0fc5      	lsrs	r5, r0, #31
    6a96:	0020      	movs	r0, r4
    6a98:	f001 feca 	bl	8830 <__clzsi2>
    6a9c:	239e      	movs	r3, #158	; 0x9e
    6a9e:	1a1b      	subs	r3, r3, r0
    6aa0:	2b96      	cmp	r3, #150	; 0x96
    6aa2:	dc0d      	bgt.n	6ac0 <__aeabi_i2f+0x38>
    6aa4:	2296      	movs	r2, #150	; 0x96
    6aa6:	1ad2      	subs	r2, r2, r3
    6aa8:	4094      	lsls	r4, r2
    6aaa:	002a      	movs	r2, r5
    6aac:	0264      	lsls	r4, r4, #9
    6aae:	0a64      	lsrs	r4, r4, #9
    6ab0:	b2db      	uxtb	r3, r3
    6ab2:	0264      	lsls	r4, r4, #9
    6ab4:	05db      	lsls	r3, r3, #23
    6ab6:	0a60      	lsrs	r0, r4, #9
    6ab8:	07d2      	lsls	r2, r2, #31
    6aba:	4318      	orrs	r0, r3
    6abc:	4310      	orrs	r0, r2
    6abe:	bd70      	pop	{r4, r5, r6, pc}
    6ac0:	2b99      	cmp	r3, #153	; 0x99
    6ac2:	dc19      	bgt.n	6af8 <__aeabi_i2f+0x70>
    6ac4:	2299      	movs	r2, #153	; 0x99
    6ac6:	1ad2      	subs	r2, r2, r3
    6ac8:	2a00      	cmp	r2, #0
    6aca:	dd29      	ble.n	6b20 <__aeabi_i2f+0x98>
    6acc:	4094      	lsls	r4, r2
    6ace:	0022      	movs	r2, r4
    6ad0:	4c14      	ldr	r4, [pc, #80]	; (6b24 <__aeabi_i2f+0x9c>)
    6ad2:	4014      	ands	r4, r2
    6ad4:	0751      	lsls	r1, r2, #29
    6ad6:	d004      	beq.n	6ae2 <__aeabi_i2f+0x5a>
    6ad8:	210f      	movs	r1, #15
    6ada:	400a      	ands	r2, r1
    6adc:	2a04      	cmp	r2, #4
    6ade:	d000      	beq.n	6ae2 <__aeabi_i2f+0x5a>
    6ae0:	3404      	adds	r4, #4
    6ae2:	0162      	lsls	r2, r4, #5
    6ae4:	d413      	bmi.n	6b0e <__aeabi_i2f+0x86>
    6ae6:	01a4      	lsls	r4, r4, #6
    6ae8:	0a64      	lsrs	r4, r4, #9
    6aea:	b2db      	uxtb	r3, r3
    6aec:	002a      	movs	r2, r5
    6aee:	e7e0      	b.n	6ab2 <__aeabi_i2f+0x2a>
    6af0:	2200      	movs	r2, #0
    6af2:	2300      	movs	r3, #0
    6af4:	2400      	movs	r4, #0
    6af6:	e7dc      	b.n	6ab2 <__aeabi_i2f+0x2a>
    6af8:	2205      	movs	r2, #5
    6afa:	0021      	movs	r1, r4
    6afc:	1a12      	subs	r2, r2, r0
    6afe:	40d1      	lsrs	r1, r2
    6b00:	22b9      	movs	r2, #185	; 0xb9
    6b02:	1ad2      	subs	r2, r2, r3
    6b04:	4094      	lsls	r4, r2
    6b06:	1e62      	subs	r2, r4, #1
    6b08:	4194      	sbcs	r4, r2
    6b0a:	430c      	orrs	r4, r1
    6b0c:	e7da      	b.n	6ac4 <__aeabi_i2f+0x3c>
    6b0e:	4b05      	ldr	r3, [pc, #20]	; (6b24 <__aeabi_i2f+0x9c>)
    6b10:	002a      	movs	r2, r5
    6b12:	401c      	ands	r4, r3
    6b14:	239f      	movs	r3, #159	; 0x9f
    6b16:	01a4      	lsls	r4, r4, #6
    6b18:	1a1b      	subs	r3, r3, r0
    6b1a:	0a64      	lsrs	r4, r4, #9
    6b1c:	b2db      	uxtb	r3, r3
    6b1e:	e7c8      	b.n	6ab2 <__aeabi_i2f+0x2a>
    6b20:	0022      	movs	r2, r4
    6b22:	e7d5      	b.n	6ad0 <__aeabi_i2f+0x48>
    6b24:	fbffffff 	.word	0xfbffffff

00006b28 <__aeabi_dadd>:
    6b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b2a:	4645      	mov	r5, r8
    6b2c:	46de      	mov	lr, fp
    6b2e:	4657      	mov	r7, sl
    6b30:	464e      	mov	r6, r9
    6b32:	030c      	lsls	r4, r1, #12
    6b34:	b5e0      	push	{r5, r6, r7, lr}
    6b36:	004e      	lsls	r6, r1, #1
    6b38:	0fc9      	lsrs	r1, r1, #31
    6b3a:	4688      	mov	r8, r1
    6b3c:	000d      	movs	r5, r1
    6b3e:	0a61      	lsrs	r1, r4, #9
    6b40:	0f44      	lsrs	r4, r0, #29
    6b42:	430c      	orrs	r4, r1
    6b44:	00c7      	lsls	r7, r0, #3
    6b46:	0319      	lsls	r1, r3, #12
    6b48:	0058      	lsls	r0, r3, #1
    6b4a:	0fdb      	lsrs	r3, r3, #31
    6b4c:	469b      	mov	fp, r3
    6b4e:	0a4b      	lsrs	r3, r1, #9
    6b50:	0f51      	lsrs	r1, r2, #29
    6b52:	430b      	orrs	r3, r1
    6b54:	0d76      	lsrs	r6, r6, #21
    6b56:	0d40      	lsrs	r0, r0, #21
    6b58:	0019      	movs	r1, r3
    6b5a:	00d2      	lsls	r2, r2, #3
    6b5c:	45d8      	cmp	r8, fp
    6b5e:	d100      	bne.n	6b62 <__aeabi_dadd+0x3a>
    6b60:	e0ae      	b.n	6cc0 <__aeabi_dadd+0x198>
    6b62:	1a35      	subs	r5, r6, r0
    6b64:	2d00      	cmp	r5, #0
    6b66:	dc00      	bgt.n	6b6a <__aeabi_dadd+0x42>
    6b68:	e0f6      	b.n	6d58 <__aeabi_dadd+0x230>
    6b6a:	2800      	cmp	r0, #0
    6b6c:	d10f      	bne.n	6b8e <__aeabi_dadd+0x66>
    6b6e:	4313      	orrs	r3, r2
    6b70:	d100      	bne.n	6b74 <__aeabi_dadd+0x4c>
    6b72:	e0db      	b.n	6d2c <__aeabi_dadd+0x204>
    6b74:	1e6b      	subs	r3, r5, #1
    6b76:	2b00      	cmp	r3, #0
    6b78:	d000      	beq.n	6b7c <__aeabi_dadd+0x54>
    6b7a:	e137      	b.n	6dec <__aeabi_dadd+0x2c4>
    6b7c:	1aba      	subs	r2, r7, r2
    6b7e:	4297      	cmp	r7, r2
    6b80:	41bf      	sbcs	r7, r7
    6b82:	1a64      	subs	r4, r4, r1
    6b84:	427f      	negs	r7, r7
    6b86:	1be4      	subs	r4, r4, r7
    6b88:	2601      	movs	r6, #1
    6b8a:	0017      	movs	r7, r2
    6b8c:	e024      	b.n	6bd8 <__aeabi_dadd+0xb0>
    6b8e:	4bc6      	ldr	r3, [pc, #792]	; (6ea8 <__aeabi_dadd+0x380>)
    6b90:	429e      	cmp	r6, r3
    6b92:	d04d      	beq.n	6c30 <__aeabi_dadd+0x108>
    6b94:	2380      	movs	r3, #128	; 0x80
    6b96:	041b      	lsls	r3, r3, #16
    6b98:	4319      	orrs	r1, r3
    6b9a:	2d38      	cmp	r5, #56	; 0x38
    6b9c:	dd00      	ble.n	6ba0 <__aeabi_dadd+0x78>
    6b9e:	e107      	b.n	6db0 <__aeabi_dadd+0x288>
    6ba0:	2d1f      	cmp	r5, #31
    6ba2:	dd00      	ble.n	6ba6 <__aeabi_dadd+0x7e>
    6ba4:	e138      	b.n	6e18 <__aeabi_dadd+0x2f0>
    6ba6:	2020      	movs	r0, #32
    6ba8:	1b43      	subs	r3, r0, r5
    6baa:	469a      	mov	sl, r3
    6bac:	000b      	movs	r3, r1
    6bae:	4650      	mov	r0, sl
    6bb0:	4083      	lsls	r3, r0
    6bb2:	4699      	mov	r9, r3
    6bb4:	0013      	movs	r3, r2
    6bb6:	4648      	mov	r0, r9
    6bb8:	40eb      	lsrs	r3, r5
    6bba:	4318      	orrs	r0, r3
    6bbc:	0003      	movs	r3, r0
    6bbe:	4650      	mov	r0, sl
    6bc0:	4082      	lsls	r2, r0
    6bc2:	1e50      	subs	r0, r2, #1
    6bc4:	4182      	sbcs	r2, r0
    6bc6:	40e9      	lsrs	r1, r5
    6bc8:	431a      	orrs	r2, r3
    6bca:	1aba      	subs	r2, r7, r2
    6bcc:	1a61      	subs	r1, r4, r1
    6bce:	4297      	cmp	r7, r2
    6bd0:	41a4      	sbcs	r4, r4
    6bd2:	0017      	movs	r7, r2
    6bd4:	4264      	negs	r4, r4
    6bd6:	1b0c      	subs	r4, r1, r4
    6bd8:	0223      	lsls	r3, r4, #8
    6bda:	d562      	bpl.n	6ca2 <__aeabi_dadd+0x17a>
    6bdc:	0264      	lsls	r4, r4, #9
    6bde:	0a65      	lsrs	r5, r4, #9
    6be0:	2d00      	cmp	r5, #0
    6be2:	d100      	bne.n	6be6 <__aeabi_dadd+0xbe>
    6be4:	e0df      	b.n	6da6 <__aeabi_dadd+0x27e>
    6be6:	0028      	movs	r0, r5
    6be8:	f001 fe22 	bl	8830 <__clzsi2>
    6bec:	0003      	movs	r3, r0
    6bee:	3b08      	subs	r3, #8
    6bf0:	2b1f      	cmp	r3, #31
    6bf2:	dd00      	ble.n	6bf6 <__aeabi_dadd+0xce>
    6bf4:	e0d2      	b.n	6d9c <__aeabi_dadd+0x274>
    6bf6:	2220      	movs	r2, #32
    6bf8:	003c      	movs	r4, r7
    6bfa:	1ad2      	subs	r2, r2, r3
    6bfc:	409d      	lsls	r5, r3
    6bfe:	40d4      	lsrs	r4, r2
    6c00:	409f      	lsls	r7, r3
    6c02:	4325      	orrs	r5, r4
    6c04:	429e      	cmp	r6, r3
    6c06:	dd00      	ble.n	6c0a <__aeabi_dadd+0xe2>
    6c08:	e0c4      	b.n	6d94 <__aeabi_dadd+0x26c>
    6c0a:	1b9e      	subs	r6, r3, r6
    6c0c:	1c73      	adds	r3, r6, #1
    6c0e:	2b1f      	cmp	r3, #31
    6c10:	dd00      	ble.n	6c14 <__aeabi_dadd+0xec>
    6c12:	e0f1      	b.n	6df8 <__aeabi_dadd+0x2d0>
    6c14:	2220      	movs	r2, #32
    6c16:	0038      	movs	r0, r7
    6c18:	0029      	movs	r1, r5
    6c1a:	1ad2      	subs	r2, r2, r3
    6c1c:	40d8      	lsrs	r0, r3
    6c1e:	4091      	lsls	r1, r2
    6c20:	4097      	lsls	r7, r2
    6c22:	002c      	movs	r4, r5
    6c24:	4301      	orrs	r1, r0
    6c26:	1e78      	subs	r0, r7, #1
    6c28:	4187      	sbcs	r7, r0
    6c2a:	40dc      	lsrs	r4, r3
    6c2c:	2600      	movs	r6, #0
    6c2e:	430f      	orrs	r7, r1
    6c30:	077b      	lsls	r3, r7, #29
    6c32:	d009      	beq.n	6c48 <__aeabi_dadd+0x120>
    6c34:	230f      	movs	r3, #15
    6c36:	403b      	ands	r3, r7
    6c38:	2b04      	cmp	r3, #4
    6c3a:	d005      	beq.n	6c48 <__aeabi_dadd+0x120>
    6c3c:	1d3b      	adds	r3, r7, #4
    6c3e:	42bb      	cmp	r3, r7
    6c40:	41bf      	sbcs	r7, r7
    6c42:	427f      	negs	r7, r7
    6c44:	19e4      	adds	r4, r4, r7
    6c46:	001f      	movs	r7, r3
    6c48:	0223      	lsls	r3, r4, #8
    6c4a:	d52c      	bpl.n	6ca6 <__aeabi_dadd+0x17e>
    6c4c:	4b96      	ldr	r3, [pc, #600]	; (6ea8 <__aeabi_dadd+0x380>)
    6c4e:	3601      	adds	r6, #1
    6c50:	429e      	cmp	r6, r3
    6c52:	d100      	bne.n	6c56 <__aeabi_dadd+0x12e>
    6c54:	e09a      	b.n	6d8c <__aeabi_dadd+0x264>
    6c56:	4645      	mov	r5, r8
    6c58:	4b94      	ldr	r3, [pc, #592]	; (6eac <__aeabi_dadd+0x384>)
    6c5a:	08ff      	lsrs	r7, r7, #3
    6c5c:	401c      	ands	r4, r3
    6c5e:	0760      	lsls	r0, r4, #29
    6c60:	0576      	lsls	r6, r6, #21
    6c62:	0264      	lsls	r4, r4, #9
    6c64:	4307      	orrs	r7, r0
    6c66:	0b24      	lsrs	r4, r4, #12
    6c68:	0d76      	lsrs	r6, r6, #21
    6c6a:	2100      	movs	r1, #0
    6c6c:	0324      	lsls	r4, r4, #12
    6c6e:	0b23      	lsrs	r3, r4, #12
    6c70:	0d0c      	lsrs	r4, r1, #20
    6c72:	4a8f      	ldr	r2, [pc, #572]	; (6eb0 <__aeabi_dadd+0x388>)
    6c74:	0524      	lsls	r4, r4, #20
    6c76:	431c      	orrs	r4, r3
    6c78:	4014      	ands	r4, r2
    6c7a:	0533      	lsls	r3, r6, #20
    6c7c:	4323      	orrs	r3, r4
    6c7e:	005b      	lsls	r3, r3, #1
    6c80:	07ed      	lsls	r5, r5, #31
    6c82:	085b      	lsrs	r3, r3, #1
    6c84:	432b      	orrs	r3, r5
    6c86:	0038      	movs	r0, r7
    6c88:	0019      	movs	r1, r3
    6c8a:	bc3c      	pop	{r2, r3, r4, r5}
    6c8c:	4690      	mov	r8, r2
    6c8e:	4699      	mov	r9, r3
    6c90:	46a2      	mov	sl, r4
    6c92:	46ab      	mov	fp, r5
    6c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c96:	4664      	mov	r4, ip
    6c98:	4304      	orrs	r4, r0
    6c9a:	d100      	bne.n	6c9e <__aeabi_dadd+0x176>
    6c9c:	e211      	b.n	70c2 <__aeabi_dadd+0x59a>
    6c9e:	0004      	movs	r4, r0
    6ca0:	4667      	mov	r7, ip
    6ca2:	077b      	lsls	r3, r7, #29
    6ca4:	d1c6      	bne.n	6c34 <__aeabi_dadd+0x10c>
    6ca6:	4645      	mov	r5, r8
    6ca8:	0760      	lsls	r0, r4, #29
    6caa:	08ff      	lsrs	r7, r7, #3
    6cac:	4307      	orrs	r7, r0
    6cae:	08e4      	lsrs	r4, r4, #3
    6cb0:	4b7d      	ldr	r3, [pc, #500]	; (6ea8 <__aeabi_dadd+0x380>)
    6cb2:	429e      	cmp	r6, r3
    6cb4:	d030      	beq.n	6d18 <__aeabi_dadd+0x1f0>
    6cb6:	0324      	lsls	r4, r4, #12
    6cb8:	0576      	lsls	r6, r6, #21
    6cba:	0b24      	lsrs	r4, r4, #12
    6cbc:	0d76      	lsrs	r6, r6, #21
    6cbe:	e7d4      	b.n	6c6a <__aeabi_dadd+0x142>
    6cc0:	1a33      	subs	r3, r6, r0
    6cc2:	469a      	mov	sl, r3
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	dd78      	ble.n	6dba <__aeabi_dadd+0x292>
    6cc8:	2800      	cmp	r0, #0
    6cca:	d031      	beq.n	6d30 <__aeabi_dadd+0x208>
    6ccc:	4876      	ldr	r0, [pc, #472]	; (6ea8 <__aeabi_dadd+0x380>)
    6cce:	4286      	cmp	r6, r0
    6cd0:	d0ae      	beq.n	6c30 <__aeabi_dadd+0x108>
    6cd2:	2080      	movs	r0, #128	; 0x80
    6cd4:	0400      	lsls	r0, r0, #16
    6cd6:	4301      	orrs	r1, r0
    6cd8:	4653      	mov	r3, sl
    6cda:	2b38      	cmp	r3, #56	; 0x38
    6cdc:	dc00      	bgt.n	6ce0 <__aeabi_dadd+0x1b8>
    6cde:	e0e9      	b.n	6eb4 <__aeabi_dadd+0x38c>
    6ce0:	430a      	orrs	r2, r1
    6ce2:	1e51      	subs	r1, r2, #1
    6ce4:	418a      	sbcs	r2, r1
    6ce6:	2100      	movs	r1, #0
    6ce8:	19d2      	adds	r2, r2, r7
    6cea:	42ba      	cmp	r2, r7
    6cec:	41bf      	sbcs	r7, r7
    6cee:	1909      	adds	r1, r1, r4
    6cf0:	427c      	negs	r4, r7
    6cf2:	0017      	movs	r7, r2
    6cf4:	190c      	adds	r4, r1, r4
    6cf6:	0223      	lsls	r3, r4, #8
    6cf8:	d5d3      	bpl.n	6ca2 <__aeabi_dadd+0x17a>
    6cfa:	4b6b      	ldr	r3, [pc, #428]	; (6ea8 <__aeabi_dadd+0x380>)
    6cfc:	3601      	adds	r6, #1
    6cfe:	429e      	cmp	r6, r3
    6d00:	d100      	bne.n	6d04 <__aeabi_dadd+0x1dc>
    6d02:	e13a      	b.n	6f7a <__aeabi_dadd+0x452>
    6d04:	2001      	movs	r0, #1
    6d06:	4b69      	ldr	r3, [pc, #420]	; (6eac <__aeabi_dadd+0x384>)
    6d08:	401c      	ands	r4, r3
    6d0a:	087b      	lsrs	r3, r7, #1
    6d0c:	4007      	ands	r7, r0
    6d0e:	431f      	orrs	r7, r3
    6d10:	07e0      	lsls	r0, r4, #31
    6d12:	4307      	orrs	r7, r0
    6d14:	0864      	lsrs	r4, r4, #1
    6d16:	e78b      	b.n	6c30 <__aeabi_dadd+0x108>
    6d18:	0023      	movs	r3, r4
    6d1a:	433b      	orrs	r3, r7
    6d1c:	d100      	bne.n	6d20 <__aeabi_dadd+0x1f8>
    6d1e:	e1cb      	b.n	70b8 <__aeabi_dadd+0x590>
    6d20:	2280      	movs	r2, #128	; 0x80
    6d22:	0312      	lsls	r2, r2, #12
    6d24:	4314      	orrs	r4, r2
    6d26:	0324      	lsls	r4, r4, #12
    6d28:	0b24      	lsrs	r4, r4, #12
    6d2a:	e79e      	b.n	6c6a <__aeabi_dadd+0x142>
    6d2c:	002e      	movs	r6, r5
    6d2e:	e77f      	b.n	6c30 <__aeabi_dadd+0x108>
    6d30:	0008      	movs	r0, r1
    6d32:	4310      	orrs	r0, r2
    6d34:	d100      	bne.n	6d38 <__aeabi_dadd+0x210>
    6d36:	e0b4      	b.n	6ea2 <__aeabi_dadd+0x37a>
    6d38:	1e58      	subs	r0, r3, #1
    6d3a:	2800      	cmp	r0, #0
    6d3c:	d000      	beq.n	6d40 <__aeabi_dadd+0x218>
    6d3e:	e0de      	b.n	6efe <__aeabi_dadd+0x3d6>
    6d40:	18ba      	adds	r2, r7, r2
    6d42:	42ba      	cmp	r2, r7
    6d44:	419b      	sbcs	r3, r3
    6d46:	1864      	adds	r4, r4, r1
    6d48:	425b      	negs	r3, r3
    6d4a:	18e4      	adds	r4, r4, r3
    6d4c:	0017      	movs	r7, r2
    6d4e:	2601      	movs	r6, #1
    6d50:	0223      	lsls	r3, r4, #8
    6d52:	d5a6      	bpl.n	6ca2 <__aeabi_dadd+0x17a>
    6d54:	2602      	movs	r6, #2
    6d56:	e7d5      	b.n	6d04 <__aeabi_dadd+0x1dc>
    6d58:	2d00      	cmp	r5, #0
    6d5a:	d16e      	bne.n	6e3a <__aeabi_dadd+0x312>
    6d5c:	1c70      	adds	r0, r6, #1
    6d5e:	0540      	lsls	r0, r0, #21
    6d60:	0d40      	lsrs	r0, r0, #21
    6d62:	2801      	cmp	r0, #1
    6d64:	dc00      	bgt.n	6d68 <__aeabi_dadd+0x240>
    6d66:	e0f9      	b.n	6f5c <__aeabi_dadd+0x434>
    6d68:	1ab8      	subs	r0, r7, r2
    6d6a:	4684      	mov	ip, r0
    6d6c:	4287      	cmp	r7, r0
    6d6e:	4180      	sbcs	r0, r0
    6d70:	1ae5      	subs	r5, r4, r3
    6d72:	4240      	negs	r0, r0
    6d74:	1a2d      	subs	r5, r5, r0
    6d76:	0228      	lsls	r0, r5, #8
    6d78:	d400      	bmi.n	6d7c <__aeabi_dadd+0x254>
    6d7a:	e089      	b.n	6e90 <__aeabi_dadd+0x368>
    6d7c:	1bd7      	subs	r7, r2, r7
    6d7e:	42ba      	cmp	r2, r7
    6d80:	4192      	sbcs	r2, r2
    6d82:	1b1c      	subs	r4, r3, r4
    6d84:	4252      	negs	r2, r2
    6d86:	1aa5      	subs	r5, r4, r2
    6d88:	46d8      	mov	r8, fp
    6d8a:	e729      	b.n	6be0 <__aeabi_dadd+0xb8>
    6d8c:	4645      	mov	r5, r8
    6d8e:	2400      	movs	r4, #0
    6d90:	2700      	movs	r7, #0
    6d92:	e76a      	b.n	6c6a <__aeabi_dadd+0x142>
    6d94:	4c45      	ldr	r4, [pc, #276]	; (6eac <__aeabi_dadd+0x384>)
    6d96:	1af6      	subs	r6, r6, r3
    6d98:	402c      	ands	r4, r5
    6d9a:	e749      	b.n	6c30 <__aeabi_dadd+0x108>
    6d9c:	003d      	movs	r5, r7
    6d9e:	3828      	subs	r0, #40	; 0x28
    6da0:	4085      	lsls	r5, r0
    6da2:	2700      	movs	r7, #0
    6da4:	e72e      	b.n	6c04 <__aeabi_dadd+0xdc>
    6da6:	0038      	movs	r0, r7
    6da8:	f001 fd42 	bl	8830 <__clzsi2>
    6dac:	3020      	adds	r0, #32
    6dae:	e71d      	b.n	6bec <__aeabi_dadd+0xc4>
    6db0:	430a      	orrs	r2, r1
    6db2:	1e51      	subs	r1, r2, #1
    6db4:	418a      	sbcs	r2, r1
    6db6:	2100      	movs	r1, #0
    6db8:	e707      	b.n	6bca <__aeabi_dadd+0xa2>
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d000      	beq.n	6dc0 <__aeabi_dadd+0x298>
    6dbe:	e0f3      	b.n	6fa8 <__aeabi_dadd+0x480>
    6dc0:	1c70      	adds	r0, r6, #1
    6dc2:	0543      	lsls	r3, r0, #21
    6dc4:	0d5b      	lsrs	r3, r3, #21
    6dc6:	2b01      	cmp	r3, #1
    6dc8:	dc00      	bgt.n	6dcc <__aeabi_dadd+0x2a4>
    6dca:	e0ad      	b.n	6f28 <__aeabi_dadd+0x400>
    6dcc:	4b36      	ldr	r3, [pc, #216]	; (6ea8 <__aeabi_dadd+0x380>)
    6dce:	4298      	cmp	r0, r3
    6dd0:	d100      	bne.n	6dd4 <__aeabi_dadd+0x2ac>
    6dd2:	e0d1      	b.n	6f78 <__aeabi_dadd+0x450>
    6dd4:	18ba      	adds	r2, r7, r2
    6dd6:	42ba      	cmp	r2, r7
    6dd8:	41bf      	sbcs	r7, r7
    6dda:	1864      	adds	r4, r4, r1
    6ddc:	427f      	negs	r7, r7
    6dde:	19e4      	adds	r4, r4, r7
    6de0:	07e7      	lsls	r7, r4, #31
    6de2:	0852      	lsrs	r2, r2, #1
    6de4:	4317      	orrs	r7, r2
    6de6:	0864      	lsrs	r4, r4, #1
    6de8:	0006      	movs	r6, r0
    6dea:	e721      	b.n	6c30 <__aeabi_dadd+0x108>
    6dec:	482e      	ldr	r0, [pc, #184]	; (6ea8 <__aeabi_dadd+0x380>)
    6dee:	4285      	cmp	r5, r0
    6df0:	d100      	bne.n	6df4 <__aeabi_dadd+0x2cc>
    6df2:	e093      	b.n	6f1c <__aeabi_dadd+0x3f4>
    6df4:	001d      	movs	r5, r3
    6df6:	e6d0      	b.n	6b9a <__aeabi_dadd+0x72>
    6df8:	0029      	movs	r1, r5
    6dfa:	3e1f      	subs	r6, #31
    6dfc:	40f1      	lsrs	r1, r6
    6dfe:	2b20      	cmp	r3, #32
    6e00:	d100      	bne.n	6e04 <__aeabi_dadd+0x2dc>
    6e02:	e08d      	b.n	6f20 <__aeabi_dadd+0x3f8>
    6e04:	2240      	movs	r2, #64	; 0x40
    6e06:	1ad3      	subs	r3, r2, r3
    6e08:	409d      	lsls	r5, r3
    6e0a:	432f      	orrs	r7, r5
    6e0c:	1e7d      	subs	r5, r7, #1
    6e0e:	41af      	sbcs	r7, r5
    6e10:	2400      	movs	r4, #0
    6e12:	430f      	orrs	r7, r1
    6e14:	2600      	movs	r6, #0
    6e16:	e744      	b.n	6ca2 <__aeabi_dadd+0x17a>
    6e18:	002b      	movs	r3, r5
    6e1a:	0008      	movs	r0, r1
    6e1c:	3b20      	subs	r3, #32
    6e1e:	40d8      	lsrs	r0, r3
    6e20:	0003      	movs	r3, r0
    6e22:	2d20      	cmp	r5, #32
    6e24:	d100      	bne.n	6e28 <__aeabi_dadd+0x300>
    6e26:	e07d      	b.n	6f24 <__aeabi_dadd+0x3fc>
    6e28:	2040      	movs	r0, #64	; 0x40
    6e2a:	1b45      	subs	r5, r0, r5
    6e2c:	40a9      	lsls	r1, r5
    6e2e:	430a      	orrs	r2, r1
    6e30:	1e51      	subs	r1, r2, #1
    6e32:	418a      	sbcs	r2, r1
    6e34:	2100      	movs	r1, #0
    6e36:	431a      	orrs	r2, r3
    6e38:	e6c7      	b.n	6bca <__aeabi_dadd+0xa2>
    6e3a:	2e00      	cmp	r6, #0
    6e3c:	d050      	beq.n	6ee0 <__aeabi_dadd+0x3b8>
    6e3e:	4e1a      	ldr	r6, [pc, #104]	; (6ea8 <__aeabi_dadd+0x380>)
    6e40:	42b0      	cmp	r0, r6
    6e42:	d057      	beq.n	6ef4 <__aeabi_dadd+0x3cc>
    6e44:	2680      	movs	r6, #128	; 0x80
    6e46:	426b      	negs	r3, r5
    6e48:	4699      	mov	r9, r3
    6e4a:	0436      	lsls	r6, r6, #16
    6e4c:	4334      	orrs	r4, r6
    6e4e:	464b      	mov	r3, r9
    6e50:	2b38      	cmp	r3, #56	; 0x38
    6e52:	dd00      	ble.n	6e56 <__aeabi_dadd+0x32e>
    6e54:	e0d6      	b.n	7004 <__aeabi_dadd+0x4dc>
    6e56:	2b1f      	cmp	r3, #31
    6e58:	dd00      	ble.n	6e5c <__aeabi_dadd+0x334>
    6e5a:	e135      	b.n	70c8 <__aeabi_dadd+0x5a0>
    6e5c:	2620      	movs	r6, #32
    6e5e:	1af5      	subs	r5, r6, r3
    6e60:	0026      	movs	r6, r4
    6e62:	40ae      	lsls	r6, r5
    6e64:	46b2      	mov	sl, r6
    6e66:	003e      	movs	r6, r7
    6e68:	40de      	lsrs	r6, r3
    6e6a:	46ac      	mov	ip, r5
    6e6c:	0035      	movs	r5, r6
    6e6e:	4656      	mov	r6, sl
    6e70:	432e      	orrs	r6, r5
    6e72:	4665      	mov	r5, ip
    6e74:	40af      	lsls	r7, r5
    6e76:	1e7d      	subs	r5, r7, #1
    6e78:	41af      	sbcs	r7, r5
    6e7a:	40dc      	lsrs	r4, r3
    6e7c:	4337      	orrs	r7, r6
    6e7e:	1bd7      	subs	r7, r2, r7
    6e80:	42ba      	cmp	r2, r7
    6e82:	4192      	sbcs	r2, r2
    6e84:	1b0c      	subs	r4, r1, r4
    6e86:	4252      	negs	r2, r2
    6e88:	1aa4      	subs	r4, r4, r2
    6e8a:	0006      	movs	r6, r0
    6e8c:	46d8      	mov	r8, fp
    6e8e:	e6a3      	b.n	6bd8 <__aeabi_dadd+0xb0>
    6e90:	4664      	mov	r4, ip
    6e92:	4667      	mov	r7, ip
    6e94:	432c      	orrs	r4, r5
    6e96:	d000      	beq.n	6e9a <__aeabi_dadd+0x372>
    6e98:	e6a2      	b.n	6be0 <__aeabi_dadd+0xb8>
    6e9a:	2500      	movs	r5, #0
    6e9c:	2600      	movs	r6, #0
    6e9e:	2700      	movs	r7, #0
    6ea0:	e706      	b.n	6cb0 <__aeabi_dadd+0x188>
    6ea2:	001e      	movs	r6, r3
    6ea4:	e6c4      	b.n	6c30 <__aeabi_dadd+0x108>
    6ea6:	46c0      	nop			; (mov r8, r8)
    6ea8:	000007ff 	.word	0x000007ff
    6eac:	ff7fffff 	.word	0xff7fffff
    6eb0:	800fffff 	.word	0x800fffff
    6eb4:	2b1f      	cmp	r3, #31
    6eb6:	dc63      	bgt.n	6f80 <__aeabi_dadd+0x458>
    6eb8:	2020      	movs	r0, #32
    6eba:	1ac3      	subs	r3, r0, r3
    6ebc:	0008      	movs	r0, r1
    6ebe:	4098      	lsls	r0, r3
    6ec0:	469c      	mov	ip, r3
    6ec2:	4683      	mov	fp, r0
    6ec4:	4653      	mov	r3, sl
    6ec6:	0010      	movs	r0, r2
    6ec8:	40d8      	lsrs	r0, r3
    6eca:	0003      	movs	r3, r0
    6ecc:	4658      	mov	r0, fp
    6ece:	4318      	orrs	r0, r3
    6ed0:	4663      	mov	r3, ip
    6ed2:	409a      	lsls	r2, r3
    6ed4:	1e53      	subs	r3, r2, #1
    6ed6:	419a      	sbcs	r2, r3
    6ed8:	4653      	mov	r3, sl
    6eda:	4302      	orrs	r2, r0
    6edc:	40d9      	lsrs	r1, r3
    6ede:	e703      	b.n	6ce8 <__aeabi_dadd+0x1c0>
    6ee0:	0026      	movs	r6, r4
    6ee2:	433e      	orrs	r6, r7
    6ee4:	d006      	beq.n	6ef4 <__aeabi_dadd+0x3cc>
    6ee6:	43eb      	mvns	r3, r5
    6ee8:	4699      	mov	r9, r3
    6eea:	2b00      	cmp	r3, #0
    6eec:	d0c7      	beq.n	6e7e <__aeabi_dadd+0x356>
    6eee:	4e94      	ldr	r6, [pc, #592]	; (7140 <__aeabi_dadd+0x618>)
    6ef0:	42b0      	cmp	r0, r6
    6ef2:	d1ac      	bne.n	6e4e <__aeabi_dadd+0x326>
    6ef4:	000c      	movs	r4, r1
    6ef6:	0017      	movs	r7, r2
    6ef8:	0006      	movs	r6, r0
    6efa:	46d8      	mov	r8, fp
    6efc:	e698      	b.n	6c30 <__aeabi_dadd+0x108>
    6efe:	4b90      	ldr	r3, [pc, #576]	; (7140 <__aeabi_dadd+0x618>)
    6f00:	459a      	cmp	sl, r3
    6f02:	d00b      	beq.n	6f1c <__aeabi_dadd+0x3f4>
    6f04:	4682      	mov	sl, r0
    6f06:	e6e7      	b.n	6cd8 <__aeabi_dadd+0x1b0>
    6f08:	2800      	cmp	r0, #0
    6f0a:	d000      	beq.n	6f0e <__aeabi_dadd+0x3e6>
    6f0c:	e09e      	b.n	704c <__aeabi_dadd+0x524>
    6f0e:	0018      	movs	r0, r3
    6f10:	4310      	orrs	r0, r2
    6f12:	d100      	bne.n	6f16 <__aeabi_dadd+0x3ee>
    6f14:	e0e9      	b.n	70ea <__aeabi_dadd+0x5c2>
    6f16:	001c      	movs	r4, r3
    6f18:	0017      	movs	r7, r2
    6f1a:	46d8      	mov	r8, fp
    6f1c:	4e88      	ldr	r6, [pc, #544]	; (7140 <__aeabi_dadd+0x618>)
    6f1e:	e687      	b.n	6c30 <__aeabi_dadd+0x108>
    6f20:	2500      	movs	r5, #0
    6f22:	e772      	b.n	6e0a <__aeabi_dadd+0x2e2>
    6f24:	2100      	movs	r1, #0
    6f26:	e782      	b.n	6e2e <__aeabi_dadd+0x306>
    6f28:	0023      	movs	r3, r4
    6f2a:	433b      	orrs	r3, r7
    6f2c:	2e00      	cmp	r6, #0
    6f2e:	d000      	beq.n	6f32 <__aeabi_dadd+0x40a>
    6f30:	e0ab      	b.n	708a <__aeabi_dadd+0x562>
    6f32:	2b00      	cmp	r3, #0
    6f34:	d100      	bne.n	6f38 <__aeabi_dadd+0x410>
    6f36:	e0e7      	b.n	7108 <__aeabi_dadd+0x5e0>
    6f38:	000b      	movs	r3, r1
    6f3a:	4313      	orrs	r3, r2
    6f3c:	d100      	bne.n	6f40 <__aeabi_dadd+0x418>
    6f3e:	e677      	b.n	6c30 <__aeabi_dadd+0x108>
    6f40:	18ba      	adds	r2, r7, r2
    6f42:	42ba      	cmp	r2, r7
    6f44:	41bf      	sbcs	r7, r7
    6f46:	1864      	adds	r4, r4, r1
    6f48:	427f      	negs	r7, r7
    6f4a:	19e4      	adds	r4, r4, r7
    6f4c:	0223      	lsls	r3, r4, #8
    6f4e:	d400      	bmi.n	6f52 <__aeabi_dadd+0x42a>
    6f50:	e0f2      	b.n	7138 <__aeabi_dadd+0x610>
    6f52:	4b7c      	ldr	r3, [pc, #496]	; (7144 <__aeabi_dadd+0x61c>)
    6f54:	0017      	movs	r7, r2
    6f56:	401c      	ands	r4, r3
    6f58:	0006      	movs	r6, r0
    6f5a:	e669      	b.n	6c30 <__aeabi_dadd+0x108>
    6f5c:	0020      	movs	r0, r4
    6f5e:	4338      	orrs	r0, r7
    6f60:	2e00      	cmp	r6, #0
    6f62:	d1d1      	bne.n	6f08 <__aeabi_dadd+0x3e0>
    6f64:	2800      	cmp	r0, #0
    6f66:	d15b      	bne.n	7020 <__aeabi_dadd+0x4f8>
    6f68:	001c      	movs	r4, r3
    6f6a:	4314      	orrs	r4, r2
    6f6c:	d100      	bne.n	6f70 <__aeabi_dadd+0x448>
    6f6e:	e0a8      	b.n	70c2 <__aeabi_dadd+0x59a>
    6f70:	001c      	movs	r4, r3
    6f72:	0017      	movs	r7, r2
    6f74:	46d8      	mov	r8, fp
    6f76:	e65b      	b.n	6c30 <__aeabi_dadd+0x108>
    6f78:	0006      	movs	r6, r0
    6f7a:	2400      	movs	r4, #0
    6f7c:	2700      	movs	r7, #0
    6f7e:	e697      	b.n	6cb0 <__aeabi_dadd+0x188>
    6f80:	4650      	mov	r0, sl
    6f82:	000b      	movs	r3, r1
    6f84:	3820      	subs	r0, #32
    6f86:	40c3      	lsrs	r3, r0
    6f88:	4699      	mov	r9, r3
    6f8a:	4653      	mov	r3, sl
    6f8c:	2b20      	cmp	r3, #32
    6f8e:	d100      	bne.n	6f92 <__aeabi_dadd+0x46a>
    6f90:	e095      	b.n	70be <__aeabi_dadd+0x596>
    6f92:	2340      	movs	r3, #64	; 0x40
    6f94:	4650      	mov	r0, sl
    6f96:	1a1b      	subs	r3, r3, r0
    6f98:	4099      	lsls	r1, r3
    6f9a:	430a      	orrs	r2, r1
    6f9c:	1e51      	subs	r1, r2, #1
    6f9e:	418a      	sbcs	r2, r1
    6fa0:	464b      	mov	r3, r9
    6fa2:	2100      	movs	r1, #0
    6fa4:	431a      	orrs	r2, r3
    6fa6:	e69f      	b.n	6ce8 <__aeabi_dadd+0x1c0>
    6fa8:	2e00      	cmp	r6, #0
    6faa:	d130      	bne.n	700e <__aeabi_dadd+0x4e6>
    6fac:	0026      	movs	r6, r4
    6fae:	433e      	orrs	r6, r7
    6fb0:	d067      	beq.n	7082 <__aeabi_dadd+0x55a>
    6fb2:	43db      	mvns	r3, r3
    6fb4:	469a      	mov	sl, r3
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d01c      	beq.n	6ff4 <__aeabi_dadd+0x4cc>
    6fba:	4e61      	ldr	r6, [pc, #388]	; (7140 <__aeabi_dadd+0x618>)
    6fbc:	42b0      	cmp	r0, r6
    6fbe:	d060      	beq.n	7082 <__aeabi_dadd+0x55a>
    6fc0:	4653      	mov	r3, sl
    6fc2:	2b38      	cmp	r3, #56	; 0x38
    6fc4:	dd00      	ble.n	6fc8 <__aeabi_dadd+0x4a0>
    6fc6:	e096      	b.n	70f6 <__aeabi_dadd+0x5ce>
    6fc8:	2b1f      	cmp	r3, #31
    6fca:	dd00      	ble.n	6fce <__aeabi_dadd+0x4a6>
    6fcc:	e09f      	b.n	710e <__aeabi_dadd+0x5e6>
    6fce:	2620      	movs	r6, #32
    6fd0:	1af3      	subs	r3, r6, r3
    6fd2:	0026      	movs	r6, r4
    6fd4:	409e      	lsls	r6, r3
    6fd6:	469c      	mov	ip, r3
    6fd8:	46b3      	mov	fp, r6
    6fda:	4653      	mov	r3, sl
    6fdc:	003e      	movs	r6, r7
    6fde:	40de      	lsrs	r6, r3
    6fe0:	0033      	movs	r3, r6
    6fe2:	465e      	mov	r6, fp
    6fe4:	431e      	orrs	r6, r3
    6fe6:	4663      	mov	r3, ip
    6fe8:	409f      	lsls	r7, r3
    6fea:	1e7b      	subs	r3, r7, #1
    6fec:	419f      	sbcs	r7, r3
    6fee:	4653      	mov	r3, sl
    6ff0:	40dc      	lsrs	r4, r3
    6ff2:	4337      	orrs	r7, r6
    6ff4:	18bf      	adds	r7, r7, r2
    6ff6:	4297      	cmp	r7, r2
    6ff8:	4192      	sbcs	r2, r2
    6ffa:	1864      	adds	r4, r4, r1
    6ffc:	4252      	negs	r2, r2
    6ffe:	18a4      	adds	r4, r4, r2
    7000:	0006      	movs	r6, r0
    7002:	e678      	b.n	6cf6 <__aeabi_dadd+0x1ce>
    7004:	4327      	orrs	r7, r4
    7006:	1e7c      	subs	r4, r7, #1
    7008:	41a7      	sbcs	r7, r4
    700a:	2400      	movs	r4, #0
    700c:	e737      	b.n	6e7e <__aeabi_dadd+0x356>
    700e:	4e4c      	ldr	r6, [pc, #304]	; (7140 <__aeabi_dadd+0x618>)
    7010:	42b0      	cmp	r0, r6
    7012:	d036      	beq.n	7082 <__aeabi_dadd+0x55a>
    7014:	2680      	movs	r6, #128	; 0x80
    7016:	425b      	negs	r3, r3
    7018:	0436      	lsls	r6, r6, #16
    701a:	469a      	mov	sl, r3
    701c:	4334      	orrs	r4, r6
    701e:	e7cf      	b.n	6fc0 <__aeabi_dadd+0x498>
    7020:	0018      	movs	r0, r3
    7022:	4310      	orrs	r0, r2
    7024:	d100      	bne.n	7028 <__aeabi_dadd+0x500>
    7026:	e603      	b.n	6c30 <__aeabi_dadd+0x108>
    7028:	1ab8      	subs	r0, r7, r2
    702a:	4684      	mov	ip, r0
    702c:	4567      	cmp	r7, ip
    702e:	41ad      	sbcs	r5, r5
    7030:	1ae0      	subs	r0, r4, r3
    7032:	426d      	negs	r5, r5
    7034:	1b40      	subs	r0, r0, r5
    7036:	0205      	lsls	r5, r0, #8
    7038:	d400      	bmi.n	703c <__aeabi_dadd+0x514>
    703a:	e62c      	b.n	6c96 <__aeabi_dadd+0x16e>
    703c:	1bd7      	subs	r7, r2, r7
    703e:	42ba      	cmp	r2, r7
    7040:	4192      	sbcs	r2, r2
    7042:	1b1c      	subs	r4, r3, r4
    7044:	4252      	negs	r2, r2
    7046:	1aa4      	subs	r4, r4, r2
    7048:	46d8      	mov	r8, fp
    704a:	e5f1      	b.n	6c30 <__aeabi_dadd+0x108>
    704c:	0018      	movs	r0, r3
    704e:	4310      	orrs	r0, r2
    7050:	d100      	bne.n	7054 <__aeabi_dadd+0x52c>
    7052:	e763      	b.n	6f1c <__aeabi_dadd+0x3f4>
    7054:	08f8      	lsrs	r0, r7, #3
    7056:	0767      	lsls	r7, r4, #29
    7058:	4307      	orrs	r7, r0
    705a:	2080      	movs	r0, #128	; 0x80
    705c:	08e4      	lsrs	r4, r4, #3
    705e:	0300      	lsls	r0, r0, #12
    7060:	4204      	tst	r4, r0
    7062:	d008      	beq.n	7076 <__aeabi_dadd+0x54e>
    7064:	08dd      	lsrs	r5, r3, #3
    7066:	4205      	tst	r5, r0
    7068:	d105      	bne.n	7076 <__aeabi_dadd+0x54e>
    706a:	08d2      	lsrs	r2, r2, #3
    706c:	0759      	lsls	r1, r3, #29
    706e:	4311      	orrs	r1, r2
    7070:	000f      	movs	r7, r1
    7072:	002c      	movs	r4, r5
    7074:	46d8      	mov	r8, fp
    7076:	0f7b      	lsrs	r3, r7, #29
    7078:	00e4      	lsls	r4, r4, #3
    707a:	431c      	orrs	r4, r3
    707c:	00ff      	lsls	r7, r7, #3
    707e:	4e30      	ldr	r6, [pc, #192]	; (7140 <__aeabi_dadd+0x618>)
    7080:	e5d6      	b.n	6c30 <__aeabi_dadd+0x108>
    7082:	000c      	movs	r4, r1
    7084:	0017      	movs	r7, r2
    7086:	0006      	movs	r6, r0
    7088:	e5d2      	b.n	6c30 <__aeabi_dadd+0x108>
    708a:	2b00      	cmp	r3, #0
    708c:	d038      	beq.n	7100 <__aeabi_dadd+0x5d8>
    708e:	000b      	movs	r3, r1
    7090:	4313      	orrs	r3, r2
    7092:	d100      	bne.n	7096 <__aeabi_dadd+0x56e>
    7094:	e742      	b.n	6f1c <__aeabi_dadd+0x3f4>
    7096:	08f8      	lsrs	r0, r7, #3
    7098:	0767      	lsls	r7, r4, #29
    709a:	4307      	orrs	r7, r0
    709c:	2080      	movs	r0, #128	; 0x80
    709e:	08e4      	lsrs	r4, r4, #3
    70a0:	0300      	lsls	r0, r0, #12
    70a2:	4204      	tst	r4, r0
    70a4:	d0e7      	beq.n	7076 <__aeabi_dadd+0x54e>
    70a6:	08cb      	lsrs	r3, r1, #3
    70a8:	4203      	tst	r3, r0
    70aa:	d1e4      	bne.n	7076 <__aeabi_dadd+0x54e>
    70ac:	08d2      	lsrs	r2, r2, #3
    70ae:	0749      	lsls	r1, r1, #29
    70b0:	4311      	orrs	r1, r2
    70b2:	000f      	movs	r7, r1
    70b4:	001c      	movs	r4, r3
    70b6:	e7de      	b.n	7076 <__aeabi_dadd+0x54e>
    70b8:	2700      	movs	r7, #0
    70ba:	2400      	movs	r4, #0
    70bc:	e5d5      	b.n	6c6a <__aeabi_dadd+0x142>
    70be:	2100      	movs	r1, #0
    70c0:	e76b      	b.n	6f9a <__aeabi_dadd+0x472>
    70c2:	2500      	movs	r5, #0
    70c4:	2700      	movs	r7, #0
    70c6:	e5f3      	b.n	6cb0 <__aeabi_dadd+0x188>
    70c8:	464e      	mov	r6, r9
    70ca:	0025      	movs	r5, r4
    70cc:	3e20      	subs	r6, #32
    70ce:	40f5      	lsrs	r5, r6
    70d0:	464b      	mov	r3, r9
    70d2:	002e      	movs	r6, r5
    70d4:	2b20      	cmp	r3, #32
    70d6:	d02d      	beq.n	7134 <__aeabi_dadd+0x60c>
    70d8:	2540      	movs	r5, #64	; 0x40
    70da:	1aed      	subs	r5, r5, r3
    70dc:	40ac      	lsls	r4, r5
    70de:	4327      	orrs	r7, r4
    70e0:	1e7c      	subs	r4, r7, #1
    70e2:	41a7      	sbcs	r7, r4
    70e4:	2400      	movs	r4, #0
    70e6:	4337      	orrs	r7, r6
    70e8:	e6c9      	b.n	6e7e <__aeabi_dadd+0x356>
    70ea:	2480      	movs	r4, #128	; 0x80
    70ec:	2500      	movs	r5, #0
    70ee:	0324      	lsls	r4, r4, #12
    70f0:	4e13      	ldr	r6, [pc, #76]	; (7140 <__aeabi_dadd+0x618>)
    70f2:	2700      	movs	r7, #0
    70f4:	e5dc      	b.n	6cb0 <__aeabi_dadd+0x188>
    70f6:	4327      	orrs	r7, r4
    70f8:	1e7c      	subs	r4, r7, #1
    70fa:	41a7      	sbcs	r7, r4
    70fc:	2400      	movs	r4, #0
    70fe:	e779      	b.n	6ff4 <__aeabi_dadd+0x4cc>
    7100:	000c      	movs	r4, r1
    7102:	0017      	movs	r7, r2
    7104:	4e0e      	ldr	r6, [pc, #56]	; (7140 <__aeabi_dadd+0x618>)
    7106:	e593      	b.n	6c30 <__aeabi_dadd+0x108>
    7108:	000c      	movs	r4, r1
    710a:	0017      	movs	r7, r2
    710c:	e590      	b.n	6c30 <__aeabi_dadd+0x108>
    710e:	4656      	mov	r6, sl
    7110:	0023      	movs	r3, r4
    7112:	3e20      	subs	r6, #32
    7114:	40f3      	lsrs	r3, r6
    7116:	4699      	mov	r9, r3
    7118:	4653      	mov	r3, sl
    711a:	2b20      	cmp	r3, #32
    711c:	d00e      	beq.n	713c <__aeabi_dadd+0x614>
    711e:	2340      	movs	r3, #64	; 0x40
    7120:	4656      	mov	r6, sl
    7122:	1b9b      	subs	r3, r3, r6
    7124:	409c      	lsls	r4, r3
    7126:	4327      	orrs	r7, r4
    7128:	1e7c      	subs	r4, r7, #1
    712a:	41a7      	sbcs	r7, r4
    712c:	464b      	mov	r3, r9
    712e:	2400      	movs	r4, #0
    7130:	431f      	orrs	r7, r3
    7132:	e75f      	b.n	6ff4 <__aeabi_dadd+0x4cc>
    7134:	2400      	movs	r4, #0
    7136:	e7d2      	b.n	70de <__aeabi_dadd+0x5b6>
    7138:	0017      	movs	r7, r2
    713a:	e5b2      	b.n	6ca2 <__aeabi_dadd+0x17a>
    713c:	2400      	movs	r4, #0
    713e:	e7f2      	b.n	7126 <__aeabi_dadd+0x5fe>
    7140:	000007ff 	.word	0x000007ff
    7144:	ff7fffff 	.word	0xff7fffff

00007148 <__aeabi_ddiv>:
    7148:	b5f0      	push	{r4, r5, r6, r7, lr}
    714a:	4657      	mov	r7, sl
    714c:	4645      	mov	r5, r8
    714e:	46de      	mov	lr, fp
    7150:	464e      	mov	r6, r9
    7152:	b5e0      	push	{r5, r6, r7, lr}
    7154:	004c      	lsls	r4, r1, #1
    7156:	030e      	lsls	r6, r1, #12
    7158:	b087      	sub	sp, #28
    715a:	4683      	mov	fp, r0
    715c:	4692      	mov	sl, r2
    715e:	001d      	movs	r5, r3
    7160:	4680      	mov	r8, r0
    7162:	0b36      	lsrs	r6, r6, #12
    7164:	0d64      	lsrs	r4, r4, #21
    7166:	0fcf      	lsrs	r7, r1, #31
    7168:	2c00      	cmp	r4, #0
    716a:	d04f      	beq.n	720c <__aeabi_ddiv+0xc4>
    716c:	4b6f      	ldr	r3, [pc, #444]	; (732c <__aeabi_ddiv+0x1e4>)
    716e:	429c      	cmp	r4, r3
    7170:	d035      	beq.n	71de <__aeabi_ddiv+0x96>
    7172:	2380      	movs	r3, #128	; 0x80
    7174:	0f42      	lsrs	r2, r0, #29
    7176:	041b      	lsls	r3, r3, #16
    7178:	00f6      	lsls	r6, r6, #3
    717a:	4313      	orrs	r3, r2
    717c:	4333      	orrs	r3, r6
    717e:	4699      	mov	r9, r3
    7180:	00c3      	lsls	r3, r0, #3
    7182:	4698      	mov	r8, r3
    7184:	4b6a      	ldr	r3, [pc, #424]	; (7330 <__aeabi_ddiv+0x1e8>)
    7186:	2600      	movs	r6, #0
    7188:	469c      	mov	ip, r3
    718a:	2300      	movs	r3, #0
    718c:	4464      	add	r4, ip
    718e:	9303      	str	r3, [sp, #12]
    7190:	032b      	lsls	r3, r5, #12
    7192:	0b1b      	lsrs	r3, r3, #12
    7194:	469b      	mov	fp, r3
    7196:	006b      	lsls	r3, r5, #1
    7198:	0fed      	lsrs	r5, r5, #31
    719a:	4650      	mov	r0, sl
    719c:	0d5b      	lsrs	r3, r3, #21
    719e:	9501      	str	r5, [sp, #4]
    71a0:	d05e      	beq.n	7260 <__aeabi_ddiv+0x118>
    71a2:	4a62      	ldr	r2, [pc, #392]	; (732c <__aeabi_ddiv+0x1e4>)
    71a4:	4293      	cmp	r3, r2
    71a6:	d053      	beq.n	7250 <__aeabi_ddiv+0x108>
    71a8:	465a      	mov	r2, fp
    71aa:	00d1      	lsls	r1, r2, #3
    71ac:	2280      	movs	r2, #128	; 0x80
    71ae:	0f40      	lsrs	r0, r0, #29
    71b0:	0412      	lsls	r2, r2, #16
    71b2:	4302      	orrs	r2, r0
    71b4:	430a      	orrs	r2, r1
    71b6:	4693      	mov	fp, r2
    71b8:	4652      	mov	r2, sl
    71ba:	00d1      	lsls	r1, r2, #3
    71bc:	4a5c      	ldr	r2, [pc, #368]	; (7330 <__aeabi_ddiv+0x1e8>)
    71be:	4694      	mov	ip, r2
    71c0:	2200      	movs	r2, #0
    71c2:	4463      	add	r3, ip
    71c4:	0038      	movs	r0, r7
    71c6:	4068      	eors	r0, r5
    71c8:	4684      	mov	ip, r0
    71ca:	9002      	str	r0, [sp, #8]
    71cc:	1ae4      	subs	r4, r4, r3
    71ce:	4316      	orrs	r6, r2
    71d0:	2e0f      	cmp	r6, #15
    71d2:	d900      	bls.n	71d6 <__aeabi_ddiv+0x8e>
    71d4:	e0b4      	b.n	7340 <__aeabi_ddiv+0x1f8>
    71d6:	4b57      	ldr	r3, [pc, #348]	; (7334 <__aeabi_ddiv+0x1ec>)
    71d8:	00b6      	lsls	r6, r6, #2
    71da:	599b      	ldr	r3, [r3, r6]
    71dc:	469f      	mov	pc, r3
    71de:	0003      	movs	r3, r0
    71e0:	4333      	orrs	r3, r6
    71e2:	4699      	mov	r9, r3
    71e4:	d16c      	bne.n	72c0 <__aeabi_ddiv+0x178>
    71e6:	2300      	movs	r3, #0
    71e8:	4698      	mov	r8, r3
    71ea:	3302      	adds	r3, #2
    71ec:	2608      	movs	r6, #8
    71ee:	9303      	str	r3, [sp, #12]
    71f0:	e7ce      	b.n	7190 <__aeabi_ddiv+0x48>
    71f2:	46cb      	mov	fp, r9
    71f4:	4641      	mov	r1, r8
    71f6:	9a03      	ldr	r2, [sp, #12]
    71f8:	9701      	str	r7, [sp, #4]
    71fa:	2a02      	cmp	r2, #2
    71fc:	d165      	bne.n	72ca <__aeabi_ddiv+0x182>
    71fe:	9b01      	ldr	r3, [sp, #4]
    7200:	4c4a      	ldr	r4, [pc, #296]	; (732c <__aeabi_ddiv+0x1e4>)
    7202:	469c      	mov	ip, r3
    7204:	2300      	movs	r3, #0
    7206:	2200      	movs	r2, #0
    7208:	4698      	mov	r8, r3
    720a:	e06b      	b.n	72e4 <__aeabi_ddiv+0x19c>
    720c:	0003      	movs	r3, r0
    720e:	4333      	orrs	r3, r6
    7210:	4699      	mov	r9, r3
    7212:	d04e      	beq.n	72b2 <__aeabi_ddiv+0x16a>
    7214:	2e00      	cmp	r6, #0
    7216:	d100      	bne.n	721a <__aeabi_ddiv+0xd2>
    7218:	e1bc      	b.n	7594 <__aeabi_ddiv+0x44c>
    721a:	0030      	movs	r0, r6
    721c:	f001 fb08 	bl	8830 <__clzsi2>
    7220:	0003      	movs	r3, r0
    7222:	3b0b      	subs	r3, #11
    7224:	2b1c      	cmp	r3, #28
    7226:	dd00      	ble.n	722a <__aeabi_ddiv+0xe2>
    7228:	e1ac      	b.n	7584 <__aeabi_ddiv+0x43c>
    722a:	221d      	movs	r2, #29
    722c:	1ad3      	subs	r3, r2, r3
    722e:	465a      	mov	r2, fp
    7230:	0001      	movs	r1, r0
    7232:	40da      	lsrs	r2, r3
    7234:	3908      	subs	r1, #8
    7236:	408e      	lsls	r6, r1
    7238:	0013      	movs	r3, r2
    723a:	4333      	orrs	r3, r6
    723c:	4699      	mov	r9, r3
    723e:	465b      	mov	r3, fp
    7240:	408b      	lsls	r3, r1
    7242:	4698      	mov	r8, r3
    7244:	2300      	movs	r3, #0
    7246:	4c3c      	ldr	r4, [pc, #240]	; (7338 <__aeabi_ddiv+0x1f0>)
    7248:	2600      	movs	r6, #0
    724a:	1a24      	subs	r4, r4, r0
    724c:	9303      	str	r3, [sp, #12]
    724e:	e79f      	b.n	7190 <__aeabi_ddiv+0x48>
    7250:	4651      	mov	r1, sl
    7252:	465a      	mov	r2, fp
    7254:	4311      	orrs	r1, r2
    7256:	d129      	bne.n	72ac <__aeabi_ddiv+0x164>
    7258:	2200      	movs	r2, #0
    725a:	4693      	mov	fp, r2
    725c:	3202      	adds	r2, #2
    725e:	e7b1      	b.n	71c4 <__aeabi_ddiv+0x7c>
    7260:	4659      	mov	r1, fp
    7262:	4301      	orrs	r1, r0
    7264:	d01e      	beq.n	72a4 <__aeabi_ddiv+0x15c>
    7266:	465b      	mov	r3, fp
    7268:	2b00      	cmp	r3, #0
    726a:	d100      	bne.n	726e <__aeabi_ddiv+0x126>
    726c:	e19e      	b.n	75ac <__aeabi_ddiv+0x464>
    726e:	4658      	mov	r0, fp
    7270:	f001 fade 	bl	8830 <__clzsi2>
    7274:	0003      	movs	r3, r0
    7276:	3b0b      	subs	r3, #11
    7278:	2b1c      	cmp	r3, #28
    727a:	dd00      	ble.n	727e <__aeabi_ddiv+0x136>
    727c:	e18f      	b.n	759e <__aeabi_ddiv+0x456>
    727e:	0002      	movs	r2, r0
    7280:	4659      	mov	r1, fp
    7282:	3a08      	subs	r2, #8
    7284:	4091      	lsls	r1, r2
    7286:	468b      	mov	fp, r1
    7288:	211d      	movs	r1, #29
    728a:	1acb      	subs	r3, r1, r3
    728c:	4651      	mov	r1, sl
    728e:	40d9      	lsrs	r1, r3
    7290:	000b      	movs	r3, r1
    7292:	4659      	mov	r1, fp
    7294:	430b      	orrs	r3, r1
    7296:	4651      	mov	r1, sl
    7298:	469b      	mov	fp, r3
    729a:	4091      	lsls	r1, r2
    729c:	4b26      	ldr	r3, [pc, #152]	; (7338 <__aeabi_ddiv+0x1f0>)
    729e:	2200      	movs	r2, #0
    72a0:	1a1b      	subs	r3, r3, r0
    72a2:	e78f      	b.n	71c4 <__aeabi_ddiv+0x7c>
    72a4:	2300      	movs	r3, #0
    72a6:	2201      	movs	r2, #1
    72a8:	469b      	mov	fp, r3
    72aa:	e78b      	b.n	71c4 <__aeabi_ddiv+0x7c>
    72ac:	4651      	mov	r1, sl
    72ae:	2203      	movs	r2, #3
    72b0:	e788      	b.n	71c4 <__aeabi_ddiv+0x7c>
    72b2:	2300      	movs	r3, #0
    72b4:	4698      	mov	r8, r3
    72b6:	3301      	adds	r3, #1
    72b8:	2604      	movs	r6, #4
    72ba:	2400      	movs	r4, #0
    72bc:	9303      	str	r3, [sp, #12]
    72be:	e767      	b.n	7190 <__aeabi_ddiv+0x48>
    72c0:	2303      	movs	r3, #3
    72c2:	46b1      	mov	r9, r6
    72c4:	9303      	str	r3, [sp, #12]
    72c6:	260c      	movs	r6, #12
    72c8:	e762      	b.n	7190 <__aeabi_ddiv+0x48>
    72ca:	2a03      	cmp	r2, #3
    72cc:	d100      	bne.n	72d0 <__aeabi_ddiv+0x188>
    72ce:	e25c      	b.n	778a <__aeabi_ddiv+0x642>
    72d0:	9b01      	ldr	r3, [sp, #4]
    72d2:	2a01      	cmp	r2, #1
    72d4:	d000      	beq.n	72d8 <__aeabi_ddiv+0x190>
    72d6:	e1e4      	b.n	76a2 <__aeabi_ddiv+0x55a>
    72d8:	4013      	ands	r3, r2
    72da:	469c      	mov	ip, r3
    72dc:	2300      	movs	r3, #0
    72de:	2400      	movs	r4, #0
    72e0:	2200      	movs	r2, #0
    72e2:	4698      	mov	r8, r3
    72e4:	2100      	movs	r1, #0
    72e6:	0312      	lsls	r2, r2, #12
    72e8:	0b13      	lsrs	r3, r2, #12
    72ea:	0d0a      	lsrs	r2, r1, #20
    72ec:	0512      	lsls	r2, r2, #20
    72ee:	431a      	orrs	r2, r3
    72f0:	0523      	lsls	r3, r4, #20
    72f2:	4c12      	ldr	r4, [pc, #72]	; (733c <__aeabi_ddiv+0x1f4>)
    72f4:	4640      	mov	r0, r8
    72f6:	4022      	ands	r2, r4
    72f8:	4313      	orrs	r3, r2
    72fa:	4662      	mov	r2, ip
    72fc:	005b      	lsls	r3, r3, #1
    72fe:	07d2      	lsls	r2, r2, #31
    7300:	085b      	lsrs	r3, r3, #1
    7302:	4313      	orrs	r3, r2
    7304:	0019      	movs	r1, r3
    7306:	b007      	add	sp, #28
    7308:	bc3c      	pop	{r2, r3, r4, r5}
    730a:	4690      	mov	r8, r2
    730c:	4699      	mov	r9, r3
    730e:	46a2      	mov	sl, r4
    7310:	46ab      	mov	fp, r5
    7312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7314:	2300      	movs	r3, #0
    7316:	2280      	movs	r2, #128	; 0x80
    7318:	469c      	mov	ip, r3
    731a:	0312      	lsls	r2, r2, #12
    731c:	4698      	mov	r8, r3
    731e:	4c03      	ldr	r4, [pc, #12]	; (732c <__aeabi_ddiv+0x1e4>)
    7320:	e7e0      	b.n	72e4 <__aeabi_ddiv+0x19c>
    7322:	2300      	movs	r3, #0
    7324:	4c01      	ldr	r4, [pc, #4]	; (732c <__aeabi_ddiv+0x1e4>)
    7326:	2200      	movs	r2, #0
    7328:	4698      	mov	r8, r3
    732a:	e7db      	b.n	72e4 <__aeabi_ddiv+0x19c>
    732c:	000007ff 	.word	0x000007ff
    7330:	fffffc01 	.word	0xfffffc01
    7334:	00008cd0 	.word	0x00008cd0
    7338:	fffffc0d 	.word	0xfffffc0d
    733c:	800fffff 	.word	0x800fffff
    7340:	45d9      	cmp	r9, fp
    7342:	d900      	bls.n	7346 <__aeabi_ddiv+0x1fe>
    7344:	e139      	b.n	75ba <__aeabi_ddiv+0x472>
    7346:	d100      	bne.n	734a <__aeabi_ddiv+0x202>
    7348:	e134      	b.n	75b4 <__aeabi_ddiv+0x46c>
    734a:	2300      	movs	r3, #0
    734c:	4646      	mov	r6, r8
    734e:	464d      	mov	r5, r9
    7350:	469a      	mov	sl, r3
    7352:	3c01      	subs	r4, #1
    7354:	465b      	mov	r3, fp
    7356:	0e0a      	lsrs	r2, r1, #24
    7358:	021b      	lsls	r3, r3, #8
    735a:	431a      	orrs	r2, r3
    735c:	020b      	lsls	r3, r1, #8
    735e:	0c17      	lsrs	r7, r2, #16
    7360:	9303      	str	r3, [sp, #12]
    7362:	0413      	lsls	r3, r2, #16
    7364:	0c1b      	lsrs	r3, r3, #16
    7366:	0039      	movs	r1, r7
    7368:	0028      	movs	r0, r5
    736a:	4690      	mov	r8, r2
    736c:	9301      	str	r3, [sp, #4]
    736e:	f7fe fcd1 	bl	5d14 <__udivsi3>
    7372:	0002      	movs	r2, r0
    7374:	9b01      	ldr	r3, [sp, #4]
    7376:	4683      	mov	fp, r0
    7378:	435a      	muls	r2, r3
    737a:	0028      	movs	r0, r5
    737c:	0039      	movs	r1, r7
    737e:	4691      	mov	r9, r2
    7380:	f7fe fd4e 	bl	5e20 <__aeabi_uidivmod>
    7384:	0c35      	lsrs	r5, r6, #16
    7386:	0409      	lsls	r1, r1, #16
    7388:	430d      	orrs	r5, r1
    738a:	45a9      	cmp	r9, r5
    738c:	d90d      	bls.n	73aa <__aeabi_ddiv+0x262>
    738e:	465b      	mov	r3, fp
    7390:	4445      	add	r5, r8
    7392:	3b01      	subs	r3, #1
    7394:	45a8      	cmp	r8, r5
    7396:	d900      	bls.n	739a <__aeabi_ddiv+0x252>
    7398:	e13a      	b.n	7610 <__aeabi_ddiv+0x4c8>
    739a:	45a9      	cmp	r9, r5
    739c:	d800      	bhi.n	73a0 <__aeabi_ddiv+0x258>
    739e:	e137      	b.n	7610 <__aeabi_ddiv+0x4c8>
    73a0:	2302      	movs	r3, #2
    73a2:	425b      	negs	r3, r3
    73a4:	469c      	mov	ip, r3
    73a6:	4445      	add	r5, r8
    73a8:	44e3      	add	fp, ip
    73aa:	464b      	mov	r3, r9
    73ac:	1aeb      	subs	r3, r5, r3
    73ae:	0039      	movs	r1, r7
    73b0:	0018      	movs	r0, r3
    73b2:	9304      	str	r3, [sp, #16]
    73b4:	f7fe fcae 	bl	5d14 <__udivsi3>
    73b8:	9b01      	ldr	r3, [sp, #4]
    73ba:	0005      	movs	r5, r0
    73bc:	4343      	muls	r3, r0
    73be:	0039      	movs	r1, r7
    73c0:	9804      	ldr	r0, [sp, #16]
    73c2:	4699      	mov	r9, r3
    73c4:	f7fe fd2c 	bl	5e20 <__aeabi_uidivmod>
    73c8:	0433      	lsls	r3, r6, #16
    73ca:	0409      	lsls	r1, r1, #16
    73cc:	0c1b      	lsrs	r3, r3, #16
    73ce:	430b      	orrs	r3, r1
    73d0:	4599      	cmp	r9, r3
    73d2:	d909      	bls.n	73e8 <__aeabi_ddiv+0x2a0>
    73d4:	4443      	add	r3, r8
    73d6:	1e6a      	subs	r2, r5, #1
    73d8:	4598      	cmp	r8, r3
    73da:	d900      	bls.n	73de <__aeabi_ddiv+0x296>
    73dc:	e11a      	b.n	7614 <__aeabi_ddiv+0x4cc>
    73de:	4599      	cmp	r9, r3
    73e0:	d800      	bhi.n	73e4 <__aeabi_ddiv+0x29c>
    73e2:	e117      	b.n	7614 <__aeabi_ddiv+0x4cc>
    73e4:	3d02      	subs	r5, #2
    73e6:	4443      	add	r3, r8
    73e8:	464a      	mov	r2, r9
    73ea:	1a9b      	subs	r3, r3, r2
    73ec:	465a      	mov	r2, fp
    73ee:	0412      	lsls	r2, r2, #16
    73f0:	432a      	orrs	r2, r5
    73f2:	9903      	ldr	r1, [sp, #12]
    73f4:	4693      	mov	fp, r2
    73f6:	0c10      	lsrs	r0, r2, #16
    73f8:	0c0a      	lsrs	r2, r1, #16
    73fa:	4691      	mov	r9, r2
    73fc:	0409      	lsls	r1, r1, #16
    73fe:	465a      	mov	r2, fp
    7400:	0c09      	lsrs	r1, r1, #16
    7402:	464e      	mov	r6, r9
    7404:	000d      	movs	r5, r1
    7406:	0412      	lsls	r2, r2, #16
    7408:	0c12      	lsrs	r2, r2, #16
    740a:	4345      	muls	r5, r0
    740c:	9105      	str	r1, [sp, #20]
    740e:	4351      	muls	r1, r2
    7410:	4372      	muls	r2, r6
    7412:	4370      	muls	r0, r6
    7414:	1952      	adds	r2, r2, r5
    7416:	0c0e      	lsrs	r6, r1, #16
    7418:	18b2      	adds	r2, r6, r2
    741a:	4295      	cmp	r5, r2
    741c:	d903      	bls.n	7426 <__aeabi_ddiv+0x2de>
    741e:	2580      	movs	r5, #128	; 0x80
    7420:	026d      	lsls	r5, r5, #9
    7422:	46ac      	mov	ip, r5
    7424:	4460      	add	r0, ip
    7426:	0c15      	lsrs	r5, r2, #16
    7428:	0409      	lsls	r1, r1, #16
    742a:	0412      	lsls	r2, r2, #16
    742c:	0c09      	lsrs	r1, r1, #16
    742e:	1828      	adds	r0, r5, r0
    7430:	1852      	adds	r2, r2, r1
    7432:	4283      	cmp	r3, r0
    7434:	d200      	bcs.n	7438 <__aeabi_ddiv+0x2f0>
    7436:	e0ce      	b.n	75d6 <__aeabi_ddiv+0x48e>
    7438:	d100      	bne.n	743c <__aeabi_ddiv+0x2f4>
    743a:	e0c8      	b.n	75ce <__aeabi_ddiv+0x486>
    743c:	1a1d      	subs	r5, r3, r0
    743e:	4653      	mov	r3, sl
    7440:	1a9e      	subs	r6, r3, r2
    7442:	45b2      	cmp	sl, r6
    7444:	4192      	sbcs	r2, r2
    7446:	4252      	negs	r2, r2
    7448:	1aab      	subs	r3, r5, r2
    744a:	469a      	mov	sl, r3
    744c:	4598      	cmp	r8, r3
    744e:	d100      	bne.n	7452 <__aeabi_ddiv+0x30a>
    7450:	e117      	b.n	7682 <__aeabi_ddiv+0x53a>
    7452:	0039      	movs	r1, r7
    7454:	0018      	movs	r0, r3
    7456:	f7fe fc5d 	bl	5d14 <__udivsi3>
    745a:	9b01      	ldr	r3, [sp, #4]
    745c:	0005      	movs	r5, r0
    745e:	4343      	muls	r3, r0
    7460:	0039      	movs	r1, r7
    7462:	4650      	mov	r0, sl
    7464:	9304      	str	r3, [sp, #16]
    7466:	f7fe fcdb 	bl	5e20 <__aeabi_uidivmod>
    746a:	9804      	ldr	r0, [sp, #16]
    746c:	040b      	lsls	r3, r1, #16
    746e:	0c31      	lsrs	r1, r6, #16
    7470:	4319      	orrs	r1, r3
    7472:	4288      	cmp	r0, r1
    7474:	d909      	bls.n	748a <__aeabi_ddiv+0x342>
    7476:	4441      	add	r1, r8
    7478:	1e6b      	subs	r3, r5, #1
    747a:	4588      	cmp	r8, r1
    747c:	d900      	bls.n	7480 <__aeabi_ddiv+0x338>
    747e:	e107      	b.n	7690 <__aeabi_ddiv+0x548>
    7480:	4288      	cmp	r0, r1
    7482:	d800      	bhi.n	7486 <__aeabi_ddiv+0x33e>
    7484:	e104      	b.n	7690 <__aeabi_ddiv+0x548>
    7486:	3d02      	subs	r5, #2
    7488:	4441      	add	r1, r8
    748a:	9b04      	ldr	r3, [sp, #16]
    748c:	1acb      	subs	r3, r1, r3
    748e:	0018      	movs	r0, r3
    7490:	0039      	movs	r1, r7
    7492:	9304      	str	r3, [sp, #16]
    7494:	f7fe fc3e 	bl	5d14 <__udivsi3>
    7498:	9b01      	ldr	r3, [sp, #4]
    749a:	4682      	mov	sl, r0
    749c:	4343      	muls	r3, r0
    749e:	0039      	movs	r1, r7
    74a0:	9804      	ldr	r0, [sp, #16]
    74a2:	9301      	str	r3, [sp, #4]
    74a4:	f7fe fcbc 	bl	5e20 <__aeabi_uidivmod>
    74a8:	9801      	ldr	r0, [sp, #4]
    74aa:	040b      	lsls	r3, r1, #16
    74ac:	0431      	lsls	r1, r6, #16
    74ae:	0c09      	lsrs	r1, r1, #16
    74b0:	4319      	orrs	r1, r3
    74b2:	4288      	cmp	r0, r1
    74b4:	d90d      	bls.n	74d2 <__aeabi_ddiv+0x38a>
    74b6:	4653      	mov	r3, sl
    74b8:	4441      	add	r1, r8
    74ba:	3b01      	subs	r3, #1
    74bc:	4588      	cmp	r8, r1
    74be:	d900      	bls.n	74c2 <__aeabi_ddiv+0x37a>
    74c0:	e0e8      	b.n	7694 <__aeabi_ddiv+0x54c>
    74c2:	4288      	cmp	r0, r1
    74c4:	d800      	bhi.n	74c8 <__aeabi_ddiv+0x380>
    74c6:	e0e5      	b.n	7694 <__aeabi_ddiv+0x54c>
    74c8:	2302      	movs	r3, #2
    74ca:	425b      	negs	r3, r3
    74cc:	469c      	mov	ip, r3
    74ce:	4441      	add	r1, r8
    74d0:	44e2      	add	sl, ip
    74d2:	9b01      	ldr	r3, [sp, #4]
    74d4:	042d      	lsls	r5, r5, #16
    74d6:	1ace      	subs	r6, r1, r3
    74d8:	4651      	mov	r1, sl
    74da:	4329      	orrs	r1, r5
    74dc:	9d05      	ldr	r5, [sp, #20]
    74de:	464f      	mov	r7, r9
    74e0:	002a      	movs	r2, r5
    74e2:	040b      	lsls	r3, r1, #16
    74e4:	0c08      	lsrs	r0, r1, #16
    74e6:	0c1b      	lsrs	r3, r3, #16
    74e8:	435a      	muls	r2, r3
    74ea:	4345      	muls	r5, r0
    74ec:	437b      	muls	r3, r7
    74ee:	4378      	muls	r0, r7
    74f0:	195b      	adds	r3, r3, r5
    74f2:	0c17      	lsrs	r7, r2, #16
    74f4:	18fb      	adds	r3, r7, r3
    74f6:	429d      	cmp	r5, r3
    74f8:	d903      	bls.n	7502 <__aeabi_ddiv+0x3ba>
    74fa:	2580      	movs	r5, #128	; 0x80
    74fc:	026d      	lsls	r5, r5, #9
    74fe:	46ac      	mov	ip, r5
    7500:	4460      	add	r0, ip
    7502:	0c1d      	lsrs	r5, r3, #16
    7504:	0412      	lsls	r2, r2, #16
    7506:	041b      	lsls	r3, r3, #16
    7508:	0c12      	lsrs	r2, r2, #16
    750a:	1828      	adds	r0, r5, r0
    750c:	189b      	adds	r3, r3, r2
    750e:	4286      	cmp	r6, r0
    7510:	d200      	bcs.n	7514 <__aeabi_ddiv+0x3cc>
    7512:	e093      	b.n	763c <__aeabi_ddiv+0x4f4>
    7514:	d100      	bne.n	7518 <__aeabi_ddiv+0x3d0>
    7516:	e08e      	b.n	7636 <__aeabi_ddiv+0x4ee>
    7518:	2301      	movs	r3, #1
    751a:	4319      	orrs	r1, r3
    751c:	4ba0      	ldr	r3, [pc, #640]	; (77a0 <__aeabi_ddiv+0x658>)
    751e:	18e3      	adds	r3, r4, r3
    7520:	2b00      	cmp	r3, #0
    7522:	dc00      	bgt.n	7526 <__aeabi_ddiv+0x3de>
    7524:	e099      	b.n	765a <__aeabi_ddiv+0x512>
    7526:	074a      	lsls	r2, r1, #29
    7528:	d000      	beq.n	752c <__aeabi_ddiv+0x3e4>
    752a:	e09e      	b.n	766a <__aeabi_ddiv+0x522>
    752c:	465a      	mov	r2, fp
    752e:	01d2      	lsls	r2, r2, #7
    7530:	d506      	bpl.n	7540 <__aeabi_ddiv+0x3f8>
    7532:	465a      	mov	r2, fp
    7534:	4b9b      	ldr	r3, [pc, #620]	; (77a4 <__aeabi_ddiv+0x65c>)
    7536:	401a      	ands	r2, r3
    7538:	2380      	movs	r3, #128	; 0x80
    753a:	4693      	mov	fp, r2
    753c:	00db      	lsls	r3, r3, #3
    753e:	18e3      	adds	r3, r4, r3
    7540:	4a99      	ldr	r2, [pc, #612]	; (77a8 <__aeabi_ddiv+0x660>)
    7542:	4293      	cmp	r3, r2
    7544:	dd68      	ble.n	7618 <__aeabi_ddiv+0x4d0>
    7546:	2301      	movs	r3, #1
    7548:	9a02      	ldr	r2, [sp, #8]
    754a:	4c98      	ldr	r4, [pc, #608]	; (77ac <__aeabi_ddiv+0x664>)
    754c:	401a      	ands	r2, r3
    754e:	2300      	movs	r3, #0
    7550:	4694      	mov	ip, r2
    7552:	4698      	mov	r8, r3
    7554:	2200      	movs	r2, #0
    7556:	e6c5      	b.n	72e4 <__aeabi_ddiv+0x19c>
    7558:	2280      	movs	r2, #128	; 0x80
    755a:	464b      	mov	r3, r9
    755c:	0312      	lsls	r2, r2, #12
    755e:	4213      	tst	r3, r2
    7560:	d00a      	beq.n	7578 <__aeabi_ddiv+0x430>
    7562:	465b      	mov	r3, fp
    7564:	4213      	tst	r3, r2
    7566:	d106      	bne.n	7576 <__aeabi_ddiv+0x42e>
    7568:	431a      	orrs	r2, r3
    756a:	0312      	lsls	r2, r2, #12
    756c:	0b12      	lsrs	r2, r2, #12
    756e:	46ac      	mov	ip, r5
    7570:	4688      	mov	r8, r1
    7572:	4c8e      	ldr	r4, [pc, #568]	; (77ac <__aeabi_ddiv+0x664>)
    7574:	e6b6      	b.n	72e4 <__aeabi_ddiv+0x19c>
    7576:	464b      	mov	r3, r9
    7578:	431a      	orrs	r2, r3
    757a:	0312      	lsls	r2, r2, #12
    757c:	0b12      	lsrs	r2, r2, #12
    757e:	46bc      	mov	ip, r7
    7580:	4c8a      	ldr	r4, [pc, #552]	; (77ac <__aeabi_ddiv+0x664>)
    7582:	e6af      	b.n	72e4 <__aeabi_ddiv+0x19c>
    7584:	0003      	movs	r3, r0
    7586:	465a      	mov	r2, fp
    7588:	3b28      	subs	r3, #40	; 0x28
    758a:	409a      	lsls	r2, r3
    758c:	2300      	movs	r3, #0
    758e:	4691      	mov	r9, r2
    7590:	4698      	mov	r8, r3
    7592:	e657      	b.n	7244 <__aeabi_ddiv+0xfc>
    7594:	4658      	mov	r0, fp
    7596:	f001 f94b 	bl	8830 <__clzsi2>
    759a:	3020      	adds	r0, #32
    759c:	e640      	b.n	7220 <__aeabi_ddiv+0xd8>
    759e:	0003      	movs	r3, r0
    75a0:	4652      	mov	r2, sl
    75a2:	3b28      	subs	r3, #40	; 0x28
    75a4:	409a      	lsls	r2, r3
    75a6:	2100      	movs	r1, #0
    75a8:	4693      	mov	fp, r2
    75aa:	e677      	b.n	729c <__aeabi_ddiv+0x154>
    75ac:	f001 f940 	bl	8830 <__clzsi2>
    75b0:	3020      	adds	r0, #32
    75b2:	e65f      	b.n	7274 <__aeabi_ddiv+0x12c>
    75b4:	4588      	cmp	r8, r1
    75b6:	d200      	bcs.n	75ba <__aeabi_ddiv+0x472>
    75b8:	e6c7      	b.n	734a <__aeabi_ddiv+0x202>
    75ba:	464b      	mov	r3, r9
    75bc:	07de      	lsls	r6, r3, #31
    75be:	085d      	lsrs	r5, r3, #1
    75c0:	4643      	mov	r3, r8
    75c2:	085b      	lsrs	r3, r3, #1
    75c4:	431e      	orrs	r6, r3
    75c6:	4643      	mov	r3, r8
    75c8:	07db      	lsls	r3, r3, #31
    75ca:	469a      	mov	sl, r3
    75cc:	e6c2      	b.n	7354 <__aeabi_ddiv+0x20c>
    75ce:	2500      	movs	r5, #0
    75d0:	4592      	cmp	sl, r2
    75d2:	d300      	bcc.n	75d6 <__aeabi_ddiv+0x48e>
    75d4:	e733      	b.n	743e <__aeabi_ddiv+0x2f6>
    75d6:	9e03      	ldr	r6, [sp, #12]
    75d8:	4659      	mov	r1, fp
    75da:	46b4      	mov	ip, r6
    75dc:	44e2      	add	sl, ip
    75de:	45b2      	cmp	sl, r6
    75e0:	41ad      	sbcs	r5, r5
    75e2:	426d      	negs	r5, r5
    75e4:	4445      	add	r5, r8
    75e6:	18eb      	adds	r3, r5, r3
    75e8:	3901      	subs	r1, #1
    75ea:	4598      	cmp	r8, r3
    75ec:	d207      	bcs.n	75fe <__aeabi_ddiv+0x4b6>
    75ee:	4298      	cmp	r0, r3
    75f0:	d900      	bls.n	75f4 <__aeabi_ddiv+0x4ac>
    75f2:	e07f      	b.n	76f4 <__aeabi_ddiv+0x5ac>
    75f4:	d100      	bne.n	75f8 <__aeabi_ddiv+0x4b0>
    75f6:	e0bc      	b.n	7772 <__aeabi_ddiv+0x62a>
    75f8:	1a1d      	subs	r5, r3, r0
    75fa:	468b      	mov	fp, r1
    75fc:	e71f      	b.n	743e <__aeabi_ddiv+0x2f6>
    75fe:	4598      	cmp	r8, r3
    7600:	d1fa      	bne.n	75f8 <__aeabi_ddiv+0x4b0>
    7602:	9d03      	ldr	r5, [sp, #12]
    7604:	4555      	cmp	r5, sl
    7606:	d9f2      	bls.n	75ee <__aeabi_ddiv+0x4a6>
    7608:	4643      	mov	r3, r8
    760a:	468b      	mov	fp, r1
    760c:	1a1d      	subs	r5, r3, r0
    760e:	e716      	b.n	743e <__aeabi_ddiv+0x2f6>
    7610:	469b      	mov	fp, r3
    7612:	e6ca      	b.n	73aa <__aeabi_ddiv+0x262>
    7614:	0015      	movs	r5, r2
    7616:	e6e7      	b.n	73e8 <__aeabi_ddiv+0x2a0>
    7618:	465a      	mov	r2, fp
    761a:	08c9      	lsrs	r1, r1, #3
    761c:	0752      	lsls	r2, r2, #29
    761e:	430a      	orrs	r2, r1
    7620:	055b      	lsls	r3, r3, #21
    7622:	4690      	mov	r8, r2
    7624:	0d5c      	lsrs	r4, r3, #21
    7626:	465a      	mov	r2, fp
    7628:	2301      	movs	r3, #1
    762a:	9902      	ldr	r1, [sp, #8]
    762c:	0252      	lsls	r2, r2, #9
    762e:	4019      	ands	r1, r3
    7630:	0b12      	lsrs	r2, r2, #12
    7632:	468c      	mov	ip, r1
    7634:	e656      	b.n	72e4 <__aeabi_ddiv+0x19c>
    7636:	2b00      	cmp	r3, #0
    7638:	d100      	bne.n	763c <__aeabi_ddiv+0x4f4>
    763a:	e76f      	b.n	751c <__aeabi_ddiv+0x3d4>
    763c:	4446      	add	r6, r8
    763e:	1e4a      	subs	r2, r1, #1
    7640:	45b0      	cmp	r8, r6
    7642:	d929      	bls.n	7698 <__aeabi_ddiv+0x550>
    7644:	0011      	movs	r1, r2
    7646:	4286      	cmp	r6, r0
    7648:	d000      	beq.n	764c <__aeabi_ddiv+0x504>
    764a:	e765      	b.n	7518 <__aeabi_ddiv+0x3d0>
    764c:	9a03      	ldr	r2, [sp, #12]
    764e:	4293      	cmp	r3, r2
    7650:	d000      	beq.n	7654 <__aeabi_ddiv+0x50c>
    7652:	e761      	b.n	7518 <__aeabi_ddiv+0x3d0>
    7654:	e762      	b.n	751c <__aeabi_ddiv+0x3d4>
    7656:	2101      	movs	r1, #1
    7658:	4249      	negs	r1, r1
    765a:	2001      	movs	r0, #1
    765c:	1ac2      	subs	r2, r0, r3
    765e:	2a38      	cmp	r2, #56	; 0x38
    7660:	dd21      	ble.n	76a6 <__aeabi_ddiv+0x55e>
    7662:	9b02      	ldr	r3, [sp, #8]
    7664:	4003      	ands	r3, r0
    7666:	469c      	mov	ip, r3
    7668:	e638      	b.n	72dc <__aeabi_ddiv+0x194>
    766a:	220f      	movs	r2, #15
    766c:	400a      	ands	r2, r1
    766e:	2a04      	cmp	r2, #4
    7670:	d100      	bne.n	7674 <__aeabi_ddiv+0x52c>
    7672:	e75b      	b.n	752c <__aeabi_ddiv+0x3e4>
    7674:	000a      	movs	r2, r1
    7676:	1d11      	adds	r1, r2, #4
    7678:	4291      	cmp	r1, r2
    767a:	4192      	sbcs	r2, r2
    767c:	4252      	negs	r2, r2
    767e:	4493      	add	fp, r2
    7680:	e754      	b.n	752c <__aeabi_ddiv+0x3e4>
    7682:	4b47      	ldr	r3, [pc, #284]	; (77a0 <__aeabi_ddiv+0x658>)
    7684:	18e3      	adds	r3, r4, r3
    7686:	2b00      	cmp	r3, #0
    7688:	dde5      	ble.n	7656 <__aeabi_ddiv+0x50e>
    768a:	2201      	movs	r2, #1
    768c:	4252      	negs	r2, r2
    768e:	e7f2      	b.n	7676 <__aeabi_ddiv+0x52e>
    7690:	001d      	movs	r5, r3
    7692:	e6fa      	b.n	748a <__aeabi_ddiv+0x342>
    7694:	469a      	mov	sl, r3
    7696:	e71c      	b.n	74d2 <__aeabi_ddiv+0x38a>
    7698:	42b0      	cmp	r0, r6
    769a:	d839      	bhi.n	7710 <__aeabi_ddiv+0x5c8>
    769c:	d06e      	beq.n	777c <__aeabi_ddiv+0x634>
    769e:	0011      	movs	r1, r2
    76a0:	e73a      	b.n	7518 <__aeabi_ddiv+0x3d0>
    76a2:	9302      	str	r3, [sp, #8]
    76a4:	e73a      	b.n	751c <__aeabi_ddiv+0x3d4>
    76a6:	2a1f      	cmp	r2, #31
    76a8:	dc3c      	bgt.n	7724 <__aeabi_ddiv+0x5dc>
    76aa:	2320      	movs	r3, #32
    76ac:	1a9b      	subs	r3, r3, r2
    76ae:	000c      	movs	r4, r1
    76b0:	4658      	mov	r0, fp
    76b2:	4099      	lsls	r1, r3
    76b4:	4098      	lsls	r0, r3
    76b6:	1e4b      	subs	r3, r1, #1
    76b8:	4199      	sbcs	r1, r3
    76ba:	465b      	mov	r3, fp
    76bc:	40d4      	lsrs	r4, r2
    76be:	40d3      	lsrs	r3, r2
    76c0:	4320      	orrs	r0, r4
    76c2:	4308      	orrs	r0, r1
    76c4:	001a      	movs	r2, r3
    76c6:	0743      	lsls	r3, r0, #29
    76c8:	d009      	beq.n	76de <__aeabi_ddiv+0x596>
    76ca:	230f      	movs	r3, #15
    76cc:	4003      	ands	r3, r0
    76ce:	2b04      	cmp	r3, #4
    76d0:	d005      	beq.n	76de <__aeabi_ddiv+0x596>
    76d2:	0001      	movs	r1, r0
    76d4:	1d08      	adds	r0, r1, #4
    76d6:	4288      	cmp	r0, r1
    76d8:	419b      	sbcs	r3, r3
    76da:	425b      	negs	r3, r3
    76dc:	18d2      	adds	r2, r2, r3
    76de:	0213      	lsls	r3, r2, #8
    76e0:	d53a      	bpl.n	7758 <__aeabi_ddiv+0x610>
    76e2:	2301      	movs	r3, #1
    76e4:	9a02      	ldr	r2, [sp, #8]
    76e6:	2401      	movs	r4, #1
    76e8:	401a      	ands	r2, r3
    76ea:	2300      	movs	r3, #0
    76ec:	4694      	mov	ip, r2
    76ee:	4698      	mov	r8, r3
    76f0:	2200      	movs	r2, #0
    76f2:	e5f7      	b.n	72e4 <__aeabi_ddiv+0x19c>
    76f4:	2102      	movs	r1, #2
    76f6:	4249      	negs	r1, r1
    76f8:	468c      	mov	ip, r1
    76fa:	9d03      	ldr	r5, [sp, #12]
    76fc:	44e3      	add	fp, ip
    76fe:	46ac      	mov	ip, r5
    7700:	44e2      	add	sl, ip
    7702:	45aa      	cmp	sl, r5
    7704:	41ad      	sbcs	r5, r5
    7706:	426d      	negs	r5, r5
    7708:	4445      	add	r5, r8
    770a:	18ed      	adds	r5, r5, r3
    770c:	1a2d      	subs	r5, r5, r0
    770e:	e696      	b.n	743e <__aeabi_ddiv+0x2f6>
    7710:	1e8a      	subs	r2, r1, #2
    7712:	9903      	ldr	r1, [sp, #12]
    7714:	004d      	lsls	r5, r1, #1
    7716:	428d      	cmp	r5, r1
    7718:	4189      	sbcs	r1, r1
    771a:	4249      	negs	r1, r1
    771c:	4441      	add	r1, r8
    771e:	1876      	adds	r6, r6, r1
    7720:	9503      	str	r5, [sp, #12]
    7722:	e78f      	b.n	7644 <__aeabi_ddiv+0x4fc>
    7724:	201f      	movs	r0, #31
    7726:	4240      	negs	r0, r0
    7728:	1ac3      	subs	r3, r0, r3
    772a:	4658      	mov	r0, fp
    772c:	40d8      	lsrs	r0, r3
    772e:	0003      	movs	r3, r0
    7730:	2a20      	cmp	r2, #32
    7732:	d028      	beq.n	7786 <__aeabi_ddiv+0x63e>
    7734:	2040      	movs	r0, #64	; 0x40
    7736:	465d      	mov	r5, fp
    7738:	1a82      	subs	r2, r0, r2
    773a:	4095      	lsls	r5, r2
    773c:	4329      	orrs	r1, r5
    773e:	1e4a      	subs	r2, r1, #1
    7740:	4191      	sbcs	r1, r2
    7742:	4319      	orrs	r1, r3
    7744:	2307      	movs	r3, #7
    7746:	2200      	movs	r2, #0
    7748:	400b      	ands	r3, r1
    774a:	d009      	beq.n	7760 <__aeabi_ddiv+0x618>
    774c:	230f      	movs	r3, #15
    774e:	2200      	movs	r2, #0
    7750:	400b      	ands	r3, r1
    7752:	0008      	movs	r0, r1
    7754:	2b04      	cmp	r3, #4
    7756:	d1bd      	bne.n	76d4 <__aeabi_ddiv+0x58c>
    7758:	0001      	movs	r1, r0
    775a:	0753      	lsls	r3, r2, #29
    775c:	0252      	lsls	r2, r2, #9
    775e:	0b12      	lsrs	r2, r2, #12
    7760:	08c9      	lsrs	r1, r1, #3
    7762:	4319      	orrs	r1, r3
    7764:	2301      	movs	r3, #1
    7766:	4688      	mov	r8, r1
    7768:	9902      	ldr	r1, [sp, #8]
    776a:	2400      	movs	r4, #0
    776c:	4019      	ands	r1, r3
    776e:	468c      	mov	ip, r1
    7770:	e5b8      	b.n	72e4 <__aeabi_ddiv+0x19c>
    7772:	4552      	cmp	r2, sl
    7774:	d8be      	bhi.n	76f4 <__aeabi_ddiv+0x5ac>
    7776:	468b      	mov	fp, r1
    7778:	2500      	movs	r5, #0
    777a:	e660      	b.n	743e <__aeabi_ddiv+0x2f6>
    777c:	9d03      	ldr	r5, [sp, #12]
    777e:	429d      	cmp	r5, r3
    7780:	d3c6      	bcc.n	7710 <__aeabi_ddiv+0x5c8>
    7782:	0011      	movs	r1, r2
    7784:	e762      	b.n	764c <__aeabi_ddiv+0x504>
    7786:	2500      	movs	r5, #0
    7788:	e7d8      	b.n	773c <__aeabi_ddiv+0x5f4>
    778a:	2280      	movs	r2, #128	; 0x80
    778c:	465b      	mov	r3, fp
    778e:	0312      	lsls	r2, r2, #12
    7790:	431a      	orrs	r2, r3
    7792:	9b01      	ldr	r3, [sp, #4]
    7794:	0312      	lsls	r2, r2, #12
    7796:	0b12      	lsrs	r2, r2, #12
    7798:	469c      	mov	ip, r3
    779a:	4688      	mov	r8, r1
    779c:	4c03      	ldr	r4, [pc, #12]	; (77ac <__aeabi_ddiv+0x664>)
    779e:	e5a1      	b.n	72e4 <__aeabi_ddiv+0x19c>
    77a0:	000003ff 	.word	0x000003ff
    77a4:	feffffff 	.word	0xfeffffff
    77a8:	000007fe 	.word	0x000007fe
    77ac:	000007ff 	.word	0x000007ff

000077b0 <__eqdf2>:
    77b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77b2:	464f      	mov	r7, r9
    77b4:	4646      	mov	r6, r8
    77b6:	46d6      	mov	lr, sl
    77b8:	005c      	lsls	r4, r3, #1
    77ba:	b5c0      	push	{r6, r7, lr}
    77bc:	031f      	lsls	r7, r3, #12
    77be:	0fdb      	lsrs	r3, r3, #31
    77c0:	469a      	mov	sl, r3
    77c2:	4b17      	ldr	r3, [pc, #92]	; (7820 <__eqdf2+0x70>)
    77c4:	030e      	lsls	r6, r1, #12
    77c6:	004d      	lsls	r5, r1, #1
    77c8:	4684      	mov	ip, r0
    77ca:	4680      	mov	r8, r0
    77cc:	0b36      	lsrs	r6, r6, #12
    77ce:	0d6d      	lsrs	r5, r5, #21
    77d0:	0fc9      	lsrs	r1, r1, #31
    77d2:	4691      	mov	r9, r2
    77d4:	0b3f      	lsrs	r7, r7, #12
    77d6:	0d64      	lsrs	r4, r4, #21
    77d8:	2001      	movs	r0, #1
    77da:	429d      	cmp	r5, r3
    77dc:	d008      	beq.n	77f0 <__eqdf2+0x40>
    77de:	429c      	cmp	r4, r3
    77e0:	d001      	beq.n	77e6 <__eqdf2+0x36>
    77e2:	42a5      	cmp	r5, r4
    77e4:	d00b      	beq.n	77fe <__eqdf2+0x4e>
    77e6:	bc1c      	pop	{r2, r3, r4}
    77e8:	4690      	mov	r8, r2
    77ea:	4699      	mov	r9, r3
    77ec:	46a2      	mov	sl, r4
    77ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77f0:	4663      	mov	r3, ip
    77f2:	4333      	orrs	r3, r6
    77f4:	d1f7      	bne.n	77e6 <__eqdf2+0x36>
    77f6:	42ac      	cmp	r4, r5
    77f8:	d1f5      	bne.n	77e6 <__eqdf2+0x36>
    77fa:	433a      	orrs	r2, r7
    77fc:	d1f3      	bne.n	77e6 <__eqdf2+0x36>
    77fe:	2001      	movs	r0, #1
    7800:	42be      	cmp	r6, r7
    7802:	d1f0      	bne.n	77e6 <__eqdf2+0x36>
    7804:	45c8      	cmp	r8, r9
    7806:	d1ee      	bne.n	77e6 <__eqdf2+0x36>
    7808:	4551      	cmp	r1, sl
    780a:	d007      	beq.n	781c <__eqdf2+0x6c>
    780c:	2d00      	cmp	r5, #0
    780e:	d1ea      	bne.n	77e6 <__eqdf2+0x36>
    7810:	4663      	mov	r3, ip
    7812:	431e      	orrs	r6, r3
    7814:	0030      	movs	r0, r6
    7816:	1e46      	subs	r6, r0, #1
    7818:	41b0      	sbcs	r0, r6
    781a:	e7e4      	b.n	77e6 <__eqdf2+0x36>
    781c:	2000      	movs	r0, #0
    781e:	e7e2      	b.n	77e6 <__eqdf2+0x36>
    7820:	000007ff 	.word	0x000007ff

00007824 <__gedf2>:
    7824:	b5f0      	push	{r4, r5, r6, r7, lr}
    7826:	4645      	mov	r5, r8
    7828:	46de      	mov	lr, fp
    782a:	4657      	mov	r7, sl
    782c:	464e      	mov	r6, r9
    782e:	b5e0      	push	{r5, r6, r7, lr}
    7830:	031f      	lsls	r7, r3, #12
    7832:	0b3d      	lsrs	r5, r7, #12
    7834:	4f2c      	ldr	r7, [pc, #176]	; (78e8 <__gedf2+0xc4>)
    7836:	030e      	lsls	r6, r1, #12
    7838:	004c      	lsls	r4, r1, #1
    783a:	46ab      	mov	fp, r5
    783c:	005d      	lsls	r5, r3, #1
    783e:	4684      	mov	ip, r0
    7840:	0b36      	lsrs	r6, r6, #12
    7842:	0d64      	lsrs	r4, r4, #21
    7844:	0fc9      	lsrs	r1, r1, #31
    7846:	4690      	mov	r8, r2
    7848:	0d6d      	lsrs	r5, r5, #21
    784a:	0fdb      	lsrs	r3, r3, #31
    784c:	42bc      	cmp	r4, r7
    784e:	d02a      	beq.n	78a6 <__gedf2+0x82>
    7850:	4f25      	ldr	r7, [pc, #148]	; (78e8 <__gedf2+0xc4>)
    7852:	42bd      	cmp	r5, r7
    7854:	d02d      	beq.n	78b2 <__gedf2+0x8e>
    7856:	2c00      	cmp	r4, #0
    7858:	d10f      	bne.n	787a <__gedf2+0x56>
    785a:	4330      	orrs	r0, r6
    785c:	0007      	movs	r7, r0
    785e:	4681      	mov	r9, r0
    7860:	4278      	negs	r0, r7
    7862:	4178      	adcs	r0, r7
    7864:	b2c0      	uxtb	r0, r0
    7866:	2d00      	cmp	r5, #0
    7868:	d117      	bne.n	789a <__gedf2+0x76>
    786a:	465f      	mov	r7, fp
    786c:	433a      	orrs	r2, r7
    786e:	d114      	bne.n	789a <__gedf2+0x76>
    7870:	464b      	mov	r3, r9
    7872:	2000      	movs	r0, #0
    7874:	2b00      	cmp	r3, #0
    7876:	d00a      	beq.n	788e <__gedf2+0x6a>
    7878:	e006      	b.n	7888 <__gedf2+0x64>
    787a:	2d00      	cmp	r5, #0
    787c:	d102      	bne.n	7884 <__gedf2+0x60>
    787e:	4658      	mov	r0, fp
    7880:	4302      	orrs	r2, r0
    7882:	d001      	beq.n	7888 <__gedf2+0x64>
    7884:	4299      	cmp	r1, r3
    7886:	d018      	beq.n	78ba <__gedf2+0x96>
    7888:	4248      	negs	r0, r1
    788a:	2101      	movs	r1, #1
    788c:	4308      	orrs	r0, r1
    788e:	bc3c      	pop	{r2, r3, r4, r5}
    7890:	4690      	mov	r8, r2
    7892:	4699      	mov	r9, r3
    7894:	46a2      	mov	sl, r4
    7896:	46ab      	mov	fp, r5
    7898:	bdf0      	pop	{r4, r5, r6, r7, pc}
    789a:	2800      	cmp	r0, #0
    789c:	d0f2      	beq.n	7884 <__gedf2+0x60>
    789e:	2001      	movs	r0, #1
    78a0:	3b01      	subs	r3, #1
    78a2:	4318      	orrs	r0, r3
    78a4:	e7f3      	b.n	788e <__gedf2+0x6a>
    78a6:	0037      	movs	r7, r6
    78a8:	4307      	orrs	r7, r0
    78aa:	d0d1      	beq.n	7850 <__gedf2+0x2c>
    78ac:	2002      	movs	r0, #2
    78ae:	4240      	negs	r0, r0
    78b0:	e7ed      	b.n	788e <__gedf2+0x6a>
    78b2:	465f      	mov	r7, fp
    78b4:	4317      	orrs	r7, r2
    78b6:	d0ce      	beq.n	7856 <__gedf2+0x32>
    78b8:	e7f8      	b.n	78ac <__gedf2+0x88>
    78ba:	42ac      	cmp	r4, r5
    78bc:	dce4      	bgt.n	7888 <__gedf2+0x64>
    78be:	da03      	bge.n	78c8 <__gedf2+0xa4>
    78c0:	1e48      	subs	r0, r1, #1
    78c2:	2101      	movs	r1, #1
    78c4:	4308      	orrs	r0, r1
    78c6:	e7e2      	b.n	788e <__gedf2+0x6a>
    78c8:	455e      	cmp	r6, fp
    78ca:	d8dd      	bhi.n	7888 <__gedf2+0x64>
    78cc:	d006      	beq.n	78dc <__gedf2+0xb8>
    78ce:	2000      	movs	r0, #0
    78d0:	455e      	cmp	r6, fp
    78d2:	d2dc      	bcs.n	788e <__gedf2+0x6a>
    78d4:	2301      	movs	r3, #1
    78d6:	1e48      	subs	r0, r1, #1
    78d8:	4318      	orrs	r0, r3
    78da:	e7d8      	b.n	788e <__gedf2+0x6a>
    78dc:	45c4      	cmp	ip, r8
    78de:	d8d3      	bhi.n	7888 <__gedf2+0x64>
    78e0:	2000      	movs	r0, #0
    78e2:	45c4      	cmp	ip, r8
    78e4:	d3f6      	bcc.n	78d4 <__gedf2+0xb0>
    78e6:	e7d2      	b.n	788e <__gedf2+0x6a>
    78e8:	000007ff 	.word	0x000007ff

000078ec <__ledf2>:
    78ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    78ee:	464e      	mov	r6, r9
    78f0:	4645      	mov	r5, r8
    78f2:	46de      	mov	lr, fp
    78f4:	4657      	mov	r7, sl
    78f6:	005c      	lsls	r4, r3, #1
    78f8:	b5e0      	push	{r5, r6, r7, lr}
    78fa:	031f      	lsls	r7, r3, #12
    78fc:	0fdb      	lsrs	r3, r3, #31
    78fe:	4699      	mov	r9, r3
    7900:	4b2a      	ldr	r3, [pc, #168]	; (79ac <__ledf2+0xc0>)
    7902:	030e      	lsls	r6, r1, #12
    7904:	004d      	lsls	r5, r1, #1
    7906:	0fc9      	lsrs	r1, r1, #31
    7908:	4684      	mov	ip, r0
    790a:	0b36      	lsrs	r6, r6, #12
    790c:	0d6d      	lsrs	r5, r5, #21
    790e:	468b      	mov	fp, r1
    7910:	4690      	mov	r8, r2
    7912:	0b3f      	lsrs	r7, r7, #12
    7914:	0d64      	lsrs	r4, r4, #21
    7916:	429d      	cmp	r5, r3
    7918:	d020      	beq.n	795c <__ledf2+0x70>
    791a:	4b24      	ldr	r3, [pc, #144]	; (79ac <__ledf2+0xc0>)
    791c:	429c      	cmp	r4, r3
    791e:	d022      	beq.n	7966 <__ledf2+0x7a>
    7920:	2d00      	cmp	r5, #0
    7922:	d112      	bne.n	794a <__ledf2+0x5e>
    7924:	4330      	orrs	r0, r6
    7926:	4243      	negs	r3, r0
    7928:	4143      	adcs	r3, r0
    792a:	b2db      	uxtb	r3, r3
    792c:	2c00      	cmp	r4, #0
    792e:	d01f      	beq.n	7970 <__ledf2+0x84>
    7930:	2b00      	cmp	r3, #0
    7932:	d00c      	beq.n	794e <__ledf2+0x62>
    7934:	464b      	mov	r3, r9
    7936:	2001      	movs	r0, #1
    7938:	3b01      	subs	r3, #1
    793a:	4303      	orrs	r3, r0
    793c:	0018      	movs	r0, r3
    793e:	bc3c      	pop	{r2, r3, r4, r5}
    7940:	4690      	mov	r8, r2
    7942:	4699      	mov	r9, r3
    7944:	46a2      	mov	sl, r4
    7946:	46ab      	mov	fp, r5
    7948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    794a:	2c00      	cmp	r4, #0
    794c:	d016      	beq.n	797c <__ledf2+0x90>
    794e:	45cb      	cmp	fp, r9
    7950:	d017      	beq.n	7982 <__ledf2+0x96>
    7952:	465b      	mov	r3, fp
    7954:	4259      	negs	r1, r3
    7956:	2301      	movs	r3, #1
    7958:	430b      	orrs	r3, r1
    795a:	e7ef      	b.n	793c <__ledf2+0x50>
    795c:	0031      	movs	r1, r6
    795e:	2302      	movs	r3, #2
    7960:	4301      	orrs	r1, r0
    7962:	d1eb      	bne.n	793c <__ledf2+0x50>
    7964:	e7d9      	b.n	791a <__ledf2+0x2e>
    7966:	0039      	movs	r1, r7
    7968:	2302      	movs	r3, #2
    796a:	4311      	orrs	r1, r2
    796c:	d1e6      	bne.n	793c <__ledf2+0x50>
    796e:	e7d7      	b.n	7920 <__ledf2+0x34>
    7970:	433a      	orrs	r2, r7
    7972:	d1dd      	bne.n	7930 <__ledf2+0x44>
    7974:	2300      	movs	r3, #0
    7976:	2800      	cmp	r0, #0
    7978:	d0e0      	beq.n	793c <__ledf2+0x50>
    797a:	e7ea      	b.n	7952 <__ledf2+0x66>
    797c:	433a      	orrs	r2, r7
    797e:	d1e6      	bne.n	794e <__ledf2+0x62>
    7980:	e7e7      	b.n	7952 <__ledf2+0x66>
    7982:	42a5      	cmp	r5, r4
    7984:	dce5      	bgt.n	7952 <__ledf2+0x66>
    7986:	db05      	blt.n	7994 <__ledf2+0xa8>
    7988:	42be      	cmp	r6, r7
    798a:	d8e2      	bhi.n	7952 <__ledf2+0x66>
    798c:	d007      	beq.n	799e <__ledf2+0xb2>
    798e:	2300      	movs	r3, #0
    7990:	42be      	cmp	r6, r7
    7992:	d2d3      	bcs.n	793c <__ledf2+0x50>
    7994:	4659      	mov	r1, fp
    7996:	2301      	movs	r3, #1
    7998:	3901      	subs	r1, #1
    799a:	430b      	orrs	r3, r1
    799c:	e7ce      	b.n	793c <__ledf2+0x50>
    799e:	45c4      	cmp	ip, r8
    79a0:	d8d7      	bhi.n	7952 <__ledf2+0x66>
    79a2:	2300      	movs	r3, #0
    79a4:	45c4      	cmp	ip, r8
    79a6:	d3f5      	bcc.n	7994 <__ledf2+0xa8>
    79a8:	e7c8      	b.n	793c <__ledf2+0x50>
    79aa:	46c0      	nop			; (mov r8, r8)
    79ac:	000007ff 	.word	0x000007ff

000079b0 <__aeabi_dmul>:
    79b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79b2:	4657      	mov	r7, sl
    79b4:	4645      	mov	r5, r8
    79b6:	46de      	mov	lr, fp
    79b8:	464e      	mov	r6, r9
    79ba:	b5e0      	push	{r5, r6, r7, lr}
    79bc:	030c      	lsls	r4, r1, #12
    79be:	4698      	mov	r8, r3
    79c0:	004e      	lsls	r6, r1, #1
    79c2:	0b23      	lsrs	r3, r4, #12
    79c4:	b087      	sub	sp, #28
    79c6:	0007      	movs	r7, r0
    79c8:	4692      	mov	sl, r2
    79ca:	469b      	mov	fp, r3
    79cc:	0d76      	lsrs	r6, r6, #21
    79ce:	0fcd      	lsrs	r5, r1, #31
    79d0:	2e00      	cmp	r6, #0
    79d2:	d06b      	beq.n	7aac <__aeabi_dmul+0xfc>
    79d4:	4b6d      	ldr	r3, [pc, #436]	; (7b8c <__aeabi_dmul+0x1dc>)
    79d6:	429e      	cmp	r6, r3
    79d8:	d035      	beq.n	7a46 <__aeabi_dmul+0x96>
    79da:	2480      	movs	r4, #128	; 0x80
    79dc:	465b      	mov	r3, fp
    79de:	0f42      	lsrs	r2, r0, #29
    79e0:	0424      	lsls	r4, r4, #16
    79e2:	00db      	lsls	r3, r3, #3
    79e4:	4314      	orrs	r4, r2
    79e6:	431c      	orrs	r4, r3
    79e8:	00c3      	lsls	r3, r0, #3
    79ea:	4699      	mov	r9, r3
    79ec:	4b68      	ldr	r3, [pc, #416]	; (7b90 <__aeabi_dmul+0x1e0>)
    79ee:	46a3      	mov	fp, r4
    79f0:	469c      	mov	ip, r3
    79f2:	2300      	movs	r3, #0
    79f4:	2700      	movs	r7, #0
    79f6:	4466      	add	r6, ip
    79f8:	9302      	str	r3, [sp, #8]
    79fa:	4643      	mov	r3, r8
    79fc:	031c      	lsls	r4, r3, #12
    79fe:	005a      	lsls	r2, r3, #1
    7a00:	0fdb      	lsrs	r3, r3, #31
    7a02:	4650      	mov	r0, sl
    7a04:	0b24      	lsrs	r4, r4, #12
    7a06:	0d52      	lsrs	r2, r2, #21
    7a08:	4698      	mov	r8, r3
    7a0a:	d100      	bne.n	7a0e <__aeabi_dmul+0x5e>
    7a0c:	e076      	b.n	7afc <__aeabi_dmul+0x14c>
    7a0e:	4b5f      	ldr	r3, [pc, #380]	; (7b8c <__aeabi_dmul+0x1dc>)
    7a10:	429a      	cmp	r2, r3
    7a12:	d06d      	beq.n	7af0 <__aeabi_dmul+0x140>
    7a14:	2380      	movs	r3, #128	; 0x80
    7a16:	0f41      	lsrs	r1, r0, #29
    7a18:	041b      	lsls	r3, r3, #16
    7a1a:	430b      	orrs	r3, r1
    7a1c:	495c      	ldr	r1, [pc, #368]	; (7b90 <__aeabi_dmul+0x1e0>)
    7a1e:	00e4      	lsls	r4, r4, #3
    7a20:	468c      	mov	ip, r1
    7a22:	431c      	orrs	r4, r3
    7a24:	00c3      	lsls	r3, r0, #3
    7a26:	2000      	movs	r0, #0
    7a28:	4462      	add	r2, ip
    7a2a:	4641      	mov	r1, r8
    7a2c:	18b6      	adds	r6, r6, r2
    7a2e:	4069      	eors	r1, r5
    7a30:	1c72      	adds	r2, r6, #1
    7a32:	9101      	str	r1, [sp, #4]
    7a34:	4694      	mov	ip, r2
    7a36:	4307      	orrs	r7, r0
    7a38:	2f0f      	cmp	r7, #15
    7a3a:	d900      	bls.n	7a3e <__aeabi_dmul+0x8e>
    7a3c:	e0b0      	b.n	7ba0 <__aeabi_dmul+0x1f0>
    7a3e:	4a55      	ldr	r2, [pc, #340]	; (7b94 <__aeabi_dmul+0x1e4>)
    7a40:	00bf      	lsls	r7, r7, #2
    7a42:	59d2      	ldr	r2, [r2, r7]
    7a44:	4697      	mov	pc, r2
    7a46:	465b      	mov	r3, fp
    7a48:	4303      	orrs	r3, r0
    7a4a:	4699      	mov	r9, r3
    7a4c:	d000      	beq.n	7a50 <__aeabi_dmul+0xa0>
    7a4e:	e087      	b.n	7b60 <__aeabi_dmul+0x1b0>
    7a50:	2300      	movs	r3, #0
    7a52:	469b      	mov	fp, r3
    7a54:	3302      	adds	r3, #2
    7a56:	2708      	movs	r7, #8
    7a58:	9302      	str	r3, [sp, #8]
    7a5a:	e7ce      	b.n	79fa <__aeabi_dmul+0x4a>
    7a5c:	4642      	mov	r2, r8
    7a5e:	9201      	str	r2, [sp, #4]
    7a60:	2802      	cmp	r0, #2
    7a62:	d067      	beq.n	7b34 <__aeabi_dmul+0x184>
    7a64:	2803      	cmp	r0, #3
    7a66:	d100      	bne.n	7a6a <__aeabi_dmul+0xba>
    7a68:	e20e      	b.n	7e88 <__aeabi_dmul+0x4d8>
    7a6a:	2801      	cmp	r0, #1
    7a6c:	d000      	beq.n	7a70 <__aeabi_dmul+0xc0>
    7a6e:	e162      	b.n	7d36 <__aeabi_dmul+0x386>
    7a70:	2300      	movs	r3, #0
    7a72:	2400      	movs	r4, #0
    7a74:	2200      	movs	r2, #0
    7a76:	4699      	mov	r9, r3
    7a78:	9901      	ldr	r1, [sp, #4]
    7a7a:	4001      	ands	r1, r0
    7a7c:	b2cd      	uxtb	r5, r1
    7a7e:	2100      	movs	r1, #0
    7a80:	0312      	lsls	r2, r2, #12
    7a82:	0d0b      	lsrs	r3, r1, #20
    7a84:	0b12      	lsrs	r2, r2, #12
    7a86:	051b      	lsls	r3, r3, #20
    7a88:	4313      	orrs	r3, r2
    7a8a:	4a43      	ldr	r2, [pc, #268]	; (7b98 <__aeabi_dmul+0x1e8>)
    7a8c:	0524      	lsls	r4, r4, #20
    7a8e:	4013      	ands	r3, r2
    7a90:	431c      	orrs	r4, r3
    7a92:	0064      	lsls	r4, r4, #1
    7a94:	07ed      	lsls	r5, r5, #31
    7a96:	0864      	lsrs	r4, r4, #1
    7a98:	432c      	orrs	r4, r5
    7a9a:	4648      	mov	r0, r9
    7a9c:	0021      	movs	r1, r4
    7a9e:	b007      	add	sp, #28
    7aa0:	bc3c      	pop	{r2, r3, r4, r5}
    7aa2:	4690      	mov	r8, r2
    7aa4:	4699      	mov	r9, r3
    7aa6:	46a2      	mov	sl, r4
    7aa8:	46ab      	mov	fp, r5
    7aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7aac:	4303      	orrs	r3, r0
    7aae:	4699      	mov	r9, r3
    7ab0:	d04f      	beq.n	7b52 <__aeabi_dmul+0x1a2>
    7ab2:	465b      	mov	r3, fp
    7ab4:	2b00      	cmp	r3, #0
    7ab6:	d100      	bne.n	7aba <__aeabi_dmul+0x10a>
    7ab8:	e189      	b.n	7dce <__aeabi_dmul+0x41e>
    7aba:	4658      	mov	r0, fp
    7abc:	f000 feb8 	bl	8830 <__clzsi2>
    7ac0:	0003      	movs	r3, r0
    7ac2:	3b0b      	subs	r3, #11
    7ac4:	2b1c      	cmp	r3, #28
    7ac6:	dd00      	ble.n	7aca <__aeabi_dmul+0x11a>
    7ac8:	e17a      	b.n	7dc0 <__aeabi_dmul+0x410>
    7aca:	221d      	movs	r2, #29
    7acc:	1ad3      	subs	r3, r2, r3
    7ace:	003a      	movs	r2, r7
    7ad0:	0001      	movs	r1, r0
    7ad2:	465c      	mov	r4, fp
    7ad4:	40da      	lsrs	r2, r3
    7ad6:	3908      	subs	r1, #8
    7ad8:	408c      	lsls	r4, r1
    7ada:	0013      	movs	r3, r2
    7adc:	408f      	lsls	r7, r1
    7ade:	4323      	orrs	r3, r4
    7ae0:	469b      	mov	fp, r3
    7ae2:	46b9      	mov	r9, r7
    7ae4:	2300      	movs	r3, #0
    7ae6:	4e2d      	ldr	r6, [pc, #180]	; (7b9c <__aeabi_dmul+0x1ec>)
    7ae8:	2700      	movs	r7, #0
    7aea:	1a36      	subs	r6, r6, r0
    7aec:	9302      	str	r3, [sp, #8]
    7aee:	e784      	b.n	79fa <__aeabi_dmul+0x4a>
    7af0:	4653      	mov	r3, sl
    7af2:	4323      	orrs	r3, r4
    7af4:	d12a      	bne.n	7b4c <__aeabi_dmul+0x19c>
    7af6:	2400      	movs	r4, #0
    7af8:	2002      	movs	r0, #2
    7afa:	e796      	b.n	7a2a <__aeabi_dmul+0x7a>
    7afc:	4653      	mov	r3, sl
    7afe:	4323      	orrs	r3, r4
    7b00:	d020      	beq.n	7b44 <__aeabi_dmul+0x194>
    7b02:	2c00      	cmp	r4, #0
    7b04:	d100      	bne.n	7b08 <__aeabi_dmul+0x158>
    7b06:	e157      	b.n	7db8 <__aeabi_dmul+0x408>
    7b08:	0020      	movs	r0, r4
    7b0a:	f000 fe91 	bl	8830 <__clzsi2>
    7b0e:	0003      	movs	r3, r0
    7b10:	3b0b      	subs	r3, #11
    7b12:	2b1c      	cmp	r3, #28
    7b14:	dd00      	ble.n	7b18 <__aeabi_dmul+0x168>
    7b16:	e149      	b.n	7dac <__aeabi_dmul+0x3fc>
    7b18:	211d      	movs	r1, #29
    7b1a:	1acb      	subs	r3, r1, r3
    7b1c:	4651      	mov	r1, sl
    7b1e:	0002      	movs	r2, r0
    7b20:	40d9      	lsrs	r1, r3
    7b22:	4653      	mov	r3, sl
    7b24:	3a08      	subs	r2, #8
    7b26:	4094      	lsls	r4, r2
    7b28:	4093      	lsls	r3, r2
    7b2a:	430c      	orrs	r4, r1
    7b2c:	4a1b      	ldr	r2, [pc, #108]	; (7b9c <__aeabi_dmul+0x1ec>)
    7b2e:	1a12      	subs	r2, r2, r0
    7b30:	2000      	movs	r0, #0
    7b32:	e77a      	b.n	7a2a <__aeabi_dmul+0x7a>
    7b34:	2501      	movs	r5, #1
    7b36:	9b01      	ldr	r3, [sp, #4]
    7b38:	4c14      	ldr	r4, [pc, #80]	; (7b8c <__aeabi_dmul+0x1dc>)
    7b3a:	401d      	ands	r5, r3
    7b3c:	2300      	movs	r3, #0
    7b3e:	2200      	movs	r2, #0
    7b40:	4699      	mov	r9, r3
    7b42:	e79c      	b.n	7a7e <__aeabi_dmul+0xce>
    7b44:	2400      	movs	r4, #0
    7b46:	2200      	movs	r2, #0
    7b48:	2001      	movs	r0, #1
    7b4a:	e76e      	b.n	7a2a <__aeabi_dmul+0x7a>
    7b4c:	4653      	mov	r3, sl
    7b4e:	2003      	movs	r0, #3
    7b50:	e76b      	b.n	7a2a <__aeabi_dmul+0x7a>
    7b52:	2300      	movs	r3, #0
    7b54:	469b      	mov	fp, r3
    7b56:	3301      	adds	r3, #1
    7b58:	2704      	movs	r7, #4
    7b5a:	2600      	movs	r6, #0
    7b5c:	9302      	str	r3, [sp, #8]
    7b5e:	e74c      	b.n	79fa <__aeabi_dmul+0x4a>
    7b60:	2303      	movs	r3, #3
    7b62:	4681      	mov	r9, r0
    7b64:	270c      	movs	r7, #12
    7b66:	9302      	str	r3, [sp, #8]
    7b68:	e747      	b.n	79fa <__aeabi_dmul+0x4a>
    7b6a:	2280      	movs	r2, #128	; 0x80
    7b6c:	2300      	movs	r3, #0
    7b6e:	2500      	movs	r5, #0
    7b70:	0312      	lsls	r2, r2, #12
    7b72:	4699      	mov	r9, r3
    7b74:	4c05      	ldr	r4, [pc, #20]	; (7b8c <__aeabi_dmul+0x1dc>)
    7b76:	e782      	b.n	7a7e <__aeabi_dmul+0xce>
    7b78:	465c      	mov	r4, fp
    7b7a:	464b      	mov	r3, r9
    7b7c:	9802      	ldr	r0, [sp, #8]
    7b7e:	e76f      	b.n	7a60 <__aeabi_dmul+0xb0>
    7b80:	465c      	mov	r4, fp
    7b82:	464b      	mov	r3, r9
    7b84:	9501      	str	r5, [sp, #4]
    7b86:	9802      	ldr	r0, [sp, #8]
    7b88:	e76a      	b.n	7a60 <__aeabi_dmul+0xb0>
    7b8a:	46c0      	nop			; (mov r8, r8)
    7b8c:	000007ff 	.word	0x000007ff
    7b90:	fffffc01 	.word	0xfffffc01
    7b94:	00008d10 	.word	0x00008d10
    7b98:	800fffff 	.word	0x800fffff
    7b9c:	fffffc0d 	.word	0xfffffc0d
    7ba0:	464a      	mov	r2, r9
    7ba2:	4649      	mov	r1, r9
    7ba4:	0c17      	lsrs	r7, r2, #16
    7ba6:	0c1a      	lsrs	r2, r3, #16
    7ba8:	041b      	lsls	r3, r3, #16
    7baa:	0c1b      	lsrs	r3, r3, #16
    7bac:	0408      	lsls	r0, r1, #16
    7bae:	0019      	movs	r1, r3
    7bb0:	0c00      	lsrs	r0, r0, #16
    7bb2:	4341      	muls	r1, r0
    7bb4:	0015      	movs	r5, r2
    7bb6:	4688      	mov	r8, r1
    7bb8:	0019      	movs	r1, r3
    7bba:	437d      	muls	r5, r7
    7bbc:	4379      	muls	r1, r7
    7bbe:	9503      	str	r5, [sp, #12]
    7bc0:	4689      	mov	r9, r1
    7bc2:	0029      	movs	r1, r5
    7bc4:	0015      	movs	r5, r2
    7bc6:	4345      	muls	r5, r0
    7bc8:	444d      	add	r5, r9
    7bca:	9502      	str	r5, [sp, #8]
    7bcc:	4645      	mov	r5, r8
    7bce:	0c2d      	lsrs	r5, r5, #16
    7bd0:	46aa      	mov	sl, r5
    7bd2:	9d02      	ldr	r5, [sp, #8]
    7bd4:	4455      	add	r5, sl
    7bd6:	45a9      	cmp	r9, r5
    7bd8:	d906      	bls.n	7be8 <__aeabi_dmul+0x238>
    7bda:	468a      	mov	sl, r1
    7bdc:	2180      	movs	r1, #128	; 0x80
    7bde:	0249      	lsls	r1, r1, #9
    7be0:	4689      	mov	r9, r1
    7be2:	44ca      	add	sl, r9
    7be4:	4651      	mov	r1, sl
    7be6:	9103      	str	r1, [sp, #12]
    7be8:	0c29      	lsrs	r1, r5, #16
    7bea:	9104      	str	r1, [sp, #16]
    7bec:	4641      	mov	r1, r8
    7bee:	0409      	lsls	r1, r1, #16
    7bf0:	042d      	lsls	r5, r5, #16
    7bf2:	0c09      	lsrs	r1, r1, #16
    7bf4:	4688      	mov	r8, r1
    7bf6:	0029      	movs	r1, r5
    7bf8:	0c25      	lsrs	r5, r4, #16
    7bfa:	0424      	lsls	r4, r4, #16
    7bfc:	4441      	add	r1, r8
    7bfe:	0c24      	lsrs	r4, r4, #16
    7c00:	9105      	str	r1, [sp, #20]
    7c02:	0021      	movs	r1, r4
    7c04:	4341      	muls	r1, r0
    7c06:	4688      	mov	r8, r1
    7c08:	0021      	movs	r1, r4
    7c0a:	4379      	muls	r1, r7
    7c0c:	468a      	mov	sl, r1
    7c0e:	4368      	muls	r0, r5
    7c10:	4641      	mov	r1, r8
    7c12:	4450      	add	r0, sl
    7c14:	4681      	mov	r9, r0
    7c16:	0c08      	lsrs	r0, r1, #16
    7c18:	4448      	add	r0, r9
    7c1a:	436f      	muls	r7, r5
    7c1c:	4582      	cmp	sl, r0
    7c1e:	d903      	bls.n	7c28 <__aeabi_dmul+0x278>
    7c20:	2180      	movs	r1, #128	; 0x80
    7c22:	0249      	lsls	r1, r1, #9
    7c24:	4689      	mov	r9, r1
    7c26:	444f      	add	r7, r9
    7c28:	0c01      	lsrs	r1, r0, #16
    7c2a:	4689      	mov	r9, r1
    7c2c:	0039      	movs	r1, r7
    7c2e:	4449      	add	r1, r9
    7c30:	9102      	str	r1, [sp, #8]
    7c32:	4641      	mov	r1, r8
    7c34:	040f      	lsls	r7, r1, #16
    7c36:	9904      	ldr	r1, [sp, #16]
    7c38:	0c3f      	lsrs	r7, r7, #16
    7c3a:	4688      	mov	r8, r1
    7c3c:	0400      	lsls	r0, r0, #16
    7c3e:	19c0      	adds	r0, r0, r7
    7c40:	4480      	add	r8, r0
    7c42:	4641      	mov	r1, r8
    7c44:	9104      	str	r1, [sp, #16]
    7c46:	4659      	mov	r1, fp
    7c48:	0c0f      	lsrs	r7, r1, #16
    7c4a:	0409      	lsls	r1, r1, #16
    7c4c:	0c09      	lsrs	r1, r1, #16
    7c4e:	4688      	mov	r8, r1
    7c50:	4359      	muls	r1, r3
    7c52:	468a      	mov	sl, r1
    7c54:	0039      	movs	r1, r7
    7c56:	4351      	muls	r1, r2
    7c58:	4689      	mov	r9, r1
    7c5a:	4641      	mov	r1, r8
    7c5c:	434a      	muls	r2, r1
    7c5e:	4651      	mov	r1, sl
    7c60:	0c09      	lsrs	r1, r1, #16
    7c62:	468b      	mov	fp, r1
    7c64:	437b      	muls	r3, r7
    7c66:	18d2      	adds	r2, r2, r3
    7c68:	445a      	add	r2, fp
    7c6a:	4293      	cmp	r3, r2
    7c6c:	d903      	bls.n	7c76 <__aeabi_dmul+0x2c6>
    7c6e:	2380      	movs	r3, #128	; 0x80
    7c70:	025b      	lsls	r3, r3, #9
    7c72:	469b      	mov	fp, r3
    7c74:	44d9      	add	r9, fp
    7c76:	4651      	mov	r1, sl
    7c78:	0409      	lsls	r1, r1, #16
    7c7a:	0c09      	lsrs	r1, r1, #16
    7c7c:	468a      	mov	sl, r1
    7c7e:	4641      	mov	r1, r8
    7c80:	4361      	muls	r1, r4
    7c82:	437c      	muls	r4, r7
    7c84:	0c13      	lsrs	r3, r2, #16
    7c86:	0412      	lsls	r2, r2, #16
    7c88:	444b      	add	r3, r9
    7c8a:	4452      	add	r2, sl
    7c8c:	46a1      	mov	r9, r4
    7c8e:	468a      	mov	sl, r1
    7c90:	003c      	movs	r4, r7
    7c92:	4641      	mov	r1, r8
    7c94:	436c      	muls	r4, r5
    7c96:	434d      	muls	r5, r1
    7c98:	4651      	mov	r1, sl
    7c9a:	444d      	add	r5, r9
    7c9c:	0c0f      	lsrs	r7, r1, #16
    7c9e:	197d      	adds	r5, r7, r5
    7ca0:	45a9      	cmp	r9, r5
    7ca2:	d903      	bls.n	7cac <__aeabi_dmul+0x2fc>
    7ca4:	2180      	movs	r1, #128	; 0x80
    7ca6:	0249      	lsls	r1, r1, #9
    7ca8:	4688      	mov	r8, r1
    7caa:	4444      	add	r4, r8
    7cac:	9f04      	ldr	r7, [sp, #16]
    7cae:	9903      	ldr	r1, [sp, #12]
    7cb0:	46b8      	mov	r8, r7
    7cb2:	4441      	add	r1, r8
    7cb4:	468b      	mov	fp, r1
    7cb6:	4583      	cmp	fp, r0
    7cb8:	4180      	sbcs	r0, r0
    7cba:	4241      	negs	r1, r0
    7cbc:	4688      	mov	r8, r1
    7cbe:	4651      	mov	r1, sl
    7cc0:	0408      	lsls	r0, r1, #16
    7cc2:	042f      	lsls	r7, r5, #16
    7cc4:	0c00      	lsrs	r0, r0, #16
    7cc6:	183f      	adds	r7, r7, r0
    7cc8:	4658      	mov	r0, fp
    7cca:	9902      	ldr	r1, [sp, #8]
    7ccc:	1810      	adds	r0, r2, r0
    7cce:	4689      	mov	r9, r1
    7cd0:	4290      	cmp	r0, r2
    7cd2:	4192      	sbcs	r2, r2
    7cd4:	444f      	add	r7, r9
    7cd6:	46ba      	mov	sl, r7
    7cd8:	4252      	negs	r2, r2
    7cda:	4699      	mov	r9, r3
    7cdc:	4693      	mov	fp, r2
    7cde:	44c2      	add	sl, r8
    7ce0:	44d1      	add	r9, sl
    7ce2:	44cb      	add	fp, r9
    7ce4:	428f      	cmp	r7, r1
    7ce6:	41bf      	sbcs	r7, r7
    7ce8:	45c2      	cmp	sl, r8
    7cea:	4189      	sbcs	r1, r1
    7cec:	4599      	cmp	r9, r3
    7cee:	419b      	sbcs	r3, r3
    7cf0:	4593      	cmp	fp, r2
    7cf2:	4192      	sbcs	r2, r2
    7cf4:	427f      	negs	r7, r7
    7cf6:	4249      	negs	r1, r1
    7cf8:	0c2d      	lsrs	r5, r5, #16
    7cfa:	4252      	negs	r2, r2
    7cfc:	430f      	orrs	r7, r1
    7cfe:	425b      	negs	r3, r3
    7d00:	4313      	orrs	r3, r2
    7d02:	197f      	adds	r7, r7, r5
    7d04:	18ff      	adds	r7, r7, r3
    7d06:	465b      	mov	r3, fp
    7d08:	193c      	adds	r4, r7, r4
    7d0a:	0ddb      	lsrs	r3, r3, #23
    7d0c:	9a05      	ldr	r2, [sp, #20]
    7d0e:	0264      	lsls	r4, r4, #9
    7d10:	431c      	orrs	r4, r3
    7d12:	0243      	lsls	r3, r0, #9
    7d14:	4313      	orrs	r3, r2
    7d16:	1e5d      	subs	r5, r3, #1
    7d18:	41ab      	sbcs	r3, r5
    7d1a:	465a      	mov	r2, fp
    7d1c:	0dc0      	lsrs	r0, r0, #23
    7d1e:	4303      	orrs	r3, r0
    7d20:	0252      	lsls	r2, r2, #9
    7d22:	4313      	orrs	r3, r2
    7d24:	01e2      	lsls	r2, r4, #7
    7d26:	d556      	bpl.n	7dd6 <__aeabi_dmul+0x426>
    7d28:	2001      	movs	r0, #1
    7d2a:	085a      	lsrs	r2, r3, #1
    7d2c:	4003      	ands	r3, r0
    7d2e:	4313      	orrs	r3, r2
    7d30:	07e2      	lsls	r2, r4, #31
    7d32:	4313      	orrs	r3, r2
    7d34:	0864      	lsrs	r4, r4, #1
    7d36:	485a      	ldr	r0, [pc, #360]	; (7ea0 <__aeabi_dmul+0x4f0>)
    7d38:	4460      	add	r0, ip
    7d3a:	2800      	cmp	r0, #0
    7d3c:	dd4d      	ble.n	7dda <__aeabi_dmul+0x42a>
    7d3e:	075a      	lsls	r2, r3, #29
    7d40:	d009      	beq.n	7d56 <__aeabi_dmul+0x3a6>
    7d42:	220f      	movs	r2, #15
    7d44:	401a      	ands	r2, r3
    7d46:	2a04      	cmp	r2, #4
    7d48:	d005      	beq.n	7d56 <__aeabi_dmul+0x3a6>
    7d4a:	1d1a      	adds	r2, r3, #4
    7d4c:	429a      	cmp	r2, r3
    7d4e:	419b      	sbcs	r3, r3
    7d50:	425b      	negs	r3, r3
    7d52:	18e4      	adds	r4, r4, r3
    7d54:	0013      	movs	r3, r2
    7d56:	01e2      	lsls	r2, r4, #7
    7d58:	d504      	bpl.n	7d64 <__aeabi_dmul+0x3b4>
    7d5a:	2080      	movs	r0, #128	; 0x80
    7d5c:	4a51      	ldr	r2, [pc, #324]	; (7ea4 <__aeabi_dmul+0x4f4>)
    7d5e:	00c0      	lsls	r0, r0, #3
    7d60:	4014      	ands	r4, r2
    7d62:	4460      	add	r0, ip
    7d64:	4a50      	ldr	r2, [pc, #320]	; (7ea8 <__aeabi_dmul+0x4f8>)
    7d66:	4290      	cmp	r0, r2
    7d68:	dd00      	ble.n	7d6c <__aeabi_dmul+0x3bc>
    7d6a:	e6e3      	b.n	7b34 <__aeabi_dmul+0x184>
    7d6c:	2501      	movs	r5, #1
    7d6e:	08db      	lsrs	r3, r3, #3
    7d70:	0762      	lsls	r2, r4, #29
    7d72:	431a      	orrs	r2, r3
    7d74:	0264      	lsls	r4, r4, #9
    7d76:	9b01      	ldr	r3, [sp, #4]
    7d78:	4691      	mov	r9, r2
    7d7a:	0b22      	lsrs	r2, r4, #12
    7d7c:	0544      	lsls	r4, r0, #21
    7d7e:	0d64      	lsrs	r4, r4, #21
    7d80:	401d      	ands	r5, r3
    7d82:	e67c      	b.n	7a7e <__aeabi_dmul+0xce>
    7d84:	2280      	movs	r2, #128	; 0x80
    7d86:	4659      	mov	r1, fp
    7d88:	0312      	lsls	r2, r2, #12
    7d8a:	4211      	tst	r1, r2
    7d8c:	d008      	beq.n	7da0 <__aeabi_dmul+0x3f0>
    7d8e:	4214      	tst	r4, r2
    7d90:	d106      	bne.n	7da0 <__aeabi_dmul+0x3f0>
    7d92:	4322      	orrs	r2, r4
    7d94:	0312      	lsls	r2, r2, #12
    7d96:	0b12      	lsrs	r2, r2, #12
    7d98:	4645      	mov	r5, r8
    7d9a:	4699      	mov	r9, r3
    7d9c:	4c43      	ldr	r4, [pc, #268]	; (7eac <__aeabi_dmul+0x4fc>)
    7d9e:	e66e      	b.n	7a7e <__aeabi_dmul+0xce>
    7da0:	465b      	mov	r3, fp
    7da2:	431a      	orrs	r2, r3
    7da4:	0312      	lsls	r2, r2, #12
    7da6:	0b12      	lsrs	r2, r2, #12
    7da8:	4c40      	ldr	r4, [pc, #256]	; (7eac <__aeabi_dmul+0x4fc>)
    7daa:	e668      	b.n	7a7e <__aeabi_dmul+0xce>
    7dac:	0003      	movs	r3, r0
    7dae:	4654      	mov	r4, sl
    7db0:	3b28      	subs	r3, #40	; 0x28
    7db2:	409c      	lsls	r4, r3
    7db4:	2300      	movs	r3, #0
    7db6:	e6b9      	b.n	7b2c <__aeabi_dmul+0x17c>
    7db8:	f000 fd3a 	bl	8830 <__clzsi2>
    7dbc:	3020      	adds	r0, #32
    7dbe:	e6a6      	b.n	7b0e <__aeabi_dmul+0x15e>
    7dc0:	0003      	movs	r3, r0
    7dc2:	3b28      	subs	r3, #40	; 0x28
    7dc4:	409f      	lsls	r7, r3
    7dc6:	2300      	movs	r3, #0
    7dc8:	46bb      	mov	fp, r7
    7dca:	4699      	mov	r9, r3
    7dcc:	e68a      	b.n	7ae4 <__aeabi_dmul+0x134>
    7dce:	f000 fd2f 	bl	8830 <__clzsi2>
    7dd2:	3020      	adds	r0, #32
    7dd4:	e674      	b.n	7ac0 <__aeabi_dmul+0x110>
    7dd6:	46b4      	mov	ip, r6
    7dd8:	e7ad      	b.n	7d36 <__aeabi_dmul+0x386>
    7dda:	2501      	movs	r5, #1
    7ddc:	1a2a      	subs	r2, r5, r0
    7dde:	2a38      	cmp	r2, #56	; 0x38
    7de0:	dd06      	ble.n	7df0 <__aeabi_dmul+0x440>
    7de2:	9b01      	ldr	r3, [sp, #4]
    7de4:	2400      	movs	r4, #0
    7de6:	401d      	ands	r5, r3
    7de8:	2300      	movs	r3, #0
    7dea:	2200      	movs	r2, #0
    7dec:	4699      	mov	r9, r3
    7dee:	e646      	b.n	7a7e <__aeabi_dmul+0xce>
    7df0:	2a1f      	cmp	r2, #31
    7df2:	dc21      	bgt.n	7e38 <__aeabi_dmul+0x488>
    7df4:	2520      	movs	r5, #32
    7df6:	0020      	movs	r0, r4
    7df8:	1aad      	subs	r5, r5, r2
    7dfa:	001e      	movs	r6, r3
    7dfc:	40ab      	lsls	r3, r5
    7dfe:	40a8      	lsls	r0, r5
    7e00:	40d6      	lsrs	r6, r2
    7e02:	1e5d      	subs	r5, r3, #1
    7e04:	41ab      	sbcs	r3, r5
    7e06:	4330      	orrs	r0, r6
    7e08:	4318      	orrs	r0, r3
    7e0a:	40d4      	lsrs	r4, r2
    7e0c:	0743      	lsls	r3, r0, #29
    7e0e:	d009      	beq.n	7e24 <__aeabi_dmul+0x474>
    7e10:	230f      	movs	r3, #15
    7e12:	4003      	ands	r3, r0
    7e14:	2b04      	cmp	r3, #4
    7e16:	d005      	beq.n	7e24 <__aeabi_dmul+0x474>
    7e18:	0003      	movs	r3, r0
    7e1a:	1d18      	adds	r0, r3, #4
    7e1c:	4298      	cmp	r0, r3
    7e1e:	419b      	sbcs	r3, r3
    7e20:	425b      	negs	r3, r3
    7e22:	18e4      	adds	r4, r4, r3
    7e24:	0223      	lsls	r3, r4, #8
    7e26:	d521      	bpl.n	7e6c <__aeabi_dmul+0x4bc>
    7e28:	2501      	movs	r5, #1
    7e2a:	9b01      	ldr	r3, [sp, #4]
    7e2c:	2401      	movs	r4, #1
    7e2e:	401d      	ands	r5, r3
    7e30:	2300      	movs	r3, #0
    7e32:	2200      	movs	r2, #0
    7e34:	4699      	mov	r9, r3
    7e36:	e622      	b.n	7a7e <__aeabi_dmul+0xce>
    7e38:	251f      	movs	r5, #31
    7e3a:	0021      	movs	r1, r4
    7e3c:	426d      	negs	r5, r5
    7e3e:	1a28      	subs	r0, r5, r0
    7e40:	40c1      	lsrs	r1, r0
    7e42:	0008      	movs	r0, r1
    7e44:	2a20      	cmp	r2, #32
    7e46:	d01d      	beq.n	7e84 <__aeabi_dmul+0x4d4>
    7e48:	355f      	adds	r5, #95	; 0x5f
    7e4a:	1aaa      	subs	r2, r5, r2
    7e4c:	4094      	lsls	r4, r2
    7e4e:	4323      	orrs	r3, r4
    7e50:	1e5c      	subs	r4, r3, #1
    7e52:	41a3      	sbcs	r3, r4
    7e54:	2507      	movs	r5, #7
    7e56:	4303      	orrs	r3, r0
    7e58:	401d      	ands	r5, r3
    7e5a:	2200      	movs	r2, #0
    7e5c:	2d00      	cmp	r5, #0
    7e5e:	d009      	beq.n	7e74 <__aeabi_dmul+0x4c4>
    7e60:	220f      	movs	r2, #15
    7e62:	2400      	movs	r4, #0
    7e64:	401a      	ands	r2, r3
    7e66:	0018      	movs	r0, r3
    7e68:	2a04      	cmp	r2, #4
    7e6a:	d1d6      	bne.n	7e1a <__aeabi_dmul+0x46a>
    7e6c:	0003      	movs	r3, r0
    7e6e:	0765      	lsls	r5, r4, #29
    7e70:	0264      	lsls	r4, r4, #9
    7e72:	0b22      	lsrs	r2, r4, #12
    7e74:	08db      	lsrs	r3, r3, #3
    7e76:	432b      	orrs	r3, r5
    7e78:	2501      	movs	r5, #1
    7e7a:	4699      	mov	r9, r3
    7e7c:	9b01      	ldr	r3, [sp, #4]
    7e7e:	2400      	movs	r4, #0
    7e80:	401d      	ands	r5, r3
    7e82:	e5fc      	b.n	7a7e <__aeabi_dmul+0xce>
    7e84:	2400      	movs	r4, #0
    7e86:	e7e2      	b.n	7e4e <__aeabi_dmul+0x49e>
    7e88:	2280      	movs	r2, #128	; 0x80
    7e8a:	2501      	movs	r5, #1
    7e8c:	0312      	lsls	r2, r2, #12
    7e8e:	4322      	orrs	r2, r4
    7e90:	9901      	ldr	r1, [sp, #4]
    7e92:	0312      	lsls	r2, r2, #12
    7e94:	0b12      	lsrs	r2, r2, #12
    7e96:	400d      	ands	r5, r1
    7e98:	4699      	mov	r9, r3
    7e9a:	4c04      	ldr	r4, [pc, #16]	; (7eac <__aeabi_dmul+0x4fc>)
    7e9c:	e5ef      	b.n	7a7e <__aeabi_dmul+0xce>
    7e9e:	46c0      	nop			; (mov r8, r8)
    7ea0:	000003ff 	.word	0x000003ff
    7ea4:	feffffff 	.word	0xfeffffff
    7ea8:	000007fe 	.word	0x000007fe
    7eac:	000007ff 	.word	0x000007ff

00007eb0 <__aeabi_dsub>:
    7eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7eb2:	4646      	mov	r6, r8
    7eb4:	46d6      	mov	lr, sl
    7eb6:	464f      	mov	r7, r9
    7eb8:	030c      	lsls	r4, r1, #12
    7eba:	b5c0      	push	{r6, r7, lr}
    7ebc:	0fcd      	lsrs	r5, r1, #31
    7ebe:	004e      	lsls	r6, r1, #1
    7ec0:	0a61      	lsrs	r1, r4, #9
    7ec2:	0f44      	lsrs	r4, r0, #29
    7ec4:	430c      	orrs	r4, r1
    7ec6:	00c1      	lsls	r1, r0, #3
    7ec8:	0058      	lsls	r0, r3, #1
    7eca:	0d40      	lsrs	r0, r0, #21
    7ecc:	4684      	mov	ip, r0
    7ece:	468a      	mov	sl, r1
    7ed0:	000f      	movs	r7, r1
    7ed2:	0319      	lsls	r1, r3, #12
    7ed4:	0f50      	lsrs	r0, r2, #29
    7ed6:	0a49      	lsrs	r1, r1, #9
    7ed8:	4301      	orrs	r1, r0
    7eda:	48c6      	ldr	r0, [pc, #792]	; (81f4 <__aeabi_dsub+0x344>)
    7edc:	0d76      	lsrs	r6, r6, #21
    7ede:	46a8      	mov	r8, r5
    7ee0:	0fdb      	lsrs	r3, r3, #31
    7ee2:	00d2      	lsls	r2, r2, #3
    7ee4:	4584      	cmp	ip, r0
    7ee6:	d100      	bne.n	7eea <__aeabi_dsub+0x3a>
    7ee8:	e0d8      	b.n	809c <__aeabi_dsub+0x1ec>
    7eea:	2001      	movs	r0, #1
    7eec:	4043      	eors	r3, r0
    7eee:	42ab      	cmp	r3, r5
    7ef0:	d100      	bne.n	7ef4 <__aeabi_dsub+0x44>
    7ef2:	e0a6      	b.n	8042 <__aeabi_dsub+0x192>
    7ef4:	4660      	mov	r0, ip
    7ef6:	1a35      	subs	r5, r6, r0
    7ef8:	2d00      	cmp	r5, #0
    7efa:	dc00      	bgt.n	7efe <__aeabi_dsub+0x4e>
    7efc:	e105      	b.n	810a <__aeabi_dsub+0x25a>
    7efe:	2800      	cmp	r0, #0
    7f00:	d110      	bne.n	7f24 <__aeabi_dsub+0x74>
    7f02:	000b      	movs	r3, r1
    7f04:	4313      	orrs	r3, r2
    7f06:	d100      	bne.n	7f0a <__aeabi_dsub+0x5a>
    7f08:	e0d7      	b.n	80ba <__aeabi_dsub+0x20a>
    7f0a:	1e6b      	subs	r3, r5, #1
    7f0c:	2b00      	cmp	r3, #0
    7f0e:	d000      	beq.n	7f12 <__aeabi_dsub+0x62>
    7f10:	e14b      	b.n	81aa <__aeabi_dsub+0x2fa>
    7f12:	4653      	mov	r3, sl
    7f14:	1a9f      	subs	r7, r3, r2
    7f16:	45ba      	cmp	sl, r7
    7f18:	4180      	sbcs	r0, r0
    7f1a:	1a64      	subs	r4, r4, r1
    7f1c:	4240      	negs	r0, r0
    7f1e:	1a24      	subs	r4, r4, r0
    7f20:	2601      	movs	r6, #1
    7f22:	e01e      	b.n	7f62 <__aeabi_dsub+0xb2>
    7f24:	4bb3      	ldr	r3, [pc, #716]	; (81f4 <__aeabi_dsub+0x344>)
    7f26:	429e      	cmp	r6, r3
    7f28:	d048      	beq.n	7fbc <__aeabi_dsub+0x10c>
    7f2a:	2380      	movs	r3, #128	; 0x80
    7f2c:	041b      	lsls	r3, r3, #16
    7f2e:	4319      	orrs	r1, r3
    7f30:	2d38      	cmp	r5, #56	; 0x38
    7f32:	dd00      	ble.n	7f36 <__aeabi_dsub+0x86>
    7f34:	e119      	b.n	816a <__aeabi_dsub+0x2ba>
    7f36:	2d1f      	cmp	r5, #31
    7f38:	dd00      	ble.n	7f3c <__aeabi_dsub+0x8c>
    7f3a:	e14c      	b.n	81d6 <__aeabi_dsub+0x326>
    7f3c:	2320      	movs	r3, #32
    7f3e:	000f      	movs	r7, r1
    7f40:	1b5b      	subs	r3, r3, r5
    7f42:	0010      	movs	r0, r2
    7f44:	409a      	lsls	r2, r3
    7f46:	409f      	lsls	r7, r3
    7f48:	40e8      	lsrs	r0, r5
    7f4a:	1e53      	subs	r3, r2, #1
    7f4c:	419a      	sbcs	r2, r3
    7f4e:	40e9      	lsrs	r1, r5
    7f50:	4307      	orrs	r7, r0
    7f52:	4317      	orrs	r7, r2
    7f54:	4653      	mov	r3, sl
    7f56:	1bdf      	subs	r7, r3, r7
    7f58:	1a61      	subs	r1, r4, r1
    7f5a:	45ba      	cmp	sl, r7
    7f5c:	41a4      	sbcs	r4, r4
    7f5e:	4264      	negs	r4, r4
    7f60:	1b0c      	subs	r4, r1, r4
    7f62:	0223      	lsls	r3, r4, #8
    7f64:	d400      	bmi.n	7f68 <__aeabi_dsub+0xb8>
    7f66:	e0c5      	b.n	80f4 <__aeabi_dsub+0x244>
    7f68:	0264      	lsls	r4, r4, #9
    7f6a:	0a65      	lsrs	r5, r4, #9
    7f6c:	2d00      	cmp	r5, #0
    7f6e:	d100      	bne.n	7f72 <__aeabi_dsub+0xc2>
    7f70:	e0f6      	b.n	8160 <__aeabi_dsub+0x2b0>
    7f72:	0028      	movs	r0, r5
    7f74:	f000 fc5c 	bl	8830 <__clzsi2>
    7f78:	0003      	movs	r3, r0
    7f7a:	3b08      	subs	r3, #8
    7f7c:	2b1f      	cmp	r3, #31
    7f7e:	dd00      	ble.n	7f82 <__aeabi_dsub+0xd2>
    7f80:	e0e9      	b.n	8156 <__aeabi_dsub+0x2a6>
    7f82:	2220      	movs	r2, #32
    7f84:	003c      	movs	r4, r7
    7f86:	1ad2      	subs	r2, r2, r3
    7f88:	409d      	lsls	r5, r3
    7f8a:	40d4      	lsrs	r4, r2
    7f8c:	409f      	lsls	r7, r3
    7f8e:	4325      	orrs	r5, r4
    7f90:	429e      	cmp	r6, r3
    7f92:	dd00      	ble.n	7f96 <__aeabi_dsub+0xe6>
    7f94:	e0db      	b.n	814e <__aeabi_dsub+0x29e>
    7f96:	1b9e      	subs	r6, r3, r6
    7f98:	1c73      	adds	r3, r6, #1
    7f9a:	2b1f      	cmp	r3, #31
    7f9c:	dd00      	ble.n	7fa0 <__aeabi_dsub+0xf0>
    7f9e:	e10a      	b.n	81b6 <__aeabi_dsub+0x306>
    7fa0:	2220      	movs	r2, #32
    7fa2:	0038      	movs	r0, r7
    7fa4:	1ad2      	subs	r2, r2, r3
    7fa6:	0029      	movs	r1, r5
    7fa8:	4097      	lsls	r7, r2
    7faa:	002c      	movs	r4, r5
    7fac:	4091      	lsls	r1, r2
    7fae:	40d8      	lsrs	r0, r3
    7fb0:	1e7a      	subs	r2, r7, #1
    7fb2:	4197      	sbcs	r7, r2
    7fb4:	40dc      	lsrs	r4, r3
    7fb6:	2600      	movs	r6, #0
    7fb8:	4301      	orrs	r1, r0
    7fba:	430f      	orrs	r7, r1
    7fbc:	077b      	lsls	r3, r7, #29
    7fbe:	d009      	beq.n	7fd4 <__aeabi_dsub+0x124>
    7fc0:	230f      	movs	r3, #15
    7fc2:	403b      	ands	r3, r7
    7fc4:	2b04      	cmp	r3, #4
    7fc6:	d005      	beq.n	7fd4 <__aeabi_dsub+0x124>
    7fc8:	1d3b      	adds	r3, r7, #4
    7fca:	42bb      	cmp	r3, r7
    7fcc:	41bf      	sbcs	r7, r7
    7fce:	427f      	negs	r7, r7
    7fd0:	19e4      	adds	r4, r4, r7
    7fd2:	001f      	movs	r7, r3
    7fd4:	0223      	lsls	r3, r4, #8
    7fd6:	d525      	bpl.n	8024 <__aeabi_dsub+0x174>
    7fd8:	4b86      	ldr	r3, [pc, #536]	; (81f4 <__aeabi_dsub+0x344>)
    7fda:	3601      	adds	r6, #1
    7fdc:	429e      	cmp	r6, r3
    7fde:	d100      	bne.n	7fe2 <__aeabi_dsub+0x132>
    7fe0:	e0af      	b.n	8142 <__aeabi_dsub+0x292>
    7fe2:	4b85      	ldr	r3, [pc, #532]	; (81f8 <__aeabi_dsub+0x348>)
    7fe4:	2501      	movs	r5, #1
    7fe6:	401c      	ands	r4, r3
    7fe8:	4643      	mov	r3, r8
    7fea:	0762      	lsls	r2, r4, #29
    7fec:	08ff      	lsrs	r7, r7, #3
    7fee:	0264      	lsls	r4, r4, #9
    7ff0:	0576      	lsls	r6, r6, #21
    7ff2:	4317      	orrs	r7, r2
    7ff4:	0b24      	lsrs	r4, r4, #12
    7ff6:	0d76      	lsrs	r6, r6, #21
    7ff8:	401d      	ands	r5, r3
    7ffa:	2100      	movs	r1, #0
    7ffc:	0324      	lsls	r4, r4, #12
    7ffe:	0b23      	lsrs	r3, r4, #12
    8000:	0d0c      	lsrs	r4, r1, #20
    8002:	4a7e      	ldr	r2, [pc, #504]	; (81fc <__aeabi_dsub+0x34c>)
    8004:	0524      	lsls	r4, r4, #20
    8006:	431c      	orrs	r4, r3
    8008:	4014      	ands	r4, r2
    800a:	0533      	lsls	r3, r6, #20
    800c:	4323      	orrs	r3, r4
    800e:	005b      	lsls	r3, r3, #1
    8010:	07ed      	lsls	r5, r5, #31
    8012:	085b      	lsrs	r3, r3, #1
    8014:	432b      	orrs	r3, r5
    8016:	0038      	movs	r0, r7
    8018:	0019      	movs	r1, r3
    801a:	bc1c      	pop	{r2, r3, r4}
    801c:	4690      	mov	r8, r2
    801e:	4699      	mov	r9, r3
    8020:	46a2      	mov	sl, r4
    8022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8024:	2501      	movs	r5, #1
    8026:	4643      	mov	r3, r8
    8028:	0762      	lsls	r2, r4, #29
    802a:	08ff      	lsrs	r7, r7, #3
    802c:	4317      	orrs	r7, r2
    802e:	08e4      	lsrs	r4, r4, #3
    8030:	401d      	ands	r5, r3
    8032:	4b70      	ldr	r3, [pc, #448]	; (81f4 <__aeabi_dsub+0x344>)
    8034:	429e      	cmp	r6, r3
    8036:	d036      	beq.n	80a6 <__aeabi_dsub+0x1f6>
    8038:	0324      	lsls	r4, r4, #12
    803a:	0576      	lsls	r6, r6, #21
    803c:	0b24      	lsrs	r4, r4, #12
    803e:	0d76      	lsrs	r6, r6, #21
    8040:	e7db      	b.n	7ffa <__aeabi_dsub+0x14a>
    8042:	4663      	mov	r3, ip
    8044:	1af3      	subs	r3, r6, r3
    8046:	2b00      	cmp	r3, #0
    8048:	dc00      	bgt.n	804c <__aeabi_dsub+0x19c>
    804a:	e094      	b.n	8176 <__aeabi_dsub+0x2c6>
    804c:	4660      	mov	r0, ip
    804e:	2800      	cmp	r0, #0
    8050:	d035      	beq.n	80be <__aeabi_dsub+0x20e>
    8052:	4868      	ldr	r0, [pc, #416]	; (81f4 <__aeabi_dsub+0x344>)
    8054:	4286      	cmp	r6, r0
    8056:	d0b1      	beq.n	7fbc <__aeabi_dsub+0x10c>
    8058:	2780      	movs	r7, #128	; 0x80
    805a:	043f      	lsls	r7, r7, #16
    805c:	4339      	orrs	r1, r7
    805e:	2b38      	cmp	r3, #56	; 0x38
    8060:	dc00      	bgt.n	8064 <__aeabi_dsub+0x1b4>
    8062:	e0fd      	b.n	8260 <__aeabi_dsub+0x3b0>
    8064:	430a      	orrs	r2, r1
    8066:	0017      	movs	r7, r2
    8068:	2100      	movs	r1, #0
    806a:	1e7a      	subs	r2, r7, #1
    806c:	4197      	sbcs	r7, r2
    806e:	4457      	add	r7, sl
    8070:	4557      	cmp	r7, sl
    8072:	4180      	sbcs	r0, r0
    8074:	1909      	adds	r1, r1, r4
    8076:	4244      	negs	r4, r0
    8078:	190c      	adds	r4, r1, r4
    807a:	0223      	lsls	r3, r4, #8
    807c:	d53a      	bpl.n	80f4 <__aeabi_dsub+0x244>
    807e:	4b5d      	ldr	r3, [pc, #372]	; (81f4 <__aeabi_dsub+0x344>)
    8080:	3601      	adds	r6, #1
    8082:	429e      	cmp	r6, r3
    8084:	d100      	bne.n	8088 <__aeabi_dsub+0x1d8>
    8086:	e14b      	b.n	8320 <__aeabi_dsub+0x470>
    8088:	2201      	movs	r2, #1
    808a:	4b5b      	ldr	r3, [pc, #364]	; (81f8 <__aeabi_dsub+0x348>)
    808c:	401c      	ands	r4, r3
    808e:	087b      	lsrs	r3, r7, #1
    8090:	4017      	ands	r7, r2
    8092:	431f      	orrs	r7, r3
    8094:	07e2      	lsls	r2, r4, #31
    8096:	4317      	orrs	r7, r2
    8098:	0864      	lsrs	r4, r4, #1
    809a:	e78f      	b.n	7fbc <__aeabi_dsub+0x10c>
    809c:	0008      	movs	r0, r1
    809e:	4310      	orrs	r0, r2
    80a0:	d000      	beq.n	80a4 <__aeabi_dsub+0x1f4>
    80a2:	e724      	b.n	7eee <__aeabi_dsub+0x3e>
    80a4:	e721      	b.n	7eea <__aeabi_dsub+0x3a>
    80a6:	0023      	movs	r3, r4
    80a8:	433b      	orrs	r3, r7
    80aa:	d100      	bne.n	80ae <__aeabi_dsub+0x1fe>
    80ac:	e1b9      	b.n	8422 <__aeabi_dsub+0x572>
    80ae:	2280      	movs	r2, #128	; 0x80
    80b0:	0312      	lsls	r2, r2, #12
    80b2:	4314      	orrs	r4, r2
    80b4:	0324      	lsls	r4, r4, #12
    80b6:	0b24      	lsrs	r4, r4, #12
    80b8:	e79f      	b.n	7ffa <__aeabi_dsub+0x14a>
    80ba:	002e      	movs	r6, r5
    80bc:	e77e      	b.n	7fbc <__aeabi_dsub+0x10c>
    80be:	0008      	movs	r0, r1
    80c0:	4310      	orrs	r0, r2
    80c2:	d100      	bne.n	80c6 <__aeabi_dsub+0x216>
    80c4:	e0ca      	b.n	825c <__aeabi_dsub+0x3ac>
    80c6:	1e58      	subs	r0, r3, #1
    80c8:	4684      	mov	ip, r0
    80ca:	2800      	cmp	r0, #0
    80cc:	d000      	beq.n	80d0 <__aeabi_dsub+0x220>
    80ce:	e0e7      	b.n	82a0 <__aeabi_dsub+0x3f0>
    80d0:	4452      	add	r2, sl
    80d2:	4552      	cmp	r2, sl
    80d4:	4180      	sbcs	r0, r0
    80d6:	1864      	adds	r4, r4, r1
    80d8:	4240      	negs	r0, r0
    80da:	1824      	adds	r4, r4, r0
    80dc:	0017      	movs	r7, r2
    80de:	2601      	movs	r6, #1
    80e0:	0223      	lsls	r3, r4, #8
    80e2:	d507      	bpl.n	80f4 <__aeabi_dsub+0x244>
    80e4:	2602      	movs	r6, #2
    80e6:	e7cf      	b.n	8088 <__aeabi_dsub+0x1d8>
    80e8:	4664      	mov	r4, ip
    80ea:	432c      	orrs	r4, r5
    80ec:	d100      	bne.n	80f0 <__aeabi_dsub+0x240>
    80ee:	e1b3      	b.n	8458 <__aeabi_dsub+0x5a8>
    80f0:	002c      	movs	r4, r5
    80f2:	4667      	mov	r7, ip
    80f4:	077b      	lsls	r3, r7, #29
    80f6:	d000      	beq.n	80fa <__aeabi_dsub+0x24a>
    80f8:	e762      	b.n	7fc0 <__aeabi_dsub+0x110>
    80fa:	0763      	lsls	r3, r4, #29
    80fc:	08ff      	lsrs	r7, r7, #3
    80fe:	431f      	orrs	r7, r3
    8100:	2501      	movs	r5, #1
    8102:	4643      	mov	r3, r8
    8104:	08e4      	lsrs	r4, r4, #3
    8106:	401d      	ands	r5, r3
    8108:	e793      	b.n	8032 <__aeabi_dsub+0x182>
    810a:	2d00      	cmp	r5, #0
    810c:	d178      	bne.n	8200 <__aeabi_dsub+0x350>
    810e:	1c75      	adds	r5, r6, #1
    8110:	056d      	lsls	r5, r5, #21
    8112:	0d6d      	lsrs	r5, r5, #21
    8114:	2d01      	cmp	r5, #1
    8116:	dc00      	bgt.n	811a <__aeabi_dsub+0x26a>
    8118:	e0f2      	b.n	8300 <__aeabi_dsub+0x450>
    811a:	4650      	mov	r0, sl
    811c:	1a80      	subs	r0, r0, r2
    811e:	4582      	cmp	sl, r0
    8120:	41bf      	sbcs	r7, r7
    8122:	1a65      	subs	r5, r4, r1
    8124:	427f      	negs	r7, r7
    8126:	1bed      	subs	r5, r5, r7
    8128:	4684      	mov	ip, r0
    812a:	0228      	lsls	r0, r5, #8
    812c:	d400      	bmi.n	8130 <__aeabi_dsub+0x280>
    812e:	e08c      	b.n	824a <__aeabi_dsub+0x39a>
    8130:	4650      	mov	r0, sl
    8132:	1a17      	subs	r7, r2, r0
    8134:	42ba      	cmp	r2, r7
    8136:	4192      	sbcs	r2, r2
    8138:	1b0c      	subs	r4, r1, r4
    813a:	4255      	negs	r5, r2
    813c:	1b65      	subs	r5, r4, r5
    813e:	4698      	mov	r8, r3
    8140:	e714      	b.n	7f6c <__aeabi_dsub+0xbc>
    8142:	2501      	movs	r5, #1
    8144:	4643      	mov	r3, r8
    8146:	2400      	movs	r4, #0
    8148:	401d      	ands	r5, r3
    814a:	2700      	movs	r7, #0
    814c:	e755      	b.n	7ffa <__aeabi_dsub+0x14a>
    814e:	4c2a      	ldr	r4, [pc, #168]	; (81f8 <__aeabi_dsub+0x348>)
    8150:	1af6      	subs	r6, r6, r3
    8152:	402c      	ands	r4, r5
    8154:	e732      	b.n	7fbc <__aeabi_dsub+0x10c>
    8156:	003d      	movs	r5, r7
    8158:	3828      	subs	r0, #40	; 0x28
    815a:	4085      	lsls	r5, r0
    815c:	2700      	movs	r7, #0
    815e:	e717      	b.n	7f90 <__aeabi_dsub+0xe0>
    8160:	0038      	movs	r0, r7
    8162:	f000 fb65 	bl	8830 <__clzsi2>
    8166:	3020      	adds	r0, #32
    8168:	e706      	b.n	7f78 <__aeabi_dsub+0xc8>
    816a:	430a      	orrs	r2, r1
    816c:	0017      	movs	r7, r2
    816e:	2100      	movs	r1, #0
    8170:	1e7a      	subs	r2, r7, #1
    8172:	4197      	sbcs	r7, r2
    8174:	e6ee      	b.n	7f54 <__aeabi_dsub+0xa4>
    8176:	2b00      	cmp	r3, #0
    8178:	d000      	beq.n	817c <__aeabi_dsub+0x2cc>
    817a:	e0e5      	b.n	8348 <__aeabi_dsub+0x498>
    817c:	1c73      	adds	r3, r6, #1
    817e:	469c      	mov	ip, r3
    8180:	055b      	lsls	r3, r3, #21
    8182:	0d5b      	lsrs	r3, r3, #21
    8184:	2b01      	cmp	r3, #1
    8186:	dc00      	bgt.n	818a <__aeabi_dsub+0x2da>
    8188:	e09f      	b.n	82ca <__aeabi_dsub+0x41a>
    818a:	4b1a      	ldr	r3, [pc, #104]	; (81f4 <__aeabi_dsub+0x344>)
    818c:	459c      	cmp	ip, r3
    818e:	d100      	bne.n	8192 <__aeabi_dsub+0x2e2>
    8190:	e0c5      	b.n	831e <__aeabi_dsub+0x46e>
    8192:	4452      	add	r2, sl
    8194:	4552      	cmp	r2, sl
    8196:	4180      	sbcs	r0, r0
    8198:	1864      	adds	r4, r4, r1
    819a:	4240      	negs	r0, r0
    819c:	1824      	adds	r4, r4, r0
    819e:	07e7      	lsls	r7, r4, #31
    81a0:	0852      	lsrs	r2, r2, #1
    81a2:	4317      	orrs	r7, r2
    81a4:	0864      	lsrs	r4, r4, #1
    81a6:	4666      	mov	r6, ip
    81a8:	e708      	b.n	7fbc <__aeabi_dsub+0x10c>
    81aa:	4812      	ldr	r0, [pc, #72]	; (81f4 <__aeabi_dsub+0x344>)
    81ac:	4285      	cmp	r5, r0
    81ae:	d100      	bne.n	81b2 <__aeabi_dsub+0x302>
    81b0:	e085      	b.n	82be <__aeabi_dsub+0x40e>
    81b2:	001d      	movs	r5, r3
    81b4:	e6bc      	b.n	7f30 <__aeabi_dsub+0x80>
    81b6:	0029      	movs	r1, r5
    81b8:	3e1f      	subs	r6, #31
    81ba:	40f1      	lsrs	r1, r6
    81bc:	2b20      	cmp	r3, #32
    81be:	d100      	bne.n	81c2 <__aeabi_dsub+0x312>
    81c0:	e07f      	b.n	82c2 <__aeabi_dsub+0x412>
    81c2:	2240      	movs	r2, #64	; 0x40
    81c4:	1ad3      	subs	r3, r2, r3
    81c6:	409d      	lsls	r5, r3
    81c8:	432f      	orrs	r7, r5
    81ca:	1e7d      	subs	r5, r7, #1
    81cc:	41af      	sbcs	r7, r5
    81ce:	2400      	movs	r4, #0
    81d0:	430f      	orrs	r7, r1
    81d2:	2600      	movs	r6, #0
    81d4:	e78e      	b.n	80f4 <__aeabi_dsub+0x244>
    81d6:	002b      	movs	r3, r5
    81d8:	000f      	movs	r7, r1
    81da:	3b20      	subs	r3, #32
    81dc:	40df      	lsrs	r7, r3
    81de:	2d20      	cmp	r5, #32
    81e0:	d071      	beq.n	82c6 <__aeabi_dsub+0x416>
    81e2:	2340      	movs	r3, #64	; 0x40
    81e4:	1b5d      	subs	r5, r3, r5
    81e6:	40a9      	lsls	r1, r5
    81e8:	430a      	orrs	r2, r1
    81ea:	1e51      	subs	r1, r2, #1
    81ec:	418a      	sbcs	r2, r1
    81ee:	2100      	movs	r1, #0
    81f0:	4317      	orrs	r7, r2
    81f2:	e6af      	b.n	7f54 <__aeabi_dsub+0xa4>
    81f4:	000007ff 	.word	0x000007ff
    81f8:	ff7fffff 	.word	0xff7fffff
    81fc:	800fffff 	.word	0x800fffff
    8200:	2e00      	cmp	r6, #0
    8202:	d03e      	beq.n	8282 <__aeabi_dsub+0x3d2>
    8204:	4eb3      	ldr	r6, [pc, #716]	; (84d4 <__aeabi_dsub+0x624>)
    8206:	45b4      	cmp	ip, r6
    8208:	d045      	beq.n	8296 <__aeabi_dsub+0x3e6>
    820a:	2680      	movs	r6, #128	; 0x80
    820c:	0436      	lsls	r6, r6, #16
    820e:	426d      	negs	r5, r5
    8210:	4334      	orrs	r4, r6
    8212:	2d38      	cmp	r5, #56	; 0x38
    8214:	dd00      	ble.n	8218 <__aeabi_dsub+0x368>
    8216:	e0a8      	b.n	836a <__aeabi_dsub+0x4ba>
    8218:	2d1f      	cmp	r5, #31
    821a:	dd00      	ble.n	821e <__aeabi_dsub+0x36e>
    821c:	e11f      	b.n	845e <__aeabi_dsub+0x5ae>
    821e:	2620      	movs	r6, #32
    8220:	0027      	movs	r7, r4
    8222:	4650      	mov	r0, sl
    8224:	1b76      	subs	r6, r6, r5
    8226:	40b7      	lsls	r7, r6
    8228:	40e8      	lsrs	r0, r5
    822a:	4307      	orrs	r7, r0
    822c:	4650      	mov	r0, sl
    822e:	40b0      	lsls	r0, r6
    8230:	1e46      	subs	r6, r0, #1
    8232:	41b0      	sbcs	r0, r6
    8234:	40ec      	lsrs	r4, r5
    8236:	4338      	orrs	r0, r7
    8238:	1a17      	subs	r7, r2, r0
    823a:	42ba      	cmp	r2, r7
    823c:	4192      	sbcs	r2, r2
    823e:	1b0c      	subs	r4, r1, r4
    8240:	4252      	negs	r2, r2
    8242:	1aa4      	subs	r4, r4, r2
    8244:	4666      	mov	r6, ip
    8246:	4698      	mov	r8, r3
    8248:	e68b      	b.n	7f62 <__aeabi_dsub+0xb2>
    824a:	4664      	mov	r4, ip
    824c:	4667      	mov	r7, ip
    824e:	432c      	orrs	r4, r5
    8250:	d000      	beq.n	8254 <__aeabi_dsub+0x3a4>
    8252:	e68b      	b.n	7f6c <__aeabi_dsub+0xbc>
    8254:	2500      	movs	r5, #0
    8256:	2600      	movs	r6, #0
    8258:	2700      	movs	r7, #0
    825a:	e6ea      	b.n	8032 <__aeabi_dsub+0x182>
    825c:	001e      	movs	r6, r3
    825e:	e6ad      	b.n	7fbc <__aeabi_dsub+0x10c>
    8260:	2b1f      	cmp	r3, #31
    8262:	dc60      	bgt.n	8326 <__aeabi_dsub+0x476>
    8264:	2720      	movs	r7, #32
    8266:	1af8      	subs	r0, r7, r3
    8268:	000f      	movs	r7, r1
    826a:	4684      	mov	ip, r0
    826c:	4087      	lsls	r7, r0
    826e:	0010      	movs	r0, r2
    8270:	40d8      	lsrs	r0, r3
    8272:	4307      	orrs	r7, r0
    8274:	4660      	mov	r0, ip
    8276:	4082      	lsls	r2, r0
    8278:	1e50      	subs	r0, r2, #1
    827a:	4182      	sbcs	r2, r0
    827c:	40d9      	lsrs	r1, r3
    827e:	4317      	orrs	r7, r2
    8280:	e6f5      	b.n	806e <__aeabi_dsub+0x1be>
    8282:	0026      	movs	r6, r4
    8284:	4650      	mov	r0, sl
    8286:	4306      	orrs	r6, r0
    8288:	d005      	beq.n	8296 <__aeabi_dsub+0x3e6>
    828a:	43ed      	mvns	r5, r5
    828c:	2d00      	cmp	r5, #0
    828e:	d0d3      	beq.n	8238 <__aeabi_dsub+0x388>
    8290:	4e90      	ldr	r6, [pc, #576]	; (84d4 <__aeabi_dsub+0x624>)
    8292:	45b4      	cmp	ip, r6
    8294:	d1bd      	bne.n	8212 <__aeabi_dsub+0x362>
    8296:	000c      	movs	r4, r1
    8298:	0017      	movs	r7, r2
    829a:	4666      	mov	r6, ip
    829c:	4698      	mov	r8, r3
    829e:	e68d      	b.n	7fbc <__aeabi_dsub+0x10c>
    82a0:	488c      	ldr	r0, [pc, #560]	; (84d4 <__aeabi_dsub+0x624>)
    82a2:	4283      	cmp	r3, r0
    82a4:	d00b      	beq.n	82be <__aeabi_dsub+0x40e>
    82a6:	4663      	mov	r3, ip
    82a8:	e6d9      	b.n	805e <__aeabi_dsub+0x1ae>
    82aa:	2d00      	cmp	r5, #0
    82ac:	d000      	beq.n	82b0 <__aeabi_dsub+0x400>
    82ae:	e096      	b.n	83de <__aeabi_dsub+0x52e>
    82b0:	0008      	movs	r0, r1
    82b2:	4310      	orrs	r0, r2
    82b4:	d100      	bne.n	82b8 <__aeabi_dsub+0x408>
    82b6:	e0e2      	b.n	847e <__aeabi_dsub+0x5ce>
    82b8:	000c      	movs	r4, r1
    82ba:	0017      	movs	r7, r2
    82bc:	4698      	mov	r8, r3
    82be:	4e85      	ldr	r6, [pc, #532]	; (84d4 <__aeabi_dsub+0x624>)
    82c0:	e67c      	b.n	7fbc <__aeabi_dsub+0x10c>
    82c2:	2500      	movs	r5, #0
    82c4:	e780      	b.n	81c8 <__aeabi_dsub+0x318>
    82c6:	2100      	movs	r1, #0
    82c8:	e78e      	b.n	81e8 <__aeabi_dsub+0x338>
    82ca:	0023      	movs	r3, r4
    82cc:	4650      	mov	r0, sl
    82ce:	4303      	orrs	r3, r0
    82d0:	2e00      	cmp	r6, #0
    82d2:	d000      	beq.n	82d6 <__aeabi_dsub+0x426>
    82d4:	e0a8      	b.n	8428 <__aeabi_dsub+0x578>
    82d6:	2b00      	cmp	r3, #0
    82d8:	d100      	bne.n	82dc <__aeabi_dsub+0x42c>
    82da:	e0de      	b.n	849a <__aeabi_dsub+0x5ea>
    82dc:	000b      	movs	r3, r1
    82de:	4313      	orrs	r3, r2
    82e0:	d100      	bne.n	82e4 <__aeabi_dsub+0x434>
    82e2:	e66b      	b.n	7fbc <__aeabi_dsub+0x10c>
    82e4:	4452      	add	r2, sl
    82e6:	4552      	cmp	r2, sl
    82e8:	4180      	sbcs	r0, r0
    82ea:	1864      	adds	r4, r4, r1
    82ec:	4240      	negs	r0, r0
    82ee:	1824      	adds	r4, r4, r0
    82f0:	0017      	movs	r7, r2
    82f2:	0223      	lsls	r3, r4, #8
    82f4:	d400      	bmi.n	82f8 <__aeabi_dsub+0x448>
    82f6:	e6fd      	b.n	80f4 <__aeabi_dsub+0x244>
    82f8:	4b77      	ldr	r3, [pc, #476]	; (84d8 <__aeabi_dsub+0x628>)
    82fa:	4666      	mov	r6, ip
    82fc:	401c      	ands	r4, r3
    82fe:	e65d      	b.n	7fbc <__aeabi_dsub+0x10c>
    8300:	0025      	movs	r5, r4
    8302:	4650      	mov	r0, sl
    8304:	4305      	orrs	r5, r0
    8306:	2e00      	cmp	r6, #0
    8308:	d1cf      	bne.n	82aa <__aeabi_dsub+0x3fa>
    830a:	2d00      	cmp	r5, #0
    830c:	d14f      	bne.n	83ae <__aeabi_dsub+0x4fe>
    830e:	000c      	movs	r4, r1
    8310:	4314      	orrs	r4, r2
    8312:	d100      	bne.n	8316 <__aeabi_dsub+0x466>
    8314:	e0a0      	b.n	8458 <__aeabi_dsub+0x5a8>
    8316:	000c      	movs	r4, r1
    8318:	0017      	movs	r7, r2
    831a:	4698      	mov	r8, r3
    831c:	e64e      	b.n	7fbc <__aeabi_dsub+0x10c>
    831e:	4666      	mov	r6, ip
    8320:	2400      	movs	r4, #0
    8322:	2700      	movs	r7, #0
    8324:	e685      	b.n	8032 <__aeabi_dsub+0x182>
    8326:	001f      	movs	r7, r3
    8328:	0008      	movs	r0, r1
    832a:	3f20      	subs	r7, #32
    832c:	40f8      	lsrs	r0, r7
    832e:	0007      	movs	r7, r0
    8330:	2b20      	cmp	r3, #32
    8332:	d100      	bne.n	8336 <__aeabi_dsub+0x486>
    8334:	e08e      	b.n	8454 <__aeabi_dsub+0x5a4>
    8336:	2040      	movs	r0, #64	; 0x40
    8338:	1ac3      	subs	r3, r0, r3
    833a:	4099      	lsls	r1, r3
    833c:	430a      	orrs	r2, r1
    833e:	1e51      	subs	r1, r2, #1
    8340:	418a      	sbcs	r2, r1
    8342:	2100      	movs	r1, #0
    8344:	4317      	orrs	r7, r2
    8346:	e692      	b.n	806e <__aeabi_dsub+0x1be>
    8348:	2e00      	cmp	r6, #0
    834a:	d114      	bne.n	8376 <__aeabi_dsub+0x4c6>
    834c:	0026      	movs	r6, r4
    834e:	4650      	mov	r0, sl
    8350:	4306      	orrs	r6, r0
    8352:	d062      	beq.n	841a <__aeabi_dsub+0x56a>
    8354:	43db      	mvns	r3, r3
    8356:	2b00      	cmp	r3, #0
    8358:	d15c      	bne.n	8414 <__aeabi_dsub+0x564>
    835a:	1887      	adds	r7, r0, r2
    835c:	4297      	cmp	r7, r2
    835e:	4192      	sbcs	r2, r2
    8360:	1864      	adds	r4, r4, r1
    8362:	4252      	negs	r2, r2
    8364:	18a4      	adds	r4, r4, r2
    8366:	4666      	mov	r6, ip
    8368:	e687      	b.n	807a <__aeabi_dsub+0x1ca>
    836a:	4650      	mov	r0, sl
    836c:	4320      	orrs	r0, r4
    836e:	1e44      	subs	r4, r0, #1
    8370:	41a0      	sbcs	r0, r4
    8372:	2400      	movs	r4, #0
    8374:	e760      	b.n	8238 <__aeabi_dsub+0x388>
    8376:	4e57      	ldr	r6, [pc, #348]	; (84d4 <__aeabi_dsub+0x624>)
    8378:	45b4      	cmp	ip, r6
    837a:	d04e      	beq.n	841a <__aeabi_dsub+0x56a>
    837c:	2680      	movs	r6, #128	; 0x80
    837e:	0436      	lsls	r6, r6, #16
    8380:	425b      	negs	r3, r3
    8382:	4334      	orrs	r4, r6
    8384:	2b38      	cmp	r3, #56	; 0x38
    8386:	dd00      	ble.n	838a <__aeabi_dsub+0x4da>
    8388:	e07f      	b.n	848a <__aeabi_dsub+0x5da>
    838a:	2b1f      	cmp	r3, #31
    838c:	dd00      	ble.n	8390 <__aeabi_dsub+0x4e0>
    838e:	e08b      	b.n	84a8 <__aeabi_dsub+0x5f8>
    8390:	2620      	movs	r6, #32
    8392:	0027      	movs	r7, r4
    8394:	4650      	mov	r0, sl
    8396:	1af6      	subs	r6, r6, r3
    8398:	40b7      	lsls	r7, r6
    839a:	40d8      	lsrs	r0, r3
    839c:	4307      	orrs	r7, r0
    839e:	4650      	mov	r0, sl
    83a0:	40b0      	lsls	r0, r6
    83a2:	1e46      	subs	r6, r0, #1
    83a4:	41b0      	sbcs	r0, r6
    83a6:	4307      	orrs	r7, r0
    83a8:	40dc      	lsrs	r4, r3
    83aa:	18bf      	adds	r7, r7, r2
    83ac:	e7d6      	b.n	835c <__aeabi_dsub+0x4ac>
    83ae:	000d      	movs	r5, r1
    83b0:	4315      	orrs	r5, r2
    83b2:	d100      	bne.n	83b6 <__aeabi_dsub+0x506>
    83b4:	e602      	b.n	7fbc <__aeabi_dsub+0x10c>
    83b6:	4650      	mov	r0, sl
    83b8:	1a80      	subs	r0, r0, r2
    83ba:	4582      	cmp	sl, r0
    83bc:	41bf      	sbcs	r7, r7
    83be:	1a65      	subs	r5, r4, r1
    83c0:	427f      	negs	r7, r7
    83c2:	1bed      	subs	r5, r5, r7
    83c4:	4684      	mov	ip, r0
    83c6:	0228      	lsls	r0, r5, #8
    83c8:	d400      	bmi.n	83cc <__aeabi_dsub+0x51c>
    83ca:	e68d      	b.n	80e8 <__aeabi_dsub+0x238>
    83cc:	4650      	mov	r0, sl
    83ce:	1a17      	subs	r7, r2, r0
    83d0:	42ba      	cmp	r2, r7
    83d2:	4192      	sbcs	r2, r2
    83d4:	1b0c      	subs	r4, r1, r4
    83d6:	4252      	negs	r2, r2
    83d8:	1aa4      	subs	r4, r4, r2
    83da:	4698      	mov	r8, r3
    83dc:	e5ee      	b.n	7fbc <__aeabi_dsub+0x10c>
    83de:	000d      	movs	r5, r1
    83e0:	4315      	orrs	r5, r2
    83e2:	d100      	bne.n	83e6 <__aeabi_dsub+0x536>
    83e4:	e76b      	b.n	82be <__aeabi_dsub+0x40e>
    83e6:	4650      	mov	r0, sl
    83e8:	0767      	lsls	r7, r4, #29
    83ea:	08c0      	lsrs	r0, r0, #3
    83ec:	4307      	orrs	r7, r0
    83ee:	2080      	movs	r0, #128	; 0x80
    83f0:	08e4      	lsrs	r4, r4, #3
    83f2:	0300      	lsls	r0, r0, #12
    83f4:	4204      	tst	r4, r0
    83f6:	d007      	beq.n	8408 <__aeabi_dsub+0x558>
    83f8:	08cd      	lsrs	r5, r1, #3
    83fa:	4205      	tst	r5, r0
    83fc:	d104      	bne.n	8408 <__aeabi_dsub+0x558>
    83fe:	002c      	movs	r4, r5
    8400:	4698      	mov	r8, r3
    8402:	08d7      	lsrs	r7, r2, #3
    8404:	0749      	lsls	r1, r1, #29
    8406:	430f      	orrs	r7, r1
    8408:	0f7b      	lsrs	r3, r7, #29
    840a:	00e4      	lsls	r4, r4, #3
    840c:	431c      	orrs	r4, r3
    840e:	00ff      	lsls	r7, r7, #3
    8410:	4e30      	ldr	r6, [pc, #192]	; (84d4 <__aeabi_dsub+0x624>)
    8412:	e5d3      	b.n	7fbc <__aeabi_dsub+0x10c>
    8414:	4e2f      	ldr	r6, [pc, #188]	; (84d4 <__aeabi_dsub+0x624>)
    8416:	45b4      	cmp	ip, r6
    8418:	d1b4      	bne.n	8384 <__aeabi_dsub+0x4d4>
    841a:	000c      	movs	r4, r1
    841c:	0017      	movs	r7, r2
    841e:	4666      	mov	r6, ip
    8420:	e5cc      	b.n	7fbc <__aeabi_dsub+0x10c>
    8422:	2700      	movs	r7, #0
    8424:	2400      	movs	r4, #0
    8426:	e5e8      	b.n	7ffa <__aeabi_dsub+0x14a>
    8428:	2b00      	cmp	r3, #0
    842a:	d039      	beq.n	84a0 <__aeabi_dsub+0x5f0>
    842c:	000b      	movs	r3, r1
    842e:	4313      	orrs	r3, r2
    8430:	d100      	bne.n	8434 <__aeabi_dsub+0x584>
    8432:	e744      	b.n	82be <__aeabi_dsub+0x40e>
    8434:	08c0      	lsrs	r0, r0, #3
    8436:	0767      	lsls	r7, r4, #29
    8438:	4307      	orrs	r7, r0
    843a:	2080      	movs	r0, #128	; 0x80
    843c:	08e4      	lsrs	r4, r4, #3
    843e:	0300      	lsls	r0, r0, #12
    8440:	4204      	tst	r4, r0
    8442:	d0e1      	beq.n	8408 <__aeabi_dsub+0x558>
    8444:	08cb      	lsrs	r3, r1, #3
    8446:	4203      	tst	r3, r0
    8448:	d1de      	bne.n	8408 <__aeabi_dsub+0x558>
    844a:	08d7      	lsrs	r7, r2, #3
    844c:	0749      	lsls	r1, r1, #29
    844e:	430f      	orrs	r7, r1
    8450:	001c      	movs	r4, r3
    8452:	e7d9      	b.n	8408 <__aeabi_dsub+0x558>
    8454:	2100      	movs	r1, #0
    8456:	e771      	b.n	833c <__aeabi_dsub+0x48c>
    8458:	2500      	movs	r5, #0
    845a:	2700      	movs	r7, #0
    845c:	e5e9      	b.n	8032 <__aeabi_dsub+0x182>
    845e:	002e      	movs	r6, r5
    8460:	0027      	movs	r7, r4
    8462:	3e20      	subs	r6, #32
    8464:	40f7      	lsrs	r7, r6
    8466:	2d20      	cmp	r5, #32
    8468:	d02f      	beq.n	84ca <__aeabi_dsub+0x61a>
    846a:	2640      	movs	r6, #64	; 0x40
    846c:	1b75      	subs	r5, r6, r5
    846e:	40ac      	lsls	r4, r5
    8470:	4650      	mov	r0, sl
    8472:	4320      	orrs	r0, r4
    8474:	1e44      	subs	r4, r0, #1
    8476:	41a0      	sbcs	r0, r4
    8478:	2400      	movs	r4, #0
    847a:	4338      	orrs	r0, r7
    847c:	e6dc      	b.n	8238 <__aeabi_dsub+0x388>
    847e:	2480      	movs	r4, #128	; 0x80
    8480:	2500      	movs	r5, #0
    8482:	0324      	lsls	r4, r4, #12
    8484:	4e13      	ldr	r6, [pc, #76]	; (84d4 <__aeabi_dsub+0x624>)
    8486:	2700      	movs	r7, #0
    8488:	e5d3      	b.n	8032 <__aeabi_dsub+0x182>
    848a:	4650      	mov	r0, sl
    848c:	4320      	orrs	r0, r4
    848e:	0007      	movs	r7, r0
    8490:	1e78      	subs	r0, r7, #1
    8492:	4187      	sbcs	r7, r0
    8494:	2400      	movs	r4, #0
    8496:	18bf      	adds	r7, r7, r2
    8498:	e760      	b.n	835c <__aeabi_dsub+0x4ac>
    849a:	000c      	movs	r4, r1
    849c:	0017      	movs	r7, r2
    849e:	e58d      	b.n	7fbc <__aeabi_dsub+0x10c>
    84a0:	000c      	movs	r4, r1
    84a2:	0017      	movs	r7, r2
    84a4:	4e0b      	ldr	r6, [pc, #44]	; (84d4 <__aeabi_dsub+0x624>)
    84a6:	e589      	b.n	7fbc <__aeabi_dsub+0x10c>
    84a8:	001e      	movs	r6, r3
    84aa:	0027      	movs	r7, r4
    84ac:	3e20      	subs	r6, #32
    84ae:	40f7      	lsrs	r7, r6
    84b0:	2b20      	cmp	r3, #32
    84b2:	d00c      	beq.n	84ce <__aeabi_dsub+0x61e>
    84b4:	2640      	movs	r6, #64	; 0x40
    84b6:	1af3      	subs	r3, r6, r3
    84b8:	409c      	lsls	r4, r3
    84ba:	4650      	mov	r0, sl
    84bc:	4320      	orrs	r0, r4
    84be:	1e44      	subs	r4, r0, #1
    84c0:	41a0      	sbcs	r0, r4
    84c2:	4307      	orrs	r7, r0
    84c4:	2400      	movs	r4, #0
    84c6:	18bf      	adds	r7, r7, r2
    84c8:	e748      	b.n	835c <__aeabi_dsub+0x4ac>
    84ca:	2400      	movs	r4, #0
    84cc:	e7d0      	b.n	8470 <__aeabi_dsub+0x5c0>
    84ce:	2400      	movs	r4, #0
    84d0:	e7f3      	b.n	84ba <__aeabi_dsub+0x60a>
    84d2:	46c0      	nop			; (mov r8, r8)
    84d4:	000007ff 	.word	0x000007ff
    84d8:	ff7fffff 	.word	0xff7fffff

000084dc <__aeabi_dcmpun>:
    84dc:	b570      	push	{r4, r5, r6, lr}
    84de:	4e0e      	ldr	r6, [pc, #56]	; (8518 <__aeabi_dcmpun+0x3c>)
    84e0:	030d      	lsls	r5, r1, #12
    84e2:	031c      	lsls	r4, r3, #12
    84e4:	0049      	lsls	r1, r1, #1
    84e6:	005b      	lsls	r3, r3, #1
    84e8:	0b2d      	lsrs	r5, r5, #12
    84ea:	0d49      	lsrs	r1, r1, #21
    84ec:	0b24      	lsrs	r4, r4, #12
    84ee:	0d5b      	lsrs	r3, r3, #21
    84f0:	42b1      	cmp	r1, r6
    84f2:	d004      	beq.n	84fe <__aeabi_dcmpun+0x22>
    84f4:	4908      	ldr	r1, [pc, #32]	; (8518 <__aeabi_dcmpun+0x3c>)
    84f6:	2000      	movs	r0, #0
    84f8:	428b      	cmp	r3, r1
    84fa:	d008      	beq.n	850e <__aeabi_dcmpun+0x32>
    84fc:	bd70      	pop	{r4, r5, r6, pc}
    84fe:	4305      	orrs	r5, r0
    8500:	2001      	movs	r0, #1
    8502:	2d00      	cmp	r5, #0
    8504:	d1fa      	bne.n	84fc <__aeabi_dcmpun+0x20>
    8506:	4904      	ldr	r1, [pc, #16]	; (8518 <__aeabi_dcmpun+0x3c>)
    8508:	2000      	movs	r0, #0
    850a:	428b      	cmp	r3, r1
    850c:	d1f6      	bne.n	84fc <__aeabi_dcmpun+0x20>
    850e:	4314      	orrs	r4, r2
    8510:	0020      	movs	r0, r4
    8512:	1e44      	subs	r4, r0, #1
    8514:	41a0      	sbcs	r0, r4
    8516:	e7f1      	b.n	84fc <__aeabi_dcmpun+0x20>
    8518:	000007ff 	.word	0x000007ff

0000851c <__aeabi_d2iz>:
    851c:	b530      	push	{r4, r5, lr}
    851e:	4d13      	ldr	r5, [pc, #76]	; (856c <__aeabi_d2iz+0x50>)
    8520:	030a      	lsls	r2, r1, #12
    8522:	004b      	lsls	r3, r1, #1
    8524:	0b12      	lsrs	r2, r2, #12
    8526:	0d5b      	lsrs	r3, r3, #21
    8528:	0fc9      	lsrs	r1, r1, #31
    852a:	2400      	movs	r4, #0
    852c:	42ab      	cmp	r3, r5
    852e:	dd10      	ble.n	8552 <__aeabi_d2iz+0x36>
    8530:	4c0f      	ldr	r4, [pc, #60]	; (8570 <__aeabi_d2iz+0x54>)
    8532:	42a3      	cmp	r3, r4
    8534:	dc0f      	bgt.n	8556 <__aeabi_d2iz+0x3a>
    8536:	2480      	movs	r4, #128	; 0x80
    8538:	4d0e      	ldr	r5, [pc, #56]	; (8574 <__aeabi_d2iz+0x58>)
    853a:	0364      	lsls	r4, r4, #13
    853c:	4322      	orrs	r2, r4
    853e:	1aed      	subs	r5, r5, r3
    8540:	2d1f      	cmp	r5, #31
    8542:	dd0b      	ble.n	855c <__aeabi_d2iz+0x40>
    8544:	480c      	ldr	r0, [pc, #48]	; (8578 <__aeabi_d2iz+0x5c>)
    8546:	1ac3      	subs	r3, r0, r3
    8548:	40da      	lsrs	r2, r3
    854a:	4254      	negs	r4, r2
    854c:	2900      	cmp	r1, #0
    854e:	d100      	bne.n	8552 <__aeabi_d2iz+0x36>
    8550:	0014      	movs	r4, r2
    8552:	0020      	movs	r0, r4
    8554:	bd30      	pop	{r4, r5, pc}
    8556:	4b09      	ldr	r3, [pc, #36]	; (857c <__aeabi_d2iz+0x60>)
    8558:	18cc      	adds	r4, r1, r3
    855a:	e7fa      	b.n	8552 <__aeabi_d2iz+0x36>
    855c:	4c08      	ldr	r4, [pc, #32]	; (8580 <__aeabi_d2iz+0x64>)
    855e:	40e8      	lsrs	r0, r5
    8560:	46a4      	mov	ip, r4
    8562:	4463      	add	r3, ip
    8564:	409a      	lsls	r2, r3
    8566:	4302      	orrs	r2, r0
    8568:	e7ef      	b.n	854a <__aeabi_d2iz+0x2e>
    856a:	46c0      	nop			; (mov r8, r8)
    856c:	000003fe 	.word	0x000003fe
    8570:	0000041d 	.word	0x0000041d
    8574:	00000433 	.word	0x00000433
    8578:	00000413 	.word	0x00000413
    857c:	7fffffff 	.word	0x7fffffff
    8580:	fffffbed 	.word	0xfffffbed

00008584 <__aeabi_i2d>:
    8584:	b570      	push	{r4, r5, r6, lr}
    8586:	2800      	cmp	r0, #0
    8588:	d030      	beq.n	85ec <__aeabi_i2d+0x68>
    858a:	17c3      	asrs	r3, r0, #31
    858c:	18c4      	adds	r4, r0, r3
    858e:	405c      	eors	r4, r3
    8590:	0fc5      	lsrs	r5, r0, #31
    8592:	0020      	movs	r0, r4
    8594:	f000 f94c 	bl	8830 <__clzsi2>
    8598:	4b17      	ldr	r3, [pc, #92]	; (85f8 <__aeabi_i2d+0x74>)
    859a:	4a18      	ldr	r2, [pc, #96]	; (85fc <__aeabi_i2d+0x78>)
    859c:	1a1b      	subs	r3, r3, r0
    859e:	1ad2      	subs	r2, r2, r3
    85a0:	2a1f      	cmp	r2, #31
    85a2:	dd18      	ble.n	85d6 <__aeabi_i2d+0x52>
    85a4:	4a16      	ldr	r2, [pc, #88]	; (8600 <__aeabi_i2d+0x7c>)
    85a6:	1ad2      	subs	r2, r2, r3
    85a8:	4094      	lsls	r4, r2
    85aa:	2200      	movs	r2, #0
    85ac:	0324      	lsls	r4, r4, #12
    85ae:	055b      	lsls	r3, r3, #21
    85b0:	0b24      	lsrs	r4, r4, #12
    85b2:	0d5b      	lsrs	r3, r3, #21
    85b4:	2100      	movs	r1, #0
    85b6:	0010      	movs	r0, r2
    85b8:	0324      	lsls	r4, r4, #12
    85ba:	0d0a      	lsrs	r2, r1, #20
    85bc:	0b24      	lsrs	r4, r4, #12
    85be:	0512      	lsls	r2, r2, #20
    85c0:	4322      	orrs	r2, r4
    85c2:	4c10      	ldr	r4, [pc, #64]	; (8604 <__aeabi_i2d+0x80>)
    85c4:	051b      	lsls	r3, r3, #20
    85c6:	4022      	ands	r2, r4
    85c8:	4313      	orrs	r3, r2
    85ca:	005b      	lsls	r3, r3, #1
    85cc:	07ed      	lsls	r5, r5, #31
    85ce:	085b      	lsrs	r3, r3, #1
    85d0:	432b      	orrs	r3, r5
    85d2:	0019      	movs	r1, r3
    85d4:	bd70      	pop	{r4, r5, r6, pc}
    85d6:	0021      	movs	r1, r4
    85d8:	4091      	lsls	r1, r2
    85da:	000a      	movs	r2, r1
    85dc:	210b      	movs	r1, #11
    85de:	1a08      	subs	r0, r1, r0
    85e0:	40c4      	lsrs	r4, r0
    85e2:	055b      	lsls	r3, r3, #21
    85e4:	0324      	lsls	r4, r4, #12
    85e6:	0b24      	lsrs	r4, r4, #12
    85e8:	0d5b      	lsrs	r3, r3, #21
    85ea:	e7e3      	b.n	85b4 <__aeabi_i2d+0x30>
    85ec:	2500      	movs	r5, #0
    85ee:	2300      	movs	r3, #0
    85f0:	2400      	movs	r4, #0
    85f2:	2200      	movs	r2, #0
    85f4:	e7de      	b.n	85b4 <__aeabi_i2d+0x30>
    85f6:	46c0      	nop			; (mov r8, r8)
    85f8:	0000041e 	.word	0x0000041e
    85fc:	00000433 	.word	0x00000433
    8600:	00000413 	.word	0x00000413
    8604:	800fffff 	.word	0x800fffff

00008608 <__aeabi_ui2d>:
    8608:	b510      	push	{r4, lr}
    860a:	1e04      	subs	r4, r0, #0
    860c:	d028      	beq.n	8660 <__aeabi_ui2d+0x58>
    860e:	f000 f90f 	bl	8830 <__clzsi2>
    8612:	4b15      	ldr	r3, [pc, #84]	; (8668 <__aeabi_ui2d+0x60>)
    8614:	4a15      	ldr	r2, [pc, #84]	; (866c <__aeabi_ui2d+0x64>)
    8616:	1a1b      	subs	r3, r3, r0
    8618:	1ad2      	subs	r2, r2, r3
    861a:	2a1f      	cmp	r2, #31
    861c:	dd15      	ble.n	864a <__aeabi_ui2d+0x42>
    861e:	4a14      	ldr	r2, [pc, #80]	; (8670 <__aeabi_ui2d+0x68>)
    8620:	1ad2      	subs	r2, r2, r3
    8622:	4094      	lsls	r4, r2
    8624:	2200      	movs	r2, #0
    8626:	0324      	lsls	r4, r4, #12
    8628:	055b      	lsls	r3, r3, #21
    862a:	0b24      	lsrs	r4, r4, #12
    862c:	0d5b      	lsrs	r3, r3, #21
    862e:	2100      	movs	r1, #0
    8630:	0010      	movs	r0, r2
    8632:	0324      	lsls	r4, r4, #12
    8634:	0d0a      	lsrs	r2, r1, #20
    8636:	0b24      	lsrs	r4, r4, #12
    8638:	0512      	lsls	r2, r2, #20
    863a:	4322      	orrs	r2, r4
    863c:	4c0d      	ldr	r4, [pc, #52]	; (8674 <__aeabi_ui2d+0x6c>)
    863e:	051b      	lsls	r3, r3, #20
    8640:	4022      	ands	r2, r4
    8642:	4313      	orrs	r3, r2
    8644:	005b      	lsls	r3, r3, #1
    8646:	0859      	lsrs	r1, r3, #1
    8648:	bd10      	pop	{r4, pc}
    864a:	0021      	movs	r1, r4
    864c:	4091      	lsls	r1, r2
    864e:	000a      	movs	r2, r1
    8650:	210b      	movs	r1, #11
    8652:	1a08      	subs	r0, r1, r0
    8654:	40c4      	lsrs	r4, r0
    8656:	055b      	lsls	r3, r3, #21
    8658:	0324      	lsls	r4, r4, #12
    865a:	0b24      	lsrs	r4, r4, #12
    865c:	0d5b      	lsrs	r3, r3, #21
    865e:	e7e6      	b.n	862e <__aeabi_ui2d+0x26>
    8660:	2300      	movs	r3, #0
    8662:	2400      	movs	r4, #0
    8664:	2200      	movs	r2, #0
    8666:	e7e2      	b.n	862e <__aeabi_ui2d+0x26>
    8668:	0000041e 	.word	0x0000041e
    866c:	00000433 	.word	0x00000433
    8670:	00000413 	.word	0x00000413
    8674:	800fffff 	.word	0x800fffff

00008678 <__aeabi_f2d>:
    8678:	0041      	lsls	r1, r0, #1
    867a:	0e09      	lsrs	r1, r1, #24
    867c:	1c4b      	adds	r3, r1, #1
    867e:	b570      	push	{r4, r5, r6, lr}
    8680:	b2db      	uxtb	r3, r3
    8682:	0246      	lsls	r6, r0, #9
    8684:	0a75      	lsrs	r5, r6, #9
    8686:	0fc4      	lsrs	r4, r0, #31
    8688:	2b01      	cmp	r3, #1
    868a:	dd14      	ble.n	86b6 <__aeabi_f2d+0x3e>
    868c:	23e0      	movs	r3, #224	; 0xe0
    868e:	009b      	lsls	r3, r3, #2
    8690:	076d      	lsls	r5, r5, #29
    8692:	0b36      	lsrs	r6, r6, #12
    8694:	18cb      	adds	r3, r1, r3
    8696:	2100      	movs	r1, #0
    8698:	0d0a      	lsrs	r2, r1, #20
    869a:	0028      	movs	r0, r5
    869c:	0512      	lsls	r2, r2, #20
    869e:	4d1c      	ldr	r5, [pc, #112]	; (8710 <__aeabi_f2d+0x98>)
    86a0:	4332      	orrs	r2, r6
    86a2:	055b      	lsls	r3, r3, #21
    86a4:	402a      	ands	r2, r5
    86a6:	085b      	lsrs	r3, r3, #1
    86a8:	4313      	orrs	r3, r2
    86aa:	005b      	lsls	r3, r3, #1
    86ac:	07e4      	lsls	r4, r4, #31
    86ae:	085b      	lsrs	r3, r3, #1
    86b0:	4323      	orrs	r3, r4
    86b2:	0019      	movs	r1, r3
    86b4:	bd70      	pop	{r4, r5, r6, pc}
    86b6:	2900      	cmp	r1, #0
    86b8:	d114      	bne.n	86e4 <__aeabi_f2d+0x6c>
    86ba:	2d00      	cmp	r5, #0
    86bc:	d01e      	beq.n	86fc <__aeabi_f2d+0x84>
    86be:	0028      	movs	r0, r5
    86c0:	f000 f8b6 	bl	8830 <__clzsi2>
    86c4:	280a      	cmp	r0, #10
    86c6:	dc1c      	bgt.n	8702 <__aeabi_f2d+0x8a>
    86c8:	230b      	movs	r3, #11
    86ca:	002a      	movs	r2, r5
    86cc:	1a1b      	subs	r3, r3, r0
    86ce:	40da      	lsrs	r2, r3
    86d0:	0003      	movs	r3, r0
    86d2:	3315      	adds	r3, #21
    86d4:	409d      	lsls	r5, r3
    86d6:	4b0f      	ldr	r3, [pc, #60]	; (8714 <__aeabi_f2d+0x9c>)
    86d8:	0312      	lsls	r2, r2, #12
    86da:	1a1b      	subs	r3, r3, r0
    86dc:	055b      	lsls	r3, r3, #21
    86de:	0b16      	lsrs	r6, r2, #12
    86e0:	0d5b      	lsrs	r3, r3, #21
    86e2:	e7d8      	b.n	8696 <__aeabi_f2d+0x1e>
    86e4:	2d00      	cmp	r5, #0
    86e6:	d006      	beq.n	86f6 <__aeabi_f2d+0x7e>
    86e8:	0b32      	lsrs	r2, r6, #12
    86ea:	2680      	movs	r6, #128	; 0x80
    86ec:	0336      	lsls	r6, r6, #12
    86ee:	076d      	lsls	r5, r5, #29
    86f0:	4316      	orrs	r6, r2
    86f2:	4b09      	ldr	r3, [pc, #36]	; (8718 <__aeabi_f2d+0xa0>)
    86f4:	e7cf      	b.n	8696 <__aeabi_f2d+0x1e>
    86f6:	4b08      	ldr	r3, [pc, #32]	; (8718 <__aeabi_f2d+0xa0>)
    86f8:	2600      	movs	r6, #0
    86fa:	e7cc      	b.n	8696 <__aeabi_f2d+0x1e>
    86fc:	2300      	movs	r3, #0
    86fe:	2600      	movs	r6, #0
    8700:	e7c9      	b.n	8696 <__aeabi_f2d+0x1e>
    8702:	0003      	movs	r3, r0
    8704:	002a      	movs	r2, r5
    8706:	3b0b      	subs	r3, #11
    8708:	409a      	lsls	r2, r3
    870a:	2500      	movs	r5, #0
    870c:	e7e3      	b.n	86d6 <__aeabi_f2d+0x5e>
    870e:	46c0      	nop			; (mov r8, r8)
    8710:	800fffff 	.word	0x800fffff
    8714:	00000389 	.word	0x00000389
    8718:	000007ff 	.word	0x000007ff

0000871c <__aeabi_d2f>:
    871c:	b5f0      	push	{r4, r5, r6, r7, lr}
    871e:	004c      	lsls	r4, r1, #1
    8720:	0d64      	lsrs	r4, r4, #21
    8722:	030b      	lsls	r3, r1, #12
    8724:	1c62      	adds	r2, r4, #1
    8726:	0f45      	lsrs	r5, r0, #29
    8728:	0a5b      	lsrs	r3, r3, #9
    872a:	0552      	lsls	r2, r2, #21
    872c:	432b      	orrs	r3, r5
    872e:	0fc9      	lsrs	r1, r1, #31
    8730:	00c5      	lsls	r5, r0, #3
    8732:	0d52      	lsrs	r2, r2, #21
    8734:	2a01      	cmp	r2, #1
    8736:	dd28      	ble.n	878a <__aeabi_d2f+0x6e>
    8738:	4a3a      	ldr	r2, [pc, #232]	; (8824 <__aeabi_d2f+0x108>)
    873a:	18a6      	adds	r6, r4, r2
    873c:	2efe      	cmp	r6, #254	; 0xfe
    873e:	dc1b      	bgt.n	8778 <__aeabi_d2f+0x5c>
    8740:	2e00      	cmp	r6, #0
    8742:	dd3e      	ble.n	87c2 <__aeabi_d2f+0xa6>
    8744:	0180      	lsls	r0, r0, #6
    8746:	0002      	movs	r2, r0
    8748:	1e50      	subs	r0, r2, #1
    874a:	4182      	sbcs	r2, r0
    874c:	0f6d      	lsrs	r5, r5, #29
    874e:	432a      	orrs	r2, r5
    8750:	00db      	lsls	r3, r3, #3
    8752:	4313      	orrs	r3, r2
    8754:	075a      	lsls	r2, r3, #29
    8756:	d004      	beq.n	8762 <__aeabi_d2f+0x46>
    8758:	220f      	movs	r2, #15
    875a:	401a      	ands	r2, r3
    875c:	2a04      	cmp	r2, #4
    875e:	d000      	beq.n	8762 <__aeabi_d2f+0x46>
    8760:	3304      	adds	r3, #4
    8762:	2280      	movs	r2, #128	; 0x80
    8764:	04d2      	lsls	r2, r2, #19
    8766:	401a      	ands	r2, r3
    8768:	d05a      	beq.n	8820 <__aeabi_d2f+0x104>
    876a:	3601      	adds	r6, #1
    876c:	2eff      	cmp	r6, #255	; 0xff
    876e:	d003      	beq.n	8778 <__aeabi_d2f+0x5c>
    8770:	019b      	lsls	r3, r3, #6
    8772:	0a5b      	lsrs	r3, r3, #9
    8774:	b2f4      	uxtb	r4, r6
    8776:	e001      	b.n	877c <__aeabi_d2f+0x60>
    8778:	24ff      	movs	r4, #255	; 0xff
    877a:	2300      	movs	r3, #0
    877c:	0258      	lsls	r0, r3, #9
    877e:	05e4      	lsls	r4, r4, #23
    8780:	0a40      	lsrs	r0, r0, #9
    8782:	07c9      	lsls	r1, r1, #31
    8784:	4320      	orrs	r0, r4
    8786:	4308      	orrs	r0, r1
    8788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    878a:	2c00      	cmp	r4, #0
    878c:	d007      	beq.n	879e <__aeabi_d2f+0x82>
    878e:	431d      	orrs	r5, r3
    8790:	d0f2      	beq.n	8778 <__aeabi_d2f+0x5c>
    8792:	2080      	movs	r0, #128	; 0x80
    8794:	00db      	lsls	r3, r3, #3
    8796:	0480      	lsls	r0, r0, #18
    8798:	4303      	orrs	r3, r0
    879a:	26ff      	movs	r6, #255	; 0xff
    879c:	e7da      	b.n	8754 <__aeabi_d2f+0x38>
    879e:	432b      	orrs	r3, r5
    87a0:	d003      	beq.n	87aa <__aeabi_d2f+0x8e>
    87a2:	2305      	movs	r3, #5
    87a4:	08db      	lsrs	r3, r3, #3
    87a6:	2cff      	cmp	r4, #255	; 0xff
    87a8:	d003      	beq.n	87b2 <__aeabi_d2f+0x96>
    87aa:	025b      	lsls	r3, r3, #9
    87ac:	0a5b      	lsrs	r3, r3, #9
    87ae:	b2e4      	uxtb	r4, r4
    87b0:	e7e4      	b.n	877c <__aeabi_d2f+0x60>
    87b2:	2b00      	cmp	r3, #0
    87b4:	d032      	beq.n	881c <__aeabi_d2f+0x100>
    87b6:	2080      	movs	r0, #128	; 0x80
    87b8:	03c0      	lsls	r0, r0, #15
    87ba:	4303      	orrs	r3, r0
    87bc:	025b      	lsls	r3, r3, #9
    87be:	0a5b      	lsrs	r3, r3, #9
    87c0:	e7dc      	b.n	877c <__aeabi_d2f+0x60>
    87c2:	0032      	movs	r2, r6
    87c4:	3217      	adds	r2, #23
    87c6:	db14      	blt.n	87f2 <__aeabi_d2f+0xd6>
    87c8:	2280      	movs	r2, #128	; 0x80
    87ca:	271e      	movs	r7, #30
    87cc:	0412      	lsls	r2, r2, #16
    87ce:	4313      	orrs	r3, r2
    87d0:	1bbf      	subs	r7, r7, r6
    87d2:	2f1f      	cmp	r7, #31
    87d4:	dc0f      	bgt.n	87f6 <__aeabi_d2f+0xda>
    87d6:	4a14      	ldr	r2, [pc, #80]	; (8828 <__aeabi_d2f+0x10c>)
    87d8:	4694      	mov	ip, r2
    87da:	4464      	add	r4, ip
    87dc:	002a      	movs	r2, r5
    87de:	40a5      	lsls	r5, r4
    87e0:	002e      	movs	r6, r5
    87e2:	40a3      	lsls	r3, r4
    87e4:	1e75      	subs	r5, r6, #1
    87e6:	41ae      	sbcs	r6, r5
    87e8:	40fa      	lsrs	r2, r7
    87ea:	4333      	orrs	r3, r6
    87ec:	4313      	orrs	r3, r2
    87ee:	2600      	movs	r6, #0
    87f0:	e7b0      	b.n	8754 <__aeabi_d2f+0x38>
    87f2:	2400      	movs	r4, #0
    87f4:	e7d5      	b.n	87a2 <__aeabi_d2f+0x86>
    87f6:	2202      	movs	r2, #2
    87f8:	4252      	negs	r2, r2
    87fa:	1b96      	subs	r6, r2, r6
    87fc:	001a      	movs	r2, r3
    87fe:	40f2      	lsrs	r2, r6
    8800:	2f20      	cmp	r7, #32
    8802:	d009      	beq.n	8818 <__aeabi_d2f+0xfc>
    8804:	4809      	ldr	r0, [pc, #36]	; (882c <__aeabi_d2f+0x110>)
    8806:	4684      	mov	ip, r0
    8808:	4464      	add	r4, ip
    880a:	40a3      	lsls	r3, r4
    880c:	432b      	orrs	r3, r5
    880e:	1e5d      	subs	r5, r3, #1
    8810:	41ab      	sbcs	r3, r5
    8812:	2600      	movs	r6, #0
    8814:	4313      	orrs	r3, r2
    8816:	e79d      	b.n	8754 <__aeabi_d2f+0x38>
    8818:	2300      	movs	r3, #0
    881a:	e7f7      	b.n	880c <__aeabi_d2f+0xf0>
    881c:	2300      	movs	r3, #0
    881e:	e7ad      	b.n	877c <__aeabi_d2f+0x60>
    8820:	0034      	movs	r4, r6
    8822:	e7bf      	b.n	87a4 <__aeabi_d2f+0x88>
    8824:	fffffc80 	.word	0xfffffc80
    8828:	fffffc82 	.word	0xfffffc82
    882c:	fffffca2 	.word	0xfffffca2

00008830 <__clzsi2>:
    8830:	211c      	movs	r1, #28
    8832:	2301      	movs	r3, #1
    8834:	041b      	lsls	r3, r3, #16
    8836:	4298      	cmp	r0, r3
    8838:	d301      	bcc.n	883e <__clzsi2+0xe>
    883a:	0c00      	lsrs	r0, r0, #16
    883c:	3910      	subs	r1, #16
    883e:	0a1b      	lsrs	r3, r3, #8
    8840:	4298      	cmp	r0, r3
    8842:	d301      	bcc.n	8848 <__clzsi2+0x18>
    8844:	0a00      	lsrs	r0, r0, #8
    8846:	3908      	subs	r1, #8
    8848:	091b      	lsrs	r3, r3, #4
    884a:	4298      	cmp	r0, r3
    884c:	d301      	bcc.n	8852 <__clzsi2+0x22>
    884e:	0900      	lsrs	r0, r0, #4
    8850:	3904      	subs	r1, #4
    8852:	a202      	add	r2, pc, #8	; (adr r2, 885c <__clzsi2+0x2c>)
    8854:	5c10      	ldrb	r0, [r2, r0]
    8856:	1840      	adds	r0, r0, r1
    8858:	4770      	bx	lr
    885a:	46c0      	nop			; (mov r8, r8)
    885c:	02020304 	.word	0x02020304
    8860:	01010101 	.word	0x01010101
	...

0000886c <_tcc_intflag>:
    886c:	00000001 00000002 00000004 00000008     ................
    887c:	00001000 00002000 00004000 00008000     ..... ...@......
    888c:	00010000 00020000 00040000 00080000     ................
    889c:	0000776d 00000000 0000206d 00000000     mw......m ......

000088ac <tc_interrupt_vectors.12756>:
    88ac:	00141312 73657431 00000074 42000800     ....1test......B
    88bc:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    88cc:	42001c00 00001962 0000195e 0000195e     ...Bb...^...^...
    88dc:	000019c0 000019c0 00001976 00001968     ........v...h...
    88ec:	0000197c 000019ae 00001bfc 00001bdc     |...............
    88fc:	00001bdc 00001c68 00001bee 00001c0a     ....h...........
    890c:	00001be0 00001c18 00001c58 42002c00     ........X....,.B
    891c:	42003000 42003400                       .0.B.4.B

00008924 <tc_interrupt_vectors.11884>:
    8924:	00141312 0000206d 00000000 6e6f7266     ....m ......fron
    8934:	6f6e2074 73206564 70757465 6d6f6320     t node setup com
    8944:	74656c70 00000065                       plete...

0000894c <_global_impure_ptr>:
    894c:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    895c:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    896c:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    897c:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    898c:	4e614e00 00000000                       .NaN....

00008994 <__sf_fake_stderr>:
	...

000089b4 <__sf_fake_stdin>:
	...

000089d4 <__sf_fake_stdout>:
	...

000089f8 <__mprec_bigtens>:
    89f8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8a08:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8a18:	7f73bf3c 75154fdd                       <.s..O.u

00008a20 <__mprec_tens>:
    8a20:	00000000 3ff00000 00000000 40240000     .......?......$@
    8a30:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8a40:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8a50:	00000000 412e8480 00000000 416312d0     .......A......cA
    8a60:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8a70:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8a80:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8a90:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8aa0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8ab0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8ac0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8ad0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8ae0:	79d99db4 44ea7843                       ...yCx.D

00008ae8 <p05.6052>:
    8ae8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8af8:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    8b08:	5849534f 00002e00                                OSIX...

00008b0f <_ctype_>:
    8b0f:	20202000 20202020 28282020 20282828     .         ((((( 
    8b1f:	20202020 20202020 20202020 20202020                     
    8b2f:	10108820 10101010 10101010 10101010      ...............
    8b3f:	04040410 04040404 10040404 10101010     ................
    8b4f:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8b5f:	01010101 01010101 01010101 10101010     ................
    8b6f:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8b7f:	02020202 02020202 02020202 10101010     ................
    8b8f:	00000020 00000000 00000000 00000000      ...............
	...
    8c0f:	0065f400 0065c400 0065d600 00651800     ..e...e...e...e.
    8c1f:	0065d600 0065ba00 0065d600 00651800     ..e...e...e...e.
    8c2f:	0065c400 0065c400 0065ba00 00651800     ..e...e...e...e.
    8c3f:	00652000 00652000 00652000 0065dc00     . e.. e.. e...e.
    8c4f:	0065c400 0065c400 00659800 00667c00     ..e...e...e..|f.
    8c5f:	00659800 0065ba00 00659800 00667c00     ..e...e...e..|f.
    8c6f:	0065c400 0065c400 0065ba00 00667c00     ..e...e...e..|f.
    8c7f:	00652000 00652000 00652000 00668600     . e.. e.. e...f.
    8c8f:	00697400 0068c400 0068c400 0068c200     .ti...h...h...h.
    8c9f:	00696600 00696600 00695c00 0068c200     .fi..fi..\i...h.
    8caf:	00696600 00695c00 00696600 0068c200     .fi..\i..fi...h.
    8cbf:	00696c00 00696c00 00696c00 0069fc00     .li..li..li...i.
    8ccf:	00734000 00732200 0072dc00 0071fa00     .@s.."s...r...q.
    8cdf:	0072dc00 00731400 0072dc00 0071fa00     ..r...s...r...q.
    8cef:	00732200 00732200 00731400 0071fa00     ."s.."s...s...q.
    8cff:	0071f200 0071f200 0071f200 00755800     ..q...q...q..Xu.
    8d0f:	007ba000 007a6000 007a6000 007a5c00     ..{..`z..`z..\z.
    8d1f:	007b7800 007b7800 007b6a00 007a5c00     .x{..x{..j{..\z.
    8d2f:	007b7800 007b6a00 007b7800 007a5c00     .x{..j{..x{..\z.
    8d3f:	007b8000 007b8000 007b8000 007d8400     ..{...{...{...}.
	...

00008d50 <_init>:
    8d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d52:	46c0      	nop			; (mov r8, r8)
    8d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8d56:	bc08      	pop	{r3}
    8d58:	469e      	mov	lr, r3
    8d5a:	4770      	bx	lr

00008d5c <__init_array_start>:
    8d5c:	000000dd 	.word	0x000000dd

00008d60 <_fini>:
    8d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d62:	46c0      	nop			; (mov r8, r8)
    8d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8d66:	bc08      	pop	{r3}
    8d68:	469e      	mov	lr, r3
    8d6a:	4770      	bx	lr

00008d6c <__fini_array_start>:
    8d6c:	000000b5 	.word	0x000000b5
