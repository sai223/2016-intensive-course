
front.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008fd8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00008fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001498  200001dc  000091b4  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20001674  0000a64c  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   00060b4c  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000085b2  00000000  00000000  00080ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e4bc  00000000  00000000  0008938e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c40  00000000  00000000  0009784a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001440  00000000  00000000  0009848a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022959  00000000  00000000  000998ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001d2ac  00000000  00000000  000bc223  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a409  00000000  00000000  000d94cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d88  00000000  00000000  001638d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 36 00 20 cd 27 00 00 c9 27 00 00 c9 27 00 00     x6. .'...'...'..
	...
      2c:	c9 27 00 00 00 00 00 00 00 00 00 00 c9 27 00 00     .'...........'..
      3c:	c9 27 00 00 c9 27 00 00 c9 27 00 00 c9 27 00 00     .'...'...'...'..
      4c:	c9 27 00 00 0d 0b 00 00 c9 27 00 00 c9 27 00 00     .'.......'...'..
      5c:	c9 27 00 00 c9 27 00 00 f9 10 00 00 09 11 00 00     .'...'..........
      6c:	19 11 00 00 29 11 00 00 39 11 00 00 49 11 00 00     ....)...9...I...
      7c:	81 05 00 00 91 05 00 00 a1 05 00 00 a9 24 00 00     .............$..
      8c:	b9 24 00 00 c9 24 00 00 00 00 00 00 00 00 00 00     .$...$..........
      9c:	c9 27 00 00 c9 27 00 00 00 00 00 00 c9 27 00 00     .'...'.......'..
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00008fd8 	.word	0x00008fd8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00008fd8 	.word	0x00008fd8
     10c:	00008fd8 	.word	0x00008fd8
     110:	00000000 	.word	0x00000000

00000114 <artist_init_maze>:
*/

#include "Maze.h"

void artist_init_maze (void) {
	artist_front.maze_status = STOP;
     114:	2103      	movs	r1, #3
     116:	23d9      	movs	r3, #217	; 0xd9
     118:	4a01      	ldr	r2, [pc, #4]	; (120 <artist_init_maze+0xc>)
     11a:	54d1      	strb	r1, [r2, r3]
}
     11c:	4770      	bx	lr
     11e:	46c0      	nop			; (mov r8, r8)
     120:	200007b4 	.word	0x200007b4

00000124 <artist_do_maze>:
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
	else printf("%s\n", "BACK\0");
}
*/

void artist_do_maze (void) {
     124:	b510      	push	{r4, lr}
	if(artist_front.maze_status == RIGHT && past_distance.right_distance + 2 < artist_front.right_distance){
     126:	23d9      	movs	r3, #217	; 0xd9
     128:	4a56      	ldr	r2, [pc, #344]	; (284 <artist_do_maze+0x160>)
     12a:	5cd3      	ldrb	r3, [r2, r3]
     12c:	2b02      	cmp	r3, #2
     12e:	d048      	beq.n	1c2 <artist_do_maze+0x9e>
		artist_front.maze_status = LEFT;
	}
	else if(artist_front.maze_status != STOP 
     130:	2b03      	cmp	r3, #3
     132:	d016      	beq.n	162 <artist_do_maze+0x3e>
		&& artist_front.right_distance < past_distance.right_distance 
     134:	23d4      	movs	r3, #212	; 0xd4
     136:	4a53      	ldr	r2, [pc, #332]	; (284 <artist_do_maze+0x160>)
     138:	58d4      	ldr	r4, [r2, r3]
     13a:	4b53      	ldr	r3, [pc, #332]	; (288 <artist_do_maze+0x164>)
     13c:	6899      	ldr	r1, [r3, #8]
     13e:	1c20      	adds	r0, r4, #0
     140:	4b52      	ldr	r3, [pc, #328]	; (28c <artist_do_maze+0x168>)
     142:	4798      	blx	r3
     144:	2800      	cmp	r0, #0
     146:	d00c      	beq.n	162 <artist_do_maze+0x3e>
		&& MAZE_RIGHT_DISTANCE_LOWERBOUND < artist_front.right_distance 
     148:	4951      	ldr	r1, [pc, #324]	; (290 <artist_do_maze+0x16c>)
     14a:	1c20      	adds	r0, r4, #0
     14c:	4b51      	ldr	r3, [pc, #324]	; (294 <artist_do_maze+0x170>)
     14e:	4798      	blx	r3
     150:	2800      	cmp	r0, #0
     152:	d006      	beq.n	162 <artist_do_maze+0x3e>
		&& artist_front.right_distance < MAZE_RIGHT_DISTANCE_UPPERBOUND){
     154:	2182      	movs	r1, #130	; 0x82
     156:	05c9      	lsls	r1, r1, #23
     158:	1c20      	adds	r0, r4, #0
     15a:	4b4c      	ldr	r3, [pc, #304]	; (28c <artist_do_maze+0x168>)
     15c:	4798      	blx	r3
     15e:	2800      	cmp	r0, #0
     160:	d10d      	bne.n	17e <artist_do_maze+0x5a>
		artist_front.maze_status = artist_front.maze_status;
	}
	else if(artist_front.right_distance > MAZE_RIGHT_DISTANCE_UPPERBOUND){
     162:	23d4      	movs	r3, #212	; 0xd4
     164:	4a47      	ldr	r2, [pc, #284]	; (284 <artist_do_maze+0x160>)
     166:	58d4      	ldr	r4, [r2, r3]
     168:	2182      	movs	r1, #130	; 0x82
     16a:	05c9      	lsls	r1, r1, #23
     16c:	1c20      	adds	r0, r4, #0
     16e:	4b49      	ldr	r3, [pc, #292]	; (294 <artist_do_maze+0x170>)
     170:	4798      	blx	r3
     172:	2800      	cmp	r0, #0
     174:	d037      	beq.n	1e6 <artist_do_maze+0xc2>
		artist_front.maze_status = RIGHT;
     176:	2102      	movs	r1, #2
     178:	23d9      	movs	r3, #217	; 0xd9
     17a:	4a42      	ldr	r2, [pc, #264]	; (284 <artist_do_maze+0x160>)
     17c:	54d1      	strb	r1, [r2, r3]
	}
	else{
		artist_front.maze_status = STRAIGHT;
	}
	
	past_distance.left_distance = artist_front.left_distance;
     17e:	4b42      	ldr	r3, [pc, #264]	; (288 <artist_do_maze+0x164>)
     180:	4c40      	ldr	r4, [pc, #256]	; (284 <artist_do_maze+0x160>)
     182:	22d0      	movs	r2, #208	; 0xd0
     184:	58a2      	ldr	r2, [r4, r2]
     186:	601a      	str	r2, [r3, #0]
	past_distance.center_distance = artist_front.center_distance;
     188:	22cc      	movs	r2, #204	; 0xcc
     18a:	58a2      	ldr	r2, [r4, r2]
     18c:	605a      	str	r2, [r3, #4]
	past_distance.right_distance = artist_front.right_distance;
     18e:	22d4      	movs	r2, #212	; 0xd4
     190:	58a2      	ldr	r2, [r4, r2]
     192:	609a      	str	r2, [r3, #8]
	
	artist_print_ultrasonic_value();
     194:	4b40      	ldr	r3, [pc, #256]	; (298 <artist_do_maze+0x174>)
     196:	4798      	blx	r3
	if(artist_front.maze_status == STRAIGHT) printf("%s\n", "STRA\0");
     198:	23d9      	movs	r3, #217	; 0xd9
     19a:	5ce3      	ldrb	r3, [r4, r3]
     19c:	2b00      	cmp	r3, #0
     19e:	d040      	beq.n	222 <artist_do_maze+0xfe>
	else if(artist_front.maze_status == LEFT) printf("%s\n", "LEFT\0");
     1a0:	2b01      	cmp	r3, #1
     1a2:	d042      	beq.n	22a <artist_do_maze+0x106>
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
     1a4:	2b02      	cmp	r3, #2
     1a6:	d045      	beq.n	234 <artist_do_maze+0x110>
	else printf("%s\n", "BACK\0");
     1a8:	483c      	ldr	r0, [pc, #240]	; (29c <artist_do_maze+0x178>)
     1aa:	3018      	adds	r0, #24
     1ac:	4b3c      	ldr	r3, [pc, #240]	; (2a0 <artist_do_maze+0x17c>)
     1ae:	4798      	blx	r3

	switch (artist_front.maze_status){
     1b0:	4a34      	ldr	r2, [pc, #208]	; (284 <artist_do_maze+0x160>)
     1b2:	23d9      	movs	r3, #217	; 0xd9
     1b4:	5cd1      	ldrb	r1, [r2, r3]
     1b6:	2904      	cmp	r1, #4
     1b8:	d847      	bhi.n	24a <artist_do_maze+0x126>
     1ba:	008b      	lsls	r3, r1, #2
     1bc:	4a39      	ldr	r2, [pc, #228]	; (2a4 <artist_do_maze+0x180>)
     1be:	58d3      	ldr	r3, [r2, r3]
     1c0:	469f      	mov	pc, r3
	if(artist_front.maze_status == RIGHT && past_distance.right_distance + 2 < artist_front.right_distance){
     1c2:	2180      	movs	r1, #128	; 0x80
     1c4:	05c9      	lsls	r1, r1, #23
     1c6:	4b30      	ldr	r3, [pc, #192]	; (288 <artist_do_maze+0x164>)
     1c8:	6898      	ldr	r0, [r3, #8]
     1ca:	4b37      	ldr	r3, [pc, #220]	; (2a8 <artist_do_maze+0x184>)
     1cc:	4798      	blx	r3
     1ce:	23d4      	movs	r3, #212	; 0xd4
     1d0:	4a2c      	ldr	r2, [pc, #176]	; (284 <artist_do_maze+0x160>)
     1d2:	58d1      	ldr	r1, [r2, r3]
     1d4:	4b2d      	ldr	r3, [pc, #180]	; (28c <artist_do_maze+0x168>)
     1d6:	4798      	blx	r3
     1d8:	2800      	cmp	r0, #0
     1da:	d0ab      	beq.n	134 <artist_do_maze+0x10>
		artist_front.maze_status = LEFT;
     1dc:	2101      	movs	r1, #1
     1de:	23d9      	movs	r3, #217	; 0xd9
     1e0:	4a28      	ldr	r2, [pc, #160]	; (284 <artist_do_maze+0x160>)
     1e2:	54d1      	strb	r1, [r2, r3]
     1e4:	e7cb      	b.n	17e <artist_do_maze+0x5a>
	else if(artist_front.center_distance <= MAZE_FRONT_WALL_EXIST_DETERMINATE){
     1e6:	2182      	movs	r1, #130	; 0x82
     1e8:	05c9      	lsls	r1, r1, #23
     1ea:	23cc      	movs	r3, #204	; 0xcc
     1ec:	4a25      	ldr	r2, [pc, #148]	; (284 <artist_do_maze+0x160>)
     1ee:	58d0      	ldr	r0, [r2, r3]
     1f0:	4b2e      	ldr	r3, [pc, #184]	; (2ac <artist_do_maze+0x188>)
     1f2:	4798      	blx	r3
     1f4:	2800      	cmp	r0, #0
     1f6:	d004      	beq.n	202 <artist_do_maze+0xde>
		artist_front.maze_status = LEFT;
     1f8:	2101      	movs	r1, #1
     1fa:	23d9      	movs	r3, #217	; 0xd9
     1fc:	4a21      	ldr	r2, [pc, #132]	; (284 <artist_do_maze+0x160>)
     1fe:	54d1      	strb	r1, [r2, r3]
     200:	e7bd      	b.n	17e <artist_do_maze+0x5a>
	else if(artist_front.right_distance < MAZE_RIGHT_DISTANCE_LOWERBOUND){
     202:	4923      	ldr	r1, [pc, #140]	; (290 <artist_do_maze+0x16c>)
     204:	1c20      	adds	r0, r4, #0
     206:	4b21      	ldr	r3, [pc, #132]	; (28c <artist_do_maze+0x168>)
     208:	4798      	blx	r3
     20a:	2800      	cmp	r0, #0
     20c:	d004      	beq.n	218 <artist_do_maze+0xf4>
		artist_front.maze_status = LEFT;
     20e:	2101      	movs	r1, #1
     210:	23d9      	movs	r3, #217	; 0xd9
     212:	4a1c      	ldr	r2, [pc, #112]	; (284 <artist_do_maze+0x160>)
     214:	54d1      	strb	r1, [r2, r3]
     216:	e7b2      	b.n	17e <artist_do_maze+0x5a>
		artist_front.maze_status = STRAIGHT;
     218:	2100      	movs	r1, #0
     21a:	23d9      	movs	r3, #217	; 0xd9
     21c:	4a19      	ldr	r2, [pc, #100]	; (284 <artist_do_maze+0x160>)
     21e:	54d1      	strb	r1, [r2, r3]
     220:	e7ad      	b.n	17e <artist_do_maze+0x5a>
	if(artist_front.maze_status == STRAIGHT) printf("%s\n", "STRA\0");
     222:	481e      	ldr	r0, [pc, #120]	; (29c <artist_do_maze+0x178>)
     224:	4b1e      	ldr	r3, [pc, #120]	; (2a0 <artist_do_maze+0x17c>)
     226:	4798      	blx	r3
     228:	e7c2      	b.n	1b0 <artist_do_maze+0x8c>
	else if(artist_front.maze_status == LEFT) printf("%s\n", "LEFT\0");
     22a:	481c      	ldr	r0, [pc, #112]	; (29c <artist_do_maze+0x178>)
     22c:	3008      	adds	r0, #8
     22e:	4b1c      	ldr	r3, [pc, #112]	; (2a0 <artist_do_maze+0x17c>)
     230:	4798      	blx	r3
     232:	e7bd      	b.n	1b0 <artist_do_maze+0x8c>
	else if(artist_front.maze_status == RIGHT) printf("%s\n", "RIGH\0");
     234:	4819      	ldr	r0, [pc, #100]	; (29c <artist_do_maze+0x178>)
     236:	3010      	adds	r0, #16
     238:	4b19      	ldr	r3, [pc, #100]	; (2a0 <artist_do_maze+0x17c>)
     23a:	4798      	blx	r3
     23c:	e7b8      	b.n	1b0 <artist_do_maze+0x8c>
		case STRAIGHT :
		usart_write_buffer_job(&(artist_front.usart_instance), "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     23e:	2205      	movs	r2, #5
     240:	4916      	ldr	r1, [pc, #88]	; (29c <artist_do_maze+0x178>)
     242:	3120      	adds	r1, #32
     244:	481a      	ldr	r0, [pc, #104]	; (2b0 <artist_do_maze+0x18c>)
     246:	4b1b      	ldr	r3, [pc, #108]	; (2b4 <artist_do_maze+0x190>)
     248:	4798      	blx	r3
		break;
		case STOP :
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
		break;
	}
}
     24a:	bd10      	pop	{r4, pc}
		usart_write_buffer_job(&(artist_front.usart_instance), "ma\0\0\n", MAX_RX_BUFFER_LENGTH);
     24c:	2205      	movs	r2, #5
     24e:	4913      	ldr	r1, [pc, #76]	; (29c <artist_do_maze+0x178>)
     250:	3128      	adds	r1, #40	; 0x28
     252:	4817      	ldr	r0, [pc, #92]	; (2b0 <artist_do_maze+0x18c>)
     254:	4b17      	ldr	r3, [pc, #92]	; (2b4 <artist_do_maze+0x190>)
     256:	4798      	blx	r3
		break;
     258:	e7f7      	b.n	24a <artist_do_maze+0x126>
		usart_write_buffer_job(&(artist_front.usart_instance), "md\0\0\n", MAX_RX_BUFFER_LENGTH);
     25a:	2205      	movs	r2, #5
     25c:	490f      	ldr	r1, [pc, #60]	; (29c <artist_do_maze+0x178>)
     25e:	3130      	adds	r1, #48	; 0x30
     260:	4813      	ldr	r0, [pc, #76]	; (2b0 <artist_do_maze+0x18c>)
     262:	4b14      	ldr	r3, [pc, #80]	; (2b4 <artist_do_maze+0x190>)
     264:	4798      	blx	r3
		break;
     266:	e7f0      	b.n	24a <artist_do_maze+0x126>
		usart_write_buffer_job(&(artist_front.usart_instance), "ms\0\0\n", MAX_RX_BUFFER_LENGTH);
     268:	2205      	movs	r2, #5
     26a:	490c      	ldr	r1, [pc, #48]	; (29c <artist_do_maze+0x178>)
     26c:	3138      	adds	r1, #56	; 0x38
     26e:	4810      	ldr	r0, [pc, #64]	; (2b0 <artist_do_maze+0x18c>)
     270:	4b10      	ldr	r3, [pc, #64]	; (2b4 <artist_do_maze+0x190>)
     272:	4798      	blx	r3
		break;
     274:	e7e9      	b.n	24a <artist_do_maze+0x126>
		usart_write_buffer_job(&(artist_front.usart_instance), "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     276:	2205      	movs	r2, #5
     278:	4908      	ldr	r1, [pc, #32]	; (29c <artist_do_maze+0x178>)
     27a:	3140      	adds	r1, #64	; 0x40
     27c:	480c      	ldr	r0, [pc, #48]	; (2b0 <artist_do_maze+0x18c>)
     27e:	4b0d      	ldr	r3, [pc, #52]	; (2b4 <artist_do_maze+0x190>)
     280:	4798      	blx	r3
}
     282:	e7e2      	b.n	24a <artist_do_maze+0x126>
     284:	200007b4 	.word	0x200007b4
     288:	200014e0 	.word	0x200014e0
     28c:	000062a5 	.word	0x000062a5
     290:	40900000 	.word	0x40900000
     294:	000062cd 	.word	0x000062cd
     298:	00000321 	.word	0x00000321
     29c:	00008a84 	.word	0x00008a84
     2a0:	00003f41 	.word	0x00003f41
     2a4:	00008a70 	.word	0x00008a70
     2a8:	00006349 	.word	0x00006349
     2ac:	000062b9 	.word	0x000062b9
     2b0:	2000082c 	.word	0x2000082c
     2b4:	00001991 	.word	0x00001991

000002b8 <artist_ultrasonic_configure>:
 */
#include "TheArtist.h"
#include "UltraSonic.h"

void artist_ultrasonic_configure (struct artist_ultrasonic_module * module, uint8_t echo, uint8_t trig) {
	module->echo_pin	= echo; 
     2b8:	7001      	strb	r1, [r0, #0]
	module->trigger_pin = trig;  
     2ba:	7042      	strb	r2, [r0, #1]
	module->filter_large_change_counts = 0; 
     2bc:	2300      	movs	r3, #0
     2be:	7083      	strb	r3, [r0, #2]
	module->fliter_old_val = 0; 
     2c0:	2300      	movs	r3, #0
     2c2:	6043      	str	r3, [r0, #4]
}
     2c4:	4770      	bx	lr
	...

000002c8 <artist_ultrasonic_gpio_init>:

void artist_ultrasonic_gpio_init() {
     2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ca:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2cc:	a903      	add	r1, sp, #12
     2ce:	2201      	movs	r2, #1
     2d0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2d2:	2300      	movs	r3, #0
     2d4:	708b      	strb	r3, [r1, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     2d6:	ad02      	add	r5, sp, #8
     2d8:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2da:	706a      	strb	r2, [r5, #1]
	config->powersave  = false;
     2dc:	70ab      	strb	r3, [r5, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     2de:	4668      	mov	r0, sp
     2e0:	7003      	strb	r3, [r0, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2e2:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
     2e4:	7083      	strb	r3, [r0, #2]
	config->direction  = PORT_PIN_DIR_INPUT;
     2e6:	ac01      	add	r4, sp, #4
     2e8:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2ea:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     2ec:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&pin_config_trig);
	port_get_config_defaults(&pin_config_echo_center);
	port_get_config_defaults(&pin_config_echo_right);
	port_get_config_defaults(&pin_config_echo_left);

	pin_config_trig.direction			=	PORT_PIN_DIR_OUTPUT;
     2ee:	700a      	strb	r2, [r1, #0]
	
	pin_config_echo_right.direction		=	PORT_PIN_DIR_INPUT;
	pin_config_echo_right.input_pull	=	PORT_PIN_PULL_UP;
	
	
	port_pin_set_config(artist_front.us_instance_center.trigger_pin, &pin_config_trig);
     2f0:	4f09      	ldr	r7, [pc, #36]	; (318 <artist_ultrasonic_gpio_init+0x50>)
     2f2:	33b5      	adds	r3, #181	; 0xb5
     2f4:	5cf8      	ldrb	r0, [r7, r3]
     2f6:	4e09      	ldr	r6, [pc, #36]	; (31c <artist_ultrasonic_gpio_init+0x54>)
     2f8:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_center.echo_pin, &pin_config_echo_center);
     2fa:	23b4      	movs	r3, #180	; 0xb4
     2fc:	5cf8      	ldrb	r0, [r7, r3]
     2fe:	0029      	movs	r1, r5
     300:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_left.echo_pin, &pin_config_echo_left);
     302:	23bc      	movs	r3, #188	; 0xbc
     304:	5cf8      	ldrb	r0, [r7, r3]
     306:	0021      	movs	r1, r4
     308:	47b0      	blx	r6
	port_pin_set_config(artist_front.us_instance_right.echo_pin, &pin_config_echo_right); 
     30a:	23c4      	movs	r3, #196	; 0xc4
     30c:	5cf8      	ldrb	r0, [r7, r3]
     30e:	4669      	mov	r1, sp
     310:	47b0      	blx	r6
}
     312:	b005      	add	sp, #20
     314:	bdf0      	pop	{r4, r5, r6, r7, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	200007b4 	.word	0x200007b4
     31c:	00000c71 	.word	0x00000c71

00000320 <artist_print_ultrasonic_value>:
	else if (FILTER_VAL < 0)	FILTER_VAL = 0;

	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
}

void artist_print_ultrasonic_value() {
     320:	b5f0      	push	{r4, r5, r6, r7, lr}
     322:	b085      	sub	sp, #20
	printf("%5.2f, %5.2f, %5.2f\n", 
				artist_front.left_distance, 
     324:	4d0b      	ldr	r5, [pc, #44]	; (354 <artist_print_ultrasonic_value+0x34>)
	printf("%5.2f, %5.2f, %5.2f\n", 
     326:	4c0c      	ldr	r4, [pc, #48]	; (358 <artist_print_ultrasonic_value+0x38>)
     328:	23d0      	movs	r3, #208	; 0xd0
     32a:	58e8      	ldr	r0, [r5, r3]
     32c:	47a0      	blx	r4
     32e:	0006      	movs	r6, r0
     330:	000f      	movs	r7, r1
				artist_front.center_distance, 
				artist_front.right_distance);  
     332:	23d4      	movs	r3, #212	; 0xd4
	printf("%5.2f, %5.2f, %5.2f\n", 
     334:	58e8      	ldr	r0, [r5, r3]
     336:	47a0      	blx	r4
     338:	9002      	str	r0, [sp, #8]
     33a:	9103      	str	r1, [sp, #12]
				artist_front.center_distance, 
     33c:	23cc      	movs	r3, #204	; 0xcc
	printf("%5.2f, %5.2f, %5.2f\n", 
     33e:	58e8      	ldr	r0, [r5, r3]
     340:	47a0      	blx	r4
     342:	9000      	str	r0, [sp, #0]
     344:	9101      	str	r1, [sp, #4]
     346:	0032      	movs	r2, r6
     348:	003b      	movs	r3, r7
     34a:	4804      	ldr	r0, [pc, #16]	; (35c <artist_print_ultrasonic_value+0x3c>)
     34c:	4904      	ldr	r1, [pc, #16]	; (360 <artist_print_ultrasonic_value+0x40>)
     34e:	4788      	blx	r1
}
     350:	b005      	add	sp, #20
     352:	bdf0      	pop	{r4, r5, r6, r7, pc}
     354:	200007b4 	.word	0x200007b4
     358:	0000887d 	.word	0x0000887d
     35c:	00008acc 	.word	0x00008acc
     360:	00003e4d 	.word	0x00003e4d

00000364 <artist_ultrasonic_get_value>:
float artist_ultrasonic_get_value(struct artist_ultrasonic_module * const module) {
     364:	b5f0      	push	{r4, r5, r6, r7, lr}
     366:	b083      	sub	sp, #12
     368:	0004      	movs	r4, r0
	// TODO : use timer callback function!
	uint16_t start, end;
	uint16_t count = 0;
	
	port_pin_set_output_level(module->trigger_pin, false);
     36a:	7842      	ldrb	r2, [r0, #1]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     36c:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     36e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     370:	2900      	cmp	r1, #0
     372:	d104      	bne.n	37e <artist_ultrasonic_get_value+0x1a>
		return &(ports[port_index]->Group[group_index]);
     374:	0953      	lsrs	r3, r2, #5
     376:	01db      	lsls	r3, r3, #7
     378:	495c      	ldr	r1, [pc, #368]	; (4ec <artist_ultrasonic_get_value+0x188>)
     37a:	468c      	mov	ip, r1
     37c:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     37e:	211f      	movs	r1, #31
     380:	4011      	ands	r1, r2
     382:	2201      	movs	r2, #1
     384:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     386:	615a      	str	r2, [r3, #20]
	delay_us(40);
     388:	2028      	movs	r0, #40	; 0x28
     38a:	4b59      	ldr	r3, [pc, #356]	; (4f0 <artist_ultrasonic_get_value+0x18c>)
     38c:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, true);
     38e:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     390:	09d1      	lsrs	r1, r2, #7
		return NULL;
     392:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     394:	2900      	cmp	r1, #0
     396:	d104      	bne.n	3a2 <artist_ultrasonic_get_value+0x3e>
		return &(ports[port_index]->Group[group_index]);
     398:	0953      	lsrs	r3, r2, #5
     39a:	01db      	lsls	r3, r3, #7
     39c:	4953      	ldr	r1, [pc, #332]	; (4ec <artist_ultrasonic_get_value+0x188>)
     39e:	468c      	mov	ip, r1
     3a0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3a2:	211f      	movs	r1, #31
     3a4:	4011      	ands	r1, r2
     3a6:	2201      	movs	r2, #1
     3a8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     3aa:	619a      	str	r2, [r3, #24]
	delay_us(10);
     3ac:	200a      	movs	r0, #10
     3ae:	4b50      	ldr	r3, [pc, #320]	; (4f0 <artist_ultrasonic_get_value+0x18c>)
     3b0:	4798      	blx	r3
	port_pin_set_output_level(module->trigger_pin, false);
     3b2:	7862      	ldrb	r2, [r4, #1]
	if (port_index < PORT_INST_NUM) {
     3b4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     3b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3b8:	2900      	cmp	r1, #0
     3ba:	d104      	bne.n	3c6 <artist_ultrasonic_get_value+0x62>
		return &(ports[port_index]->Group[group_index]);
     3bc:	0953      	lsrs	r3, r2, #5
     3be:	01db      	lsls	r3, r3, #7
     3c0:	494a      	ldr	r1, [pc, #296]	; (4ec <artist_ultrasonic_get_value+0x188>)
     3c2:	468c      	mov	ip, r1
     3c4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3c6:	211f      	movs	r1, #31
     3c8:	4011      	ands	r1, r2
     3ca:	2201      	movs	r2, #1
     3cc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     3ce:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3d0:	4b48      	ldr	r3, [pc, #288]	; (4f4 <artist_ultrasonic_get_value+0x190>)
     3d2:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3d4:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     3d6:	b25b      	sxtb	r3, r3
     3d8:	2b00      	cmp	r3, #0
     3da:	dbfb      	blt.n	3d4 <artist_ultrasonic_get_value+0x70>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
     3dc:	2300      	movs	r3, #0
     3de:	7113      	strb	r3, [r2, #4]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3e0:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     3e2:	b25b      	sxtb	r3, r3
     3e4:	2b00      	cmp	r3, #0
     3e6:	dbfb      	blt.n	3e0 <artist_ultrasonic_get_value+0x7c>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
     3e8:	2340      	movs	r3, #64	; 0x40
     3ea:	7153      	strb	r3, [r2, #5]
	tc_start_counter(&(artist_front.tc_instance_ultrasonic)); 
	while (!(port_pin_get_input_level(module->echo_pin))) {
     3ec:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3ee:	221f      	movs	r2, #31
     3f0:	401a      	ands	r2, r3
     3f2:	2001      	movs	r0, #1
     3f4:	4090      	lsls	r0, r2
     3f6:	09da      	lsrs	r2, r3, #7
     3f8:	2100      	movs	r1, #0
     3fa:	2a00      	cmp	r2, #0
     3fc:	d104      	bne.n	408 <artist_ultrasonic_get_value+0xa4>
     3fe:	0959      	lsrs	r1, r3, #5
     400:	01c9      	lsls	r1, r1, #7
     402:	4b3a      	ldr	r3, [pc, #232]	; (4ec <artist_ultrasonic_get_value+0x188>)
     404:	469c      	mov	ip, r3
     406:	4461      	add	r1, ip
     408:	4b3b      	ldr	r3, [pc, #236]	; (4f8 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     40a:	6a0a      	ldr	r2, [r1, #32]
     40c:	4202      	tst	r2, r0
     40e:	d105      	bne.n	41c <artist_ultrasonic_get_value+0xb8>
     410:	3b01      	subs	r3, #1
     412:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val; 
     414:	2b00      	cmp	r3, #0
     416:	d1f8      	bne.n	40a <artist_ultrasonic_get_value+0xa6>
     418:	6860      	ldr	r0, [r4, #4]
     41a:	e062      	b.n	4e2 <artist_ultrasonic_get_value+0x17e>
	}
	count =0; 
	start = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     41c:	4835      	ldr	r0, [pc, #212]	; (4f4 <artist_ultrasonic_get_value+0x190>)
     41e:	4b37      	ldr	r3, [pc, #220]	; (4fc <artist_ultrasonic_get_value+0x198>)
     420:	4798      	blx	r3
     422:	0005      	movs	r5, r0
	while ((port_pin_get_input_level(module->echo_pin)))  {
     424:	7823      	ldrb	r3, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     426:	221f      	movs	r2, #31
     428:	401a      	ands	r2, r3
     42a:	2001      	movs	r0, #1
     42c:	4090      	lsls	r0, r2
     42e:	09da      	lsrs	r2, r3, #7
     430:	2100      	movs	r1, #0
     432:	2a00      	cmp	r2, #0
     434:	d104      	bne.n	440 <artist_ultrasonic_get_value+0xdc>
     436:	0959      	lsrs	r1, r3, #5
     438:	01c9      	lsls	r1, r1, #7
     43a:	4b2c      	ldr	r3, [pc, #176]	; (4ec <artist_ultrasonic_get_value+0x188>)
     43c:	469c      	mov	ip, r3
     43e:	4461      	add	r1, ip
     440:	4b2d      	ldr	r3, [pc, #180]	; (4f8 <artist_ultrasonic_get_value+0x194>)
	return (port_base->IN.reg & pin_mask);
     442:	6a0a      	ldr	r2, [r1, #32]
     444:	4202      	tst	r2, r0
     446:	d005      	beq.n	454 <artist_ultrasonic_get_value+0xf0>
     448:	3b01      	subs	r3, #1
     44a:	b29b      	uxth	r3, r3
		count ++;
		if (count > 0xFF00) return module->fliter_old_val;  
     44c:	2b00      	cmp	r3, #0
     44e:	d1f8      	bne.n	442 <artist_ultrasonic_get_value+0xde>
     450:	6860      	ldr	r0, [r4, #4]
     452:	e046      	b.n	4e2 <artist_ultrasonic_get_value+0x17e>
	}
	end = tc_get_count_value(&(artist_front.tc_instance_ultrasonic));
     454:	4e27      	ldr	r6, [pc, #156]	; (4f4 <artist_ultrasonic_get_value+0x190>)
     456:	0030      	movs	r0, r6
     458:	4b28      	ldr	r3, [pc, #160]	; (4fc <artist_ultrasonic_get_value+0x198>)
     45a:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     45c:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     45e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     460:	b25b      	sxtb	r3, r3
     462:	2b00      	cmp	r3, #0
     464:	dbfb      	blt.n	45e <artist_ultrasonic_get_value+0xfa>
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
     466:	2380      	movs	r3, #128	; 0x80
     468:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&(artist_front.tc_instance_ultrasonic));

	float new = ((float)(end - start)) * 0.017;
     46a:	0400      	lsls	r0, r0, #16
     46c:	0c00      	lsrs	r0, r0, #16
     46e:	042d      	lsls	r5, r5, #16
     470:	0c2d      	lsrs	r5, r5, #16
     472:	1b40      	subs	r0, r0, r5
     474:	4f22      	ldr	r7, [pc, #136]	; (500 <artist_ultrasonic_get_value+0x19c>)
     476:	47b8      	blx	r7
     478:	4b22      	ldr	r3, [pc, #136]	; (504 <artist_ultrasonic_get_value+0x1a0>)
     47a:	4798      	blx	r3
     47c:	4a22      	ldr	r2, [pc, #136]	; (508 <artist_ultrasonic_get_value+0x1a4>)
     47e:	4b23      	ldr	r3, [pc, #140]	; (50c <artist_ultrasonic_get_value+0x1a8>)
     480:	4d23      	ldr	r5, [pc, #140]	; (510 <artist_ultrasonic_get_value+0x1ac>)
     482:	47a8      	blx	r5
     484:	4b23      	ldr	r3, [pc, #140]	; (514 <artist_ultrasonic_get_value+0x1b0>)
     486:	4798      	blx	r3
     488:	9001      	str	r0, [sp, #4]
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     48a:	6865      	ldr	r5, [r4, #4]
	if (new > old * module->filter_large_change_counts ||
     48c:	78a6      	ldrb	r6, [r4, #2]
     48e:	0030      	movs	r0, r6
     490:	47b8      	blx	r7
     492:	1c07      	adds	r7, r0, #0
     494:	1c01      	adds	r1, r0, #0
     496:	1c28      	adds	r0, r5, #0
     498:	4b1f      	ldr	r3, [pc, #124]	; (518 <artist_ultrasonic_get_value+0x1b4>)
     49a:	4798      	blx	r3
     49c:	1c01      	adds	r1, r0, #0
     49e:	9801      	ldr	r0, [sp, #4]
     4a0:	4b1e      	ldr	r3, [pc, #120]	; (51c <artist_ultrasonic_get_value+0x1b8>)
     4a2:	4798      	blx	r3
     4a4:	2800      	cmp	r0, #0
     4a6:	d109      	bne.n	4bc <artist_ultrasonic_get_value+0x158>
	new < old * 1/module->filter_large_change_counts ) {
     4a8:	1c39      	adds	r1, r7, #0
     4aa:	1c28      	adds	r0, r5, #0
     4ac:	4b1c      	ldr	r3, [pc, #112]	; (520 <artist_ultrasonic_get_value+0x1bc>)
     4ae:	4798      	blx	r3
     4b0:	1c01      	adds	r1, r0, #0
	if (new > old * module->filter_large_change_counts ||
     4b2:	9801      	ldr	r0, [sp, #4]
     4b4:	4b1b      	ldr	r3, [pc, #108]	; (524 <artist_ultrasonic_get_value+0x1c0>)
     4b6:	4798      	blx	r3
     4b8:	2800      	cmp	r0, #0
     4ba:	d005      	beq.n	4c8 <artist_ultrasonic_get_value+0x164>
		module->filter_large_change_counts ++;
     4bc:	1c73      	adds	r3, r6, #1
     4be:	b2db      	uxtb	r3, r3
		if (module->filter_large_change_counts > 3)		
     4c0:	2b03      	cmp	r3, #3
     4c2:	d810      	bhi.n	4e6 <artist_ultrasonic_get_value+0x182>
		module->filter_large_change_counts ++;
     4c4:	70a3      	strb	r3, [r4, #2]
			new = old;
     4c6:	9501      	str	r5, [sp, #4]
	return (new * (1 - FILTER_VAL)) + (old * (FILTER_VAL));
     4c8:	4f13      	ldr	r7, [pc, #76]	; (518 <artist_ultrasonic_get_value+0x1b4>)
     4ca:	4917      	ldr	r1, [pc, #92]	; (528 <artist_ultrasonic_get_value+0x1c4>)
     4cc:	9801      	ldr	r0, [sp, #4]
     4ce:	47b8      	blx	r7
     4d0:	1c06      	adds	r6, r0, #0
     4d2:	4916      	ldr	r1, [pc, #88]	; (52c <artist_ultrasonic_get_value+0x1c8>)
     4d4:	1c28      	adds	r0, r5, #0
     4d6:	47b8      	blx	r7
     4d8:	1c01      	adds	r1, r0, #0
     4da:	1c30      	adds	r0, r6, #0
     4dc:	4b14      	ldr	r3, [pc, #80]	; (530 <artist_ultrasonic_get_value+0x1cc>)
     4de:	4798      	blx	r3
	module->fliter_old_val = artist_HC_SR04_filter(module, new, module->fliter_old_val, CONF_ARTIST_ULTRASONIC_FILTERVAL);
     4e0:	6060      	str	r0, [r4, #4]
	return module->fliter_old_val;
}
     4e2:	b003      	add	sp, #12
     4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->filter_large_change_counts = 0;
     4e6:	2300      	movs	r3, #0
     4e8:	70a3      	strb	r3, [r4, #2]
     4ea:	e7ed      	b.n	4c8 <artist_ultrasonic_get_value+0x164>
     4ec:	41004400 	.word	0x41004400
     4f0:	00000971 	.word	0x00000971
     4f4:	200007b4 	.word	0x200007b4
     4f8:	0000ff01 	.word	0x0000ff01
     4fc:	0000274d 	.word	0x0000274d
     500:	00006c8d 	.word	0x00006c8d
     504:	0000887d 	.word	0x0000887d
     508:	b020c49c 	.word	0xb020c49c
     50c:	3f916872 	.word	0x3f916872
     510:	00007bb5 	.word	0x00007bb5
     514:	00008921 	.word	0x00008921
     518:	00006a4d 	.word	0x00006a4d
     51c:	000062cd 	.word	0x000062cd
     520:	0000666d 	.word	0x0000666d
     524:	000062a5 	.word	0x000062a5
     528:	3ecccccc 	.word	0x3ecccccc
     52c:	3f19999a 	.word	0x3f19999a
     530:	00006349 	.word	0x00006349

00000534 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     534:	b5f0      	push	{r4, r5, r6, r7, lr}
     536:	46c6      	mov	lr, r8
     538:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     53a:	0080      	lsls	r0, r0, #2
     53c:	4b0e      	ldr	r3, [pc, #56]	; (578 <_tcc_interrupt_handler+0x44>)
     53e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     540:	683b      	ldr	r3, [r7, #0]
     542:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     548:	4013      	ands	r3, r2
     54a:	401e      	ands	r6, r3
     54c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     54e:	4b0b      	ldr	r3, [pc, #44]	; (57c <_tcc_interrupt_handler+0x48>)
     550:	4698      	mov	r8, r3
     552:	e002      	b.n	55a <_tcc_interrupt_handler+0x26>
     554:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     556:	2c30      	cmp	r4, #48	; 0x30
     558:	d00a      	beq.n	570 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     55a:	4643      	mov	r3, r8
     55c:	58e5      	ldr	r5, [r4, r3]
     55e:	4235      	tst	r5, r6
     560:	d0f8      	beq.n	554 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     562:	193b      	adds	r3, r7, r4
     564:	685b      	ldr	r3, [r3, #4]
     566:	0038      	movs	r0, r7
     568:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     56a:	683b      	ldr	r3, [r7, #0]
     56c:	62dd      	str	r5, [r3, #44]	; 0x2c
     56e:	e7f1      	b.n	554 <_tcc_interrupt_handler+0x20>
		}
	}
}
     570:	bc04      	pop	{r2}
     572:	4690      	mov	r8, r2
     574:	bdf0      	pop	{r4, r5, r6, r7, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	200014ec 	.word	0x200014ec
     57c:	00008ae4 	.word	0x00008ae4

00000580 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     580:	b510      	push	{r4, lr}
     582:	2000      	movs	r0, #0
     584:	4b01      	ldr	r3, [pc, #4]	; (58c <TCC0_Handler+0xc>)
     586:	4798      	blx	r3
     588:	bd10      	pop	{r4, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	00000535 	.word	0x00000535

00000590 <TCC1_Handler>:
     590:	b510      	push	{r4, lr}
     592:	2001      	movs	r0, #1
     594:	4b01      	ldr	r3, [pc, #4]	; (59c <TCC1_Handler+0xc>)
     596:	4798      	blx	r3
     598:	bd10      	pop	{r4, pc}
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	00000535 	.word	0x00000535

000005a0 <TCC2_Handler>:
     5a0:	b510      	push	{r4, lr}
     5a2:	2002      	movs	r0, #2
     5a4:	4b01      	ldr	r3, [pc, #4]	; (5ac <TCC2_Handler+0xc>)
     5a6:	4798      	blx	r3
     5a8:	bd10      	pop	{r4, pc}
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	00000535 	.word	0x00000535

000005b0 <usart_write_callback>:
	usart_read_buffer_job( usart_instance,
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	

}
void usart_write_callback(struct usart_module *const usart_module){}
     5b0:	4770      	bx	lr
	...

000005b4 <usart_read_callback>:
{
     5b4:	b510      	push	{r4, lr}
     5b6:	0004      	movs	r4, r0
	switch(rx_buffer[0]) {
     5b8:	4b0b      	ldr	r3, [pc, #44]	; (5e8 <usart_read_callback+0x34>)
     5ba:	781b      	ldrb	r3, [r3, #0]
     5bc:	b2db      	uxtb	r3, r3
     5be:	2b20      	cmp	r3, #32
     5c0:	d00b      	beq.n	5da <usart_read_callback+0x26>
     5c2:	2b77      	cmp	r3, #119	; 0x77
     5c4:	d103      	bne.n	5ce <usart_read_callback+0x1a>
		usart_write_buffer_job(usart_instance, "mw\0\0\0", MAX_RX_BUFFER_LENGTH);
     5c6:	2205      	movs	r2, #5
     5c8:	4908      	ldr	r1, [pc, #32]	; (5ec <usart_read_callback+0x38>)
     5ca:	4b09      	ldr	r3, [pc, #36]	; (5f0 <usart_read_callback+0x3c>)
     5cc:	4798      	blx	r3
	usart_read_buffer_job( usart_instance,
     5ce:	2205      	movs	r2, #5
     5d0:	4905      	ldr	r1, [pc, #20]	; (5e8 <usart_read_callback+0x34>)
     5d2:	0020      	movs	r0, r4
     5d4:	4b07      	ldr	r3, [pc, #28]	; (5f4 <usart_read_callback+0x40>)
     5d6:	4798      	blx	r3
}
     5d8:	bd10      	pop	{r4, pc}
		usart_write_buffer_job(usart_instance, "m \0\0\0", MAX_RX_BUFFER_LENGTH);
     5da:	2205      	movs	r2, #5
     5dc:	4903      	ldr	r1, [pc, #12]	; (5ec <usart_read_callback+0x38>)
     5de:	3108      	adds	r1, #8
     5e0:	4b03      	ldr	r3, [pc, #12]	; (5f0 <usart_read_callback+0x3c>)
     5e2:	4798      	blx	r3
		break;
     5e4:	e7f3      	b.n	5ce <usart_read_callback+0x1a>
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	200014a4 	.word	0x200014a4
     5ec:	00008b14 	.word	0x00008b14
     5f0:	00001991 	.word	0x00001991
     5f4:	000019b1 	.word	0x000019b1

000005f8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     5f8:	b570      	push	{r4, r5, r6, lr}
     5fa:	b082      	sub	sp, #8
     5fc:	0005      	movs	r5, r0
     5fe:	000e      	movs	r6, r1
	uint16_t temp = 0;
     600:	2200      	movs	r2, #0
     602:	466b      	mov	r3, sp
     604:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     606:	4c06      	ldr	r4, [pc, #24]	; (620 <usart_serial_getchar+0x28>)
     608:	466b      	mov	r3, sp
     60a:	1d99      	adds	r1, r3, #6
     60c:	0028      	movs	r0, r5
     60e:	47a0      	blx	r4
     610:	2800      	cmp	r0, #0
     612:	d1f9      	bne.n	608 <usart_serial_getchar+0x10>

	*c = temp;
     614:	466b      	mov	r3, sp
     616:	3306      	adds	r3, #6
     618:	881b      	ldrh	r3, [r3, #0]
     61a:	7033      	strb	r3, [r6, #0]
}
     61c:	b002      	add	sp, #8
     61e:	bd70      	pop	{r4, r5, r6, pc}
     620:	0000187d 	.word	0x0000187d

00000624 <usart_serial_putchar>:
{
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     628:	b28c      	uxth	r4, r1
     62a:	4e03      	ldr	r6, [pc, #12]	; (638 <usart_serial_putchar+0x14>)
     62c:	0021      	movs	r1, r4
     62e:	0028      	movs	r0, r5
     630:	47b0      	blx	r6
     632:	2800      	cmp	r0, #0
     634:	d1fa      	bne.n	62c <usart_serial_putchar+0x8>
}
     636:	bd70      	pop	{r4, r5, r6, pc}
     638:	00001851 	.word	0x00001851

0000063c <artist_ultrasonic_tc_configure>:
void artist_ultrasonic_tc_configure() {
     63c:	b510      	push	{r4, lr}
     63e:	b08e      	sub	sp, #56	; 0x38
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     640:	aa01      	add	r2, sp, #4
     642:	2300      	movs	r3, #0
     644:	2100      	movs	r1, #0
     646:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     648:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     64a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     64c:	2000      	movs	r0, #0
     64e:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     650:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     652:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     654:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     656:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     658:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     65a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     65c:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     65e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     660:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     662:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     664:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     666:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     668:	8593      	strh	r3, [r2, #44]	; 0x2c
	config.clock_source = GCLK_GENERATOR_3;
     66a:	3303      	adds	r3, #3
     66c:	7013      	strb	r3, [r2, #0]
	config.clock_prescaler = TC_CLOCK_PRESCALER_DIV8;
     66e:	23c0      	movs	r3, #192	; 0xc0
     670:	009b      	lsls	r3, r3, #2
     672:	8093      	strh	r3, [r2, #4]
	config.enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = true;
     674:	2301      	movs	r3, #1
     676:	72d3      	strb	r3, [r2, #11]
	tc_init(&(artist_front.tc_instance_ultrasonic), TC4, &config);
     678:	4c07      	ldr	r4, [pc, #28]	; (698 <artist_ultrasonic_tc_configure+0x5c>)
     67a:	4908      	ldr	r1, [pc, #32]	; (69c <artist_ultrasonic_tc_configure+0x60>)
     67c:	0020      	movs	r0, r4
     67e:	4b08      	ldr	r3, [pc, #32]	; (6a0 <artist_ultrasonic_tc_configure+0x64>)
     680:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     682:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     684:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     686:	b25b      	sxtb	r3, r3
     688:	2b00      	cmp	r3, #0
     68a:	dbfb      	blt.n	684 <artist_ultrasonic_tc_configure+0x48>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     68c:	8813      	ldrh	r3, [r2, #0]
     68e:	2102      	movs	r1, #2
     690:	430b      	orrs	r3, r1
     692:	8013      	strh	r3, [r2, #0]
}
     694:	b00e      	add	sp, #56	; 0x38
     696:	bd10      	pop	{r4, pc}
     698:	200007b4 	.word	0x200007b4
     69c:	42003000 	.word	0x42003000
     6a0:	00002511 	.word	0x00002511

000006a4 <configure_usart_callbacks>:


void configure_usart_callbacks(struct usart_module * usart_instance)
{
     6a4:	b570      	push	{r4, r5, r6, lr}
     6a6:	0004      	movs	r4, r0
	//! [setup_register_callbacks]
	usart_register_callback(usart_instance,
     6a8:	2200      	movs	r2, #0
     6aa:	4906      	ldr	r1, [pc, #24]	; (6c4 <configure_usart_callbacks+0x20>)
     6ac:	4d06      	ldr	r5, [pc, #24]	; (6c8 <configure_usart_callbacks+0x24>)
     6ae:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	
	usart_register_callback(usart_instance,
     6b0:	2201      	movs	r2, #1
     6b2:	4906      	ldr	r1, [pc, #24]	; (6cc <configure_usart_callbacks+0x28>)
     6b4:	0020      	movs	r0, r4
     6b6:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     6b8:	2231      	movs	r2, #49	; 0x31
     6ba:	5ca3      	ldrb	r3, [r4, r2]
     6bc:	2103      	movs	r1, #3
     6be:	430b      	orrs	r3, r1
     6c0:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     6c2:	bd70      	pop	{r4, r5, r6, pc}
     6c4:	000005b1 	.word	0x000005b1
     6c8:	00001979 	.word	0x00001979
     6cc:	000005b5 	.word	0x000005b5

000006d0 <artist_usart_configure>:

void artist_usart_configure(struct usart_module * usart_instance) {
     6d0:	b570      	push	{r4, r5, r6, lr}
     6d2:	b090      	sub	sp, #64	; 0x40
     6d4:	0004      	movs	r4, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     6d6:	2380      	movs	r3, #128	; 0x80
     6d8:	05db      	lsls	r3, r3, #23
     6da:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     6dc:	2300      	movs	r3, #0
     6de:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     6e0:	22ff      	movs	r2, #255	; 0xff
     6e2:	4669      	mov	r1, sp
     6e4:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     6e6:	2200      	movs	r2, #0
     6e8:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     6ea:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     6ec:	2196      	movs	r1, #150	; 0x96
     6ee:	0189      	lsls	r1, r1, #6
     6f0:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     6f2:	2101      	movs	r1, #1
     6f4:	2024      	movs	r0, #36	; 0x24
     6f6:	466d      	mov	r5, sp
     6f8:	5429      	strb	r1, [r5, r0]
	config->transmitter_enable = true;
     6fa:	3001      	adds	r0, #1
     6fc:	5429      	strb	r1, [r5, r0]
	config->clock_polarity_inverted = false;
     6fe:	3125      	adds	r1, #37	; 0x25
     700:	546b      	strb	r3, [r5, r1]
	config->use_external_clock = false;
     702:	3101      	adds	r1, #1
     704:	546b      	strb	r3, [r5, r1]
	config->ext_clock_freq   = 0;
     706:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     708:	3105      	adds	r1, #5
     70a:	546b      	strb	r3, [r5, r1]
	config->generator_source = GCLK_GENERATOR_0;
     70c:	3101      	adds	r1, #1
     70e:	546b      	strb	r3, [r5, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     710:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     712:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     714:	76eb      	strb	r3, [r5, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     716:	762a      	strb	r2, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     718:	772a      	strb	r2, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     71a:	766a      	strb	r2, [r5, #25]
	config->receive_pulse_length                    = 19;
     71c:	2313      	movs	r3, #19
     71e:	76ab      	strb	r3, [r5, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     720:	776a      	strb	r2, [r5, #29]
	struct usart_config config;
	usart_get_config_defaults(&config);
	config.baudrate = CONF_ARTIST_BAUDRATE;
	config.mux_setting	= EDBG_CDC_SERCOM_MUX_SETTING;
     722:	2380      	movs	r3, #128	; 0x80
     724:	035b      	lsls	r3, r3, #13
     726:	9303      	str	r3, [sp, #12]
	config.pinmux_pad0	= EDBG_CDC_SERCOM_PINMUX_PAD0;
     728:	4b1e      	ldr	r3, [pc, #120]	; (7a4 <artist_usart_configure+0xd4>)
     72a:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad1	= EDBG_CDC_SERCOM_PINMUX_PAD1;
     72c:	4b1e      	ldr	r3, [pc, #120]	; (7a8 <artist_usart_configure+0xd8>)
     72e:	930d      	str	r3, [sp, #52]	; 0x34
	config.pinmux_pad2	= EDBG_CDC_SERCOM_PINMUX_PAD2;
     730:	2301      	movs	r3, #1
     732:	425b      	negs	r3, r3
     734:	930e      	str	r3, [sp, #56]	; 0x38
	config.pinmux_pad3	= EDBG_CDC_SERCOM_PINMUX_PAD3;
     736:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(usart_instance, EDBG_CDC_MODULE, &config) != STATUS_OK);
     738:	4e1c      	ldr	r6, [pc, #112]	; (7ac <artist_usart_configure+0xdc>)
     73a:	4d1d      	ldr	r5, [pc, #116]	; (7b0 <artist_usart_configure+0xe0>)
     73c:	466a      	mov	r2, sp
     73e:	0031      	movs	r1, r6
     740:	0020      	movs	r0, r4
     742:	47a8      	blx	r5
     744:	2800      	cmp	r0, #0
     746:	d1f9      	bne.n	73c <artist_usart_configure+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     748:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     74a:	0028      	movs	r0, r5
     74c:	4b19      	ldr	r3, [pc, #100]	; (7b4 <artist_usart_configure+0xe4>)
     74e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     750:	231f      	movs	r3, #31
     752:	4018      	ands	r0, r3
     754:	3b1e      	subs	r3, #30
     756:	4083      	lsls	r3, r0
     758:	4a17      	ldr	r2, [pc, #92]	; (7b8 <artist_usart_configure+0xe8>)
     75a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     75c:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     75e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     760:	2b00      	cmp	r3, #0
     762:	d1fc      	bne.n	75e <artist_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     764:	682b      	ldr	r3, [r5, #0]
     766:	2202      	movs	r2, #2
     768:	4313      	orrs	r3, r2
     76a:	602b      	str	r3, [r5, #0]
	
	
	usart_enable(usart_instance);
	configure_usart_callbacks(usart_instance);
     76c:	0020      	movs	r0, r4
     76e:	4b13      	ldr	r3, [pc, #76]	; (7bc <artist_usart_configure+0xec>)
     770:	4798      	blx	r3
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     772:	4b13      	ldr	r3, [pc, #76]	; (7c0 <artist_usart_configure+0xf0>)
     774:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     776:	4a13      	ldr	r2, [pc, #76]	; (7c4 <artist_usart_configure+0xf4>)
     778:	4b13      	ldr	r3, [pc, #76]	; (7c8 <artist_usart_configure+0xf8>)
     77a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     77c:	4a13      	ldr	r2, [pc, #76]	; (7cc <artist_usart_configure+0xfc>)
     77e:	4b14      	ldr	r3, [pc, #80]	; (7d0 <artist_usart_configure+0x100>)
     780:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     782:	466a      	mov	r2, sp
     784:	4909      	ldr	r1, [pc, #36]	; (7ac <artist_usart_configure+0xdc>)
     786:	0020      	movs	r0, r4
     788:	4b09      	ldr	r3, [pc, #36]	; (7b0 <artist_usart_configure+0xe0>)
     78a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     78c:	4d11      	ldr	r5, [pc, #68]	; (7d4 <artist_usart_configure+0x104>)
     78e:	682b      	ldr	r3, [r5, #0]
     790:	6898      	ldr	r0, [r3, #8]
     792:	2100      	movs	r1, #0
     794:	4c10      	ldr	r4, [pc, #64]	; (7d8 <artist_usart_configure+0x108>)
     796:	47a0      	blx	r4
	setbuf(stdin, NULL);
     798:	682b      	ldr	r3, [r5, #0]
     79a:	6858      	ldr	r0, [r3, #4]
     79c:	2100      	movs	r1, #0
     79e:	47a0      	blx	r4
	
	stdio_serial_init(usart_instance, EDBG_CDC_MODULE, &config);
}
     7a0:	b010      	add	sp, #64	; 0x40
     7a2:	bd70      	pop	{r4, r5, r6, pc}
     7a4:	00040003 	.word	0x00040003
     7a8:	00050003 	.word	0x00050003
     7ac:	42000800 	.word	0x42000800
     7b0:	00001511 	.word	0x00001511
     7b4:	000010c9 	.word	0x000010c9
     7b8:	e000e100 	.word	0xe000e100
     7bc:	000006a5 	.word	0x000006a5
     7c0:	20001568 	.word	0x20001568
     7c4:	00000625 	.word	0x00000625
     7c8:	20001564 	.word	0x20001564
     7cc:	000005f9 	.word	0x000005f9
     7d0:	20001560 	.word	0x20001560
     7d4:	2000000c 	.word	0x2000000c
     7d8:	00003f55 	.word	0x00003f55

000007dc <artist_ultrasonic_update>:
	tcc_init(&(artist->tcc_instance), TCC0, &config);
	tcc_enable(&(artist->tcc_instance));
	*/
}

void artist_ultrasonic_update() {
     7dc:	b570      	push	{r4, r5, r6, lr}
	artist_front.center_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_center));
     7de:	4e09      	ldr	r6, [pc, #36]	; (804 <artist_ultrasonic_update+0x28>)
     7e0:	0030      	movs	r0, r6
     7e2:	4d09      	ldr	r5, [pc, #36]	; (808 <artist_ultrasonic_update+0x2c>)
     7e4:	47a8      	blx	r5
     7e6:	0034      	movs	r4, r6
     7e8:	3cb4      	subs	r4, #180	; 0xb4
     7ea:	61b0      	str	r0, [r6, #24]
	artist_front.right_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_right));
     7ec:	0020      	movs	r0, r4
     7ee:	30c4      	adds	r0, #196	; 0xc4
     7f0:	47a8      	blx	r5
     7f2:	23d4      	movs	r3, #212	; 0xd4
     7f4:	50e0      	str	r0, [r4, r3]
	artist_front.left_distance = artist_ultrasonic_get_value(&(artist_front.us_instance_left));
     7f6:	0020      	movs	r0, r4
     7f8:	30bc      	adds	r0, #188	; 0xbc
     7fa:	47a8      	blx	r5
     7fc:	23d0      	movs	r3, #208	; 0xd0
     7fe:	50e0      	str	r0, [r4, r3]
}
     800:	bd70      	pop	{r4, r5, r6, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	20000868 	.word	0x20000868
     808:	00000365 	.word	0x00000365

0000080c <artist_scheduler_tc_configure>:

void artist_scheduler_tc_configure() {
     80c:	b510      	push	{r4, lr}
     80e:	b08e      	sub	sp, #56	; 0x38
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     810:	aa01      	add	r2, sp, #4
     812:	2300      	movs	r3, #0
     814:	2100      	movs	r1, #0
     816:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     818:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     81a:	2000      	movs	r0, #0
     81c:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     81e:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     820:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     822:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     824:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     826:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     828:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     82a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     82c:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     82e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     830:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     832:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     834:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     836:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     838:	8593      	strh	r3, [r2, #44]	; 0x2c
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     83a:	3304      	adds	r3, #4
     83c:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_3;
     83e:	3b01      	subs	r3, #1
     840:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //
     842:	23e0      	movs	r3, #224	; 0xe0
     844:	00db      	lsls	r3, r3, #3
     846:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 50;
     848:	2132      	movs	r1, #50	; 0x32
     84a:	2329      	movs	r3, #41	; 0x29
     84c:	54d1      	strb	r1, [r2, r3]
	//config_tc.counter_8_bit.compare_capture_channel[0] = 5;
	//config_tc.counter_8_bit.compare_capture_channel[1] = 54;
	//! [setup_change_config]

	//! [20 Hz setup_set_config]
	tc_init(&(artist_front.tc_instance_timer), TC5, &config_tc);
     84e:	4c08      	ldr	r4, [pc, #32]	; (870 <artist_scheduler_tc_configure+0x64>)
     850:	4908      	ldr	r1, [pc, #32]	; (874 <artist_scheduler_tc_configure+0x68>)
     852:	0020      	movs	r0, r4
     854:	4b08      	ldr	r3, [pc, #32]	; (878 <artist_scheduler_tc_configure+0x6c>)
     856:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     858:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     85a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     85c:	b25b      	sxtb	r3, r3
     85e:	2b00      	cmp	r3, #0
     860:	dbfb      	blt.n	85a <artist_scheduler_tc_configure+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     862:	8813      	ldrh	r3, [r2, #0]
     864:	2102      	movs	r1, #2
     866:	430b      	orrs	r3, r1
     868:	8013      	strh	r3, [r2, #0]
	//! [setup_set_config]

	//! [setup_enable]
	tc_enable(&(artist_front.tc_instance_timer));
	//! [setup_enable]
}
     86a:	b00e      	add	sp, #56	; 0x38
     86c:	bd10      	pop	{r4, pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	200007d0 	.word	0x200007d0
     874:	42003400 	.word	0x42003400
     878:	00002511 	.word	0x00002511

0000087c <do_state_maze>:


enum artist_state do_state_maze() {
     87c:	b510      	push	{r4, lr}
	// [ultra sonic]
	static uint16_t ultrasonic_counter		= 0;
	ultrasonic_counter ++;
     87e:	4a0d      	ldr	r2, [pc, #52]	; (8b4 <do_state_maze+0x38>)
     880:	8813      	ldrh	r3, [r2, #0]
     882:	3301      	adds	r3, #1
     884:	b29b      	uxth	r3, r3
     886:	8013      	strh	r3, [r2, #0]
	if (ultrasonic_counter > 5) {
     888:	2b05      	cmp	r3, #5
     88a:	d807      	bhi.n	89c <do_state_maze+0x20>
	}
	
	
	
	static uint16_t maze_counter = 0;
	maze_counter ++;
     88c:	4a0a      	ldr	r2, [pc, #40]	; (8b8 <do_state_maze+0x3c>)
     88e:	8813      	ldrh	r3, [r2, #0]
     890:	3301      	adds	r3, #1
     892:	b29b      	uxth	r3, r3
     894:	8013      	strh	r3, [r2, #0]
	if (maze_counter > 10) {
     896:	2b0a      	cmp	r3, #10
     898:	d806      	bhi.n	8a8 <do_state_maze+0x2c>
	
	#endif
	

	// ! [ultra sonic]
}
     89a:	bd10      	pop	{r4, pc}
		artist_ultrasonic_update();
     89c:	4b07      	ldr	r3, [pc, #28]	; (8bc <do_state_maze+0x40>)
     89e:	4798      	blx	r3
		ultrasonic_counter = 0;
     8a0:	2200      	movs	r2, #0
     8a2:	4b04      	ldr	r3, [pc, #16]	; (8b4 <do_state_maze+0x38>)
     8a4:	801a      	strh	r2, [r3, #0]
     8a6:	e7f1      	b.n	88c <do_state_maze+0x10>
		artist_do_maze();
     8a8:	4b05      	ldr	r3, [pc, #20]	; (8c0 <do_state_maze+0x44>)
     8aa:	4798      	blx	r3
		maze_counter = 0;
     8ac:	2200      	movs	r2, #0
     8ae:	4b02      	ldr	r3, [pc, #8]	; (8b8 <do_state_maze+0x3c>)
     8b0:	801a      	strh	r2, [r3, #0]
     8b2:	e7f2      	b.n	89a <do_state_maze+0x1e>
     8b4:	200001fa 	.word	0x200001fa
     8b8:	200001f8 	.word	0x200001f8
     8bc:	000007dd 	.word	0x000007dd
     8c0:	00000125 	.word	0x00000125

000008c4 <callbacks>:
enum artist_state do_state_tracing_line() {}
enum artist_state do_state_wait() {}

void callbacks (void) {
     8c4:	b510      	push	{r4, lr}
	
	switch (artist_front.state) {
     8c6:	23d8      	movs	r3, #216	; 0xd8
     8c8:	4a03      	ldr	r2, [pc, #12]	; (8d8 <callbacks+0x14>)
     8ca:	5cd3      	ldrb	r3, [r2, r3]
     8cc:	2b01      	cmp	r3, #1
     8ce:	d000      	beq.n	8d2 <callbacks+0xe>
		break;
		case TRACING_LINE:
		do_state_tracing_line();
		break;
	}
}
     8d0:	bd10      	pop	{r4, pc}
		do_state_maze();
     8d2:	4b02      	ldr	r3, [pc, #8]	; (8dc <callbacks+0x18>)
     8d4:	4798      	blx	r3
}
     8d6:	e7fb      	b.n	8d0 <callbacks+0xc>
     8d8:	200007b4 	.word	0x200007b4
     8dc:	0000087d 	.word	0x0000087d

000008e0 <artist_configure_tc_callbacks>:
void artist_configure_tc_callbacks(void)
{
     8e0:	b510      	push	{r4, lr}
	tc_register_callback(&(artist_front.tc_instance_timer), callbacks ,
     8e2:	4c0d      	ldr	r4, [pc, #52]	; (918 <artist_configure_tc_callbacks+0x38>)
     8e4:	2200      	movs	r2, #0
     8e6:	490d      	ldr	r1, [pc, #52]	; (91c <artist_configure_tc_callbacks+0x3c>)
     8e8:	0020      	movs	r0, r4
     8ea:	4b0d      	ldr	r3, [pc, #52]	; (920 <artist_configure_tc_callbacks+0x40>)
     8ec:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     8ee:	6820      	ldr	r0, [r4, #0]
     8f0:	3c1c      	subs	r4, #28
     8f2:	4b0c      	ldr	r3, [pc, #48]	; (924 <artist_configure_tc_callbacks+0x44>)
     8f4:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     8f6:	4b0c      	ldr	r3, [pc, #48]	; (928 <artist_configure_tc_callbacks+0x48>)
     8f8:	5c1a      	ldrb	r2, [r3, r0]
     8fa:	231f      	movs	r3, #31
     8fc:	4013      	ands	r3, r2
     8fe:	2201      	movs	r2, #1
     900:	0011      	movs	r1, r2
     902:	4099      	lsls	r1, r3
     904:	4b09      	ldr	r3, [pc, #36]	; (92c <artist_configure_tc_callbacks+0x4c>)
     906:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     908:	2135      	movs	r1, #53	; 0x35
     90a:	5c63      	ldrb	r3, [r4, r1]
     90c:	2001      	movs	r0, #1
     90e:	4303      	orrs	r3, r0
     910:	5463      	strb	r3, [r4, r1]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     912:	69e3      	ldr	r3, [r4, #28]
     914:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_OVERFLOW);
	
	tc_enable_callback(&(artist_front.tc_instance_timer), TC_CALLBACK_OVERFLOW);
     916:	bd10      	pop	{r4, pc}
     918:	200007d0 	.word	0x200007d0
     91c:	000008c5 	.word	0x000008c5
     920:	00002411 	.word	0x00002411
     924:	000024d9 	.word	0x000024d9
     928:	00008b24 	.word	0x00008b24
     92c:	e000e100 	.word	0xe000e100

00000930 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     930:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     932:	2000      	movs	r0, #0
     934:	4b08      	ldr	r3, [pc, #32]	; (958 <delay_init+0x28>)
     936:	4798      	blx	r3
     938:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     93a:	4c08      	ldr	r4, [pc, #32]	; (95c <delay_init+0x2c>)
     93c:	21fa      	movs	r1, #250	; 0xfa
     93e:	0089      	lsls	r1, r1, #2
     940:	47a0      	blx	r4
     942:	4b07      	ldr	r3, [pc, #28]	; (960 <delay_init+0x30>)
     944:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     946:	4907      	ldr	r1, [pc, #28]	; (964 <delay_init+0x34>)
     948:	0028      	movs	r0, r5
     94a:	47a0      	blx	r4
     94c:	4b06      	ldr	r3, [pc, #24]	; (968 <delay_init+0x38>)
     94e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     950:	2205      	movs	r2, #5
     952:	4b06      	ldr	r3, [pc, #24]	; (96c <delay_init+0x3c>)
     954:	601a      	str	r2, [r3, #0]
}
     956:	bd70      	pop	{r4, r5, r6, pc}
     958:	000021a1 	.word	0x000021a1
     95c:	00005f19 	.word	0x00005f19
     960:	20000000 	.word	0x20000000
     964:	000f4240 	.word	0x000f4240
     968:	20000004 	.word	0x20000004
     96c:	e000e010 	.word	0xe000e010

00000970 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     970:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     972:	4b08      	ldr	r3, [pc, #32]	; (994 <delay_cycles_us+0x24>)
     974:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     976:	4a08      	ldr	r2, [pc, #32]	; (998 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     978:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     97a:	2180      	movs	r1, #128	; 0x80
     97c:	0249      	lsls	r1, r1, #9
	while (n--) {
     97e:	3801      	subs	r0, #1
     980:	d307      	bcc.n	992 <delay_cycles_us+0x22>
	if (n > 0) {
     982:	2c00      	cmp	r4, #0
     984:	d0fb      	beq.n	97e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     986:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     988:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     98a:	6813      	ldr	r3, [r2, #0]
     98c:	420b      	tst	r3, r1
     98e:	d0fc      	beq.n	98a <delay_cycles_us+0x1a>
     990:	e7f5      	b.n	97e <delay_cycles_us+0xe>
	}
}
     992:	bd30      	pop	{r4, r5, pc}
     994:	20000004 	.word	0x20000004
     998:	e000e010 	.word	0xe000e010

0000099c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     99c:	4b0c      	ldr	r3, [pc, #48]	; (9d0 <cpu_irq_enter_critical+0x34>)
     99e:	681b      	ldr	r3, [r3, #0]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d106      	bne.n	9b2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9a4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     9a8:	2b00      	cmp	r3, #0
     9aa:	d007      	beq.n	9bc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     9ac:	2200      	movs	r2, #0
     9ae:	4b09      	ldr	r3, [pc, #36]	; (9d4 <cpu_irq_enter_critical+0x38>)
     9b0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     9b2:	4a07      	ldr	r2, [pc, #28]	; (9d0 <cpu_irq_enter_critical+0x34>)
     9b4:	6813      	ldr	r3, [r2, #0]
     9b6:	3301      	adds	r3, #1
     9b8:	6013      	str	r3, [r2, #0]
}
     9ba:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     9bc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     9be:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     9c2:	2200      	movs	r2, #0
     9c4:	4b04      	ldr	r3, [pc, #16]	; (9d8 <cpu_irq_enter_critical+0x3c>)
     9c6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     9c8:	3201      	adds	r2, #1
     9ca:	4b02      	ldr	r3, [pc, #8]	; (9d4 <cpu_irq_enter_critical+0x38>)
     9cc:	701a      	strb	r2, [r3, #0]
     9ce:	e7f0      	b.n	9b2 <cpu_irq_enter_critical+0x16>
     9d0:	200001fc 	.word	0x200001fc
     9d4:	20000200 	.word	0x20000200
     9d8:	20000008 	.word	0x20000008

000009dc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     9dc:	4b08      	ldr	r3, [pc, #32]	; (a00 <cpu_irq_leave_critical+0x24>)
     9de:	681a      	ldr	r2, [r3, #0]
     9e0:	3a01      	subs	r2, #1
     9e2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     9e4:	681b      	ldr	r3, [r3, #0]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d109      	bne.n	9fe <cpu_irq_leave_critical+0x22>
     9ea:	4b06      	ldr	r3, [pc, #24]	; (a04 <cpu_irq_leave_critical+0x28>)
     9ec:	781b      	ldrb	r3, [r3, #0]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d005      	beq.n	9fe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     9f2:	2201      	movs	r2, #1
     9f4:	4b04      	ldr	r3, [pc, #16]	; (a08 <cpu_irq_leave_critical+0x2c>)
     9f6:	701a      	strb	r2, [r3, #0]
     9f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9fc:	b662      	cpsie	i
	}
}
     9fe:	4770      	bx	lr
     a00:	200001fc 	.word	0x200001fc
     a04:	20000200 	.word	0x20000200
     a08:	20000008 	.word	0x20000008

00000a0c <system_board_init>:




void system_board_init(void)
{
     a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0e:	46c6      	mov	lr, r8
     a10:	b500      	push	{lr}
     a12:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     a14:	ac01      	add	r4, sp, #4
     a16:	2601      	movs	r6, #1
     a18:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     a1a:	2700      	movs	r7, #0
     a1c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a1e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     a20:	0021      	movs	r1, r4
     a22:	2013      	movs	r0, #19
     a24:	4d27      	ldr	r5, [pc, #156]	; (ac4 <system_board_init+0xb8>)
     a26:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a28:	4b27      	ldr	r3, [pc, #156]	; (ac8 <system_board_init+0xbc>)
     a2a:	4698      	mov	r8, r3
     a2c:	2380      	movs	r3, #128	; 0x80
     a2e:	031b      	lsls	r3, r3, #12
     a30:	4642      	mov	r2, r8
     a32:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     a34:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     a36:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     a38:	0021      	movs	r1, r4
     a3a:	201c      	movs	r0, #28
     a3c:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
     a3e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     a40:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a42:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     a44:	0021      	movs	r1, r4
     a46:	2052      	movs	r0, #82	; 0x52
     a48:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     a4a:	0021      	movs	r1, r4
     a4c:	203e      	movs	r0, #62	; 0x3e
     a4e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     a50:	0021      	movs	r1, r4
     a52:	203f      	movs	r0, #63	; 0x3f
     a54:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     a56:	0021      	movs	r1, r4
     a58:	202f      	movs	r0, #47	; 0x2f
     a5a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     a5c:	0021      	movs	r1, r4
     a5e:	2014      	movs	r0, #20
     a60:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     a62:	2280      	movs	r2, #128	; 0x80
     a64:	02d2      	lsls	r2, r2, #11
     a66:	4b19      	ldr	r3, [pc, #100]	; (acc <system_board_init+0xc0>)
     a68:	619a      	str	r2, [r3, #24]
     a6a:	4b19      	ldr	r3, [pc, #100]	; (ad0 <system_board_init+0xc4>)
     a6c:	2280      	movs	r2, #128	; 0x80
     a6e:	05d2      	lsls	r2, r2, #23
     a70:	619a      	str	r2, [r3, #24]
     a72:	2280      	movs	r2, #128	; 0x80
     a74:	0612      	lsls	r2, r2, #24
     a76:	619a      	str	r2, [r3, #24]
     a78:	2280      	movs	r2, #128	; 0x80
     a7a:	0212      	lsls	r2, r2, #8
     a7c:	619a      	str	r2, [r3, #24]
     a7e:	2380      	movs	r3, #128	; 0x80
     a80:	035b      	lsls	r3, r3, #13
     a82:	4642      	mov	r2, r8
     a84:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     a86:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     a88:	0021      	movs	r1, r4
     a8a:	2053      	movs	r0, #83	; 0x53
     a8c:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     a8e:	4a11      	ldr	r2, [pc, #68]	; (ad4 <system_board_init+0xc8>)
     a90:	6a11      	ldr	r1, [r2, #32]
     a92:	2380      	movs	r3, #128	; 0x80
     a94:	039b      	lsls	r3, r3, #14
     a96:	430b      	orrs	r3, r1
     a98:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     a9a:	2204      	movs	r2, #4
     a9c:	4b0e      	ldr	r3, [pc, #56]	; (ad8 <system_board_init+0xcc>)
     a9e:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     aa0:	466b      	mov	r3, sp
     aa2:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     aa4:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     aa6:	2305      	movs	r3, #5
     aa8:	466a      	mov	r2, sp
     aaa:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     aac:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     aae:	4669      	mov	r1, sp
     ab0:	2009      	movs	r0, #9
     ab2:	4c0a      	ldr	r4, [pc, #40]	; (adc <system_board_init+0xd0>)
     ab4:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     ab6:	4669      	mov	r1, sp
     ab8:	200c      	movs	r0, #12
     aba:	47a0      	blx	r4
#endif

}
     abc:	b002      	add	sp, #8
     abe:	bc04      	pop	{r2}
     ac0:	4690      	mov	r8, r2
     ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ac4:	00000c71 	.word	0x00000c71
     ac8:	41004400 	.word	0x41004400
     acc:	41004500 	.word	0x41004500
     ad0:	41004480 	.word	0x41004480
     ad4:	40000400 	.word	0x40000400
     ad8:	42005400 	.word	0x42005400
     adc:	000023b1 	.word	0x000023b1

00000ae0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ae0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     ae2:	2a00      	cmp	r2, #0
     ae4:	d001      	beq.n	aea <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     ae6:	0018      	movs	r0, r3
     ae8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     aea:	008b      	lsls	r3, r1, #2
     aec:	4a06      	ldr	r2, [pc, #24]	; (b08 <extint_register_callback+0x28>)
     aee:	589b      	ldr	r3, [r3, r2]
     af0:	2b00      	cmp	r3, #0
     af2:	d003      	beq.n	afc <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     af4:	4283      	cmp	r3, r0
     af6:	d005      	beq.n	b04 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     af8:	231d      	movs	r3, #29
     afa:	e7f4      	b.n	ae6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     afc:	0089      	lsls	r1, r1, #2
     afe:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     b00:	2300      	movs	r3, #0
     b02:	e7f0      	b.n	ae6 <extint_register_callback+0x6>
		return STATUS_OK;
     b04:	2300      	movs	r3, #0
     b06:	e7ee      	b.n	ae6 <extint_register_callback+0x6>
     b08:	200014fc 	.word	0x200014fc

00000b0c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     b0c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b0e:	2200      	movs	r2, #0
     b10:	4b10      	ldr	r3, [pc, #64]	; (b54 <EIC_Handler+0x48>)
     b12:	701a      	strb	r2, [r3, #0]
     b14:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     b16:	4910      	ldr	r1, [pc, #64]	; (b58 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b18:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b1a:	4e10      	ldr	r6, [pc, #64]	; (b5c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b1c:	4c0d      	ldr	r4, [pc, #52]	; (b54 <EIC_Handler+0x48>)
     b1e:	e00a      	b.n	b36 <EIC_Handler+0x2a>
		return eics[eic_index];
     b20:	490d      	ldr	r1, [pc, #52]	; (b58 <EIC_Handler+0x4c>)
     b22:	e008      	b.n	b36 <EIC_Handler+0x2a>
     b24:	7823      	ldrb	r3, [r4, #0]
     b26:	3301      	adds	r3, #1
     b28:	b2db      	uxtb	r3, r3
     b2a:	7023      	strb	r3, [r4, #0]
     b2c:	2b0f      	cmp	r3, #15
     b2e:	d810      	bhi.n	b52 <EIC_Handler+0x46>
		return NULL;
     b30:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     b32:	2b1f      	cmp	r3, #31
     b34:	d9f4      	bls.n	b20 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     b36:	0028      	movs	r0, r5
     b38:	4018      	ands	r0, r3
     b3a:	2201      	movs	r2, #1
     b3c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     b3e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     b40:	4210      	tst	r0, r2
     b42:	d0ef      	beq.n	b24 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     b44:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b46:	009b      	lsls	r3, r3, #2
     b48:	599b      	ldr	r3, [r3, r6]
     b4a:	2b00      	cmp	r3, #0
     b4c:	d0ea      	beq.n	b24 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     b4e:	4798      	blx	r3
     b50:	e7e8      	b.n	b24 <EIC_Handler+0x18>
			}
		}
	}
}
     b52:	bd70      	pop	{r4, r5, r6, pc}
     b54:	200014f8 	.word	0x200014f8
     b58:	40001800 	.word	0x40001800
     b5c:	200014fc 	.word	0x200014fc

00000b60 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     b60:	4a04      	ldr	r2, [pc, #16]	; (b74 <_extint_enable+0x14>)
     b62:	7813      	ldrb	r3, [r2, #0]
     b64:	2102      	movs	r1, #2
     b66:	430b      	orrs	r3, r1
     b68:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     b6a:	7853      	ldrb	r3, [r2, #1]
     b6c:	b25b      	sxtb	r3, r3
     b6e:	2b00      	cmp	r3, #0
     b70:	dbfb      	blt.n	b6a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     b72:	4770      	bx	lr
     b74:	40001800 	.word	0x40001800

00000b78 <_system_extint_init>:
{
     b78:	b500      	push	{lr}
     b7a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     b7c:	4a12      	ldr	r2, [pc, #72]	; (bc8 <_system_extint_init+0x50>)
     b7e:	6993      	ldr	r3, [r2, #24]
     b80:	2140      	movs	r1, #64	; 0x40
     b82:	430b      	orrs	r3, r1
     b84:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     b86:	a901      	add	r1, sp, #4
     b88:	2300      	movs	r3, #0
     b8a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     b8c:	2005      	movs	r0, #5
     b8e:	4b0f      	ldr	r3, [pc, #60]	; (bcc <_system_extint_init+0x54>)
     b90:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     b92:	2005      	movs	r0, #5
     b94:	4b0e      	ldr	r3, [pc, #56]	; (bd0 <_system_extint_init+0x58>)
     b96:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     b98:	4a0e      	ldr	r2, [pc, #56]	; (bd4 <_system_extint_init+0x5c>)
     b9a:	7813      	ldrb	r3, [r2, #0]
     b9c:	2101      	movs	r1, #1
     b9e:	430b      	orrs	r3, r1
     ba0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     ba2:	7853      	ldrb	r3, [r2, #1]
     ba4:	b25b      	sxtb	r3, r3
     ba6:	2b00      	cmp	r3, #0
     ba8:	dbfb      	blt.n	ba2 <_system_extint_init+0x2a>
     baa:	4b0b      	ldr	r3, [pc, #44]	; (bd8 <_system_extint_init+0x60>)
     bac:	0019      	movs	r1, r3
     bae:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     bb0:	2200      	movs	r2, #0
     bb2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     bb4:	4299      	cmp	r1, r3
     bb6:	d1fc      	bne.n	bb2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     bb8:	2210      	movs	r2, #16
     bba:	4b08      	ldr	r3, [pc, #32]	; (bdc <_system_extint_init+0x64>)
     bbc:	601a      	str	r2, [r3, #0]
	_extint_enable();
     bbe:	4b08      	ldr	r3, [pc, #32]	; (be0 <_system_extint_init+0x68>)
     bc0:	4798      	blx	r3
}
     bc2:	b003      	add	sp, #12
     bc4:	bd00      	pop	{pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	40000400 	.word	0x40000400
     bcc:	000022b9 	.word	0x000022b9
     bd0:	0000222d 	.word	0x0000222d
     bd4:	40001800 	.word	0x40001800
     bd8:	200014fc 	.word	0x200014fc
     bdc:	e000e100 	.word	0xe000e100
     be0:	00000b61 	.word	0x00000b61

00000be4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     be4:	2300      	movs	r3, #0
     be6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     be8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     bea:	2201      	movs	r2, #1
     bec:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     bee:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     bf0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     bf2:	3302      	adds	r3, #2
     bf4:	72c3      	strb	r3, [r0, #11]
}
     bf6:	4770      	bx	lr

00000bf8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfa:	b083      	sub	sp, #12
     bfc:	0005      	movs	r5, r0
     bfe:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c00:	a901      	add	r1, sp, #4
     c02:	2300      	movs	r3, #0
     c04:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c06:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     c08:	7923      	ldrb	r3, [r4, #4]
     c0a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     c0c:	7a23      	ldrb	r3, [r4, #8]
     c0e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     c10:	7820      	ldrb	r0, [r4, #0]
     c12:	4b15      	ldr	r3, [pc, #84]	; (c68 <extint_chan_set_config+0x70>)
     c14:	4798      	blx	r3
		return NULL;
     c16:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     c18:	2d1f      	cmp	r5, #31
     c1a:	d800      	bhi.n	c1e <extint_chan_set_config+0x26>
		return eics[eic_index];
     c1c:	4813      	ldr	r0, [pc, #76]	; (c6c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     c1e:	2207      	movs	r2, #7
     c20:	402a      	ands	r2, r5
     c22:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     c24:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     c26:	7aa3      	ldrb	r3, [r4, #10]
     c28:	2b00      	cmp	r3, #0
     c2a:	d001      	beq.n	c30 <extint_chan_set_config+0x38>
     c2c:	2308      	movs	r3, #8
     c2e:	431f      	orrs	r7, r3
     c30:	08eb      	lsrs	r3, r5, #3
     c32:	009b      	lsls	r3, r3, #2
     c34:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     c36:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     c38:	260f      	movs	r6, #15
     c3a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     c3c:	43b1      	bics	r1, r6
			(new_config << config_pos);
     c3e:	4097      	lsls	r7, r2
     c40:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     c42:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     c44:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     c46:	7a63      	ldrb	r3, [r4, #9]
     c48:	2b00      	cmp	r3, #0
     c4a:	d106      	bne.n	c5a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     c4c:	6943      	ldr	r3, [r0, #20]
     c4e:	2201      	movs	r2, #1
     c50:	40aa      	lsls	r2, r5
     c52:	4393      	bics	r3, r2
     c54:	6143      	str	r3, [r0, #20]
	}
}
     c56:	b003      	add	sp, #12
     c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     c5a:	6942      	ldr	r2, [r0, #20]
     c5c:	2301      	movs	r3, #1
     c5e:	40ab      	lsls	r3, r5
     c60:	4313      	orrs	r3, r2
     c62:	6143      	str	r3, [r0, #20]
     c64:	e7f7      	b.n	c56 <extint_chan_set_config+0x5e>
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	000023b1 	.word	0x000023b1
     c6c:	40001800 	.word	0x40001800

00000c70 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     c70:	b500      	push	{lr}
     c72:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c74:	ab01      	add	r3, sp, #4
     c76:	2280      	movs	r2, #128	; 0x80
     c78:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     c7a:	780a      	ldrb	r2, [r1, #0]
     c7c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     c7e:	784a      	ldrb	r2, [r1, #1]
     c80:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     c82:	788a      	ldrb	r2, [r1, #2]
     c84:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     c86:	0019      	movs	r1, r3
     c88:	4b01      	ldr	r3, [pc, #4]	; (c90 <port_pin_set_config+0x20>)
     c8a:	4798      	blx	r3
}
     c8c:	b003      	add	sp, #12
     c8e:	bd00      	pop	{pc}
     c90:	000023b1 	.word	0x000023b1

00000c94 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c94:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     c96:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c98:	2340      	movs	r3, #64	; 0x40
     c9a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     c9c:	4281      	cmp	r1, r0
     c9e:	d202      	bcs.n	ca6 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     ca0:	0018      	movs	r0, r3
     ca2:	bd10      	pop	{r4, pc}
		baud_calculated++;
     ca4:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     ca6:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     ca8:	1c63      	adds	r3, r4, #1
     caa:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     cac:	4288      	cmp	r0, r1
     cae:	d9f9      	bls.n	ca4 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cb0:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     cb2:	2cff      	cmp	r4, #255	; 0xff
     cb4:	d8f4      	bhi.n	ca0 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     cb6:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     cb8:	2300      	movs	r3, #0
     cba:	e7f1      	b.n	ca0 <_sercom_get_sync_baud_val+0xc>

00000cbc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cbe:	46de      	mov	lr, fp
     cc0:	4657      	mov	r7, sl
     cc2:	464e      	mov	r6, r9
     cc4:	4645      	mov	r5, r8
     cc6:	b5e0      	push	{r5, r6, r7, lr}
     cc8:	b089      	sub	sp, #36	; 0x24
     cca:	000c      	movs	r4, r1
     ccc:	9205      	str	r2, [sp, #20]
     cce:	aa12      	add	r2, sp, #72	; 0x48
     cd0:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     cd2:	0005      	movs	r5, r0
     cd4:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cd6:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     cd8:	42a5      	cmp	r5, r4
     cda:	d907      	bls.n	cec <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     cdc:	0010      	movs	r0, r2
     cde:	b009      	add	sp, #36	; 0x24
     ce0:	bc3c      	pop	{r2, r3, r4, r5}
     ce2:	4690      	mov	r8, r2
     ce4:	4699      	mov	r9, r3
     ce6:	46a2      	mov	sl, r4
     ce8:	46ab      	mov	fp, r5
     cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     cec:	2b00      	cmp	r3, #0
     cee:	d155      	bne.n	d9c <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     cf0:	0002      	movs	r2, r0
     cf2:	0008      	movs	r0, r1
     cf4:	2100      	movs	r1, #0
     cf6:	4d63      	ldr	r5, [pc, #396]	; (e84 <_sercom_get_async_baud_val+0x1c8>)
     cf8:	47a8      	blx	r5
     cfa:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     cfc:	0026      	movs	r6, r4
     cfe:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     d00:	2300      	movs	r3, #0
     d02:	2400      	movs	r4, #0
     d04:	9300      	str	r3, [sp, #0]
     d06:	9401      	str	r4, [sp, #4]
     d08:	2200      	movs	r2, #0
     d0a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d0c:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     d0e:	2120      	movs	r1, #32
     d10:	468c      	mov	ip, r1
     d12:	391f      	subs	r1, #31
     d14:	9602      	str	r6, [sp, #8]
     d16:	9703      	str	r7, [sp, #12]
     d18:	e014      	b.n	d44 <_sercom_get_async_baud_val+0x88>
     d1a:	4664      	mov	r4, ip
     d1c:	1a24      	subs	r4, r4, r0
     d1e:	000d      	movs	r5, r1
     d20:	40e5      	lsrs	r5, r4
     d22:	46a8      	mov	r8, r5
     d24:	e015      	b.n	d52 <_sercom_get_async_baud_val+0x96>
			r = r - d;
     d26:	9c02      	ldr	r4, [sp, #8]
     d28:	9d03      	ldr	r5, [sp, #12]
     d2a:	1b12      	subs	r2, r2, r4
     d2c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     d2e:	464d      	mov	r5, r9
     d30:	9e00      	ldr	r6, [sp, #0]
     d32:	9f01      	ldr	r7, [sp, #4]
     d34:	4335      	orrs	r5, r6
     d36:	003c      	movs	r4, r7
     d38:	4646      	mov	r6, r8
     d3a:	4334      	orrs	r4, r6
     d3c:	9500      	str	r5, [sp, #0]
     d3e:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     d40:	3801      	subs	r0, #1
     d42:	d31d      	bcc.n	d80 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     d44:	2420      	movs	r4, #32
     d46:	4264      	negs	r4, r4
     d48:	1904      	adds	r4, r0, r4
     d4a:	d4e6      	bmi.n	d1a <_sercom_get_async_baud_val+0x5e>
     d4c:	000d      	movs	r5, r1
     d4e:	40a5      	lsls	r5, r4
     d50:	46a8      	mov	r8, r5
     d52:	000c      	movs	r4, r1
     d54:	4084      	lsls	r4, r0
     d56:	46a1      	mov	r9, r4
		r = r << 1;
     d58:	1892      	adds	r2, r2, r2
     d5a:	415b      	adcs	r3, r3
     d5c:	0014      	movs	r4, r2
     d5e:	001d      	movs	r5, r3
		if (n & bit_shift) {
     d60:	4646      	mov	r6, r8
     d62:	465f      	mov	r7, fp
     d64:	423e      	tst	r6, r7
     d66:	d003      	beq.n	d70 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     d68:	000e      	movs	r6, r1
     d6a:	4326      	orrs	r6, r4
     d6c:	0032      	movs	r2, r6
     d6e:	002b      	movs	r3, r5
		if (r >= d) {
     d70:	9c02      	ldr	r4, [sp, #8]
     d72:	9d03      	ldr	r5, [sp, #12]
     d74:	429d      	cmp	r5, r3
     d76:	d8e3      	bhi.n	d40 <_sercom_get_async_baud_val+0x84>
     d78:	d1d5      	bne.n	d26 <_sercom_get_async_baud_val+0x6a>
     d7a:	4294      	cmp	r4, r2
     d7c:	d8e0      	bhi.n	d40 <_sercom_get_async_baud_val+0x84>
     d7e:	e7d2      	b.n	d26 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     d80:	2200      	movs	r2, #0
     d82:	2301      	movs	r3, #1
     d84:	9800      	ldr	r0, [sp, #0]
     d86:	9901      	ldr	r1, [sp, #4]
     d88:	1a12      	subs	r2, r2, r0
     d8a:	418b      	sbcs	r3, r1
     d8c:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     d8e:	0c13      	lsrs	r3, r2, #16
     d90:	040a      	lsls	r2, r1, #16
     d92:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     d94:	9b05      	ldr	r3, [sp, #20]
     d96:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     d98:	2200      	movs	r2, #0
     d9a:	e79f      	b.n	cdc <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     d9c:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     d9e:	2b01      	cmp	r3, #1
     da0:	d1f8      	bne.n	d94 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     da2:	0f63      	lsrs	r3, r4, #29
     da4:	9304      	str	r3, [sp, #16]
     da6:	00e3      	lsls	r3, r4, #3
     da8:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     daa:	000a      	movs	r2, r1
     dac:	2300      	movs	r3, #0
     dae:	2100      	movs	r1, #0
     db0:	4c34      	ldr	r4, [pc, #208]	; (e84 <_sercom_get_async_baud_val+0x1c8>)
     db2:	47a0      	blx	r4
     db4:	0004      	movs	r4, r0
     db6:	000d      	movs	r5, r1
     db8:	2300      	movs	r3, #0
     dba:	469c      	mov	ip, r3
     dbc:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     dbe:	3320      	adds	r3, #32
     dc0:	469b      	mov	fp, r3
     dc2:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     dc4:	4663      	mov	r3, ip
     dc6:	9307      	str	r3, [sp, #28]
     dc8:	e048      	b.n	e5c <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     dca:	4659      	mov	r1, fp
     dcc:	1bc9      	subs	r1, r1, r7
     dce:	0030      	movs	r0, r6
     dd0:	40c8      	lsrs	r0, r1
     dd2:	4682      	mov	sl, r0
     dd4:	e010      	b.n	df8 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     dd6:	9800      	ldr	r0, [sp, #0]
     dd8:	9901      	ldr	r1, [sp, #4]
     dda:	1a12      	subs	r2, r2, r0
     ddc:	418b      	sbcs	r3, r1
			q |= bit_shift;
     dde:	9902      	ldr	r1, [sp, #8]
     de0:	4648      	mov	r0, r9
     de2:	4301      	orrs	r1, r0
     de4:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     de6:	3f01      	subs	r7, #1
     de8:	d325      	bcc.n	e36 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     dea:	2120      	movs	r1, #32
     dec:	4249      	negs	r1, r1
     dee:	1879      	adds	r1, r7, r1
     df0:	d4eb      	bmi.n	dca <_sercom_get_async_baud_val+0x10e>
     df2:	0030      	movs	r0, r6
     df4:	4088      	lsls	r0, r1
     df6:	4682      	mov	sl, r0
     df8:	0031      	movs	r1, r6
     dfa:	40b9      	lsls	r1, r7
     dfc:	4689      	mov	r9, r1
		r = r << 1;
     dfe:	1892      	adds	r2, r2, r2
     e00:	415b      	adcs	r3, r3
     e02:	0010      	movs	r0, r2
     e04:	0019      	movs	r1, r3
		if (n & bit_shift) {
     e06:	4644      	mov	r4, r8
     e08:	464d      	mov	r5, r9
     e0a:	402c      	ands	r4, r5
     e0c:	46a4      	mov	ip, r4
     e0e:	4654      	mov	r4, sl
     e10:	9d04      	ldr	r5, [sp, #16]
     e12:	402c      	ands	r4, r5
     e14:	46a2      	mov	sl, r4
     e16:	4664      	mov	r4, ip
     e18:	4655      	mov	r5, sl
     e1a:	432c      	orrs	r4, r5
     e1c:	d003      	beq.n	e26 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     e1e:	0034      	movs	r4, r6
     e20:	4304      	orrs	r4, r0
     e22:	0022      	movs	r2, r4
     e24:	000b      	movs	r3, r1
		if (r >= d) {
     e26:	9800      	ldr	r0, [sp, #0]
     e28:	9901      	ldr	r1, [sp, #4]
     e2a:	4299      	cmp	r1, r3
     e2c:	d8db      	bhi.n	de6 <_sercom_get_async_baud_val+0x12a>
     e2e:	d1d2      	bne.n	dd6 <_sercom_get_async_baud_val+0x11a>
     e30:	4290      	cmp	r0, r2
     e32:	d8d8      	bhi.n	de6 <_sercom_get_async_baud_val+0x12a>
     e34:	e7cf      	b.n	dd6 <_sercom_get_async_baud_val+0x11a>
     e36:	9c00      	ldr	r4, [sp, #0]
     e38:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     e3a:	9902      	ldr	r1, [sp, #8]
     e3c:	9a07      	ldr	r2, [sp, #28]
     e3e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     e40:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     e42:	4911      	ldr	r1, [pc, #68]	; (e88 <_sercom_get_async_baud_val+0x1cc>)
     e44:	428b      	cmp	r3, r1
     e46:	d914      	bls.n	e72 <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     e48:	9b06      	ldr	r3, [sp, #24]
     e4a:	3301      	adds	r3, #1
     e4c:	b2db      	uxtb	r3, r3
     e4e:	0019      	movs	r1, r3
     e50:	9306      	str	r3, [sp, #24]
     e52:	0013      	movs	r3, r2
     e54:	3301      	adds	r3, #1
     e56:	9307      	str	r3, [sp, #28]
     e58:	2908      	cmp	r1, #8
     e5a:	d008      	beq.n	e6e <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     e5c:	2300      	movs	r3, #0
     e5e:	9302      	str	r3, [sp, #8]
     e60:	2200      	movs	r2, #0
     e62:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     e64:	213f      	movs	r1, #63	; 0x3f
     e66:	9400      	str	r4, [sp, #0]
     e68:	9501      	str	r5, [sp, #4]
     e6a:	000f      	movs	r7, r1
     e6c:	e7bd      	b.n	dea <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e6e:	2240      	movs	r2, #64	; 0x40
     e70:	e734      	b.n	cdc <_sercom_get_async_baud_val+0x20>
     e72:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     e74:	9906      	ldr	r1, [sp, #24]
     e76:	2908      	cmp	r1, #8
     e78:	d100      	bne.n	e7c <_sercom_get_async_baud_val+0x1c0>
     e7a:	e72f      	b.n	cdc <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     e7c:	034a      	lsls	r2, r1, #13
     e7e:	431a      	orrs	r2, r3
     e80:	e788      	b.n	d94 <_sercom_get_async_baud_val+0xd8>
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	000062f5 	.word	0x000062f5
     e88:	00001fff 	.word	0x00001fff

00000e8c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e8c:	b510      	push	{r4, lr}
     e8e:	b082      	sub	sp, #8
     e90:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     e92:	4b0e      	ldr	r3, [pc, #56]	; (ecc <sercom_set_gclk_generator+0x40>)
     e94:	781b      	ldrb	r3, [r3, #0]
     e96:	2b00      	cmp	r3, #0
     e98:	d007      	beq.n	eaa <sercom_set_gclk_generator+0x1e>
     e9a:	2900      	cmp	r1, #0
     e9c:	d105      	bne.n	eaa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     e9e:	4b0b      	ldr	r3, [pc, #44]	; (ecc <sercom_set_gclk_generator+0x40>)
     ea0:	785b      	ldrb	r3, [r3, #1]
     ea2:	4283      	cmp	r3, r0
     ea4:	d010      	beq.n	ec8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     ea6:	201d      	movs	r0, #29
     ea8:	e00c      	b.n	ec4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     eaa:	a901      	add	r1, sp, #4
     eac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     eae:	2013      	movs	r0, #19
     eb0:	4b07      	ldr	r3, [pc, #28]	; (ed0 <sercom_set_gclk_generator+0x44>)
     eb2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     eb4:	2013      	movs	r0, #19
     eb6:	4b07      	ldr	r3, [pc, #28]	; (ed4 <sercom_set_gclk_generator+0x48>)
     eb8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     eba:	4b04      	ldr	r3, [pc, #16]	; (ecc <sercom_set_gclk_generator+0x40>)
     ebc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     ebe:	2201      	movs	r2, #1
     ec0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     ec2:	2000      	movs	r0, #0
}
     ec4:	b002      	add	sp, #8
     ec6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     ec8:	2000      	movs	r0, #0
     eca:	e7fb      	b.n	ec4 <sercom_set_gclk_generator+0x38>
     ecc:	20000204 	.word	0x20000204
     ed0:	000022b9 	.word	0x000022b9
     ed4:	0000222d 	.word	0x0000222d

00000ed8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     ed8:	4b40      	ldr	r3, [pc, #256]	; (fdc <_sercom_get_default_pad+0x104>)
     eda:	4298      	cmp	r0, r3
     edc:	d031      	beq.n	f42 <_sercom_get_default_pad+0x6a>
     ede:	d90a      	bls.n	ef6 <_sercom_get_default_pad+0x1e>
     ee0:	4b3f      	ldr	r3, [pc, #252]	; (fe0 <_sercom_get_default_pad+0x108>)
     ee2:	4298      	cmp	r0, r3
     ee4:	d04d      	beq.n	f82 <_sercom_get_default_pad+0xaa>
     ee6:	4b3f      	ldr	r3, [pc, #252]	; (fe4 <_sercom_get_default_pad+0x10c>)
     ee8:	4298      	cmp	r0, r3
     eea:	d05a      	beq.n	fa2 <_sercom_get_default_pad+0xca>
     eec:	4b3e      	ldr	r3, [pc, #248]	; (fe8 <_sercom_get_default_pad+0x110>)
     eee:	4298      	cmp	r0, r3
     ef0:	d037      	beq.n	f62 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     ef2:	2000      	movs	r0, #0
}
     ef4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     ef6:	4b3d      	ldr	r3, [pc, #244]	; (fec <_sercom_get_default_pad+0x114>)
     ef8:	4298      	cmp	r0, r3
     efa:	d00c      	beq.n	f16 <_sercom_get_default_pad+0x3e>
     efc:	4b3c      	ldr	r3, [pc, #240]	; (ff0 <_sercom_get_default_pad+0x118>)
     efe:	4298      	cmp	r0, r3
     f00:	d1f7      	bne.n	ef2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f02:	2901      	cmp	r1, #1
     f04:	d017      	beq.n	f36 <_sercom_get_default_pad+0x5e>
     f06:	2900      	cmp	r1, #0
     f08:	d05d      	beq.n	fc6 <_sercom_get_default_pad+0xee>
     f0a:	2902      	cmp	r1, #2
     f0c:	d015      	beq.n	f3a <_sercom_get_default_pad+0x62>
     f0e:	2903      	cmp	r1, #3
     f10:	d015      	beq.n	f3e <_sercom_get_default_pad+0x66>
	return 0;
     f12:	2000      	movs	r0, #0
     f14:	e7ee      	b.n	ef4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f16:	2901      	cmp	r1, #1
     f18:	d007      	beq.n	f2a <_sercom_get_default_pad+0x52>
     f1a:	2900      	cmp	r1, #0
     f1c:	d051      	beq.n	fc2 <_sercom_get_default_pad+0xea>
     f1e:	2902      	cmp	r1, #2
     f20:	d005      	beq.n	f2e <_sercom_get_default_pad+0x56>
     f22:	2903      	cmp	r1, #3
     f24:	d005      	beq.n	f32 <_sercom_get_default_pad+0x5a>
	return 0;
     f26:	2000      	movs	r0, #0
     f28:	e7e4      	b.n	ef4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f2a:	4832      	ldr	r0, [pc, #200]	; (ff4 <_sercom_get_default_pad+0x11c>)
     f2c:	e7e2      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f2e:	4832      	ldr	r0, [pc, #200]	; (ff8 <_sercom_get_default_pad+0x120>)
     f30:	e7e0      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f32:	4832      	ldr	r0, [pc, #200]	; (ffc <_sercom_get_default_pad+0x124>)
     f34:	e7de      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f36:	4832      	ldr	r0, [pc, #200]	; (1000 <_sercom_get_default_pad+0x128>)
     f38:	e7dc      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f3a:	4832      	ldr	r0, [pc, #200]	; (1004 <_sercom_get_default_pad+0x12c>)
     f3c:	e7da      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f3e:	4832      	ldr	r0, [pc, #200]	; (1008 <_sercom_get_default_pad+0x130>)
     f40:	e7d8      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f42:	2901      	cmp	r1, #1
     f44:	d007      	beq.n	f56 <_sercom_get_default_pad+0x7e>
     f46:	2900      	cmp	r1, #0
     f48:	d03f      	beq.n	fca <_sercom_get_default_pad+0xf2>
     f4a:	2902      	cmp	r1, #2
     f4c:	d005      	beq.n	f5a <_sercom_get_default_pad+0x82>
     f4e:	2903      	cmp	r1, #3
     f50:	d005      	beq.n	f5e <_sercom_get_default_pad+0x86>
	return 0;
     f52:	2000      	movs	r0, #0
     f54:	e7ce      	b.n	ef4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f56:	482d      	ldr	r0, [pc, #180]	; (100c <_sercom_get_default_pad+0x134>)
     f58:	e7cc      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f5a:	482d      	ldr	r0, [pc, #180]	; (1010 <_sercom_get_default_pad+0x138>)
     f5c:	e7ca      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f5e:	482d      	ldr	r0, [pc, #180]	; (1014 <_sercom_get_default_pad+0x13c>)
     f60:	e7c8      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f62:	2901      	cmp	r1, #1
     f64:	d007      	beq.n	f76 <_sercom_get_default_pad+0x9e>
     f66:	2900      	cmp	r1, #0
     f68:	d031      	beq.n	fce <_sercom_get_default_pad+0xf6>
     f6a:	2902      	cmp	r1, #2
     f6c:	d005      	beq.n	f7a <_sercom_get_default_pad+0xa2>
     f6e:	2903      	cmp	r1, #3
     f70:	d005      	beq.n	f7e <_sercom_get_default_pad+0xa6>
	return 0;
     f72:	2000      	movs	r0, #0
     f74:	e7be      	b.n	ef4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f76:	4828      	ldr	r0, [pc, #160]	; (1018 <_sercom_get_default_pad+0x140>)
     f78:	e7bc      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f7a:	4828      	ldr	r0, [pc, #160]	; (101c <_sercom_get_default_pad+0x144>)
     f7c:	e7ba      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f7e:	4828      	ldr	r0, [pc, #160]	; (1020 <_sercom_get_default_pad+0x148>)
     f80:	e7b8      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f82:	2901      	cmp	r1, #1
     f84:	d007      	beq.n	f96 <_sercom_get_default_pad+0xbe>
     f86:	2900      	cmp	r1, #0
     f88:	d023      	beq.n	fd2 <_sercom_get_default_pad+0xfa>
     f8a:	2902      	cmp	r1, #2
     f8c:	d005      	beq.n	f9a <_sercom_get_default_pad+0xc2>
     f8e:	2903      	cmp	r1, #3
     f90:	d005      	beq.n	f9e <_sercom_get_default_pad+0xc6>
	return 0;
     f92:	2000      	movs	r0, #0
     f94:	e7ae      	b.n	ef4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f96:	4823      	ldr	r0, [pc, #140]	; (1024 <_sercom_get_default_pad+0x14c>)
     f98:	e7ac      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f9a:	4823      	ldr	r0, [pc, #140]	; (1028 <_sercom_get_default_pad+0x150>)
     f9c:	e7aa      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     f9e:	4823      	ldr	r0, [pc, #140]	; (102c <_sercom_get_default_pad+0x154>)
     fa0:	e7a8      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fa2:	2901      	cmp	r1, #1
     fa4:	d007      	beq.n	fb6 <_sercom_get_default_pad+0xde>
     fa6:	2900      	cmp	r1, #0
     fa8:	d015      	beq.n	fd6 <_sercom_get_default_pad+0xfe>
     faa:	2902      	cmp	r1, #2
     fac:	d005      	beq.n	fba <_sercom_get_default_pad+0xe2>
     fae:	2903      	cmp	r1, #3
     fb0:	d005      	beq.n	fbe <_sercom_get_default_pad+0xe6>
	return 0;
     fb2:	2000      	movs	r0, #0
     fb4:	e79e      	b.n	ef4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fb6:	481e      	ldr	r0, [pc, #120]	; (1030 <_sercom_get_default_pad+0x158>)
     fb8:	e79c      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fba:	481e      	ldr	r0, [pc, #120]	; (1034 <_sercom_get_default_pad+0x15c>)
     fbc:	e79a      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fbe:	481e      	ldr	r0, [pc, #120]	; (1038 <_sercom_get_default_pad+0x160>)
     fc0:	e798      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fc2:	481e      	ldr	r0, [pc, #120]	; (103c <_sercom_get_default_pad+0x164>)
     fc4:	e796      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fc6:	2003      	movs	r0, #3
     fc8:	e794      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fca:	481d      	ldr	r0, [pc, #116]	; (1040 <_sercom_get_default_pad+0x168>)
     fcc:	e792      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fce:	481d      	ldr	r0, [pc, #116]	; (1044 <_sercom_get_default_pad+0x16c>)
     fd0:	e790      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fd2:	481d      	ldr	r0, [pc, #116]	; (1048 <_sercom_get_default_pad+0x170>)
     fd4:	e78e      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fd6:	481d      	ldr	r0, [pc, #116]	; (104c <_sercom_get_default_pad+0x174>)
     fd8:	e78c      	b.n	ef4 <_sercom_get_default_pad+0x1c>
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	42001000 	.word	0x42001000
     fe0:	42001800 	.word	0x42001800
     fe4:	42001c00 	.word	0x42001c00
     fe8:	42001400 	.word	0x42001400
     fec:	42000800 	.word	0x42000800
     ff0:	42000c00 	.word	0x42000c00
     ff4:	00050003 	.word	0x00050003
     ff8:	00060003 	.word	0x00060003
     ffc:	00070003 	.word	0x00070003
    1000:	00010003 	.word	0x00010003
    1004:	001e0003 	.word	0x001e0003
    1008:	001f0003 	.word	0x001f0003
    100c:	000d0002 	.word	0x000d0002
    1010:	000e0002 	.word	0x000e0002
    1014:	000f0002 	.word	0x000f0002
    1018:	00110003 	.word	0x00110003
    101c:	00120003 	.word	0x00120003
    1020:	00130003 	.word	0x00130003
    1024:	003f0005 	.word	0x003f0005
    1028:	003e0005 	.word	0x003e0005
    102c:	00520005 	.word	0x00520005
    1030:	00170003 	.word	0x00170003
    1034:	00180003 	.word	0x00180003
    1038:	00190003 	.word	0x00190003
    103c:	00040003 	.word	0x00040003
    1040:	000c0002 	.word	0x000c0002
    1044:	00100003 	.word	0x00100003
    1048:	00530005 	.word	0x00530005
    104c:	00160003 	.word	0x00160003

00001050 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1050:	b530      	push	{r4, r5, lr}
    1052:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1054:	4b0b      	ldr	r3, [pc, #44]	; (1084 <_sercom_get_sercom_inst_index+0x34>)
    1056:	466a      	mov	r2, sp
    1058:	cb32      	ldmia	r3!, {r1, r4, r5}
    105a:	c232      	stmia	r2!, {r1, r4, r5}
    105c:	cb32      	ldmia	r3!, {r1, r4, r5}
    105e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1060:	9b00      	ldr	r3, [sp, #0]
    1062:	4283      	cmp	r3, r0
    1064:	d00b      	beq.n	107e <_sercom_get_sercom_inst_index+0x2e>
    1066:	2301      	movs	r3, #1
    1068:	009a      	lsls	r2, r3, #2
    106a:	4669      	mov	r1, sp
    106c:	5852      	ldr	r2, [r2, r1]
    106e:	4282      	cmp	r2, r0
    1070:	d006      	beq.n	1080 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1072:	3301      	adds	r3, #1
    1074:	2b06      	cmp	r3, #6
    1076:	d1f7      	bne.n	1068 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1078:	2000      	movs	r0, #0
}
    107a:	b007      	add	sp, #28
    107c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    107e:	2300      	movs	r3, #0
			return i;
    1080:	b2d8      	uxtb	r0, r3
    1082:	e7fa      	b.n	107a <_sercom_get_sercom_inst_index+0x2a>
    1084:	00008b28 	.word	0x00008b28

00001088 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1088:	4770      	bx	lr
	...

0000108c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    108c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    108e:	4b0a      	ldr	r3, [pc, #40]	; (10b8 <_sercom_set_handler+0x2c>)
    1090:	781b      	ldrb	r3, [r3, #0]
    1092:	2b00      	cmp	r3, #0
    1094:	d10c      	bne.n	10b0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1096:	4f09      	ldr	r7, [pc, #36]	; (10bc <_sercom_set_handler+0x30>)
    1098:	4e09      	ldr	r6, [pc, #36]	; (10c0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    109a:	4d0a      	ldr	r5, [pc, #40]	; (10c4 <_sercom_set_handler+0x38>)
    109c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    109e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    10a0:	195a      	adds	r2, r3, r5
    10a2:	6014      	str	r4, [r2, #0]
    10a4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10a6:	2b18      	cmp	r3, #24
    10a8:	d1f9      	bne.n	109e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    10aa:	2201      	movs	r2, #1
    10ac:	4b02      	ldr	r3, [pc, #8]	; (10b8 <_sercom_set_handler+0x2c>)
    10ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    10b0:	0080      	lsls	r0, r0, #2
    10b2:	4b02      	ldr	r3, [pc, #8]	; (10bc <_sercom_set_handler+0x30>)
    10b4:	50c1      	str	r1, [r0, r3]
}
    10b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10b8:	20000206 	.word	0x20000206
    10bc:	20000208 	.word	0x20000208
    10c0:	00001089 	.word	0x00001089
    10c4:	2000153c 	.word	0x2000153c

000010c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    10c8:	b500      	push	{lr}
    10ca:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    10cc:	2309      	movs	r3, #9
    10ce:	466a      	mov	r2, sp
    10d0:	7013      	strb	r3, [r2, #0]
    10d2:	3301      	adds	r3, #1
    10d4:	7053      	strb	r3, [r2, #1]
    10d6:	3301      	adds	r3, #1
    10d8:	7093      	strb	r3, [r2, #2]
    10da:	3301      	adds	r3, #1
    10dc:	70d3      	strb	r3, [r2, #3]
    10de:	3301      	adds	r3, #1
    10e0:	7113      	strb	r3, [r2, #4]
    10e2:	3301      	adds	r3, #1
    10e4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    10e6:	4b03      	ldr	r3, [pc, #12]	; (10f4 <_sercom_get_interrupt_vector+0x2c>)
    10e8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    10ea:	466b      	mov	r3, sp
    10ec:	5618      	ldrsb	r0, [r3, r0]
}
    10ee:	b003      	add	sp, #12
    10f0:	bd00      	pop	{pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	00001051 	.word	0x00001051

000010f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    10f8:	b510      	push	{r4, lr}
    10fa:	4b02      	ldr	r3, [pc, #8]	; (1104 <SERCOM0_Handler+0xc>)
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	2000      	movs	r0, #0
    1100:	4798      	blx	r3
    1102:	bd10      	pop	{r4, pc}
    1104:	20000208 	.word	0x20000208

00001108 <SERCOM1_Handler>:
    1108:	b510      	push	{r4, lr}
    110a:	4b02      	ldr	r3, [pc, #8]	; (1114 <SERCOM1_Handler+0xc>)
    110c:	685b      	ldr	r3, [r3, #4]
    110e:	2001      	movs	r0, #1
    1110:	4798      	blx	r3
    1112:	bd10      	pop	{r4, pc}
    1114:	20000208 	.word	0x20000208

00001118 <SERCOM2_Handler>:
    1118:	b510      	push	{r4, lr}
    111a:	4b02      	ldr	r3, [pc, #8]	; (1124 <SERCOM2_Handler+0xc>)
    111c:	689b      	ldr	r3, [r3, #8]
    111e:	2002      	movs	r0, #2
    1120:	4798      	blx	r3
    1122:	bd10      	pop	{r4, pc}
    1124:	20000208 	.word	0x20000208

00001128 <SERCOM3_Handler>:
    1128:	b510      	push	{r4, lr}
    112a:	4b02      	ldr	r3, [pc, #8]	; (1134 <SERCOM3_Handler+0xc>)
    112c:	68db      	ldr	r3, [r3, #12]
    112e:	2003      	movs	r0, #3
    1130:	4798      	blx	r3
    1132:	bd10      	pop	{r4, pc}
    1134:	20000208 	.word	0x20000208

00001138 <SERCOM4_Handler>:
    1138:	b510      	push	{r4, lr}
    113a:	4b02      	ldr	r3, [pc, #8]	; (1144 <SERCOM4_Handler+0xc>)
    113c:	691b      	ldr	r3, [r3, #16]
    113e:	2004      	movs	r0, #4
    1140:	4798      	blx	r3
    1142:	bd10      	pop	{r4, pc}
    1144:	20000208 	.word	0x20000208

00001148 <SERCOM5_Handler>:
    1148:	b510      	push	{r4, lr}
    114a:	4b02      	ldr	r3, [pc, #8]	; (1154 <SERCOM5_Handler+0xc>)
    114c:	695b      	ldr	r3, [r3, #20]
    114e:	2005      	movs	r0, #5
    1150:	4798      	blx	r3
    1152:	bd10      	pop	{r4, pc}
    1154:	20000208 	.word	0x20000208

00001158 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1158:	b5f0      	push	{r4, r5, r6, r7, lr}
    115a:	46d6      	mov	lr, sl
    115c:	464f      	mov	r7, r9
    115e:	b580      	push	{r7, lr}
    1160:	b08b      	sub	sp, #44	; 0x2c
    1162:	4681      	mov	r9, r0
    1164:	000f      	movs	r7, r1
    1166:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1168:	0003      	movs	r3, r0
    116a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    116c:	680b      	ldr	r3, [r1, #0]
    116e:	079b      	lsls	r3, r3, #30
    1170:	d409      	bmi.n	1186 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1172:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1174:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1176:	07db      	lsls	r3, r3, #31
    1178:	d400      	bmi.n	117c <spi_init+0x24>
    117a:	e098      	b.n	12ae <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    117c:	b00b      	add	sp, #44	; 0x2c
    117e:	bc0c      	pop	{r2, r3}
    1180:	4691      	mov	r9, r2
    1182:	469a      	mov	sl, r3
    1184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    1186:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1188:	9305      	str	r3, [sp, #20]
    118a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    118c:	9306      	str	r3, [sp, #24]
    118e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1190:	9307      	str	r3, [sp, #28]
    1192:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1194:	9308      	str	r3, [sp, #32]
    1196:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1198:	ab05      	add	r3, sp, #20
    119a:	9301      	str	r3, [sp, #4]
    119c:	e00a      	b.n	11b4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    119e:	0038      	movs	r0, r7
    11a0:	4b93      	ldr	r3, [pc, #588]	; (13f0 <spi_init+0x298>)
    11a2:	4798      	blx	r3
    11a4:	e00c      	b.n	11c0 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    11a6:	230f      	movs	r3, #15
    11a8:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    11aa:	4281      	cmp	r1, r0
    11ac:	d12d      	bne.n	120a <spi_init+0xb2>
    11ae:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    11b0:	2e04      	cmp	r6, #4
    11b2:	d02f      	beq.n	1214 <spi_init+0xbc>
    11b4:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11b6:	00b3      	lsls	r3, r6, #2
    11b8:	9a01      	ldr	r2, [sp, #4]
    11ba:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    11bc:	2800      	cmp	r0, #0
    11be:	d0ee      	beq.n	119e <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    11c0:	1c43      	adds	r3, r0, #1
    11c2:	d0f4      	beq.n	11ae <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    11c4:	0401      	lsls	r1, r0, #16
    11c6:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    11c8:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    11ca:	b2c3      	uxtb	r3, r0
    11cc:	469c      	mov	ip, r3
		return NULL;
    11ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11d0:	0602      	lsls	r2, r0, #24
    11d2:	d405      	bmi.n	11e0 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    11d4:	4663      	mov	r3, ip
    11d6:	095b      	lsrs	r3, r3, #5
    11d8:	01db      	lsls	r3, r3, #7
    11da:	4a86      	ldr	r2, [pc, #536]	; (13f4 <spi_init+0x29c>)
    11dc:	4692      	mov	sl, r2
    11de:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    11e0:	221f      	movs	r2, #31
    11e2:	4660      	mov	r0, ip
    11e4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    11e6:	1898      	adds	r0, r3, r2
    11e8:	3040      	adds	r0, #64	; 0x40
    11ea:	7800      	ldrb	r0, [r0, #0]
    11ec:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    11ee:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    11f0:	4655      	mov	r5, sl
    11f2:	07ed      	lsls	r5, r5, #31
    11f4:	d5d9      	bpl.n	11aa <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    11f6:	0852      	lsrs	r2, r2, #1
    11f8:	189b      	adds	r3, r3, r2
    11fa:	3330      	adds	r3, #48	; 0x30
    11fc:	7818      	ldrb	r0, [r3, #0]
    11fe:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    1200:	4663      	mov	r3, ip
    1202:	07db      	lsls	r3, r3, #31
    1204:	d5cf      	bpl.n	11a6 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1206:	0900      	lsrs	r0, r0, #4
    1208:	e7cf      	b.n	11aa <spi_init+0x52>
			module->hw = NULL;
    120a:	2300      	movs	r3, #0
    120c:	464a      	mov	r2, r9
    120e:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    1210:	201c      	movs	r0, #28
    1212:	e7b3      	b.n	117c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1214:	2013      	movs	r0, #19
    1216:	4b78      	ldr	r3, [pc, #480]	; (13f8 <spi_init+0x2a0>)
    1218:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    121a:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    121c:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    121e:	2a01      	cmp	r2, #1
    1220:	d027      	beq.n	1272 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    1222:	6863      	ldr	r3, [r4, #4]
    1224:	68a2      	ldr	r2, [r4, #8]
    1226:	4313      	orrs	r3, r2
    1228:	68e2      	ldr	r2, [r4, #12]
    122a:	4313      	orrs	r3, r2
    122c:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    122e:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    1230:	7c61      	ldrb	r1, [r4, #17]
    1232:	2900      	cmp	r1, #0
    1234:	d001      	beq.n	123a <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1236:	2180      	movs	r1, #128	; 0x80
    1238:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    123a:	7ca1      	ldrb	r1, [r4, #18]
    123c:	2900      	cmp	r1, #0
    123e:	d002      	beq.n	1246 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1240:	2180      	movs	r1, #128	; 0x80
    1242:	0289      	lsls	r1, r1, #10
    1244:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1246:	7ce1      	ldrb	r1, [r4, #19]
    1248:	2900      	cmp	r1, #0
    124a:	d002      	beq.n	1252 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    124c:	2180      	movs	r1, #128	; 0x80
    124e:	0089      	lsls	r1, r1, #2
    1250:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1252:	7d21      	ldrb	r1, [r4, #20]
    1254:	2900      	cmp	r1, #0
    1256:	d002      	beq.n	125e <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1258:	2180      	movs	r1, #128	; 0x80
    125a:	0189      	lsls	r1, r1, #6
    125c:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    125e:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1260:	2002      	movs	r0, #2
    1262:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    1264:	428b      	cmp	r3, r1
    1266:	d018      	beq.n	129a <spi_init+0x142>
	module->hw = NULL;
    1268:	2300      	movs	r3, #0
    126a:	464a      	mov	r2, r9
    126c:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    126e:	201c      	movs	r0, #28
    1270:	e784      	b.n	117c <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1272:	aa04      	add	r2, sp, #16
    1274:	0001      	movs	r1, r0
    1276:	69a0      	ldr	r0, [r4, #24]
    1278:	4b60      	ldr	r3, [pc, #384]	; (13fc <spi_init+0x2a4>)
    127a:	4798      	blx	r3
    127c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    127e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1280:	2b00      	cmp	r3, #0
    1282:	d000      	beq.n	1286 <spi_init+0x12e>
    1284:	e77a      	b.n	117c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1286:	7b3b      	ldrb	r3, [r7, #12]
    1288:	b2db      	uxtb	r3, r3
    128a:	aa04      	add	r2, sp, #16
    128c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    128e:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1290:	429a      	cmp	r2, r3
    1292:	d000      	beq.n	1296 <spi_init+0x13e>
    1294:	e772      	b.n	117c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1296:	350c      	adds	r5, #12
    1298:	e7c3      	b.n	1222 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    129a:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    129c:	4293      	cmp	r3, r2
    129e:	d1e3      	bne.n	1268 <spi_init+0x110>
		module->mode           = config->mode;
    12a0:	7823      	ldrb	r3, [r4, #0]
    12a2:	464a      	mov	r2, r9
    12a4:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    12a6:	7c23      	ldrb	r3, [r4, #16]
    12a8:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    12aa:	2000      	movs	r0, #0
    12ac:	e766      	b.n	117c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12ae:	0008      	movs	r0, r1
    12b0:	4b53      	ldr	r3, [pc, #332]	; (1400 <spi_init+0x2a8>)
    12b2:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    12b4:	4a53      	ldr	r2, [pc, #332]	; (1404 <spi_init+0x2ac>)
    12b6:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    12b8:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    12ba:	2301      	movs	r3, #1
    12bc:	40ab      	lsls	r3, r5
    12be:	430b      	orrs	r3, r1
    12c0:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    12c2:	a909      	add	r1, sp, #36	; 0x24
    12c4:	2624      	movs	r6, #36	; 0x24
    12c6:	5da3      	ldrb	r3, [r4, r6]
    12c8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12ca:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    12cc:	b2c5      	uxtb	r5, r0
    12ce:	0028      	movs	r0, r5
    12d0:	4b4d      	ldr	r3, [pc, #308]	; (1408 <spi_init+0x2b0>)
    12d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12d4:	0028      	movs	r0, r5
    12d6:	4b4d      	ldr	r3, [pc, #308]	; (140c <spi_init+0x2b4>)
    12d8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12da:	5da0      	ldrb	r0, [r4, r6]
    12dc:	2100      	movs	r1, #0
    12de:	4b4c      	ldr	r3, [pc, #304]	; (1410 <spi_init+0x2b8>)
    12e0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    12e2:	7823      	ldrb	r3, [r4, #0]
    12e4:	2b01      	cmp	r3, #1
    12e6:	d019      	beq.n	131c <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    12e8:	464b      	mov	r3, r9
    12ea:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12ec:	ab04      	add	r3, sp, #16
    12ee:	2280      	movs	r2, #128	; 0x80
    12f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12f2:	2200      	movs	r2, #0
    12f4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12f6:	2101      	movs	r1, #1
    12f8:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    12fa:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    12fc:	7823      	ldrb	r3, [r4, #0]
    12fe:	2b00      	cmp	r3, #0
    1300:	d101      	bne.n	1306 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1302:	ab04      	add	r3, sp, #16
    1304:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1308:	9305      	str	r3, [sp, #20]
    130a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    130c:	9306      	str	r3, [sp, #24]
    130e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1310:	9307      	str	r3, [sp, #28]
    1312:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1314:	9308      	str	r3, [sp, #32]
    1316:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1318:	ad05      	add	r5, sp, #20
    131a:	e011      	b.n	1340 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    131c:	683b      	ldr	r3, [r7, #0]
    131e:	220c      	movs	r2, #12
    1320:	4313      	orrs	r3, r2
    1322:	603b      	str	r3, [r7, #0]
    1324:	e7e0      	b.n	12e8 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1326:	0030      	movs	r0, r6
    1328:	4b31      	ldr	r3, [pc, #196]	; (13f0 <spi_init+0x298>)
    132a:	4798      	blx	r3
    132c:	e00d      	b.n	134a <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    132e:	a904      	add	r1, sp, #16
    1330:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1332:	0c00      	lsrs	r0, r0, #16
    1334:	b2c0      	uxtb	r0, r0
    1336:	4b37      	ldr	r3, [pc, #220]	; (1414 <spi_init+0x2bc>)
    1338:	4798      	blx	r3
    133a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    133c:	2f04      	cmp	r7, #4
    133e:	d007      	beq.n	1350 <spi_init+0x1f8>
    1340:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1342:	00bb      	lsls	r3, r7, #2
    1344:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1346:	2800      	cmp	r0, #0
    1348:	d0ed      	beq.n	1326 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    134a:	1c43      	adds	r3, r0, #1
    134c:	d1ef      	bne.n	132e <spi_init+0x1d6>
    134e:	e7f4      	b.n	133a <spi_init+0x1e2>
	module->mode             = config->mode;
    1350:	7823      	ldrb	r3, [r4, #0]
    1352:	464a      	mov	r2, r9
    1354:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    1356:	7c23      	ldrb	r3, [r4, #16]
    1358:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    135a:	7ca3      	ldrb	r3, [r4, #18]
    135c:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    135e:	7d23      	ldrb	r3, [r4, #20]
    1360:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    1362:	2200      	movs	r2, #0
    1364:	ab02      	add	r3, sp, #8
    1366:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1368:	7823      	ldrb	r3, [r4, #0]
    136a:	2b01      	cmp	r3, #1
    136c:	d028      	beq.n	13c0 <spi_init+0x268>
	ctrla |= config->transfer_mode;
    136e:	6863      	ldr	r3, [r4, #4]
    1370:	68a2      	ldr	r2, [r4, #8]
    1372:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1374:	68e2      	ldr	r2, [r4, #12]
    1376:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1378:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    137a:	7c62      	ldrb	r2, [r4, #17]
    137c:	2a00      	cmp	r2, #0
    137e:	d103      	bne.n	1388 <spi_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1380:	4a25      	ldr	r2, [pc, #148]	; (1418 <spi_init+0x2c0>)
    1382:	7892      	ldrb	r2, [r2, #2]
    1384:	0792      	lsls	r2, r2, #30
    1386:	d501      	bpl.n	138c <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1388:	2280      	movs	r2, #128	; 0x80
    138a:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    138c:	7ca2      	ldrb	r2, [r4, #18]
    138e:	2a00      	cmp	r2, #0
    1390:	d002      	beq.n	1398 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1392:	2280      	movs	r2, #128	; 0x80
    1394:	0292      	lsls	r2, r2, #10
    1396:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1398:	7ce2      	ldrb	r2, [r4, #19]
    139a:	2a00      	cmp	r2, #0
    139c:	d002      	beq.n	13a4 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    139e:	2280      	movs	r2, #128	; 0x80
    13a0:	0092      	lsls	r2, r2, #2
    13a2:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    13a4:	7d22      	ldrb	r2, [r4, #20]
    13a6:	2a00      	cmp	r2, #0
    13a8:	d002      	beq.n	13b0 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    13aa:	2280      	movs	r2, #128	; 0x80
    13ac:	0192      	lsls	r2, r2, #6
    13ae:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    13b0:	6832      	ldr	r2, [r6, #0]
    13b2:	4313      	orrs	r3, r2
    13b4:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    13b6:	6873      	ldr	r3, [r6, #4]
    13b8:	430b      	orrs	r3, r1
    13ba:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    13bc:	2000      	movs	r0, #0
    13be:	e6dd      	b.n	117c <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13c0:	464b      	mov	r3, r9
    13c2:	6818      	ldr	r0, [r3, #0]
    13c4:	4b0e      	ldr	r3, [pc, #56]	; (1400 <spi_init+0x2a8>)
    13c6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13c8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    13ca:	b2c0      	uxtb	r0, r0
    13cc:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <spi_init+0x2a0>)
    13ce:	4798      	blx	r3
    13d0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    13d2:	ab02      	add	r3, sp, #8
    13d4:	1d9a      	adds	r2, r3, #6
    13d6:	69a0      	ldr	r0, [r4, #24]
    13d8:	4b08      	ldr	r3, [pc, #32]	; (13fc <spi_init+0x2a4>)
    13da:	4798      	blx	r3
    13dc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    13de:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    13e0:	2b00      	cmp	r3, #0
    13e2:	d000      	beq.n	13e6 <spi_init+0x28e>
    13e4:	e6ca      	b.n	117c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    13e6:	ab02      	add	r3, sp, #8
    13e8:	3306      	adds	r3, #6
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	7333      	strb	r3, [r6, #12]
    13ee:	e7be      	b.n	136e <spi_init+0x216>
    13f0:	00000ed9 	.word	0x00000ed9
    13f4:	41004400 	.word	0x41004400
    13f8:	000022d5 	.word	0x000022d5
    13fc:	00000c95 	.word	0x00000c95
    1400:	00001051 	.word	0x00001051
    1404:	40000400 	.word	0x40000400
    1408:	000022b9 	.word	0x000022b9
    140c:	0000222d 	.word	0x0000222d
    1410:	00000e8d 	.word	0x00000e8d
    1414:	000023b1 	.word	0x000023b1
    1418:	41002000 	.word	0x41002000

0000141c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    141c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    141e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1420:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1422:	2c01      	cmp	r4, #1
    1424:	d001      	beq.n	142a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    1426:	0018      	movs	r0, r3
    1428:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    142a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    142c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    142e:	2c00      	cmp	r4, #0
    1430:	d1f9      	bne.n	1426 <spi_select_slave+0xa>
		if (select) {
    1432:	2a00      	cmp	r2, #0
    1434:	d058      	beq.n	14e8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    1436:	784b      	ldrb	r3, [r1, #1]
    1438:	2b00      	cmp	r3, #0
    143a:	d044      	beq.n	14c6 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    143c:	6803      	ldr	r3, [r0, #0]
    143e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1440:	07db      	lsls	r3, r3, #31
    1442:	d410      	bmi.n	1466 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1444:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1446:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1448:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    144a:	2900      	cmp	r1, #0
    144c:	d104      	bne.n	1458 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    144e:	0953      	lsrs	r3, r2, #5
    1450:	01db      	lsls	r3, r3, #7
    1452:	492e      	ldr	r1, [pc, #184]	; (150c <spi_select_slave+0xf0>)
    1454:	468c      	mov	ip, r1
    1456:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1458:	211f      	movs	r1, #31
    145a:	4011      	ands	r1, r2
    145c:	2201      	movs	r2, #1
    145e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1460:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1462:	2305      	movs	r3, #5
    1464:	e7df      	b.n	1426 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    1466:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1468:	09d4      	lsrs	r4, r2, #7
		return NULL;
    146a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    146c:	2c00      	cmp	r4, #0
    146e:	d104      	bne.n	147a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1470:	0953      	lsrs	r3, r2, #5
    1472:	01db      	lsls	r3, r3, #7
    1474:	4c25      	ldr	r4, [pc, #148]	; (150c <spi_select_slave+0xf0>)
    1476:	46a4      	mov	ip, r4
    1478:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    147a:	241f      	movs	r4, #31
    147c:	4014      	ands	r4, r2
    147e:	2201      	movs	r2, #1
    1480:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1482:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1484:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1486:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1488:	07d2      	lsls	r2, r2, #31
    148a:	d501      	bpl.n	1490 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    148c:	788a      	ldrb	r2, [r1, #2]
    148e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1490:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    1492:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    1494:	2a00      	cmp	r2, #0
    1496:	d1c6      	bne.n	1426 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1498:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    149a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    149c:	7e13      	ldrb	r3, [r2, #24]
    149e:	420b      	tst	r3, r1
    14a0:	d0fc      	beq.n	149c <spi_select_slave+0x80>
    14a2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    14a4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    14a6:	0749      	lsls	r1, r1, #29
    14a8:	d5bd      	bpl.n	1426 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14aa:	8b53      	ldrh	r3, [r2, #26]
    14ac:	075b      	lsls	r3, r3, #29
    14ae:	d501      	bpl.n	14b4 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14b0:	2304      	movs	r3, #4
    14b2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14b4:	7983      	ldrb	r3, [r0, #6]
    14b6:	2b01      	cmp	r3, #1
    14b8:	d002      	beq.n	14c0 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14bc:	2300      	movs	r3, #0
    14be:	e7b2      	b.n	1426 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14c2:	2300      	movs	r3, #0
    14c4:	e7af      	b.n	1426 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    14c6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    14c8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    14ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14cc:	2900      	cmp	r1, #0
    14ce:	d104      	bne.n	14da <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    14d0:	0953      	lsrs	r3, r2, #5
    14d2:	01db      	lsls	r3, r3, #7
    14d4:	490d      	ldr	r1, [pc, #52]	; (150c <spi_select_slave+0xf0>)
    14d6:	468c      	mov	ip, r1
    14d8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14da:	211f      	movs	r1, #31
    14dc:	4011      	ands	r1, r2
    14de:	2201      	movs	r2, #1
    14e0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    14e2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    14e4:	2300      	movs	r3, #0
    14e6:	e79e      	b.n	1426 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    14e8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    14ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    14ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14ee:	2900      	cmp	r1, #0
    14f0:	d104      	bne.n	14fc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    14f2:	0953      	lsrs	r3, r2, #5
    14f4:	01db      	lsls	r3, r3, #7
    14f6:	4905      	ldr	r1, [pc, #20]	; (150c <spi_select_slave+0xf0>)
    14f8:	468c      	mov	ip, r1
    14fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14fc:	211f      	movs	r1, #31
    14fe:	4011      	ands	r1, r2
    1500:	2201      	movs	r2, #1
    1502:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1504:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    1506:	2300      	movs	r3, #0
    1508:	e78d      	b.n	1426 <spi_select_slave+0xa>
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	41004400 	.word	0x41004400

00001510 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1510:	b5f0      	push	{r4, r5, r6, r7, lr}
    1512:	46de      	mov	lr, fp
    1514:	4657      	mov	r7, sl
    1516:	464e      	mov	r6, r9
    1518:	4645      	mov	r5, r8
    151a:	b5e0      	push	{r5, r6, r7, lr}
    151c:	b091      	sub	sp, #68	; 0x44
    151e:	0005      	movs	r5, r0
    1520:	000c      	movs	r4, r1
    1522:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1524:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1526:	0008      	movs	r0, r1
    1528:	4bbb      	ldr	r3, [pc, #748]	; (1818 <usart_init+0x308>)
    152a:	4798      	blx	r3
    152c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    152e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1530:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1532:	07db      	lsls	r3, r3, #31
    1534:	d506      	bpl.n	1544 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1536:	b011      	add	sp, #68	; 0x44
    1538:	bc3c      	pop	{r2, r3, r4, r5}
    153a:	4690      	mov	r8, r2
    153c:	4699      	mov	r9, r3
    153e:	46a2      	mov	sl, r4
    1540:	46ab      	mov	fp, r5
    1542:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1544:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1546:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1548:	079b      	lsls	r3, r3, #30
    154a:	d4f4      	bmi.n	1536 <usart_init+0x26>
    154c:	49b3      	ldr	r1, [pc, #716]	; (181c <usart_init+0x30c>)
    154e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1550:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1552:	2301      	movs	r3, #1
    1554:	40bb      	lsls	r3, r7
    1556:	4303      	orrs	r3, r0
    1558:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    155a:	a90f      	add	r1, sp, #60	; 0x3c
    155c:	272d      	movs	r7, #45	; 0x2d
    155e:	5df3      	ldrb	r3, [r6, r7]
    1560:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1562:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1564:	b2d3      	uxtb	r3, r2
    1566:	9302      	str	r3, [sp, #8]
    1568:	0018      	movs	r0, r3
    156a:	4bad      	ldr	r3, [pc, #692]	; (1820 <usart_init+0x310>)
    156c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    156e:	9802      	ldr	r0, [sp, #8]
    1570:	4bac      	ldr	r3, [pc, #688]	; (1824 <usart_init+0x314>)
    1572:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1574:	5df0      	ldrb	r0, [r6, r7]
    1576:	2100      	movs	r1, #0
    1578:	4bab      	ldr	r3, [pc, #684]	; (1828 <usart_init+0x318>)
    157a:	4798      	blx	r3
	module->character_size = config->character_size;
    157c:	7af3      	ldrb	r3, [r6, #11]
    157e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1580:	2324      	movs	r3, #36	; 0x24
    1582:	5cf3      	ldrb	r3, [r6, r3]
    1584:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1586:	2325      	movs	r3, #37	; 0x25
    1588:	5cf3      	ldrb	r3, [r6, r3]
    158a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    158c:	7ef3      	ldrb	r3, [r6, #27]
    158e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1590:	7f33      	ldrb	r3, [r6, #28]
    1592:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1594:	682b      	ldr	r3, [r5, #0]
    1596:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1598:	0018      	movs	r0, r3
    159a:	4b9f      	ldr	r3, [pc, #636]	; (1818 <usart_init+0x308>)
    159c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    159e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    15a0:	2200      	movs	r2, #0
    15a2:	230e      	movs	r3, #14
    15a4:	a906      	add	r1, sp, #24
    15a6:	468c      	mov	ip, r1
    15a8:	4463      	add	r3, ip
    15aa:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    15ac:	8a32      	ldrh	r2, [r6, #16]
    15ae:	9202      	str	r2, [sp, #8]
    15b0:	2380      	movs	r3, #128	; 0x80
    15b2:	01db      	lsls	r3, r3, #7
    15b4:	429a      	cmp	r2, r3
    15b6:	d100      	bne.n	15ba <usart_init+0xaa>
    15b8:	e09c      	b.n	16f4 <usart_init+0x1e4>
    15ba:	d90f      	bls.n	15dc <usart_init+0xcc>
    15bc:	23c0      	movs	r3, #192	; 0xc0
    15be:	01db      	lsls	r3, r3, #7
    15c0:	9a02      	ldr	r2, [sp, #8]
    15c2:	429a      	cmp	r2, r3
    15c4:	d100      	bne.n	15c8 <usart_init+0xb8>
    15c6:	e090      	b.n	16ea <usart_init+0x1da>
    15c8:	2380      	movs	r3, #128	; 0x80
    15ca:	021b      	lsls	r3, r3, #8
    15cc:	429a      	cmp	r2, r3
    15ce:	d000      	beq.n	15d2 <usart_init+0xc2>
    15d0:	e11d      	b.n	180e <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    15d2:	2303      	movs	r3, #3
    15d4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    15d6:	2300      	movs	r3, #0
    15d8:	9307      	str	r3, [sp, #28]
    15da:	e008      	b.n	15ee <usart_init+0xde>
	switch (config->sample_rate) {
    15dc:	2380      	movs	r3, #128	; 0x80
    15de:	019b      	lsls	r3, r3, #6
    15e0:	429a      	cmp	r2, r3
    15e2:	d000      	beq.n	15e6 <usart_init+0xd6>
    15e4:	e113      	b.n	180e <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    15e6:	2310      	movs	r3, #16
    15e8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    15ea:	3b0f      	subs	r3, #15
    15ec:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    15ee:	6833      	ldr	r3, [r6, #0]
    15f0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    15f2:	68f3      	ldr	r3, [r6, #12]
    15f4:	469b      	mov	fp, r3
		config->sample_adjustment |
    15f6:	6973      	ldr	r3, [r6, #20]
    15f8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15fa:	7e33      	ldrb	r3, [r6, #24]
    15fc:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15fe:	2326      	movs	r3, #38	; 0x26
    1600:	5cf3      	ldrb	r3, [r6, r3]
    1602:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1604:	6873      	ldr	r3, [r6, #4]
    1606:	4699      	mov	r9, r3
	switch (transfer_mode)
    1608:	2b00      	cmp	r3, #0
    160a:	d100      	bne.n	160e <usart_init+0xfe>
    160c:	e09e      	b.n	174c <usart_init+0x23c>
    160e:	2380      	movs	r3, #128	; 0x80
    1610:	055b      	lsls	r3, r3, #21
    1612:	4599      	cmp	r9, r3
    1614:	d100      	bne.n	1618 <usart_init+0x108>
    1616:	e082      	b.n	171e <usart_init+0x20e>
	if(config->encoding_format_enable) {
    1618:	7e73      	ldrb	r3, [r6, #25]
    161a:	2b00      	cmp	r3, #0
    161c:	d002      	beq.n	1624 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    161e:	7eb3      	ldrb	r3, [r6, #26]
    1620:	4642      	mov	r2, r8
    1622:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1624:	682a      	ldr	r2, [r5, #0]
    1626:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1628:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    162a:	2b00      	cmp	r3, #0
    162c:	d1fc      	bne.n	1628 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    162e:	330e      	adds	r3, #14
    1630:	aa06      	add	r2, sp, #24
    1632:	4694      	mov	ip, r2
    1634:	4463      	add	r3, ip
    1636:	881b      	ldrh	r3, [r3, #0]
    1638:	4642      	mov	r2, r8
    163a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    163c:	9b05      	ldr	r3, [sp, #20]
    163e:	465a      	mov	r2, fp
    1640:	4313      	orrs	r3, r2
    1642:	9a03      	ldr	r2, [sp, #12]
    1644:	4313      	orrs	r3, r2
    1646:	464a      	mov	r2, r9
    1648:	4313      	orrs	r3, r2
    164a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    164c:	9b04      	ldr	r3, [sp, #16]
    164e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1650:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1652:	4653      	mov	r3, sl
    1654:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1656:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1658:	2327      	movs	r3, #39	; 0x27
    165a:	5cf3      	ldrb	r3, [r6, r3]
    165c:	2b00      	cmp	r3, #0
    165e:	d101      	bne.n	1664 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1660:	3304      	adds	r3, #4
    1662:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1664:	7e73      	ldrb	r3, [r6, #25]
    1666:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1668:	7f32      	ldrb	r2, [r6, #28]
    166a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    166c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    166e:	7f72      	ldrb	r2, [r6, #29]
    1670:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1672:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1674:	2224      	movs	r2, #36	; 0x24
    1676:	5cb2      	ldrb	r2, [r6, r2]
    1678:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    167a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    167c:	2225      	movs	r2, #37	; 0x25
    167e:	5cb2      	ldrb	r2, [r6, r2]
    1680:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1682:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1684:	7af1      	ldrb	r1, [r6, #11]
    1686:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1688:	8933      	ldrh	r3, [r6, #8]
    168a:	2bff      	cmp	r3, #255	; 0xff
    168c:	d100      	bne.n	1690 <usart_init+0x180>
    168e:	e081      	b.n	1794 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1690:	2280      	movs	r2, #128	; 0x80
    1692:	0452      	lsls	r2, r2, #17
    1694:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1696:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1698:	232c      	movs	r3, #44	; 0x2c
    169a:	5cf3      	ldrb	r3, [r6, r3]
    169c:	2b00      	cmp	r3, #0
    169e:	d103      	bne.n	16a8 <usart_init+0x198>
    16a0:	4b62      	ldr	r3, [pc, #392]	; (182c <usart_init+0x31c>)
    16a2:	789b      	ldrb	r3, [r3, #2]
    16a4:	079b      	lsls	r3, r3, #30
    16a6:	d501      	bpl.n	16ac <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    16a8:	2380      	movs	r3, #128	; 0x80
    16aa:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    16ac:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    16ae:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    16b0:	2b00      	cmp	r3, #0
    16b2:	d1fc      	bne.n	16ae <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
    16b4:	4643      	mov	r3, r8
    16b6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    16b8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    16ba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    16bc:	2b00      	cmp	r3, #0
    16be:	d1fc      	bne.n	16ba <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
    16c0:	4643      	mov	r3, r8
    16c2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16c4:	ab0e      	add	r3, sp, #56	; 0x38
    16c6:	2280      	movs	r2, #128	; 0x80
    16c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16ca:	2200      	movs	r2, #0
    16cc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    16ce:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16d0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    16d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    16d4:	930a      	str	r3, [sp, #40]	; 0x28
    16d6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    16d8:	930b      	str	r3, [sp, #44]	; 0x2c
    16da:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    16dc:	930c      	str	r3, [sp, #48]	; 0x30
    16de:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    16e0:	9302      	str	r3, [sp, #8]
    16e2:	930d      	str	r3, [sp, #52]	; 0x34
    16e4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16e6:	ae0a      	add	r6, sp, #40	; 0x28
    16e8:	e063      	b.n	17b2 <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    16ea:	2308      	movs	r3, #8
    16ec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    16ee:	3b07      	subs	r3, #7
    16f0:	9307      	str	r3, [sp, #28]
    16f2:	e77c      	b.n	15ee <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    16f4:	6833      	ldr	r3, [r6, #0]
    16f6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    16f8:	68f3      	ldr	r3, [r6, #12]
    16fa:	469b      	mov	fp, r3
		config->sample_adjustment |
    16fc:	6973      	ldr	r3, [r6, #20]
    16fe:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1700:	7e33      	ldrb	r3, [r6, #24]
    1702:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1704:	2326      	movs	r3, #38	; 0x26
    1706:	5cf3      	ldrb	r3, [r6, r3]
    1708:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    170a:	6873      	ldr	r3, [r6, #4]
    170c:	4699      	mov	r9, r3
	switch (transfer_mode)
    170e:	2b00      	cmp	r3, #0
    1710:	d018      	beq.n	1744 <usart_init+0x234>
    1712:	2380      	movs	r3, #128	; 0x80
    1714:	055b      	lsls	r3, r3, #21
    1716:	4599      	cmp	r9, r3
    1718:	d001      	beq.n	171e <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
    171a:	2000      	movs	r0, #0
    171c:	e025      	b.n	176a <usart_init+0x25a>
			if (!config->use_external_clock) {
    171e:	2327      	movs	r3, #39	; 0x27
    1720:	5cf3      	ldrb	r3, [r6, r3]
    1722:	2b00      	cmp	r3, #0
    1724:	d000      	beq.n	1728 <usart_init+0x218>
    1726:	e777      	b.n	1618 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1728:	6a33      	ldr	r3, [r6, #32]
    172a:	001f      	movs	r7, r3
    172c:	b2c0      	uxtb	r0, r0
    172e:	4b40      	ldr	r3, [pc, #256]	; (1830 <usart_init+0x320>)
    1730:	4798      	blx	r3
    1732:	0001      	movs	r1, r0
    1734:	220e      	movs	r2, #14
    1736:	ab06      	add	r3, sp, #24
    1738:	469c      	mov	ip, r3
    173a:	4462      	add	r2, ip
    173c:	0038      	movs	r0, r7
    173e:	4b3d      	ldr	r3, [pc, #244]	; (1834 <usart_init+0x324>)
    1740:	4798      	blx	r3
    1742:	e012      	b.n	176a <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1744:	2308      	movs	r3, #8
    1746:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1748:	2300      	movs	r3, #0
    174a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    174c:	2327      	movs	r3, #39	; 0x27
    174e:	5cf3      	ldrb	r3, [r6, r3]
    1750:	2b00      	cmp	r3, #0
    1752:	d00e      	beq.n	1772 <usart_init+0x262>
				status_code =
    1754:	9b06      	ldr	r3, [sp, #24]
    1756:	9300      	str	r3, [sp, #0]
    1758:	9b07      	ldr	r3, [sp, #28]
    175a:	220e      	movs	r2, #14
    175c:	a906      	add	r1, sp, #24
    175e:	468c      	mov	ip, r1
    1760:	4462      	add	r2, ip
    1762:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1764:	6a30      	ldr	r0, [r6, #32]
    1766:	4f34      	ldr	r7, [pc, #208]	; (1838 <usart_init+0x328>)
    1768:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    176a:	2800      	cmp	r0, #0
    176c:	d000      	beq.n	1770 <usart_init+0x260>
    176e:	e6e2      	b.n	1536 <usart_init+0x26>
    1770:	e752      	b.n	1618 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1772:	6a33      	ldr	r3, [r6, #32]
    1774:	001f      	movs	r7, r3
    1776:	b2c0      	uxtb	r0, r0
    1778:	4b2d      	ldr	r3, [pc, #180]	; (1830 <usart_init+0x320>)
    177a:	4798      	blx	r3
    177c:	0001      	movs	r1, r0
				status_code =
    177e:	9b06      	ldr	r3, [sp, #24]
    1780:	9300      	str	r3, [sp, #0]
    1782:	9b07      	ldr	r3, [sp, #28]
    1784:	220e      	movs	r2, #14
    1786:	a806      	add	r0, sp, #24
    1788:	4684      	mov	ip, r0
    178a:	4462      	add	r2, ip
    178c:	0038      	movs	r0, r7
    178e:	4f2a      	ldr	r7, [pc, #168]	; (1838 <usart_init+0x328>)
    1790:	47b8      	blx	r7
    1792:	e7ea      	b.n	176a <usart_init+0x25a>
		if(config->lin_slave_enable) {
    1794:	7ef3      	ldrb	r3, [r6, #27]
    1796:	2b00      	cmp	r3, #0
    1798:	d100      	bne.n	179c <usart_init+0x28c>
    179a:	e77d      	b.n	1698 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    179c:	2380      	movs	r3, #128	; 0x80
    179e:	04db      	lsls	r3, r3, #19
    17a0:	431f      	orrs	r7, r3
    17a2:	e779      	b.n	1698 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    17a4:	0020      	movs	r0, r4
    17a6:	4b25      	ldr	r3, [pc, #148]	; (183c <usart_init+0x32c>)
    17a8:	4798      	blx	r3
    17aa:	e007      	b.n	17bc <usart_init+0x2ac>
    17ac:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    17ae:	2f04      	cmp	r7, #4
    17b0:	d00d      	beq.n	17ce <usart_init+0x2be>
    17b2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    17b4:	00bb      	lsls	r3, r7, #2
    17b6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    17b8:	2800      	cmp	r0, #0
    17ba:	d0f3      	beq.n	17a4 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
    17bc:	1c43      	adds	r3, r0, #1
    17be:	d0f5      	beq.n	17ac <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    17c0:	a90e      	add	r1, sp, #56	; 0x38
    17c2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    17c4:	0c00      	lsrs	r0, r0, #16
    17c6:	b2c0      	uxtb	r0, r0
    17c8:	4b1d      	ldr	r3, [pc, #116]	; (1840 <usart_init+0x330>)
    17ca:	4798      	blx	r3
    17cc:	e7ee      	b.n	17ac <usart_init+0x29c>
		module->callback[i]            = NULL;
    17ce:	2300      	movs	r3, #0
    17d0:	60eb      	str	r3, [r5, #12]
    17d2:	612b      	str	r3, [r5, #16]
    17d4:	616b      	str	r3, [r5, #20]
    17d6:	61ab      	str	r3, [r5, #24]
    17d8:	61eb      	str	r3, [r5, #28]
    17da:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    17dc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    17de:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    17e0:	2200      	movs	r2, #0
    17e2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    17e4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    17e6:	3330      	adds	r3, #48	; 0x30
    17e8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    17ea:	3301      	adds	r3, #1
    17ec:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    17ee:	3301      	adds	r3, #1
    17f0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    17f2:	3301      	adds	r3, #1
    17f4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    17f6:	6828      	ldr	r0, [r5, #0]
    17f8:	4b07      	ldr	r3, [pc, #28]	; (1818 <usart_init+0x308>)
    17fa:	4798      	blx	r3
    17fc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    17fe:	4911      	ldr	r1, [pc, #68]	; (1844 <usart_init+0x334>)
    1800:	4b11      	ldr	r3, [pc, #68]	; (1848 <usart_init+0x338>)
    1802:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1804:	00a4      	lsls	r4, r4, #2
    1806:	4b11      	ldr	r3, [pc, #68]	; (184c <usart_init+0x33c>)
    1808:	50e5      	str	r5, [r4, r3]
	return status_code;
    180a:	2000      	movs	r0, #0
    180c:	e693      	b.n	1536 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    180e:	2310      	movs	r3, #16
    1810:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1812:	2300      	movs	r3, #0
    1814:	9307      	str	r3, [sp, #28]
    1816:	e6ea      	b.n	15ee <usart_init+0xde>
    1818:	00001051 	.word	0x00001051
    181c:	40000400 	.word	0x40000400
    1820:	000022b9 	.word	0x000022b9
    1824:	0000222d 	.word	0x0000222d
    1828:	00000e8d 	.word	0x00000e8d
    182c:	41002000 	.word	0x41002000
    1830:	000022d5 	.word	0x000022d5
    1834:	00000c95 	.word	0x00000c95
    1838:	00000cbd 	.word	0x00000cbd
    183c:	00000ed9 	.word	0x00000ed9
    1840:	000023b1 	.word	0x000023b1
    1844:	000019d1 	.word	0x000019d1
    1848:	0000108d 	.word	0x0000108d
    184c:	2000153c 	.word	0x2000153c

00001850 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1850:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1852:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1854:	2a00      	cmp	r2, #0
    1856:	d101      	bne.n	185c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1858:	0018      	movs	r0, r3
    185a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    185c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    185e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1860:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1862:	2a00      	cmp	r2, #0
    1864:	d1f8      	bne.n	1858 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1866:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1868:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    186a:	2a00      	cmp	r2, #0
    186c:	d1fc      	bne.n	1868 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    186e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1870:	2102      	movs	r1, #2
    1872:	7e1a      	ldrb	r2, [r3, #24]
    1874:	420a      	tst	r2, r1
    1876:	d0fc      	beq.n	1872 <usart_write_wait+0x22>
	return STATUS_OK;
    1878:	2300      	movs	r3, #0
    187a:	e7ed      	b.n	1858 <usart_write_wait+0x8>

0000187c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    187c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    187e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1880:	2a00      	cmp	r2, #0
    1882:	d101      	bne.n	1888 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1884:	0018      	movs	r0, r3
    1886:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1888:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    188a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    188c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    188e:	2a00      	cmp	r2, #0
    1890:	d1f8      	bne.n	1884 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1892:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1894:	7e10      	ldrb	r0, [r2, #24]
    1896:	0740      	lsls	r0, r0, #29
    1898:	d5f4      	bpl.n	1884 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    189a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    189c:	2b00      	cmp	r3, #0
    189e:	d1fc      	bne.n	189a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18a0:	8b53      	ldrh	r3, [r2, #26]
    18a2:	b2db      	uxtb	r3, r3
	if (error_code) {
    18a4:	0698      	lsls	r0, r3, #26
    18a6:	d01d      	beq.n	18e4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    18a8:	0798      	lsls	r0, r3, #30
    18aa:	d503      	bpl.n	18b4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    18ac:	2302      	movs	r3, #2
    18ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    18b0:	3318      	adds	r3, #24
    18b2:	e7e7      	b.n	1884 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    18b4:	0758      	lsls	r0, r3, #29
    18b6:	d503      	bpl.n	18c0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    18b8:	2304      	movs	r3, #4
    18ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    18bc:	331a      	adds	r3, #26
    18be:	e7e1      	b.n	1884 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    18c0:	07d8      	lsls	r0, r3, #31
    18c2:	d503      	bpl.n	18cc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    18c4:	2301      	movs	r3, #1
    18c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    18c8:	3312      	adds	r3, #18
    18ca:	e7db      	b.n	1884 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    18cc:	06d8      	lsls	r0, r3, #27
    18ce:	d503      	bpl.n	18d8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    18d0:	2310      	movs	r3, #16
    18d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    18d4:	3332      	adds	r3, #50	; 0x32
    18d6:	e7d5      	b.n	1884 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    18d8:	069b      	lsls	r3, r3, #26
    18da:	d503      	bpl.n	18e4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    18dc:	2320      	movs	r3, #32
    18de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    18e0:	3321      	adds	r3, #33	; 0x21
    18e2:	e7cf      	b.n	1884 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    18e4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    18e6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    18e8:	2300      	movs	r3, #0
    18ea:	e7cb      	b.n	1884 <usart_read_wait+0x8>

000018ec <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    18ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ee:	0006      	movs	r6, r0
    18f0:	000c      	movs	r4, r1
    18f2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18f4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    18f6:	4b0a      	ldr	r3, [pc, #40]	; (1920 <_usart_write_buffer+0x34>)
    18f8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    18fa:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    18fc:	b29b      	uxth	r3, r3
    18fe:	2b00      	cmp	r3, #0
    1900:	d003      	beq.n	190a <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    1902:	4b08      	ldr	r3, [pc, #32]	; (1924 <_usart_write_buffer+0x38>)
    1904:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1906:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    190a:	85f5      	strh	r5, [r6, #46]	; 0x2e
    190c:	4b05      	ldr	r3, [pc, #20]	; (1924 <_usart_write_buffer+0x38>)
    190e:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    1910:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    1912:	2205      	movs	r2, #5
    1914:	2333      	movs	r3, #51	; 0x33
    1916:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    1918:	3b32      	subs	r3, #50	; 0x32
    191a:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    191c:	2000      	movs	r0, #0
    191e:	e7f3      	b.n	1908 <_usart_write_buffer+0x1c>
    1920:	0000099d 	.word	0x0000099d
    1924:	000009dd 	.word	0x000009dd

00001928 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    192a:	0004      	movs	r4, r0
    192c:	000d      	movs	r5, r1
    192e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1930:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1932:	4b0f      	ldr	r3, [pc, #60]	; (1970 <_usart_read_buffer+0x48>)
    1934:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1936:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1938:	b29b      	uxth	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	d003      	beq.n	1946 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    193e:	4b0d      	ldr	r3, [pc, #52]	; (1974 <_usart_read_buffer+0x4c>)
    1940:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1942:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1946:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1948:	4b0a      	ldr	r3, [pc, #40]	; (1974 <_usart_read_buffer+0x4c>)
    194a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    194c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    194e:	2205      	movs	r2, #5
    1950:	2332      	movs	r3, #50	; 0x32
    1952:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1954:	3b2e      	subs	r3, #46	; 0x2e
    1956:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1958:	7a23      	ldrb	r3, [r4, #8]
    195a:	2b00      	cmp	r3, #0
    195c:	d001      	beq.n	1962 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    195e:	2320      	movs	r3, #32
    1960:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1962:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1964:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1966:	2b00      	cmp	r3, #0
    1968:	d0ec      	beq.n	1944 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    196a:	2308      	movs	r3, #8
    196c:	75bb      	strb	r3, [r7, #22]
    196e:	e7e9      	b.n	1944 <_usart_read_buffer+0x1c>
    1970:	0000099d 	.word	0x0000099d
    1974:	000009dd 	.word	0x000009dd

00001978 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1978:	1c93      	adds	r3, r2, #2
    197a:	009b      	lsls	r3, r3, #2
    197c:	18c3      	adds	r3, r0, r3
    197e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1980:	2130      	movs	r1, #48	; 0x30
    1982:	2301      	movs	r3, #1
    1984:	4093      	lsls	r3, r2
    1986:	001a      	movs	r2, r3
    1988:	5c43      	ldrb	r3, [r0, r1]
    198a:	4313      	orrs	r3, r2
    198c:	5443      	strb	r3, [r0, r1]
}
    198e:	4770      	bx	lr

00001990 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1990:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1992:	2317      	movs	r3, #23
	if (length == 0) {
    1994:	2a00      	cmp	r2, #0
    1996:	d101      	bne.n	199c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    1998:	0018      	movs	r0, r3
    199a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    199c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    199e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    19a0:	2c00      	cmp	r4, #0
    19a2:	d0f9      	beq.n	1998 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    19a4:	4b01      	ldr	r3, [pc, #4]	; (19ac <usart_write_buffer_job+0x1c>)
    19a6:	4798      	blx	r3
    19a8:	0003      	movs	r3, r0
    19aa:	e7f5      	b.n	1998 <usart_write_buffer_job+0x8>
    19ac:	000018ed 	.word	0x000018ed

000019b0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    19b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    19b2:	2317      	movs	r3, #23
	if (length == 0) {
    19b4:	2a00      	cmp	r2, #0
    19b6:	d101      	bne.n	19bc <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    19b8:	0018      	movs	r0, r3
    19ba:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    19bc:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    19be:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    19c0:	2c00      	cmp	r4, #0
    19c2:	d0f9      	beq.n	19b8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    19c4:	4b01      	ldr	r3, [pc, #4]	; (19cc <usart_read_buffer_job+0x1c>)
    19c6:	4798      	blx	r3
    19c8:	0003      	movs	r3, r0
    19ca:	e7f5      	b.n	19b8 <usart_read_buffer_job+0x8>
    19cc:	00001929 	.word	0x00001929

000019d0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    19d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    19d2:	0080      	lsls	r0, r0, #2
    19d4:	4b62      	ldr	r3, [pc, #392]	; (1b60 <_usart_interrupt_handler+0x190>)
    19d6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    19d8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    19da:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    19dc:	2b00      	cmp	r3, #0
    19de:	d1fc      	bne.n	19da <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    19e0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    19e2:	7da6      	ldrb	r6, [r4, #22]
    19e4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    19e6:	2330      	movs	r3, #48	; 0x30
    19e8:	5ceb      	ldrb	r3, [r5, r3]
    19ea:	2231      	movs	r2, #49	; 0x31
    19ec:	5caf      	ldrb	r7, [r5, r2]
    19ee:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    19f0:	07f3      	lsls	r3, r6, #31
    19f2:	d522      	bpl.n	1a3a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    19f4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    19f6:	b29b      	uxth	r3, r3
    19f8:	2b00      	cmp	r3, #0
    19fa:	d01c      	beq.n	1a36 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    19fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    19fe:	7813      	ldrb	r3, [r2, #0]
    1a00:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1a02:	1c51      	adds	r1, r2, #1
    1a04:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a06:	7969      	ldrb	r1, [r5, #5]
    1a08:	2901      	cmp	r1, #1
    1a0a:	d00e      	beq.n	1a2a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a0c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1a0e:	05db      	lsls	r3, r3, #23
    1a10:	0ddb      	lsrs	r3, r3, #23
    1a12:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1a14:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1a16:	3b01      	subs	r3, #1
    1a18:	b29b      	uxth	r3, r3
    1a1a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d10c      	bne.n	1a3a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a20:	3301      	adds	r3, #1
    1a22:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1a24:	3301      	adds	r3, #1
    1a26:	75a3      	strb	r3, [r4, #22]
    1a28:	e007      	b.n	1a3a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1a2a:	7851      	ldrb	r1, [r2, #1]
    1a2c:	0209      	lsls	r1, r1, #8
    1a2e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1a30:	3202      	adds	r2, #2
    1a32:	62aa      	str	r2, [r5, #40]	; 0x28
    1a34:	e7eb      	b.n	1a0e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1a36:	2301      	movs	r3, #1
    1a38:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1a3a:	07b3      	lsls	r3, r6, #30
    1a3c:	d506      	bpl.n	1a4c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1a3e:	2302      	movs	r3, #2
    1a40:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1a42:	2200      	movs	r2, #0
    1a44:	3331      	adds	r3, #49	; 0x31
    1a46:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1a48:	07fb      	lsls	r3, r7, #31
    1a4a:	d41a      	bmi.n	1a82 <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1a4c:	0773      	lsls	r3, r6, #29
    1a4e:	d565      	bpl.n	1b1c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1a50:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a52:	b29b      	uxth	r3, r3
    1a54:	2b00      	cmp	r3, #0
    1a56:	d05f      	beq.n	1b18 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a58:	8b63      	ldrh	r3, [r4, #26]
    1a5a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1a5c:	071a      	lsls	r2, r3, #28
    1a5e:	d414      	bmi.n	1a8a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a60:	223f      	movs	r2, #63	; 0x3f
    1a62:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1a64:	2b00      	cmp	r3, #0
    1a66:	d034      	beq.n	1ad2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1a68:	079a      	lsls	r2, r3, #30
    1a6a:	d511      	bpl.n	1a90 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1a6c:	221a      	movs	r2, #26
    1a6e:	2332      	movs	r3, #50	; 0x32
    1a70:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1a72:	3b30      	subs	r3, #48	; 0x30
    1a74:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1a76:	077b      	lsls	r3, r7, #29
    1a78:	d550      	bpl.n	1b1c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1a7a:	0028      	movs	r0, r5
    1a7c:	696b      	ldr	r3, [r5, #20]
    1a7e:	4798      	blx	r3
    1a80:	e04c      	b.n	1b1c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1a82:	0028      	movs	r0, r5
    1a84:	68eb      	ldr	r3, [r5, #12]
    1a86:	4798      	blx	r3
    1a88:	e7e0      	b.n	1a4c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1a8a:	2237      	movs	r2, #55	; 0x37
    1a8c:	4013      	ands	r3, r2
    1a8e:	e7e9      	b.n	1a64 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1a90:	075a      	lsls	r2, r3, #29
    1a92:	d505      	bpl.n	1aa0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1a94:	221e      	movs	r2, #30
    1a96:	2332      	movs	r3, #50	; 0x32
    1a98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1a9a:	3b2e      	subs	r3, #46	; 0x2e
    1a9c:	8363      	strh	r3, [r4, #26]
    1a9e:	e7ea      	b.n	1a76 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1aa0:	07da      	lsls	r2, r3, #31
    1aa2:	d505      	bpl.n	1ab0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1aa4:	2213      	movs	r2, #19
    1aa6:	2332      	movs	r3, #50	; 0x32
    1aa8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1aaa:	3b31      	subs	r3, #49	; 0x31
    1aac:	8363      	strh	r3, [r4, #26]
    1aae:	e7e2      	b.n	1a76 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1ab0:	06da      	lsls	r2, r3, #27
    1ab2:	d505      	bpl.n	1ac0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1ab4:	2242      	movs	r2, #66	; 0x42
    1ab6:	2332      	movs	r3, #50	; 0x32
    1ab8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1aba:	3b22      	subs	r3, #34	; 0x22
    1abc:	8363      	strh	r3, [r4, #26]
    1abe:	e7da      	b.n	1a76 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1ac0:	2220      	movs	r2, #32
    1ac2:	421a      	tst	r2, r3
    1ac4:	d0d7      	beq.n	1a76 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1ac6:	3221      	adds	r2, #33	; 0x21
    1ac8:	2332      	movs	r3, #50	; 0x32
    1aca:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1acc:	3b12      	subs	r3, #18
    1ace:	8363      	strh	r3, [r4, #26]
    1ad0:	e7d1      	b.n	1a76 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1ad2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1ad4:	05db      	lsls	r3, r3, #23
    1ad6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1ad8:	b2da      	uxtb	r2, r3
    1ada:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1adc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1ade:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1ae0:	1c51      	adds	r1, r2, #1
    1ae2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1ae4:	7969      	ldrb	r1, [r5, #5]
    1ae6:	2901      	cmp	r1, #1
    1ae8:	d010      	beq.n	1b0c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1aea:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1aec:	3b01      	subs	r3, #1
    1aee:	b29b      	uxth	r3, r3
    1af0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1af2:	2b00      	cmp	r3, #0
    1af4:	d112      	bne.n	1b1c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1af6:	3304      	adds	r3, #4
    1af8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1afa:	2200      	movs	r2, #0
    1afc:	332e      	adds	r3, #46	; 0x2e
    1afe:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1b00:	07bb      	lsls	r3, r7, #30
    1b02:	d50b      	bpl.n	1b1c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1b04:	0028      	movs	r0, r5
    1b06:	692b      	ldr	r3, [r5, #16]
    1b08:	4798      	blx	r3
    1b0a:	e007      	b.n	1b1c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1b0c:	0a1b      	lsrs	r3, r3, #8
    1b0e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1b10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1b12:	3301      	adds	r3, #1
    1b14:	626b      	str	r3, [r5, #36]	; 0x24
    1b16:	e7e8      	b.n	1aea <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1b18:	2304      	movs	r3, #4
    1b1a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1b1c:	06f3      	lsls	r3, r6, #27
    1b1e:	d504      	bpl.n	1b2a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1b20:	2310      	movs	r3, #16
    1b22:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1b24:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1b26:	06fb      	lsls	r3, r7, #27
    1b28:	d40e      	bmi.n	1b48 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1b2a:	06b3      	lsls	r3, r6, #26
    1b2c:	d504      	bpl.n	1b38 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1b2e:	2320      	movs	r3, #32
    1b30:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1b32:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1b34:	073b      	lsls	r3, r7, #28
    1b36:	d40b      	bmi.n	1b50 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1b38:	0733      	lsls	r3, r6, #28
    1b3a:	d504      	bpl.n	1b46 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1b3c:	2308      	movs	r3, #8
    1b3e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1b40:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1b42:	06bb      	lsls	r3, r7, #26
    1b44:	d408      	bmi.n	1b58 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1b48:	0028      	movs	r0, r5
    1b4a:	69eb      	ldr	r3, [r5, #28]
    1b4c:	4798      	blx	r3
    1b4e:	e7ec      	b.n	1b2a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1b50:	0028      	movs	r0, r5
    1b52:	69ab      	ldr	r3, [r5, #24]
    1b54:	4798      	blx	r3
    1b56:	e7ef      	b.n	1b38 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1b58:	6a2b      	ldr	r3, [r5, #32]
    1b5a:	0028      	movs	r0, r5
    1b5c:	4798      	blx	r3
}
    1b5e:	e7f2      	b.n	1b46 <_usart_interrupt_handler+0x176>
    1b60:	2000153c 	.word	0x2000153c

00001b64 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b64:	b510      	push	{r4, lr}
	switch (clock_source) {
    1b66:	2808      	cmp	r0, #8
    1b68:	d803      	bhi.n	1b72 <system_clock_source_get_hz+0xe>
    1b6a:	0080      	lsls	r0, r0, #2
    1b6c:	4b1b      	ldr	r3, [pc, #108]	; (1bdc <system_clock_source_get_hz+0x78>)
    1b6e:	581b      	ldr	r3, [r3, r0]
    1b70:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1b72:	2000      	movs	r0, #0
    1b74:	e030      	b.n	1bd8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1b76:	4b1a      	ldr	r3, [pc, #104]	; (1be0 <system_clock_source_get_hz+0x7c>)
    1b78:	6918      	ldr	r0, [r3, #16]
    1b7a:	e02d      	b.n	1bd8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1b7c:	4b19      	ldr	r3, [pc, #100]	; (1be4 <system_clock_source_get_hz+0x80>)
    1b7e:	6a1b      	ldr	r3, [r3, #32]
    1b80:	059b      	lsls	r3, r3, #22
    1b82:	0f9b      	lsrs	r3, r3, #30
    1b84:	4818      	ldr	r0, [pc, #96]	; (1be8 <system_clock_source_get_hz+0x84>)
    1b86:	40d8      	lsrs	r0, r3
    1b88:	e026      	b.n	1bd8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1b8a:	4b15      	ldr	r3, [pc, #84]	; (1be0 <system_clock_source_get_hz+0x7c>)
    1b8c:	6958      	ldr	r0, [r3, #20]
    1b8e:	e023      	b.n	1bd8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b90:	4b13      	ldr	r3, [pc, #76]	; (1be0 <system_clock_source_get_hz+0x7c>)
    1b92:	681b      	ldr	r3, [r3, #0]
			return 0;
    1b94:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b96:	079b      	lsls	r3, r3, #30
    1b98:	d51e      	bpl.n	1bd8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b9a:	4912      	ldr	r1, [pc, #72]	; (1be4 <system_clock_source_get_hz+0x80>)
    1b9c:	2210      	movs	r2, #16
    1b9e:	68cb      	ldr	r3, [r1, #12]
    1ba0:	421a      	tst	r2, r3
    1ba2:	d0fc      	beq.n	1b9e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1ba4:	4b0e      	ldr	r3, [pc, #56]	; (1be0 <system_clock_source_get_hz+0x7c>)
    1ba6:	681b      	ldr	r3, [r3, #0]
    1ba8:	075b      	lsls	r3, r3, #29
    1baa:	d401      	bmi.n	1bb0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1bac:	480f      	ldr	r0, [pc, #60]	; (1bec <system_clock_source_get_hz+0x88>)
    1bae:	e013      	b.n	1bd8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1bb0:	2000      	movs	r0, #0
    1bb2:	4b0f      	ldr	r3, [pc, #60]	; (1bf0 <system_clock_source_get_hz+0x8c>)
    1bb4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1bb6:	4b0a      	ldr	r3, [pc, #40]	; (1be0 <system_clock_source_get_hz+0x7c>)
    1bb8:	689b      	ldr	r3, [r3, #8]
    1bba:	041b      	lsls	r3, r3, #16
    1bbc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1bbe:	4358      	muls	r0, r3
    1bc0:	e00a      	b.n	1bd8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1bc2:	2350      	movs	r3, #80	; 0x50
    1bc4:	4a07      	ldr	r2, [pc, #28]	; (1be4 <system_clock_source_get_hz+0x80>)
    1bc6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1bc8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1bca:	075b      	lsls	r3, r3, #29
    1bcc:	d504      	bpl.n	1bd8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1bce:	4b04      	ldr	r3, [pc, #16]	; (1be0 <system_clock_source_get_hz+0x7c>)
    1bd0:	68d8      	ldr	r0, [r3, #12]
    1bd2:	e001      	b.n	1bd8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    1bd4:	2080      	movs	r0, #128	; 0x80
    1bd6:	0200      	lsls	r0, r0, #8
	}
}
    1bd8:	bd10      	pop	{r4, pc}
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	00008b40 	.word	0x00008b40
    1be0:	20000220 	.word	0x20000220
    1be4:	40000800 	.word	0x40000800
    1be8:	007a1200 	.word	0x007a1200
    1bec:	02dc6c00 	.word	0x02dc6c00
    1bf0:	000022d5 	.word	0x000022d5

00001bf4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1bf4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1bf6:	490c      	ldr	r1, [pc, #48]	; (1c28 <system_clock_source_osc8m_set_config+0x34>)
    1bf8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1bfa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1bfc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1bfe:	7840      	ldrb	r0, [r0, #1]
    1c00:	2201      	movs	r2, #1
    1c02:	4010      	ands	r0, r2
    1c04:	0180      	lsls	r0, r0, #6
    1c06:	2640      	movs	r6, #64	; 0x40
    1c08:	43b3      	bics	r3, r6
    1c0a:	4303      	orrs	r3, r0
    1c0c:	402a      	ands	r2, r5
    1c0e:	01d2      	lsls	r2, r2, #7
    1c10:	2080      	movs	r0, #128	; 0x80
    1c12:	4383      	bics	r3, r0
    1c14:	4313      	orrs	r3, r2
    1c16:	2203      	movs	r2, #3
    1c18:	4022      	ands	r2, r4
    1c1a:	0212      	lsls	r2, r2, #8
    1c1c:	4803      	ldr	r0, [pc, #12]	; (1c2c <system_clock_source_osc8m_set_config+0x38>)
    1c1e:	4003      	ands	r3, r0
    1c20:	4313      	orrs	r3, r2
    1c22:	620b      	str	r3, [r1, #32]
}
    1c24:	bd70      	pop	{r4, r5, r6, pc}
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	40000800 	.word	0x40000800
    1c2c:	fffffcff 	.word	0xfffffcff

00001c30 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c32:	46ce      	mov	lr, r9
    1c34:	4647      	mov	r7, r8
    1c36:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1c38:	4b19      	ldr	r3, [pc, #100]	; (1ca0 <system_clock_source_osc32k_set_config+0x70>)
    1c3a:	4699      	mov	r9, r3
    1c3c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1c3e:	7841      	ldrb	r1, [r0, #1]
    1c40:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1c42:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1c44:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c46:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    1c48:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1c4a:	7880      	ldrb	r0, [r0, #2]
    1c4c:	2101      	movs	r1, #1
    1c4e:	4008      	ands	r0, r1
    1c50:	0080      	lsls	r0, r0, #2
    1c52:	2204      	movs	r2, #4
    1c54:	4393      	bics	r3, r2
    1c56:	4303      	orrs	r3, r0
    1c58:	4660      	mov	r0, ip
    1c5a:	4008      	ands	r0, r1
    1c5c:	00c0      	lsls	r0, r0, #3
    1c5e:	3204      	adds	r2, #4
    1c60:	4393      	bics	r3, r2
    1c62:	4303      	orrs	r3, r0
    1c64:	0038      	movs	r0, r7
    1c66:	4008      	ands	r0, r1
    1c68:	0180      	lsls	r0, r0, #6
    1c6a:	2740      	movs	r7, #64	; 0x40
    1c6c:	43bb      	bics	r3, r7
    1c6e:	4303      	orrs	r3, r0
    1c70:	0030      	movs	r0, r6
    1c72:	4008      	ands	r0, r1
    1c74:	01c0      	lsls	r0, r0, #7
    1c76:	2680      	movs	r6, #128	; 0x80
    1c78:	43b3      	bics	r3, r6
    1c7a:	4303      	orrs	r3, r0
    1c7c:	2007      	movs	r0, #7
    1c7e:	4005      	ands	r5, r0
    1c80:	022d      	lsls	r5, r5, #8
    1c82:	4808      	ldr	r0, [pc, #32]	; (1ca4 <system_clock_source_osc32k_set_config+0x74>)
    1c84:	4003      	ands	r3, r0
    1c86:	432b      	orrs	r3, r5
    1c88:	4021      	ands	r1, r4
    1c8a:	0309      	lsls	r1, r1, #12
    1c8c:	4806      	ldr	r0, [pc, #24]	; (1ca8 <system_clock_source_osc32k_set_config+0x78>)
    1c8e:	4003      	ands	r3, r0
    1c90:	430b      	orrs	r3, r1
    1c92:	464a      	mov	r2, r9
    1c94:	6193      	str	r3, [r2, #24]
}
    1c96:	bc0c      	pop	{r2, r3}
    1c98:	4690      	mov	r8, r2
    1c9a:	4699      	mov	r9, r3
    1c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	40000800 	.word	0x40000800
    1ca4:	fffff8ff 	.word	0xfffff8ff
    1ca8:	ffffefff 	.word	0xffffefff

00001cac <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cae:	46de      	mov	lr, fp
    1cb0:	4657      	mov	r7, sl
    1cb2:	464e      	mov	r6, r9
    1cb4:	4645      	mov	r5, r8
    1cb6:	b5e0      	push	{r5, r6, r7, lr}
    1cb8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1cba:	4b26      	ldr	r3, [pc, #152]	; (1d54 <system_clock_source_xosc32k_set_config+0xa8>)
    1cbc:	469b      	mov	fp, r3
    1cbe:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1cc0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1cc2:	7800      	ldrb	r0, [r0, #0]
    1cc4:	4242      	negs	r2, r0
    1cc6:	4142      	adcs	r2, r0
    1cc8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1cca:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1ccc:	78ca      	ldrb	r2, [r1, #3]
    1cce:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1cd0:	790a      	ldrb	r2, [r1, #4]
    1cd2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1cd4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1cd6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1cd8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1cda:	688a      	ldr	r2, [r1, #8]
    1cdc:	491e      	ldr	r1, [pc, #120]	; (1d58 <system_clock_source_xosc32k_set_config+0xac>)
    1cde:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1ce0:	2101      	movs	r1, #1
    1ce2:	464a      	mov	r2, r9
    1ce4:	0092      	lsls	r2, r2, #2
    1ce6:	4691      	mov	r9, r2
    1ce8:	2204      	movs	r2, #4
    1cea:	4393      	bics	r3, r2
    1cec:	464a      	mov	r2, r9
    1cee:	4313      	orrs	r3, r2
    1cf0:	4642      	mov	r2, r8
    1cf2:	400a      	ands	r2, r1
    1cf4:	00d2      	lsls	r2, r2, #3
    1cf6:	4690      	mov	r8, r2
    1cf8:	2208      	movs	r2, #8
    1cfa:	4393      	bics	r3, r2
    1cfc:	4642      	mov	r2, r8
    1cfe:	4313      	orrs	r3, r2
    1d00:	4662      	mov	r2, ip
    1d02:	400a      	ands	r2, r1
    1d04:	0112      	lsls	r2, r2, #4
    1d06:	4694      	mov	ip, r2
    1d08:	2210      	movs	r2, #16
    1d0a:	4393      	bics	r3, r2
    1d0c:	4662      	mov	r2, ip
    1d0e:	4313      	orrs	r3, r2
    1d10:	4008      	ands	r0, r1
    1d12:	0140      	lsls	r0, r0, #5
    1d14:	2220      	movs	r2, #32
    1d16:	4393      	bics	r3, r2
    1d18:	4303      	orrs	r3, r0
    1d1a:	400f      	ands	r7, r1
    1d1c:	01bf      	lsls	r7, r7, #6
    1d1e:	2040      	movs	r0, #64	; 0x40
    1d20:	4383      	bics	r3, r0
    1d22:	433b      	orrs	r3, r7
    1d24:	400e      	ands	r6, r1
    1d26:	01f6      	lsls	r6, r6, #7
    1d28:	3040      	adds	r0, #64	; 0x40
    1d2a:	4383      	bics	r3, r0
    1d2c:	4333      	orrs	r3, r6
    1d2e:	3879      	subs	r0, #121	; 0x79
    1d30:	4005      	ands	r5, r0
    1d32:	022d      	lsls	r5, r5, #8
    1d34:	4809      	ldr	r0, [pc, #36]	; (1d5c <system_clock_source_xosc32k_set_config+0xb0>)
    1d36:	4003      	ands	r3, r0
    1d38:	432b      	orrs	r3, r5
    1d3a:	4021      	ands	r1, r4
    1d3c:	0309      	lsls	r1, r1, #12
    1d3e:	4808      	ldr	r0, [pc, #32]	; (1d60 <system_clock_source_xosc32k_set_config+0xb4>)
    1d40:	4003      	ands	r3, r0
    1d42:	430b      	orrs	r3, r1
    1d44:	465a      	mov	r2, fp
    1d46:	8293      	strh	r3, [r2, #20]
}
    1d48:	bc3c      	pop	{r2, r3, r4, r5}
    1d4a:	4690      	mov	r8, r2
    1d4c:	4699      	mov	r9, r3
    1d4e:	46a2      	mov	sl, r4
    1d50:	46ab      	mov	fp, r5
    1d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d54:	40000800 	.word	0x40000800
    1d58:	20000220 	.word	0x20000220
    1d5c:	fffff8ff 	.word	0xfffff8ff
    1d60:	ffffefff 	.word	0xffffefff

00001d64 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1d64:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1d66:	7a03      	ldrb	r3, [r0, #8]
    1d68:	069b      	lsls	r3, r3, #26
    1d6a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1d6c:	8942      	ldrh	r2, [r0, #10]
    1d6e:	0592      	lsls	r2, r2, #22
    1d70:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1d72:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1d74:	4918      	ldr	r1, [pc, #96]	; (1dd8 <system_clock_source_dfll_set_config+0x74>)
    1d76:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1d78:	7983      	ldrb	r3, [r0, #6]
    1d7a:	79c2      	ldrb	r2, [r0, #7]
    1d7c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1d7e:	8842      	ldrh	r2, [r0, #2]
    1d80:	8884      	ldrh	r4, [r0, #4]
    1d82:	4322      	orrs	r2, r4
    1d84:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1d86:	7842      	ldrb	r2, [r0, #1]
    1d88:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1d8a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1d8c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1d8e:	7803      	ldrb	r3, [r0, #0]
    1d90:	2b04      	cmp	r3, #4
    1d92:	d011      	beq.n	1db8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1d94:	2b20      	cmp	r3, #32
    1d96:	d10e      	bne.n	1db6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1d98:	7b03      	ldrb	r3, [r0, #12]
    1d9a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1d9c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1d9e:	4313      	orrs	r3, r2
    1da0:	89c2      	ldrh	r2, [r0, #14]
    1da2:	0412      	lsls	r2, r2, #16
    1da4:	490d      	ldr	r1, [pc, #52]	; (1ddc <system_clock_source_dfll_set_config+0x78>)
    1da6:	400a      	ands	r2, r1
    1da8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1daa:	4a0b      	ldr	r2, [pc, #44]	; (1dd8 <system_clock_source_dfll_set_config+0x74>)
    1dac:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1dae:	6811      	ldr	r1, [r2, #0]
    1db0:	4b0b      	ldr	r3, [pc, #44]	; (1de0 <system_clock_source_dfll_set_config+0x7c>)
    1db2:	430b      	orrs	r3, r1
    1db4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1db6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1db8:	7b03      	ldrb	r3, [r0, #12]
    1dba:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1dbc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1dbe:	4313      	orrs	r3, r2
    1dc0:	89c2      	ldrh	r2, [r0, #14]
    1dc2:	0412      	lsls	r2, r2, #16
    1dc4:	4905      	ldr	r1, [pc, #20]	; (1ddc <system_clock_source_dfll_set_config+0x78>)
    1dc6:	400a      	ands	r2, r1
    1dc8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1dca:	4a03      	ldr	r2, [pc, #12]	; (1dd8 <system_clock_source_dfll_set_config+0x74>)
    1dcc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1dce:	6813      	ldr	r3, [r2, #0]
    1dd0:	2104      	movs	r1, #4
    1dd2:	430b      	orrs	r3, r1
    1dd4:	6013      	str	r3, [r2, #0]
    1dd6:	e7ee      	b.n	1db6 <system_clock_source_dfll_set_config+0x52>
    1dd8:	20000220 	.word	0x20000220
    1ddc:	03ff0000 	.word	0x03ff0000
    1de0:	00000424 	.word	0x00000424

00001de4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1de4:	2808      	cmp	r0, #8
    1de6:	d803      	bhi.n	1df0 <system_clock_source_enable+0xc>
    1de8:	0080      	lsls	r0, r0, #2
    1dea:	4b25      	ldr	r3, [pc, #148]	; (1e80 <system_clock_source_enable+0x9c>)
    1dec:	581b      	ldr	r3, [r3, r0]
    1dee:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1df0:	2017      	movs	r0, #23
    1df2:	e044      	b.n	1e7e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1df4:	4a23      	ldr	r2, [pc, #140]	; (1e84 <system_clock_source_enable+0xa0>)
    1df6:	6a13      	ldr	r3, [r2, #32]
    1df8:	2102      	movs	r1, #2
    1dfa:	430b      	orrs	r3, r1
    1dfc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1dfe:	2000      	movs	r0, #0
    1e00:	e03d      	b.n	1e7e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1e02:	4a20      	ldr	r2, [pc, #128]	; (1e84 <system_clock_source_enable+0xa0>)
    1e04:	6993      	ldr	r3, [r2, #24]
    1e06:	2102      	movs	r1, #2
    1e08:	430b      	orrs	r3, r1
    1e0a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1e0c:	2000      	movs	r0, #0
		break;
    1e0e:	e036      	b.n	1e7e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1e10:	4a1c      	ldr	r2, [pc, #112]	; (1e84 <system_clock_source_enable+0xa0>)
    1e12:	8a13      	ldrh	r3, [r2, #16]
    1e14:	2102      	movs	r1, #2
    1e16:	430b      	orrs	r3, r1
    1e18:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1e1a:	2000      	movs	r0, #0
		break;
    1e1c:	e02f      	b.n	1e7e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1e1e:	4a19      	ldr	r2, [pc, #100]	; (1e84 <system_clock_source_enable+0xa0>)
    1e20:	8a93      	ldrh	r3, [r2, #20]
    1e22:	2102      	movs	r1, #2
    1e24:	430b      	orrs	r3, r1
    1e26:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1e28:	2000      	movs	r0, #0
		break;
    1e2a:	e028      	b.n	1e7e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1e2c:	4916      	ldr	r1, [pc, #88]	; (1e88 <system_clock_source_enable+0xa4>)
    1e2e:	680b      	ldr	r3, [r1, #0]
    1e30:	2202      	movs	r2, #2
    1e32:	4313      	orrs	r3, r2
    1e34:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1e36:	4b13      	ldr	r3, [pc, #76]	; (1e84 <system_clock_source_enable+0xa0>)
    1e38:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e3a:	0019      	movs	r1, r3
    1e3c:	320e      	adds	r2, #14
    1e3e:	68cb      	ldr	r3, [r1, #12]
    1e40:	421a      	tst	r2, r3
    1e42:	d0fc      	beq.n	1e3e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1e44:	4a10      	ldr	r2, [pc, #64]	; (1e88 <system_clock_source_enable+0xa4>)
    1e46:	6891      	ldr	r1, [r2, #8]
    1e48:	4b0e      	ldr	r3, [pc, #56]	; (1e84 <system_clock_source_enable+0xa0>)
    1e4a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1e4c:	6852      	ldr	r2, [r2, #4]
    1e4e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1e50:	2200      	movs	r2, #0
    1e52:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e54:	0019      	movs	r1, r3
    1e56:	3210      	adds	r2, #16
    1e58:	68cb      	ldr	r3, [r1, #12]
    1e5a:	421a      	tst	r2, r3
    1e5c:	d0fc      	beq.n	1e58 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1e5e:	4b0a      	ldr	r3, [pc, #40]	; (1e88 <system_clock_source_enable+0xa4>)
    1e60:	681b      	ldr	r3, [r3, #0]
    1e62:	b29b      	uxth	r3, r3
    1e64:	4a07      	ldr	r2, [pc, #28]	; (1e84 <system_clock_source_enable+0xa0>)
    1e66:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1e68:	2000      	movs	r0, #0
    1e6a:	e008      	b.n	1e7e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1e6c:	4905      	ldr	r1, [pc, #20]	; (1e84 <system_clock_source_enable+0xa0>)
    1e6e:	2244      	movs	r2, #68	; 0x44
    1e70:	5c8b      	ldrb	r3, [r1, r2]
    1e72:	2002      	movs	r0, #2
    1e74:	4303      	orrs	r3, r0
    1e76:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1e78:	2000      	movs	r0, #0
		break;
    1e7a:	e000      	b.n	1e7e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1e7c:	2000      	movs	r0, #0
}
    1e7e:	4770      	bx	lr
    1e80:	00008b64 	.word	0x00008b64
    1e84:	40000800 	.word	0x40000800
    1e88:	20000220 	.word	0x20000220

00001e8c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e8e:	46d6      	mov	lr, sl
    1e90:	464f      	mov	r7, r9
    1e92:	4646      	mov	r6, r8
    1e94:	b5c0      	push	{r6, r7, lr}
    1e96:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1e98:	22c2      	movs	r2, #194	; 0xc2
    1e9a:	00d2      	lsls	r2, r2, #3
    1e9c:	4b69      	ldr	r3, [pc, #420]	; (2044 <STACK_SIZE+0x44>)
    1e9e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ea0:	4a69      	ldr	r2, [pc, #420]	; (2048 <STACK_SIZE+0x48>)
    1ea2:	6853      	ldr	r3, [r2, #4]
    1ea4:	211e      	movs	r1, #30
    1ea6:	438b      	bics	r3, r1
    1ea8:	391a      	subs	r1, #26
    1eaa:	430b      	orrs	r3, r1
    1eac:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
    1eae:	2205      	movs	r2, #5
    1eb0:	ab01      	add	r3, sp, #4
    1eb2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1eb4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1eb6:	4d65      	ldr	r5, [pc, #404]	; (204c <STACK_SIZE+0x4c>)
    1eb8:	b2e0      	uxtb	r0, r4
    1eba:	a901      	add	r1, sp, #4
    1ebc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ebe:	3401      	adds	r4, #1
    1ec0:	2c25      	cmp	r4, #37	; 0x25
    1ec2:	d1f9      	bne.n	1eb8 <system_clock_init+0x2c>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1ec4:	a80c      	add	r0, sp, #48	; 0x30
    1ec6:	2300      	movs	r3, #0
    1ec8:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1eca:	2280      	movs	r2, #128	; 0x80
    1ecc:	0212      	lsls	r2, r2, #8
    1ece:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1ed0:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1ed2:	2201      	movs	r2, #1
    1ed4:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1ed6:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1ed8:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1eda:	2106      	movs	r1, #6
    1edc:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1ede:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1ee0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1ee2:	4b5b      	ldr	r3, [pc, #364]	; (2050 <STACK_SIZE+0x50>)
    1ee4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1ee6:	2005      	movs	r0, #5
    1ee8:	4b5a      	ldr	r3, [pc, #360]	; (2054 <STACK_SIZE+0x54>)
    1eea:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1eec:	4955      	ldr	r1, [pc, #340]	; (2044 <STACK_SIZE+0x44>)
    1eee:	2202      	movs	r2, #2
    1ef0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1ef2:	421a      	tst	r2, r3
    1ef4:	d0fc      	beq.n	1ef0 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1ef6:	4953      	ldr	r1, [pc, #332]	; (2044 <STACK_SIZE+0x44>)
    1ef8:	8a8b      	ldrh	r3, [r1, #20]
    1efa:	2280      	movs	r2, #128	; 0x80
    1efc:	4313      	orrs	r3, r2
    1efe:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1f00:	4c55      	ldr	r4, [pc, #340]	; (2058 <STACK_SIZE+0x58>)
	SYSCTRL->OSC32K.bit.CALIB =
    1f02:	6823      	ldr	r3, [r4, #0]
    1f04:	04db      	lsls	r3, r3, #19
    1f06:	698a      	ldr	r2, [r1, #24]
    1f08:	0e5b      	lsrs	r3, r3, #25
    1f0a:	041b      	lsls	r3, r3, #16
    1f0c:	4853      	ldr	r0, [pc, #332]	; (205c <STACK_SIZE+0x5c>)
    1f0e:	4002      	ands	r2, r0
    1f10:	4313      	orrs	r3, r2
    1f12:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1f14:	a80a      	add	r0, sp, #40	; 0x28
    1f16:	2301      	movs	r3, #1
    1f18:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1f1a:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1f1c:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1f1e:	2207      	movs	r2, #7
    1f20:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1f22:	2500      	movs	r5, #0
    1f24:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1f26:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1f28:	4b4d      	ldr	r3, [pc, #308]	; (2060 <STACK_SIZE+0x60>)
    1f2a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1f2c:	2004      	movs	r0, #4
    1f2e:	4b49      	ldr	r3, [pc, #292]	; (2054 <STACK_SIZE+0x54>)
    1f30:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1f32:	ab05      	add	r3, sp, #20
    1f34:	2200      	movs	r2, #0
    1f36:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1f38:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1f3a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1f3c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1f3e:	213f      	movs	r1, #63	; 0x3f
    1f40:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1f42:	393b      	subs	r1, #59	; 0x3b
    1f44:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1f46:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1f48:	6823      	ldr	r3, [r4, #0]
    1f4a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1f4c:	2b3f      	cmp	r3, #63	; 0x3f
    1f4e:	d100      	bne.n	1f52 <system_clock_init+0xc6>
    1f50:	e075      	b.n	203e <STACK_SIZE+0x3e>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1f52:	a805      	add	r0, sp, #20
    1f54:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1f56:	23b7      	movs	r3, #183	; 0xb7
    1f58:	00db      	lsls	r3, r3, #3
    1f5a:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1f5c:	2307      	movs	r3, #7
    1f5e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1f60:	3338      	adds	r3, #56	; 0x38
    1f62:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1f64:	4b3f      	ldr	r3, [pc, #252]	; (2064 <STACK_SIZE+0x64>)
    1f66:	4798      	blx	r3
	config->run_in_standby  = false;
    1f68:	a804      	add	r0, sp, #16
    1f6a:	2500      	movs	r5, #0
    1f6c:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1f6e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1f70:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1f72:	4b3d      	ldr	r3, [pc, #244]	; (2068 <STACK_SIZE+0x68>)
    1f74:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1f76:	2006      	movs	r0, #6
    1f78:	4b36      	ldr	r3, [pc, #216]	; (2054 <STACK_SIZE+0x54>)
    1f7a:	4699      	mov	r9, r3
    1f7c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1f7e:	4b3b      	ldr	r3, [pc, #236]	; (206c <STACK_SIZE+0x6c>)
    1f80:	4798      	blx	r3
	config->division_factor    = 1;
    1f82:	ac01      	add	r4, sp, #4
    1f84:	2601      	movs	r6, #1
    1f86:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1f88:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1f8a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1f8c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1f8e:	2305      	movs	r3, #5
    1f90:	7023      	strb	r3, [r4, #0]
    1f92:	0021      	movs	r1, r4
    1f94:	2001      	movs	r0, #1
    1f96:	4b36      	ldr	r3, [pc, #216]	; (2070 <STACK_SIZE+0x70>)
    1f98:	4698      	mov	r8, r3
    1f9a:	4798      	blx	r3
    1f9c:	2001      	movs	r0, #1
    1f9e:	4f35      	ldr	r7, [pc, #212]	; (2074 <STACK_SIZE+0x74>)
    1fa0:	47b8      	blx	r7
	config->high_when_disabled = false;
    1fa2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1fa4:	7265      	strb	r5, [r4, #9]
    1fa6:	2304      	movs	r3, #4
    1fa8:	7023      	strb	r3, [r4, #0]
    1faa:	331c      	adds	r3, #28
    1fac:	469a      	mov	sl, r3
    1fae:	6063      	str	r3, [r4, #4]
    1fb0:	7226      	strb	r6, [r4, #8]
    1fb2:	0021      	movs	r1, r4
    1fb4:	2002      	movs	r0, #2
    1fb6:	47c0      	blx	r8
    1fb8:	2002      	movs	r0, #2
    1fba:	47b8      	blx	r7
	config->division_factor    = 1;
    1fbc:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1fbe:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1fc0:	2306      	movs	r3, #6
    1fc2:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    1fc4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1fc6:	7265      	strb	r5, [r4, #9]
    1fc8:	0021      	movs	r1, r4
    1fca:	2003      	movs	r0, #3
    1fcc:	47c0      	blx	r8
    1fce:	2003      	movs	r0, #3
    1fd0:	47b8      	blx	r7
	config->high_when_disabled = false;
    1fd2:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1fd4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1fd6:	7265      	strb	r5, [r4, #9]
    1fd8:	2303      	movs	r3, #3
    1fda:	7023      	strb	r3, [r4, #0]
    1fdc:	4653      	mov	r3, sl
    1fde:	6063      	str	r3, [r4, #4]
    1fe0:	0021      	movs	r1, r4
    1fe2:	2004      	movs	r0, #4
    1fe4:	47c0      	blx	r8
    1fe6:	2004      	movs	r0, #4
    1fe8:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1fea:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1fec:	0021      	movs	r1, r4
    1fee:	2000      	movs	r0, #0
    1ff0:	4b16      	ldr	r3, [pc, #88]	; (204c <STACK_SIZE+0x4c>)
    1ff2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1ff4:	2000      	movs	r0, #0
    1ff6:	4b20      	ldr	r3, [pc, #128]	; (2078 <STACK_SIZE+0x78>)
    1ff8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1ffa:	2007      	movs	r0, #7
    1ffc:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ffe:	4911      	ldr	r1, [pc, #68]	; (2044 <STACK_SIZE+0x44>)
    2000:	22d0      	movs	r2, #208	; 0xd0
    2002:	68cb      	ldr	r3, [r1, #12]
    2004:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2006:	2bd0      	cmp	r3, #208	; 0xd0
    2008:	d1fb      	bne.n	2002 <STACK_SIZE+0x2>
	PM->CPUSEL.reg = (uint32_t)divider;
    200a:	4a1c      	ldr	r2, [pc, #112]	; (207c <STACK_SIZE+0x7c>)
    200c:	2300      	movs	r3, #0
    200e:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2010:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2012:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2014:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2016:	a901      	add	r1, sp, #4
    2018:	2201      	movs	r2, #1
    201a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    201c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    201e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2020:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2022:	3307      	adds	r3, #7
    2024:	700b      	strb	r3, [r1, #0]
    2026:	2000      	movs	r0, #0
    2028:	4b11      	ldr	r3, [pc, #68]	; (2070 <STACK_SIZE+0x70>)
    202a:	4798      	blx	r3
    202c:	2000      	movs	r0, #0
    202e:	4b11      	ldr	r3, [pc, #68]	; (2074 <STACK_SIZE+0x74>)
    2030:	4798      	blx	r3
#endif
}
    2032:	b010      	add	sp, #64	; 0x40
    2034:	bc1c      	pop	{r2, r3, r4}
    2036:	4690      	mov	r8, r2
    2038:	4699      	mov	r9, r3
    203a:	46a2      	mov	sl, r4
    203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    203e:	3b20      	subs	r3, #32
    2040:	e787      	b.n	1f52 <system_clock_init+0xc6>
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	40000800 	.word	0x40000800
    2048:	41004000 	.word	0x41004000
    204c:	000022b9 	.word	0x000022b9
    2050:	00001cad 	.word	0x00001cad
    2054:	00001de5 	.word	0x00001de5
    2058:	00806024 	.word	0x00806024
    205c:	ff80ffff 	.word	0xff80ffff
    2060:	00001c31 	.word	0x00001c31
    2064:	00001d65 	.word	0x00001d65
    2068:	00001bf5 	.word	0x00001bf5
    206c:	00002081 	.word	0x00002081
    2070:	000020a5 	.word	0x000020a5
    2074:	0000215d 	.word	0x0000215d
    2078:	0000222d 	.word	0x0000222d
    207c:	40000400 	.word	0x40000400

00002080 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2080:	4a06      	ldr	r2, [pc, #24]	; (209c <system_gclk_init+0x1c>)
    2082:	6993      	ldr	r3, [r2, #24]
    2084:	2108      	movs	r1, #8
    2086:	430b      	orrs	r3, r1
    2088:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    208a:	2201      	movs	r2, #1
    208c:	4b04      	ldr	r3, [pc, #16]	; (20a0 <system_gclk_init+0x20>)
    208e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2090:	0019      	movs	r1, r3
    2092:	780b      	ldrb	r3, [r1, #0]
    2094:	4213      	tst	r3, r2
    2096:	d1fc      	bne.n	2092 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2098:	4770      	bx	lr
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	40000400 	.word	0x40000400
    20a0:	40000c00 	.word	0x40000c00

000020a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    20a4:	b570      	push	{r4, r5, r6, lr}
    20a6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    20a8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    20aa:	780d      	ldrb	r5, [r1, #0]
    20ac:	022d      	lsls	r5, r5, #8
    20ae:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    20b0:	784b      	ldrb	r3, [r1, #1]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d002      	beq.n	20bc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    20b6:	2380      	movs	r3, #128	; 0x80
    20b8:	02db      	lsls	r3, r3, #11
    20ba:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    20bc:	7a4b      	ldrb	r3, [r1, #9]
    20be:	2b00      	cmp	r3, #0
    20c0:	d002      	beq.n	20c8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    20c2:	2380      	movs	r3, #128	; 0x80
    20c4:	031b      	lsls	r3, r3, #12
    20c6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    20c8:	6848      	ldr	r0, [r1, #4]
    20ca:	2801      	cmp	r0, #1
    20cc:	d910      	bls.n	20f0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    20ce:	1e43      	subs	r3, r0, #1
    20d0:	4218      	tst	r0, r3
    20d2:	d134      	bne.n	213e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    20d4:	2802      	cmp	r0, #2
    20d6:	d930      	bls.n	213a <system_gclk_gen_set_config+0x96>
    20d8:	2302      	movs	r3, #2
    20da:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    20dc:	3201      	adds	r2, #1
						mask <<= 1) {
    20de:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    20e0:	4298      	cmp	r0, r3
    20e2:	d8fb      	bhi.n	20dc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    20e4:	0212      	lsls	r2, r2, #8
    20e6:	4332      	orrs	r2, r6
    20e8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    20ea:	2380      	movs	r3, #128	; 0x80
    20ec:	035b      	lsls	r3, r3, #13
    20ee:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    20f0:	7a0b      	ldrb	r3, [r1, #8]
    20f2:	2b00      	cmp	r3, #0
    20f4:	d002      	beq.n	20fc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    20f6:	2380      	movs	r3, #128	; 0x80
    20f8:	039b      	lsls	r3, r3, #14
    20fa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20fc:	4a13      	ldr	r2, [pc, #76]	; (214c <system_gclk_gen_set_config+0xa8>)
    20fe:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2100:	b25b      	sxtb	r3, r3
    2102:	2b00      	cmp	r3, #0
    2104:	dbfb      	blt.n	20fe <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2106:	4b12      	ldr	r3, [pc, #72]	; (2150 <system_gclk_gen_set_config+0xac>)
    2108:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    210a:	4b12      	ldr	r3, [pc, #72]	; (2154 <system_gclk_gen_set_config+0xb0>)
    210c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    210e:	4a0f      	ldr	r2, [pc, #60]	; (214c <system_gclk_gen_set_config+0xa8>)
    2110:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2112:	b25b      	sxtb	r3, r3
    2114:	2b00      	cmp	r3, #0
    2116:	dbfb      	blt.n	2110 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2118:	4b0c      	ldr	r3, [pc, #48]	; (214c <system_gclk_gen_set_config+0xa8>)
    211a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    211c:	001a      	movs	r2, r3
    211e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2120:	b25b      	sxtb	r3, r3
    2122:	2b00      	cmp	r3, #0
    2124:	dbfb      	blt.n	211e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2126:	4a09      	ldr	r2, [pc, #36]	; (214c <system_gclk_gen_set_config+0xa8>)
    2128:	6853      	ldr	r3, [r2, #4]
    212a:	2180      	movs	r1, #128	; 0x80
    212c:	0249      	lsls	r1, r1, #9
    212e:	400b      	ands	r3, r1
    2130:	431d      	orrs	r5, r3
    2132:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2134:	4b08      	ldr	r3, [pc, #32]	; (2158 <system_gclk_gen_set_config+0xb4>)
    2136:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2138:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    213a:	2200      	movs	r2, #0
    213c:	e7d2      	b.n	20e4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    213e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2140:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2142:	2380      	movs	r3, #128	; 0x80
    2144:	029b      	lsls	r3, r3, #10
    2146:	431d      	orrs	r5, r3
    2148:	e7d2      	b.n	20f0 <system_gclk_gen_set_config+0x4c>
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	40000c00 	.word	0x40000c00
    2150:	0000099d 	.word	0x0000099d
    2154:	40000c08 	.word	0x40000c08
    2158:	000009dd 	.word	0x000009dd

0000215c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    215c:	b510      	push	{r4, lr}
    215e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2160:	4a0b      	ldr	r2, [pc, #44]	; (2190 <system_gclk_gen_enable+0x34>)
    2162:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2164:	b25b      	sxtb	r3, r3
    2166:	2b00      	cmp	r3, #0
    2168:	dbfb      	blt.n	2162 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    216a:	4b0a      	ldr	r3, [pc, #40]	; (2194 <system_gclk_gen_enable+0x38>)
    216c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    216e:	4b0a      	ldr	r3, [pc, #40]	; (2198 <system_gclk_gen_enable+0x3c>)
    2170:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2172:	4a07      	ldr	r2, [pc, #28]	; (2190 <system_gclk_gen_enable+0x34>)
    2174:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2176:	b25b      	sxtb	r3, r3
    2178:	2b00      	cmp	r3, #0
    217a:	dbfb      	blt.n	2174 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    217c:	4a04      	ldr	r2, [pc, #16]	; (2190 <system_gclk_gen_enable+0x34>)
    217e:	6851      	ldr	r1, [r2, #4]
    2180:	2380      	movs	r3, #128	; 0x80
    2182:	025b      	lsls	r3, r3, #9
    2184:	430b      	orrs	r3, r1
    2186:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2188:	4b04      	ldr	r3, [pc, #16]	; (219c <system_gclk_gen_enable+0x40>)
    218a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    218c:	bd10      	pop	{r4, pc}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	40000c00 	.word	0x40000c00
    2194:	0000099d 	.word	0x0000099d
    2198:	40000c04 	.word	0x40000c04
    219c:	000009dd 	.word	0x000009dd

000021a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    21a0:	b570      	push	{r4, r5, r6, lr}
    21a2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21a4:	4a1a      	ldr	r2, [pc, #104]	; (2210 <system_gclk_gen_get_hz+0x70>)
    21a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    21a8:	b25b      	sxtb	r3, r3
    21aa:	2b00      	cmp	r3, #0
    21ac:	dbfb      	blt.n	21a6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    21ae:	4b19      	ldr	r3, [pc, #100]	; (2214 <system_gclk_gen_get_hz+0x74>)
    21b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21b2:	4b19      	ldr	r3, [pc, #100]	; (2218 <system_gclk_gen_get_hz+0x78>)
    21b4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21b6:	4a16      	ldr	r2, [pc, #88]	; (2210 <system_gclk_gen_get_hz+0x70>)
    21b8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    21ba:	b25b      	sxtb	r3, r3
    21bc:	2b00      	cmp	r3, #0
    21be:	dbfb      	blt.n	21b8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    21c0:	4e13      	ldr	r6, [pc, #76]	; (2210 <system_gclk_gen_get_hz+0x70>)
    21c2:	6870      	ldr	r0, [r6, #4]
    21c4:	04c0      	lsls	r0, r0, #19
    21c6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    21c8:	4b14      	ldr	r3, [pc, #80]	; (221c <system_gclk_gen_get_hz+0x7c>)
    21ca:	4798      	blx	r3
    21cc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21ce:	4b12      	ldr	r3, [pc, #72]	; (2218 <system_gclk_gen_get_hz+0x78>)
    21d0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    21d2:	6876      	ldr	r6, [r6, #4]
    21d4:	02f6      	lsls	r6, r6, #11
    21d6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    21d8:	4b11      	ldr	r3, [pc, #68]	; (2220 <system_gclk_gen_get_hz+0x80>)
    21da:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21dc:	4a0c      	ldr	r2, [pc, #48]	; (2210 <system_gclk_gen_get_hz+0x70>)
    21de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    21e0:	b25b      	sxtb	r3, r3
    21e2:	2b00      	cmp	r3, #0
    21e4:	dbfb      	blt.n	21de <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    21e6:	4b0a      	ldr	r3, [pc, #40]	; (2210 <system_gclk_gen_get_hz+0x70>)
    21e8:	689c      	ldr	r4, [r3, #8]
    21ea:	0224      	lsls	r4, r4, #8
    21ec:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    21ee:	4b0d      	ldr	r3, [pc, #52]	; (2224 <system_gclk_gen_get_hz+0x84>)
    21f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    21f2:	2e00      	cmp	r6, #0
    21f4:	d107      	bne.n	2206 <system_gclk_gen_get_hz+0x66>
    21f6:	2c01      	cmp	r4, #1
    21f8:	d907      	bls.n	220a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    21fa:	0021      	movs	r1, r4
    21fc:	0028      	movs	r0, r5
    21fe:	4b0a      	ldr	r3, [pc, #40]	; (2228 <system_gclk_gen_get_hz+0x88>)
    2200:	4798      	blx	r3
    2202:	0005      	movs	r5, r0
    2204:	e001      	b.n	220a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2206:	3401      	adds	r4, #1
    2208:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    220a:	0028      	movs	r0, r5
    220c:	bd70      	pop	{r4, r5, r6, pc}
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	40000c00 	.word	0x40000c00
    2214:	0000099d 	.word	0x0000099d
    2218:	40000c04 	.word	0x40000c04
    221c:	00001b65 	.word	0x00001b65
    2220:	40000c08 	.word	0x40000c08
    2224:	000009dd 	.word	0x000009dd
    2228:	00005f19 	.word	0x00005f19

0000222c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    222c:	b510      	push	{r4, lr}
    222e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2230:	4b06      	ldr	r3, [pc, #24]	; (224c <system_gclk_chan_enable+0x20>)
    2232:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2234:	4b06      	ldr	r3, [pc, #24]	; (2250 <system_gclk_chan_enable+0x24>)
    2236:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2238:	4a06      	ldr	r2, [pc, #24]	; (2254 <system_gclk_chan_enable+0x28>)
    223a:	8853      	ldrh	r3, [r2, #2]
    223c:	2180      	movs	r1, #128	; 0x80
    223e:	01c9      	lsls	r1, r1, #7
    2240:	430b      	orrs	r3, r1
    2242:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2244:	4b04      	ldr	r3, [pc, #16]	; (2258 <system_gclk_chan_enable+0x2c>)
    2246:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2248:	bd10      	pop	{r4, pc}
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	0000099d 	.word	0x0000099d
    2250:	40000c02 	.word	0x40000c02
    2254:	40000c00 	.word	0x40000c00
    2258:	000009dd 	.word	0x000009dd

0000225c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    225c:	b510      	push	{r4, lr}
    225e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2260:	4b0f      	ldr	r3, [pc, #60]	; (22a0 <system_gclk_chan_disable+0x44>)
    2262:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2264:	4b0f      	ldr	r3, [pc, #60]	; (22a4 <system_gclk_chan_disable+0x48>)
    2266:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2268:	4a0f      	ldr	r2, [pc, #60]	; (22a8 <system_gclk_chan_disable+0x4c>)
    226a:	8853      	ldrh	r3, [r2, #2]
    226c:	051b      	lsls	r3, r3, #20
    226e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2270:	8853      	ldrh	r3, [r2, #2]
    2272:	490e      	ldr	r1, [pc, #56]	; (22ac <system_gclk_chan_disable+0x50>)
    2274:	400b      	ands	r3, r1
    2276:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2278:	8853      	ldrh	r3, [r2, #2]
    227a:	490d      	ldr	r1, [pc, #52]	; (22b0 <system_gclk_chan_disable+0x54>)
    227c:	400b      	ands	r3, r1
    227e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2280:	0011      	movs	r1, r2
    2282:	2280      	movs	r2, #128	; 0x80
    2284:	01d2      	lsls	r2, r2, #7
    2286:	884b      	ldrh	r3, [r1, #2]
    2288:	4213      	tst	r3, r2
    228a:	d1fc      	bne.n	2286 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    228c:	4906      	ldr	r1, [pc, #24]	; (22a8 <system_gclk_chan_disable+0x4c>)
    228e:	884a      	ldrh	r2, [r1, #2]
    2290:	0203      	lsls	r3, r0, #8
    2292:	4806      	ldr	r0, [pc, #24]	; (22ac <system_gclk_chan_disable+0x50>)
    2294:	4002      	ands	r2, r0
    2296:	4313      	orrs	r3, r2
    2298:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    229a:	4b06      	ldr	r3, [pc, #24]	; (22b4 <system_gclk_chan_disable+0x58>)
    229c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    229e:	bd10      	pop	{r4, pc}
    22a0:	0000099d 	.word	0x0000099d
    22a4:	40000c02 	.word	0x40000c02
    22a8:	40000c00 	.word	0x40000c00
    22ac:	fffff0ff 	.word	0xfffff0ff
    22b0:	ffffbfff 	.word	0xffffbfff
    22b4:	000009dd 	.word	0x000009dd

000022b8 <system_gclk_chan_set_config>:
{
    22b8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    22ba:	780c      	ldrb	r4, [r1, #0]
    22bc:	0224      	lsls	r4, r4, #8
    22be:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    22c0:	4b02      	ldr	r3, [pc, #8]	; (22cc <system_gclk_chan_set_config+0x14>)
    22c2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    22c4:	b2a4      	uxth	r4, r4
    22c6:	4b02      	ldr	r3, [pc, #8]	; (22d0 <system_gclk_chan_set_config+0x18>)
    22c8:	805c      	strh	r4, [r3, #2]
}
    22ca:	bd10      	pop	{r4, pc}
    22cc:	0000225d 	.word	0x0000225d
    22d0:	40000c00 	.word	0x40000c00

000022d4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    22d4:	b510      	push	{r4, lr}
    22d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    22d8:	4b06      	ldr	r3, [pc, #24]	; (22f4 <system_gclk_chan_get_hz+0x20>)
    22da:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22dc:	4b06      	ldr	r3, [pc, #24]	; (22f8 <system_gclk_chan_get_hz+0x24>)
    22de:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    22e0:	4b06      	ldr	r3, [pc, #24]	; (22fc <system_gclk_chan_get_hz+0x28>)
    22e2:	885c      	ldrh	r4, [r3, #2]
    22e4:	0524      	lsls	r4, r4, #20
    22e6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    22e8:	4b05      	ldr	r3, [pc, #20]	; (2300 <system_gclk_chan_get_hz+0x2c>)
    22ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    22ec:	0020      	movs	r0, r4
    22ee:	4b05      	ldr	r3, [pc, #20]	; (2304 <system_gclk_chan_get_hz+0x30>)
    22f0:	4798      	blx	r3
}
    22f2:	bd10      	pop	{r4, pc}
    22f4:	0000099d 	.word	0x0000099d
    22f8:	40000c02 	.word	0x40000c02
    22fc:	40000c00 	.word	0x40000c00
    2300:	000009dd 	.word	0x000009dd
    2304:	000021a1 	.word	0x000021a1

00002308 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2308:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    230a:	78d3      	ldrb	r3, [r2, #3]
    230c:	2b00      	cmp	r3, #0
    230e:	d135      	bne.n	237c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2310:	7813      	ldrb	r3, [r2, #0]
    2312:	2b80      	cmp	r3, #128	; 0x80
    2314:	d029      	beq.n	236a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2316:	061b      	lsls	r3, r3, #24
    2318:	2480      	movs	r4, #128	; 0x80
    231a:	0264      	lsls	r4, r4, #9
    231c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    231e:	7854      	ldrb	r4, [r2, #1]
    2320:	2502      	movs	r5, #2
    2322:	43ac      	bics	r4, r5
    2324:	d106      	bne.n	2334 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2326:	7894      	ldrb	r4, [r2, #2]
    2328:	2c00      	cmp	r4, #0
    232a:	d120      	bne.n	236e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    232c:	2480      	movs	r4, #128	; 0x80
    232e:	02a4      	lsls	r4, r4, #10
    2330:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2332:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2334:	7854      	ldrb	r4, [r2, #1]
    2336:	3c01      	subs	r4, #1
    2338:	2c01      	cmp	r4, #1
    233a:	d91c      	bls.n	2376 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    233c:	040d      	lsls	r5, r1, #16
    233e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2340:	24a0      	movs	r4, #160	; 0xa0
    2342:	05e4      	lsls	r4, r4, #23
    2344:	432c      	orrs	r4, r5
    2346:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2348:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    234a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    234c:	24d0      	movs	r4, #208	; 0xd0
    234e:	0624      	lsls	r4, r4, #24
    2350:	432c      	orrs	r4, r5
    2352:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2354:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2356:	78d4      	ldrb	r4, [r2, #3]
    2358:	2c00      	cmp	r4, #0
    235a:	d122      	bne.n	23a2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    235c:	035b      	lsls	r3, r3, #13
    235e:	d51c      	bpl.n	239a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2360:	7893      	ldrb	r3, [r2, #2]
    2362:	2b01      	cmp	r3, #1
    2364:	d01e      	beq.n	23a4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2366:	6141      	str	r1, [r0, #20]
    2368:	e017      	b.n	239a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    236a:	2300      	movs	r3, #0
    236c:	e7d7      	b.n	231e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    236e:	24c0      	movs	r4, #192	; 0xc0
    2370:	02e4      	lsls	r4, r4, #11
    2372:	4323      	orrs	r3, r4
    2374:	e7dd      	b.n	2332 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2376:	4c0d      	ldr	r4, [pc, #52]	; (23ac <_system_pinmux_config+0xa4>)
    2378:	4023      	ands	r3, r4
    237a:	e7df      	b.n	233c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    237c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    237e:	040c      	lsls	r4, r1, #16
    2380:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2382:	23a0      	movs	r3, #160	; 0xa0
    2384:	05db      	lsls	r3, r3, #23
    2386:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2388:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    238a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    238c:	23d0      	movs	r3, #208	; 0xd0
    238e:	061b      	lsls	r3, r3, #24
    2390:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2392:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2394:	78d3      	ldrb	r3, [r2, #3]
    2396:	2b00      	cmp	r3, #0
    2398:	d103      	bne.n	23a2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    239a:	7853      	ldrb	r3, [r2, #1]
    239c:	3b01      	subs	r3, #1
    239e:	2b01      	cmp	r3, #1
    23a0:	d902      	bls.n	23a8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    23a2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    23a4:	6181      	str	r1, [r0, #24]
    23a6:	e7f8      	b.n	239a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    23a8:	6081      	str	r1, [r0, #8]
}
    23aa:	e7fa      	b.n	23a2 <_system_pinmux_config+0x9a>
    23ac:	fffbffff 	.word	0xfffbffff

000023b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    23b0:	b510      	push	{r4, lr}
    23b2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    23b4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    23b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    23b8:	2900      	cmp	r1, #0
    23ba:	d104      	bne.n	23c6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    23bc:	0943      	lsrs	r3, r0, #5
    23be:	01db      	lsls	r3, r3, #7
    23c0:	4905      	ldr	r1, [pc, #20]	; (23d8 <system_pinmux_pin_set_config+0x28>)
    23c2:	468c      	mov	ip, r1
    23c4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    23c6:	241f      	movs	r4, #31
    23c8:	4020      	ands	r0, r4
    23ca:	2101      	movs	r1, #1
    23cc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    23ce:	0018      	movs	r0, r3
    23d0:	4b02      	ldr	r3, [pc, #8]	; (23dc <system_pinmux_pin_set_config+0x2c>)
    23d2:	4798      	blx	r3
}
    23d4:	bd10      	pop	{r4, pc}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	41004400 	.word	0x41004400
    23dc:	00002309 	.word	0x00002309

000023e0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    23e0:	4770      	bx	lr
	...

000023e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    23e4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    23e6:	4b05      	ldr	r3, [pc, #20]	; (23fc <system_init+0x18>)
    23e8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <system_init+0x1c>)
    23ec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    23ee:	4b05      	ldr	r3, [pc, #20]	; (2404 <system_init+0x20>)
    23f0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    23f2:	4b05      	ldr	r3, [pc, #20]	; (2408 <system_init+0x24>)
    23f4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    23f6:	4b05      	ldr	r3, [pc, #20]	; (240c <system_init+0x28>)
    23f8:	4798      	blx	r3
}
    23fa:	bd10      	pop	{r4, pc}
    23fc:	00001e8d 	.word	0x00001e8d
    2400:	00000a0d 	.word	0x00000a0d
    2404:	000023e1 	.word	0x000023e1
    2408:	00000b79 	.word	0x00000b79
    240c:	000023e1 	.word	0x000023e1

00002410 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2410:	1c93      	adds	r3, r2, #2
    2412:	009b      	lsls	r3, r3, #2
    2414:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2416:	2a02      	cmp	r2, #2
    2418:	d009      	beq.n	242e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    241a:	2a03      	cmp	r2, #3
    241c:	d00c      	beq.n	2438 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    241e:	2301      	movs	r3, #1
    2420:	4093      	lsls	r3, r2
    2422:	001a      	movs	r2, r3
    2424:	7e03      	ldrb	r3, [r0, #24]
    2426:	4313      	orrs	r3, r2
    2428:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    242a:	2000      	movs	r0, #0
    242c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    242e:	7e03      	ldrb	r3, [r0, #24]
    2430:	2210      	movs	r2, #16
    2432:	4313      	orrs	r3, r2
    2434:	7603      	strb	r3, [r0, #24]
    2436:	e7f8      	b.n	242a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2438:	7e03      	ldrb	r3, [r0, #24]
    243a:	2220      	movs	r2, #32
    243c:	4313      	orrs	r3, r2
    243e:	7603      	strb	r3, [r0, #24]
    2440:	e7f3      	b.n	242a <tc_register_callback+0x1a>
	...

00002444 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2444:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2446:	0080      	lsls	r0, r0, #2
    2448:	4b16      	ldr	r3, [pc, #88]	; (24a4 <_tc_interrupt_handler+0x60>)
    244a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    244c:	6823      	ldr	r3, [r4, #0]
    244e:	7b9d      	ldrb	r5, [r3, #14]
    2450:	7e22      	ldrb	r2, [r4, #24]
    2452:	7e63      	ldrb	r3, [r4, #25]
    2454:	4013      	ands	r3, r2
    2456:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2458:	07eb      	lsls	r3, r5, #31
    245a:	d406      	bmi.n	246a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    245c:	07ab      	lsls	r3, r5, #30
    245e:	d40b      	bmi.n	2478 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2460:	06eb      	lsls	r3, r5, #27
    2462:	d410      	bmi.n	2486 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2464:	06ab      	lsls	r3, r5, #26
    2466:	d415      	bmi.n	2494 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2468:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    246a:	0020      	movs	r0, r4
    246c:	68a3      	ldr	r3, [r4, #8]
    246e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2470:	2301      	movs	r3, #1
    2472:	6822      	ldr	r2, [r4, #0]
    2474:	7393      	strb	r3, [r2, #14]
    2476:	e7f1      	b.n	245c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2478:	0020      	movs	r0, r4
    247a:	68e3      	ldr	r3, [r4, #12]
    247c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    247e:	2302      	movs	r3, #2
    2480:	6822      	ldr	r2, [r4, #0]
    2482:	7393      	strb	r3, [r2, #14]
    2484:	e7ec      	b.n	2460 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2486:	0020      	movs	r0, r4
    2488:	6923      	ldr	r3, [r4, #16]
    248a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    248c:	2310      	movs	r3, #16
    248e:	6822      	ldr	r2, [r4, #0]
    2490:	7393      	strb	r3, [r2, #14]
    2492:	e7e7      	b.n	2464 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2494:	0020      	movs	r0, r4
    2496:	6963      	ldr	r3, [r4, #20]
    2498:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    249a:	6823      	ldr	r3, [r4, #0]
    249c:	2220      	movs	r2, #32
    249e:	739a      	strb	r2, [r3, #14]
}
    24a0:	e7e2      	b.n	2468 <_tc_interrupt_handler+0x24>
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	20001554 	.word	0x20001554

000024a8 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    24a8:	b510      	push	{r4, lr}
    24aa:	2000      	movs	r0, #0
    24ac:	4b01      	ldr	r3, [pc, #4]	; (24b4 <TC3_Handler+0xc>)
    24ae:	4798      	blx	r3
    24b0:	bd10      	pop	{r4, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	00002445 	.word	0x00002445

000024b8 <TC4_Handler>:
    24b8:	b510      	push	{r4, lr}
    24ba:	2001      	movs	r0, #1
    24bc:	4b01      	ldr	r3, [pc, #4]	; (24c4 <TC4_Handler+0xc>)
    24be:	4798      	blx	r3
    24c0:	bd10      	pop	{r4, pc}
    24c2:	46c0      	nop			; (mov r8, r8)
    24c4:	00002445 	.word	0x00002445

000024c8 <TC5_Handler>:
    24c8:	b510      	push	{r4, lr}
    24ca:	2002      	movs	r0, #2
    24cc:	4b01      	ldr	r3, [pc, #4]	; (24d4 <TC5_Handler+0xc>)
    24ce:	4798      	blx	r3
    24d0:	bd10      	pop	{r4, pc}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	00002445 	.word	0x00002445

000024d8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    24d8:	b530      	push	{r4, r5, lr}
    24da:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    24dc:	aa01      	add	r2, sp, #4
    24de:	4b0b      	ldr	r3, [pc, #44]	; (250c <_tc_get_inst_index+0x34>)
    24e0:	cb32      	ldmia	r3!, {r1, r4, r5}
    24e2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    24e4:	9b01      	ldr	r3, [sp, #4]
    24e6:	4298      	cmp	r0, r3
    24e8:	d00d      	beq.n	2506 <_tc_get_inst_index+0x2e>
    24ea:	9b02      	ldr	r3, [sp, #8]
    24ec:	4298      	cmp	r0, r3
    24ee:	d008      	beq.n	2502 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    24f0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    24f2:	9a03      	ldr	r2, [sp, #12]
    24f4:	4282      	cmp	r2, r0
    24f6:	d002      	beq.n	24fe <_tc_get_inst_index+0x26>
}
    24f8:	0018      	movs	r0, r3
    24fa:	b005      	add	sp, #20
    24fc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    24fe:	3302      	adds	r3, #2
    2500:	e002      	b.n	2508 <_tc_get_inst_index+0x30>
    2502:	2301      	movs	r3, #1
    2504:	e000      	b.n	2508 <_tc_get_inst_index+0x30>
    2506:	2300      	movs	r3, #0
			return i;
    2508:	b2db      	uxtb	r3, r3
    250a:	e7f5      	b.n	24f8 <_tc_get_inst_index+0x20>
    250c:	00008b88 	.word	0x00008b88

00002510 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2510:	b5f0      	push	{r4, r5, r6, r7, lr}
    2512:	b087      	sub	sp, #28
    2514:	0004      	movs	r4, r0
    2516:	000d      	movs	r5, r1
    2518:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    251a:	0008      	movs	r0, r1
    251c:	4b85      	ldr	r3, [pc, #532]	; (2734 <tc_init+0x224>)
    251e:	4798      	blx	r3
    2520:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    2522:	ab05      	add	r3, sp, #20
    2524:	221b      	movs	r2, #27
    2526:	701a      	strb	r2, [r3, #0]
    2528:	3201      	adds	r2, #1
    252a:	705a      	strb	r2, [r3, #1]
    252c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    252e:	ab03      	add	r3, sp, #12
    2530:	2280      	movs	r2, #128	; 0x80
    2532:	0112      	lsls	r2, r2, #4
    2534:	801a      	strh	r2, [r3, #0]
    2536:	2280      	movs	r2, #128	; 0x80
    2538:	0152      	lsls	r2, r2, #5
    253a:	805a      	strh	r2, [r3, #2]
    253c:	2280      	movs	r2, #128	; 0x80
    253e:	0192      	lsls	r2, r2, #6
    2540:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2542:	2300      	movs	r3, #0
    2544:	60a3      	str	r3, [r4, #8]
    2546:	60e3      	str	r3, [r4, #12]
    2548:	6123      	str	r3, [r4, #16]
    254a:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    254c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    254e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2550:	0082      	lsls	r2, r0, #2
    2552:	4b79      	ldr	r3, [pc, #484]	; (2738 <tc_init+0x228>)
    2554:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2556:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2558:	78b3      	ldrb	r3, [r6, #2]
    255a:	2b08      	cmp	r3, #8
    255c:	d006      	beq.n	256c <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    255e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2560:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2562:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2564:	07db      	lsls	r3, r3, #31
    2566:	d505      	bpl.n	2574 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2568:	b007      	add	sp, #28
    256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    256c:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    256e:	07fa      	lsls	r2, r7, #31
    2570:	d5fa      	bpl.n	2568 <tc_init+0x58>
    2572:	e7f4      	b.n	255e <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2574:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    2576:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2578:	06db      	lsls	r3, r3, #27
    257a:	d4f5      	bmi.n	2568 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    257c:	882b      	ldrh	r3, [r5, #0]
    257e:	079b      	lsls	r3, r3, #30
    2580:	d4f2      	bmi.n	2568 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    2582:	7c33      	ldrb	r3, [r6, #16]
    2584:	2b00      	cmp	r3, #0
    2586:	d179      	bne.n	267c <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    2588:	7f33      	ldrb	r3, [r6, #28]
    258a:	2b00      	cmp	r3, #0
    258c:	d000      	beq.n	2590 <tc_init+0x80>
    258e:	e081      	b.n	2694 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    2590:	496a      	ldr	r1, [pc, #424]	; (273c <tc_init+0x22c>)
    2592:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2594:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2596:	ab03      	add	r3, sp, #12
    2598:	5ad3      	ldrh	r3, [r2, r3]
    259a:	4303      	orrs	r3, r0
    259c:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    259e:	78b3      	ldrb	r3, [r6, #2]
    25a0:	2b08      	cmp	r3, #8
    25a2:	d100      	bne.n	25a6 <tc_init+0x96>
    25a4:	e086      	b.n	26b4 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    25a6:	a901      	add	r1, sp, #4
    25a8:	7833      	ldrb	r3, [r6, #0]
    25aa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    25ac:	ab05      	add	r3, sp, #20
    25ae:	5ddf      	ldrb	r7, [r3, r7]
    25b0:	0038      	movs	r0, r7
    25b2:	4b63      	ldr	r3, [pc, #396]	; (2740 <tc_init+0x230>)
    25b4:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    25b6:	0038      	movs	r0, r7
    25b8:	4b62      	ldr	r3, [pc, #392]	; (2744 <tc_init+0x234>)
    25ba:	4798      	blx	r3
	ctrla_tmp =
    25bc:	8931      	ldrh	r1, [r6, #8]
    25be:	88b3      	ldrh	r3, [r6, #4]
    25c0:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    25c2:	78b1      	ldrb	r1, [r6, #2]
    25c4:	79b2      	ldrb	r2, [r6, #6]
    25c6:	4311      	orrs	r1, r2
	ctrla_tmp =
    25c8:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    25ca:	7873      	ldrb	r3, [r6, #1]
    25cc:	2b00      	cmp	r3, #0
    25ce:	d002      	beq.n	25d6 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    25d0:	2380      	movs	r3, #128	; 0x80
    25d2:	011b      	lsls	r3, r3, #4
    25d4:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25d6:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25d8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25da:	b25b      	sxtb	r3, r3
    25dc:	2b00      	cmp	r3, #0
    25de:	dbfb      	blt.n	25d8 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    25e0:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    25e2:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    25e4:	1e4b      	subs	r3, r1, #1
    25e6:	4199      	sbcs	r1, r3
    25e8:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    25ea:	7bb3      	ldrb	r3, [r6, #14]
    25ec:	2b00      	cmp	r3, #0
    25ee:	d001      	beq.n	25f4 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    25f0:	2301      	movs	r3, #1
    25f2:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25f4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25f6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25f8:	b25b      	sxtb	r3, r3
    25fa:	2b00      	cmp	r3, #0
    25fc:	dbfb      	blt.n	25f6 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    25fe:	23ff      	movs	r3, #255	; 0xff
    2600:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    2602:	2900      	cmp	r1, #0
    2604:	d005      	beq.n	2612 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2606:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2608:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    260a:	b25b      	sxtb	r3, r3
    260c:	2b00      	cmp	r3, #0
    260e:	dbfb      	blt.n	2608 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2610:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    2612:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    2614:	7af3      	ldrb	r3, [r6, #11]
    2616:	2b00      	cmp	r3, #0
    2618:	d001      	beq.n	261e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    261a:	2310      	movs	r3, #16
    261c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    261e:	7b33      	ldrb	r3, [r6, #12]
    2620:	2b00      	cmp	r3, #0
    2622:	d001      	beq.n	2628 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2624:	2320      	movs	r3, #32
    2626:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2628:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    262a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    262c:	b25b      	sxtb	r3, r3
    262e:	2b00      	cmp	r3, #0
    2630:	dbfb      	blt.n	262a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2632:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2634:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2636:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2638:	b25b      	sxtb	r3, r3
    263a:	2b00      	cmp	r3, #0
    263c:	dbfb      	blt.n	2636 <tc_init+0x126>
	switch (module_inst->counter_size) {
    263e:	7923      	ldrb	r3, [r4, #4]
    2640:	2b04      	cmp	r3, #4
    2642:	d03f      	beq.n	26c4 <tc_init+0x1b4>
    2644:	2b08      	cmp	r3, #8
    2646:	d05e      	beq.n	2706 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    2648:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    264a:	2b00      	cmp	r3, #0
    264c:	d000      	beq.n	2650 <tc_init+0x140>
    264e:	e78b      	b.n	2568 <tc_init+0x58>
    2650:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2652:	b25b      	sxtb	r3, r3
    2654:	2b00      	cmp	r3, #0
    2656:	dbfb      	blt.n	2650 <tc_init+0x140>
				= config->counter_16_bit.value;
    2658:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    265a:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    265c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    265e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2660:	b25b      	sxtb	r3, r3
    2662:	2b00      	cmp	r3, #0
    2664:	dbfb      	blt.n	265e <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    2666:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2668:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    266a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    266c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    266e:	b25b      	sxtb	r3, r3
    2670:	2b00      	cmp	r3, #0
    2672:	dbfb      	blt.n	266c <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    2674:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2676:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2678:	2000      	movs	r0, #0
    267a:	e775      	b.n	2568 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    267c:	a902      	add	r1, sp, #8
    267e:	2301      	movs	r3, #1
    2680:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2682:	2200      	movs	r2, #0
    2684:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2686:	7e32      	ldrb	r2, [r6, #24]
    2688:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    268a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    268c:	7d30      	ldrb	r0, [r6, #20]
    268e:	4b2e      	ldr	r3, [pc, #184]	; (2748 <tc_init+0x238>)
    2690:	4798      	blx	r3
    2692:	e779      	b.n	2588 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2694:	a902      	add	r1, sp, #8
    2696:	2301      	movs	r3, #1
    2698:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    269a:	2200      	movs	r2, #0
    269c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    269e:	3224      	adds	r2, #36	; 0x24
    26a0:	18b2      	adds	r2, r6, r2
    26a2:	7812      	ldrb	r2, [r2, #0]
    26a4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    26a6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    26a8:	331f      	adds	r3, #31
    26aa:	18f3      	adds	r3, r6, r3
    26ac:	7818      	ldrb	r0, [r3, #0]
    26ae:	4b26      	ldr	r3, [pc, #152]	; (2748 <tc_init+0x238>)
    26b0:	4798      	blx	r3
    26b2:	e76d      	b.n	2590 <tc_init+0x80>
    26b4:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    26b6:	1c7a      	adds	r2, r7, #1
    26b8:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    26ba:	ab03      	add	r3, sp, #12
    26bc:	5ad3      	ldrh	r3, [r2, r3]
    26be:	4303      	orrs	r3, r0
    26c0:	620b      	str	r3, [r1, #32]
    26c2:	e770      	b.n	25a6 <tc_init+0x96>
    26c4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26c6:	b25b      	sxtb	r3, r3
    26c8:	2b00      	cmp	r3, #0
    26ca:	dbfb      	blt.n	26c4 <tc_init+0x1b4>
					config->counter_8_bit.value;
    26cc:	2328      	movs	r3, #40	; 0x28
    26ce:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    26d0:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26d4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26d6:	b25b      	sxtb	r3, r3
    26d8:	2b00      	cmp	r3, #0
    26da:	dbfb      	blt.n	26d4 <tc_init+0x1c4>
					config->counter_8_bit.period;
    26dc:	2329      	movs	r3, #41	; 0x29
    26de:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    26e0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26e2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26e4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26e6:	b25b      	sxtb	r3, r3
    26e8:	2b00      	cmp	r3, #0
    26ea:	dbfb      	blt.n	26e4 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    26ec:	232a      	movs	r3, #42	; 0x2a
    26ee:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    26f0:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26f2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26f4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26f6:	b25b      	sxtb	r3, r3
    26f8:	2b00      	cmp	r3, #0
    26fa:	dbfb      	blt.n	26f4 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    26fc:	232b      	movs	r3, #43	; 0x2b
    26fe:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    2700:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    2702:	2000      	movs	r0, #0
    2704:	e730      	b.n	2568 <tc_init+0x58>
    2706:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2708:	b25b      	sxtb	r3, r3
    270a:	2b00      	cmp	r3, #0
    270c:	dbfb      	blt.n	2706 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    270e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2710:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2712:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2714:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2716:	b25b      	sxtb	r3, r3
    2718:	2b00      	cmp	r3, #0
    271a:	dbfb      	blt.n	2714 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    271c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    271e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2720:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2722:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2724:	b25b      	sxtb	r3, r3
    2726:	2b00      	cmp	r3, #0
    2728:	dbfb      	blt.n	2722 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    272a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    272c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    272e:	2000      	movs	r0, #0
    2730:	e71a      	b.n	2568 <tc_init+0x58>
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	000024d9 	.word	0x000024d9
    2738:	20001554 	.word	0x20001554
    273c:	40000400 	.word	0x40000400
    2740:	000022b9 	.word	0x000022b9
    2744:	0000222d 	.word	0x0000222d
    2748:	000023b1 	.word	0x000023b1

0000274c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    274c:	6802      	ldr	r2, [r0, #0]
    274e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2750:	b25b      	sxtb	r3, r3
    2752:	2b00      	cmp	r3, #0
    2754:	dbfb      	blt.n	274e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2756:	7903      	ldrb	r3, [r0, #4]
    2758:	2b04      	cmp	r3, #4
    275a:	d005      	beq.n	2768 <tc_get_count_value+0x1c>
    275c:	2b08      	cmp	r3, #8
    275e:	d009      	beq.n	2774 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    2760:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    2762:	2b00      	cmp	r3, #0
    2764:	d003      	beq.n	276e <tc_get_count_value+0x22>
}
    2766:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2768:	7c10      	ldrb	r0, [r2, #16]
    276a:	b2c0      	uxtb	r0, r0
    276c:	e7fb      	b.n	2766 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    276e:	8a10      	ldrh	r0, [r2, #16]
    2770:	b280      	uxth	r0, r0
    2772:	e7f8      	b.n	2766 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    2774:	6910      	ldr	r0, [r2, #16]
    2776:	e7f6      	b.n	2766 <tc_get_count_value+0x1a>

00002778 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2778:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    277a:	6804      	ldr	r4, [r0, #0]
    277c:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    277e:	b25b      	sxtb	r3, r3
    2780:	2b00      	cmp	r3, #0
    2782:	dbfb      	blt.n	277c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2784:	7903      	ldrb	r3, [r0, #4]
    2786:	2b04      	cmp	r3, #4
    2788:	d005      	beq.n	2796 <tc_set_compare_value+0x1e>
    278a:	2b08      	cmp	r3, #8
    278c:	d014      	beq.n	27b8 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    278e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2790:	2b00      	cmp	r3, #0
    2792:	d008      	beq.n	27a6 <tc_set_compare_value+0x2e>
}
    2794:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    2796:	2017      	movs	r0, #23
			if (channel_index <
    2798:	2901      	cmp	r1, #1
    279a:	d8fb      	bhi.n	2794 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    279c:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    279e:	1861      	adds	r1, r4, r1
    27a0:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    27a2:	2000      	movs	r0, #0
    27a4:	e7f6      	b.n	2794 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    27a6:	2017      	movs	r0, #23
			if (channel_index <
    27a8:	2901      	cmp	r1, #1
    27aa:	d8f3      	bhi.n	2794 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    27ac:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    27ae:	310c      	adds	r1, #12
    27b0:	0049      	lsls	r1, r1, #1
    27b2:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    27b4:	2000      	movs	r0, #0
    27b6:	e7ed      	b.n	2794 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    27b8:	2017      	movs	r0, #23
			if (channel_index <
    27ba:	2901      	cmp	r1, #1
    27bc:	d8ea      	bhi.n	2794 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    27be:	3106      	adds	r1, #6
    27c0:	0089      	lsls	r1, r1, #2
    27c2:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    27c4:	2000      	movs	r0, #0
    27c6:	e7e5      	b.n	2794 <tc_set_compare_value+0x1c>

000027c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    27c8:	e7fe      	b.n	27c8 <Dummy_Handler>
	...

000027cc <Reset_Handler>:
{
    27cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    27ce:	4a2a      	ldr	r2, [pc, #168]	; (2878 <Reset_Handler+0xac>)
    27d0:	4b2a      	ldr	r3, [pc, #168]	; (287c <Reset_Handler+0xb0>)
    27d2:	429a      	cmp	r2, r3
    27d4:	d011      	beq.n	27fa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    27d6:	001a      	movs	r2, r3
    27d8:	4b29      	ldr	r3, [pc, #164]	; (2880 <Reset_Handler+0xb4>)
    27da:	429a      	cmp	r2, r3
    27dc:	d20d      	bcs.n	27fa <Reset_Handler+0x2e>
    27de:	4a29      	ldr	r2, [pc, #164]	; (2884 <Reset_Handler+0xb8>)
    27e0:	3303      	adds	r3, #3
    27e2:	1a9b      	subs	r3, r3, r2
    27e4:	089b      	lsrs	r3, r3, #2
    27e6:	3301      	adds	r3, #1
    27e8:	009b      	lsls	r3, r3, #2
    27ea:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    27ec:	4823      	ldr	r0, [pc, #140]	; (287c <Reset_Handler+0xb0>)
    27ee:	4922      	ldr	r1, [pc, #136]	; (2878 <Reset_Handler+0xac>)
    27f0:	588c      	ldr	r4, [r1, r2]
    27f2:	5084      	str	r4, [r0, r2]
    27f4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    27f6:	429a      	cmp	r2, r3
    27f8:	d1fa      	bne.n	27f0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    27fa:	4a23      	ldr	r2, [pc, #140]	; (2888 <Reset_Handler+0xbc>)
    27fc:	4b23      	ldr	r3, [pc, #140]	; (288c <Reset_Handler+0xc0>)
    27fe:	429a      	cmp	r2, r3
    2800:	d20a      	bcs.n	2818 <Reset_Handler+0x4c>
    2802:	43d3      	mvns	r3, r2
    2804:	4921      	ldr	r1, [pc, #132]	; (288c <Reset_Handler+0xc0>)
    2806:	185b      	adds	r3, r3, r1
    2808:	2103      	movs	r1, #3
    280a:	438b      	bics	r3, r1
    280c:	3304      	adds	r3, #4
    280e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2810:	2100      	movs	r1, #0
    2812:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2814:	4293      	cmp	r3, r2
    2816:	d1fc      	bne.n	2812 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2818:	4a1d      	ldr	r2, [pc, #116]	; (2890 <Reset_Handler+0xc4>)
    281a:	21ff      	movs	r1, #255	; 0xff
    281c:	4b1d      	ldr	r3, [pc, #116]	; (2894 <Reset_Handler+0xc8>)
    281e:	438b      	bics	r3, r1
    2820:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2822:	39fd      	subs	r1, #253	; 0xfd
    2824:	2390      	movs	r3, #144	; 0x90
    2826:	005b      	lsls	r3, r3, #1
    2828:	4a1b      	ldr	r2, [pc, #108]	; (2898 <Reset_Handler+0xcc>)
    282a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    282c:	4a1b      	ldr	r2, [pc, #108]	; (289c <Reset_Handler+0xd0>)
    282e:	78d3      	ldrb	r3, [r2, #3]
    2830:	2503      	movs	r5, #3
    2832:	43ab      	bics	r3, r5
    2834:	2402      	movs	r4, #2
    2836:	4323      	orrs	r3, r4
    2838:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    283a:	78d3      	ldrb	r3, [r2, #3]
    283c:	270c      	movs	r7, #12
    283e:	43bb      	bics	r3, r7
    2840:	2608      	movs	r6, #8
    2842:	4333      	orrs	r3, r6
    2844:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2846:	4b16      	ldr	r3, [pc, #88]	; (28a0 <Reset_Handler+0xd4>)
    2848:	7b98      	ldrb	r0, [r3, #14]
    284a:	2230      	movs	r2, #48	; 0x30
    284c:	4390      	bics	r0, r2
    284e:	2220      	movs	r2, #32
    2850:	4310      	orrs	r0, r2
    2852:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2854:	7b99      	ldrb	r1, [r3, #14]
    2856:	43b9      	bics	r1, r7
    2858:	4331      	orrs	r1, r6
    285a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    285c:	7b9a      	ldrb	r2, [r3, #14]
    285e:	43aa      	bics	r2, r5
    2860:	4322      	orrs	r2, r4
    2862:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2864:	4a0f      	ldr	r2, [pc, #60]	; (28a4 <Reset_Handler+0xd8>)
    2866:	6853      	ldr	r3, [r2, #4]
    2868:	2180      	movs	r1, #128	; 0x80
    286a:	430b      	orrs	r3, r1
    286c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    286e:	4b0e      	ldr	r3, [pc, #56]	; (28a8 <Reset_Handler+0xdc>)
    2870:	4798      	blx	r3
        main();
    2872:	4b0e      	ldr	r3, [pc, #56]	; (28ac <Reset_Handler+0xe0>)
    2874:	4798      	blx	r3
    2876:	e7fe      	b.n	2876 <Reset_Handler+0xaa>
    2878:	00008fd8 	.word	0x00008fd8
    287c:	20000000 	.word	0x20000000
    2880:	200001dc 	.word	0x200001dc
    2884:	20000004 	.word	0x20000004
    2888:	200001dc 	.word	0x200001dc
    288c:	20001674 	.word	0x20001674
    2890:	e000ed00 	.word	0xe000ed00
    2894:	00000000 	.word	0x00000000
    2898:	41007000 	.word	0x41007000
    289c:	41005000 	.word	0x41005000
    28a0:	41004800 	.word	0x41004800
    28a4:	41004000 	.word	0x41004000
    28a8:	00003501 	.word	0x00003501
    28ac:	000033f9 	.word	0x000033f9

000028b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b2:	46c6      	mov	lr, r8
    28b4:	b500      	push	{lr}
    28b6:	000c      	movs	r4, r1
    28b8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    28ba:	2800      	cmp	r0, #0
    28bc:	d10f      	bne.n	28de <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    28be:	2a00      	cmp	r2, #0
    28c0:	dd11      	ble.n	28e6 <_read+0x36>
    28c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    28c4:	4e09      	ldr	r6, [pc, #36]	; (28ec <_read+0x3c>)
    28c6:	4d0a      	ldr	r5, [pc, #40]	; (28f0 <_read+0x40>)
    28c8:	6830      	ldr	r0, [r6, #0]
    28ca:	0021      	movs	r1, r4
    28cc:	682b      	ldr	r3, [r5, #0]
    28ce:	4798      	blx	r3
		ptr++;
    28d0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    28d2:	42bc      	cmp	r4, r7
    28d4:	d1f8      	bne.n	28c8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    28d6:	4640      	mov	r0, r8
    28d8:	bc04      	pop	{r2}
    28da:	4690      	mov	r8, r2
    28dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    28de:	2301      	movs	r3, #1
    28e0:	425b      	negs	r3, r3
    28e2:	4698      	mov	r8, r3
    28e4:	e7f7      	b.n	28d6 <_read+0x26>
	for (; len > 0; --len) {
    28e6:	4680      	mov	r8, r0
    28e8:	e7f5      	b.n	28d6 <_read+0x26>
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	20001568 	.word	0x20001568
    28f0:	20001560 	.word	0x20001560

000028f4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	46c6      	mov	lr, r8
    28f8:	b500      	push	{lr}
    28fa:	000e      	movs	r6, r1
    28fc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    28fe:	3801      	subs	r0, #1
    2900:	2802      	cmp	r0, #2
    2902:	d810      	bhi.n	2926 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2904:	2a00      	cmp	r2, #0
    2906:	d011      	beq.n	292c <_write+0x38>
    2908:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    290a:	4b0c      	ldr	r3, [pc, #48]	; (293c <_write+0x48>)
    290c:	4698      	mov	r8, r3
    290e:	4f0c      	ldr	r7, [pc, #48]	; (2940 <_write+0x4c>)
    2910:	4643      	mov	r3, r8
    2912:	6818      	ldr	r0, [r3, #0]
    2914:	5d31      	ldrb	r1, [r6, r4]
    2916:	683b      	ldr	r3, [r7, #0]
    2918:	4798      	blx	r3
    291a:	2800      	cmp	r0, #0
    291c:	db08      	blt.n	2930 <_write+0x3c>
			return -1;
		}
		++nChars;
    291e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2920:	42a5      	cmp	r5, r4
    2922:	d1f5      	bne.n	2910 <_write+0x1c>
    2924:	e006      	b.n	2934 <_write+0x40>
		return -1;
    2926:	2401      	movs	r4, #1
    2928:	4264      	negs	r4, r4
    292a:	e003      	b.n	2934 <_write+0x40>
	for (; len != 0; --len) {
    292c:	0014      	movs	r4, r2
    292e:	e001      	b.n	2934 <_write+0x40>
			return -1;
    2930:	2401      	movs	r4, #1
    2932:	4264      	negs	r4, r4
	}
	return nChars;
}
    2934:	0020      	movs	r0, r4
    2936:	bc04      	pop	{r2}
    2938:	4690      	mov	r8, r2
    293a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    293c:	20001568 	.word	0x20001568
    2940:	20001564 	.word	0x20001564

00002944 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2944:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2946:	4a06      	ldr	r2, [pc, #24]	; (2960 <_sbrk+0x1c>)
    2948:	6812      	ldr	r2, [r2, #0]
    294a:	2a00      	cmp	r2, #0
    294c:	d004      	beq.n	2958 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    294e:	4a04      	ldr	r2, [pc, #16]	; (2960 <_sbrk+0x1c>)
    2950:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2952:	18c3      	adds	r3, r0, r3
    2954:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2956:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2958:	4902      	ldr	r1, [pc, #8]	; (2964 <_sbrk+0x20>)
    295a:	4a01      	ldr	r2, [pc, #4]	; (2960 <_sbrk+0x1c>)
    295c:	6011      	str	r1, [r2, #0]
    295e:	e7f6      	b.n	294e <_sbrk+0xa>
    2960:	20000238 	.word	0x20000238
    2964:	20003678 	.word	0x20003678

00002968 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2968:	2001      	movs	r0, #1
    296a:	4240      	negs	r0, r0
    296c:	4770      	bx	lr

0000296e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    296e:	2380      	movs	r3, #128	; 0x80
    2970:	019b      	lsls	r3, r3, #6
    2972:	604b      	str	r3, [r1, #4]

	return 0;
}
    2974:	2000      	movs	r0, #0
    2976:	4770      	bx	lr

00002978 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2978:	2001      	movs	r0, #1
    297a:	4770      	bx	lr

0000297c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    297c:	2000      	movs	r0, #0
    297e:	4770      	bx	lr

00002980 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2980:	b510      	push	{r4, lr}
	nwkIb.nwkSeqNum = 0;
    2982:	4a0d      	ldr	r2, [pc, #52]	; (29b8 <NWK_Init+0x38>)
    2984:	2300      	movs	r3, #0
    2986:	7113      	strb	r3, [r2, #4]
	nwkIb.macSeqNum = 0;
    2988:	7153      	strb	r3, [r2, #5]
	nwkIb.addr = 0;
    298a:	8013      	strh	r3, [r2, #0]
	nwkIb.lock = 0;
    298c:	2158      	movs	r1, #88	; 0x58
    298e:	5253      	strh	r3, [r2, r1]
    2990:	0013      	movs	r3, r2
    2992:	3240      	adds	r2, #64	; 0x40

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2994:	2100      	movs	r1, #0
    2996:	6099      	str	r1, [r3, #8]
    2998:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    299a:	4293      	cmp	r3, r2
    299c:	d1fb      	bne.n	2996 <NWK_Init+0x16>
	}

	nwkTxInit();
    299e:	4b07      	ldr	r3, [pc, #28]	; (29bc <NWK_Init+0x3c>)
    29a0:	4798      	blx	r3
	nwkRxInit();
    29a2:	4b07      	ldr	r3, [pc, #28]	; (29c0 <NWK_Init+0x40>)
    29a4:	4798      	blx	r3
	nwkFrameInit();
    29a6:	4b07      	ldr	r3, [pc, #28]	; (29c4 <NWK_Init+0x44>)
    29a8:	4798      	blx	r3
	nwkDataReqInit();
    29aa:	4b07      	ldr	r3, [pc, #28]	; (29c8 <NWK_Init+0x48>)
    29ac:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    29ae:	4b07      	ldr	r3, [pc, #28]	; (29cc <NWK_Init+0x4c>)
    29b0:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    29b2:	4b07      	ldr	r3, [pc, #28]	; (29d0 <NWK_Init+0x50>)
    29b4:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    29b6:	bd10      	pop	{r4, pc}
    29b8:	2000156c 	.word	0x2000156c
    29bc:	00002c6d 	.word	0x00002c6d
    29c0:	00002b65 	.word	0x00002b65
    29c4:	000029f1 	.word	0x000029f1
    29c8:	000029e5 	.word	0x000029e5
    29cc:	00002a41 	.word	0x00002a41
    29d0:	00002ba5 	.word	0x00002ba5

000029d4 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    29d4:	3002      	adds	r0, #2
    29d6:	0080      	lsls	r0, r0, #2
    29d8:	4b01      	ldr	r3, [pc, #4]	; (29e0 <NWK_OpenEndpoint+0xc>)
    29da:	50c1      	str	r1, [r0, r3]
}
    29dc:	4770      	bx	lr
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	2000156c 	.word	0x2000156c

000029e4 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    29e4:	2200      	movs	r2, #0
    29e6:	4b01      	ldr	r3, [pc, #4]	; (29ec <nwkDataReqInit+0x8>)
    29e8:	601a      	str	r2, [r3, #0]
}
    29ea:	4770      	bx	lr
    29ec:	2000023c 	.word	0x2000023c

000029f0 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    29f0:	4b03      	ldr	r3, [pc, #12]	; (2a00 <nwkFrameInit+0x10>)
    29f2:	2200      	movs	r2, #0
    29f4:	701a      	strb	r2, [r3, #0]
    29f6:	218d      	movs	r1, #141	; 0x8d
    29f8:	545a      	strb	r2, [r3, r1]
    29fa:	318d      	adds	r1, #141	; 0x8d
    29fc:	545a      	strb	r2, [r3, r1]
	}
}
    29fe:	4770      	bx	lr
    2a00:	20000240 	.word	0x20000240

00002a04 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2a04:	2800      	cmp	r0, #0
    2a06:	d012      	beq.n	2a2e <nwkFrameNext+0x2a>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2a08:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2a0a:	4b0c      	ldr	r3, [pc, #48]	; (2a3c <nwkFrameNext+0x38>)
    2a0c:	33a8      	adds	r3, #168	; 0xa8
    2a0e:	33ff      	adds	r3, #255	; 0xff
    2a10:	4298      	cmp	r0, r3
    2a12:	d210      	bcs.n	2a36 <nwkFrameNext+0x32>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2a14:	7803      	ldrb	r3, [r0, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d10c      	bne.n	2a34 <nwkFrameNext+0x30>
	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2a1a:	4a08      	ldr	r2, [pc, #32]	; (2a3c <nwkFrameNext+0x38>)
    2a1c:	32a8      	adds	r2, #168	; 0xa8
    2a1e:	32ff      	adds	r2, #255	; 0xff
    2a20:	308d      	adds	r0, #141	; 0x8d
    2a22:	4290      	cmp	r0, r2
    2a24:	d205      	bcs.n	2a32 <nwkFrameNext+0x2e>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2a26:	7803      	ldrb	r3, [r0, #0]
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d0f9      	beq.n	2a20 <nwkFrameNext+0x1c>
    2a2c:	e002      	b.n	2a34 <nwkFrameNext+0x30>
		frame = nwkFrameFrames;
    2a2e:	4803      	ldr	r0, [pc, #12]	; (2a3c <nwkFrameNext+0x38>)
    2a30:	e7f0      	b.n	2a14 <nwkFrameNext+0x10>
			return frame;
		}
	}

	return NULL;
    2a32:	2000      	movs	r0, #0
}
    2a34:	4770      	bx	lr
	return NULL;
    2a36:	2000      	movs	r0, #0
    2a38:	e7fc      	b.n	2a34 <nwkFrameNext+0x30>
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	20000240 	.word	0x20000240

00002a40 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a42:	4b09      	ldr	r3, [pc, #36]	; (2a68 <nwkRouteInit+0x28>)
    2a44:	3302      	adds	r3, #2
    2a46:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2a48:	2701      	movs	r7, #1
    2a4a:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2a4c:	4c06      	ldr	r4, [pc, #24]	; (2a68 <nwkRouteInit+0x28>)
    2a4e:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2a50:	2500      	movs	r5, #0
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2a52:	801f      	strh	r7, [r3, #0]
		nwkRouteTable[i].fixed = 0;
    2a54:	00d0      	lsls	r0, r2, #3
    2a56:	5d01      	ldrb	r1, [r0, r4]
    2a58:	43b1      	bics	r1, r6
    2a5a:	5501      	strb	r1, [r0, r4]
		nwkRouteTable[i].rank = 0;
    2a5c:	711d      	strb	r5, [r3, #4]
    2a5e:	3201      	adds	r2, #1
    2a60:	3308      	adds	r3, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2a62:	2a64      	cmp	r2, #100	; 0x64
    2a64:	d1f5      	bne.n	2a52 <nwkRouteInit+0x12>
	}
}
    2a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a68:	200003e8 	.word	0x200003e8

00002a6c <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    2a6c:	b530      	push	{r4, r5, lr}
    2a6e:	4a0c      	ldr	r2, [pc, #48]	; (2aa0 <NWK_RouteFindEntry+0x34>)
    2a70:	3202      	adds	r2, #2
    2a72:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2a74:	4d0a      	ldr	r5, [pc, #40]	; (2aa0 <NWK_RouteFindEntry+0x34>)
    2a76:	e003      	b.n	2a80 <NWK_RouteFindEntry+0x14>
    2a78:	3301      	adds	r3, #1
    2a7a:	3208      	adds	r2, #8
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2a7c:	2b64      	cmp	r3, #100	; 0x64
    2a7e:	d00c      	beq.n	2a9a <NWK_RouteFindEntry+0x2e>
		if (nwkRouteTable[i].dstAddr == dst &&
    2a80:	8814      	ldrh	r4, [r2, #0]
    2a82:	4284      	cmp	r4, r0
    2a84:	d1f8      	bne.n	2a78 <NWK_RouteFindEntry+0xc>
				nwkRouteTable[i].multicast == multicast) {
    2a86:	00dc      	lsls	r4, r3, #3
    2a88:	5d64      	ldrb	r4, [r4, r5]
    2a8a:	07a4      	lsls	r4, r4, #30
    2a8c:	0fe4      	lsrs	r4, r4, #31
		if (nwkRouteTable[i].dstAddr == dst &&
    2a8e:	428c      	cmp	r4, r1
    2a90:	d1f2      	bne.n	2a78 <NWK_RouteFindEntry+0xc>
			return &nwkRouteTable[i];
    2a92:	00db      	lsls	r3, r3, #3
    2a94:	4802      	ldr	r0, [pc, #8]	; (2aa0 <NWK_RouteFindEntry+0x34>)
    2a96:	18c0      	adds	r0, r0, r3
		}
	}

	return NULL;
}
    2a98:	bd30      	pop	{r4, r5, pc}
	return NULL;
    2a9a:	2000      	movs	r0, #0
    2a9c:	e7fc      	b.n	2a98 <NWK_RouteFindEntry+0x2c>
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	200003e8 	.word	0x200003e8

00002aa4 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2aa4:	7803      	ldrb	r3, [r0, #0]
    2aa6:	07db      	lsls	r3, r3, #31
    2aa8:	d404      	bmi.n	2ab4 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2aaa:	2301      	movs	r3, #1
    2aac:	425b      	negs	r3, r3
    2aae:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2ab0:	2300      	movs	r3, #0
    2ab2:	7183      	strb	r3, [r0, #6]
}
    2ab4:	4770      	bx	lr
	...

00002ab8 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2ab8:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2aba:	4b03      	ldr	r3, [pc, #12]	; (2ac8 <nwkRouteRemove+0x10>)
    2abc:	4798      	blx	r3
	if (entry) {
    2abe:	2800      	cmp	r0, #0
    2ac0:	d001      	beq.n	2ac6 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2ac2:	4b02      	ldr	r3, [pc, #8]	; (2acc <nwkRouteRemove+0x14>)
    2ac4:	4798      	blx	r3
	}
}
    2ac6:	bd10      	pop	{r4, pc}
    2ac8:	00002a6d 	.word	0x00002a6d
    2acc:	00002aa5 	.word	0x00002aa5

00002ad0 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2ad0:	b510      	push	{r4, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2ad2:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2ad4:	2300      	movs	r3, #0
	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2ad6:	2a06      	cmp	r2, #6
    2ad8:	d001      	beq.n	2ade <nwkRouteErrorReceived+0xe>
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    2ada:	0018      	movs	r0, r3
    2adc:	bd10      	pop	{r4, pc}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2ade:	6883      	ldr	r3, [r0, #8]
	nwkRouteRemove(command->dstAddr, command->multicast);
    2ae0:	7959      	ldrb	r1, [r3, #5]
    2ae2:	78da      	ldrb	r2, [r3, #3]
    2ae4:	7918      	ldrb	r0, [r3, #4]
    2ae6:	0200      	lsls	r0, r0, #8
    2ae8:	4310      	orrs	r0, r2
    2aea:	4b02      	ldr	r3, [pc, #8]	; (2af4 <nwkRouteErrorReceived+0x24>)
    2aec:	4798      	blx	r3
	return true;
    2aee:	2301      	movs	r3, #1
    2af0:	e7f3      	b.n	2ada <nwkRouteErrorReceived+0xa>
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	00002ab9 	.word	0x00002ab9

00002af8 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2af8:	b510      	push	{r4, lr}
	if (0 == (ind->options & NWK_IND_OPT_SECURED)) {
		return false;
	}
#endif

	if (ind->size < 1) {
    2afa:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2afc:	2300      	movs	r3, #0
	if (ind->size < 1) {
    2afe:	2a00      	cmp	r2, #0
    2b00:	d00a      	beq.n	2b18 <nwkRxSeriveDataInd+0x20>
	}

	switch (ind->data[0]) {
    2b02:	6883      	ldr	r3, [r0, #8]
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	2b00      	cmp	r3, #0
    2b08:	d003      	beq.n	2b12 <nwkRxSeriveDataInd+0x1a>
    2b0a:	2b01      	cmp	r3, #1
    2b0c:	d006      	beq.n	2b1c <nwkRxSeriveDataInd+0x24>
	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
#endif

	default:
		return false;
    2b0e:	2300      	movs	r3, #0
    2b10:	e002      	b.n	2b18 <nwkRxSeriveDataInd+0x20>
		return nwkTxAckReceived(ind);
    2b12:	4b04      	ldr	r3, [pc, #16]	; (2b24 <nwkRxSeriveDataInd+0x2c>)
    2b14:	4798      	blx	r3
    2b16:	0003      	movs	r3, r0
	}
}
    2b18:	0018      	movs	r0, r3
    2b1a:	bd10      	pop	{r4, pc}
		return nwkRouteErrorReceived(ind);
    2b1c:	4b02      	ldr	r3, [pc, #8]	; (2b28 <nwkRxSeriveDataInd+0x30>)
    2b1e:	4798      	blx	r3
    2b20:	0003      	movs	r3, r0
    2b22:	e7f9      	b.n	2b18 <nwkRxSeriveDataInd+0x20>
    2b24:	00002ca1 	.word	0x00002ca1
    2b28:	00002ad1 	.word	0x00002ad1

00002b2c <nwkRxDuplicateRejectionTimerHandler>:
{
    2b2c:	b570      	push	{r4, r5, r6, lr}
    2b2e:	490b      	ldr	r1, [pc, #44]	; (2b5c <nwkRxDuplicateRejectionTimerHandler+0x30>)
    2b30:	1d0b      	adds	r3, r1, #4
    2b32:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2b34:	2400      	movs	r4, #0
			restart = true;
    2b36:	2501      	movs	r5, #1
    2b38:	e002      	b.n	2b40 <nwkRxDuplicateRejectionTimerHandler+0x14>
    2b3a:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2b3c:	428b      	cmp	r3, r1
    2b3e:	d006      	beq.n	2b4e <nwkRxDuplicateRejectionTimerHandler+0x22>
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2b40:	781a      	ldrb	r2, [r3, #0]
    2b42:	2a00      	cmp	r2, #0
    2b44:	d0f9      	beq.n	2b3a <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2b46:	3a01      	subs	r2, #1
    2b48:	701a      	strb	r2, [r3, #0]
			restart = true;
    2b4a:	002c      	movs	r4, r5
    2b4c:	e7f5      	b.n	2b3a <nwkRxDuplicateRejectionTimerHandler+0xe>
	if (restart) {
    2b4e:	2c00      	cmp	r4, #0
    2b50:	d100      	bne.n	2b54 <nwkRxDuplicateRejectionTimerHandler+0x28>
}
    2b52:	bd70      	pop	{r4, r5, r6, pc}
		SYS_TimerStart(timer);
    2b54:	4b02      	ldr	r3, [pc, #8]	; (2b60 <nwkRxDuplicateRejectionTimerHandler+0x34>)
    2b56:	4798      	blx	r3
}
    2b58:	e7fb      	b.n	2b52 <nwkRxDuplicateRejectionTimerHandler+0x26>
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	20000708 	.word	0x20000708
    2b60:	00002e39 	.word	0x00002e39

00002b64 <nwkRxInit>:
{
    2b64:	b510      	push	{r4, lr}
    2b66:	4a0a      	ldr	r2, [pc, #40]	; (2b90 <nwkRxInit+0x2c>)
    2b68:	1d13      	adds	r3, r2, #4
    2b6a:	3240      	adds	r2, #64	; 0x40
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2b6c:	2100      	movs	r1, #0
    2b6e:	7019      	strb	r1, [r3, #0]
    2b70:	3306      	adds	r3, #6
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2b72:	4293      	cmp	r3, r2
    2b74:	d1fb      	bne.n	2b6e <nwkRxInit+0xa>
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2b76:	4b07      	ldr	r3, [pc, #28]	; (2b94 <nwkRxInit+0x30>)
    2b78:	2264      	movs	r2, #100	; 0x64
    2b7a:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2b7c:	2200      	movs	r2, #0
    2b7e:	731a      	strb	r2, [r3, #12]
		= nwkRxDuplicateRejectionTimerHandler;
    2b80:	4a05      	ldr	r2, [pc, #20]	; (2b98 <nwkRxInit+0x34>)
    2b82:	611a      	str	r2, [r3, #16]
	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2b84:	4905      	ldr	r1, [pc, #20]	; (2b9c <nwkRxInit+0x38>)
    2b86:	2000      	movs	r0, #0
    2b88:	4b05      	ldr	r3, [pc, #20]	; (2ba0 <nwkRxInit+0x3c>)
    2b8a:	4798      	blx	r3
}
    2b8c:	bd10      	pop	{r4, pc}
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	20000708 	.word	0x20000708
    2b94:	20000744 	.word	0x20000744
    2b98:	00002b2d 	.word	0x00002b2d
    2b9c:	00002af9 	.word	0x00002af9
    2ba0:	000029d5 	.word	0x000029d5

00002ba4 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2ba4:	2300      	movs	r3, #0
    2ba6:	4a02      	ldr	r2, [pc, #8]	; (2bb0 <nwkSecurityInit+0xc>)
    2ba8:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2baa:	4a02      	ldr	r2, [pc, #8]	; (2bb4 <nwkSecurityInit+0x10>)
    2bac:	6013      	str	r3, [r2, #0]
}
    2bae:	4770      	bx	lr
    2bb0:	2000075c 	.word	0x2000075c
    2bb4:	20000758 	.word	0x20000758

00002bb8 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bba:	b083      	sub	sp, #12
    2bbc:	9001      	str	r0, [sp, #4]
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2bbe:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2bc0:	2000      	movs	r0, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2bc2:	4d11      	ldr	r5, [pc, #68]	; (2c08 <nwkTxDelayTimerHandler+0x50>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2bc4:	2686      	movs	r6, #134	; 0x86
    2bc6:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2bc8:	47a8      	blx	r5
    2bca:	2800      	cmp	r0, #0
    2bcc:	d013      	beq.n	2bf6 <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2bce:	7803      	ldrb	r3, [r0, #0]
    2bd0:	2b11      	cmp	r3, #17
    2bd2:	d1f9      	bne.n	2bc8 <nwkTxDelayTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2bd4:	5d82      	ldrb	r2, [r0, r6]
    2bd6:	5dc3      	ldrb	r3, [r0, r7]
    2bd8:	021b      	lsls	r3, r3, #8
    2bda:	4313      	orrs	r3, r2
    2bdc:	3b01      	subs	r3, #1
    2bde:	b29b      	uxth	r3, r3
    2be0:	5583      	strb	r3, [r0, r6]
    2be2:	0a19      	lsrs	r1, r3, #8
    2be4:	0002      	movs	r2, r0
    2be6:	3286      	adds	r2, #134	; 0x86
    2be8:	7051      	strb	r1, [r2, #1]
			restart = true;
    2bea:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2bec:	2b00      	cmp	r3, #0
    2bee:	d1eb      	bne.n	2bc8 <nwkTxDelayTimerHandler+0x10>
				frame->state = NWK_TX_STATE_SEND;
    2bf0:	3313      	adds	r3, #19
    2bf2:	7003      	strb	r3, [r0, #0]
    2bf4:	e7e8      	b.n	2bc8 <nwkTxDelayTimerHandler+0x10>
			}
		}
	}

	if (restart) {
    2bf6:	2c00      	cmp	r4, #0
    2bf8:	d101      	bne.n	2bfe <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
	}
}
    2bfa:	b003      	add	sp, #12
    2bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2bfe:	9801      	ldr	r0, [sp, #4]
    2c00:	4b02      	ldr	r3, [pc, #8]	; (2c0c <nwkTxDelayTimerHandler+0x54>)
    2c02:	4798      	blx	r3
}
    2c04:	e7f9      	b.n	2bfa <nwkTxDelayTimerHandler+0x42>
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	00002a05 	.word	0x00002a05
    2c0c:	00002e39 	.word	0x00002e39

00002c10 <nwkTxAckWaitTimerHandler>:
{
    2c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c12:	b083      	sub	sp, #12
    2c14:	9001      	str	r0, [sp, #4]
	bool restart = false;
    2c16:	2400      	movs	r4, #0
	NwkFrame_t *frame = NULL;
    2c18:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2c1a:	4d12      	ldr	r5, [pc, #72]	; (2c64 <nwkTxAckWaitTimerHandler+0x54>)
			if (0 == --frame->tx.timeout) {
    2c1c:	2686      	movs	r6, #134	; 0x86
    2c1e:	2787      	movs	r7, #135	; 0x87
	while (NULL != (frame = nwkFrameNext(frame))) {
    2c20:	47a8      	blx	r5
    2c22:	2800      	cmp	r0, #0
    2c24:	d016      	beq.n	2c54 <nwkTxAckWaitTimerHandler+0x44>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2c26:	7803      	ldrb	r3, [r0, #0]
    2c28:	2b16      	cmp	r3, #22
    2c2a:	d1f9      	bne.n	2c20 <nwkTxAckWaitTimerHandler+0x10>
			if (0 == --frame->tx.timeout) {
    2c2c:	5d82      	ldrb	r2, [r0, r6]
    2c2e:	5dc3      	ldrb	r3, [r0, r7]
    2c30:	021b      	lsls	r3, r3, #8
    2c32:	4313      	orrs	r3, r2
    2c34:	3b01      	subs	r3, #1
    2c36:	b29b      	uxth	r3, r3
    2c38:	5583      	strb	r3, [r0, r6]
    2c3a:	0a19      	lsrs	r1, r3, #8
    2c3c:	0002      	movs	r2, r0
    2c3e:	3286      	adds	r2, #134	; 0x86
    2c40:	7051      	strb	r1, [r2, #1]
			restart = true;
    2c42:	2401      	movs	r4, #1
			if (0 == --frame->tx.timeout) {
    2c44:	2b00      	cmp	r3, #0
    2c46:	d1eb      	bne.n	2c20 <nwkTxAckWaitTimerHandler+0x10>
	frame->state = NWK_TX_STATE_CONFIRM;
    2c48:	3317      	adds	r3, #23
    2c4a:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2c4c:	2210      	movs	r2, #16
    2c4e:	336e      	adds	r3, #110	; 0x6e
    2c50:	54c2      	strb	r2, [r0, r3]
    2c52:	e7e5      	b.n	2c20 <nwkTxAckWaitTimerHandler+0x10>
	if (restart) {
    2c54:	2c00      	cmp	r4, #0
    2c56:	d101      	bne.n	2c5c <nwkTxAckWaitTimerHandler+0x4c>
}
    2c58:	b003      	add	sp, #12
    2c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SYS_TimerStart(timer);
    2c5c:	9801      	ldr	r0, [sp, #4]
    2c5e:	4b02      	ldr	r3, [pc, #8]	; (2c68 <nwkTxAckWaitTimerHandler+0x58>)
    2c60:	4798      	blx	r3
}
    2c62:	e7f9      	b.n	2c58 <nwkTxAckWaitTimerHandler+0x48>
    2c64:	00002a05 	.word	0x00002a05
    2c68:	00002e39 	.word	0x00002e39

00002c6c <nwkTxInit>:
	nwkTxPhyActiveFrame = NULL;
    2c6c:	2200      	movs	r2, #0
    2c6e:	4b07      	ldr	r3, [pc, #28]	; (2c8c <nwkTxInit+0x20>)
    2c70:	601a      	str	r2, [r3, #0]
	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2c72:	4b07      	ldr	r3, [pc, #28]	; (2c90 <nwkTxInit+0x24>)
    2c74:	2132      	movs	r1, #50	; 0x32
    2c76:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2c78:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2c7a:	4906      	ldr	r1, [pc, #24]	; (2c94 <nwkTxInit+0x28>)
    2c7c:	6119      	str	r1, [r3, #16]
	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2c7e:	4b06      	ldr	r3, [pc, #24]	; (2c98 <nwkTxInit+0x2c>)
    2c80:	210a      	movs	r1, #10
    2c82:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2c84:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2c86:	4a05      	ldr	r2, [pc, #20]	; (2c9c <nwkTxInit+0x30>)
    2c88:	611a      	str	r2, [r3, #16]
}
    2c8a:	4770      	bx	lr
    2c8c:	20000788 	.word	0x20000788
    2c90:	20000760 	.word	0x20000760
    2c94:	00002c11 	.word	0x00002c11
    2c98:	20000774 	.word	0x20000774
    2c9c:	00002bb9 	.word	0x00002bb9

00002ca0 <nwkTxAckReceived>:
{
    2ca0:	b570      	push	{r4, r5, r6, lr}
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2ca2:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2ca4:	2300      	movs	r3, #0
	if (sizeof(NwkCommandAck_t) != ind->size) {
    2ca6:	2a03      	cmp	r2, #3
    2ca8:	d001      	beq.n	2cae <nwkTxAckReceived+0xe>
}
    2caa:	0018      	movs	r0, r3
    2cac:	bd70      	pop	{r4, r5, r6, pc}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2cae:	6885      	ldr	r5, [r0, #8]
    2cb0:	2000      	movs	r0, #0
	while (NULL != (frame = nwkFrameNext(frame))) {
    2cb2:	4c0a      	ldr	r4, [pc, #40]	; (2cdc <nwkTxAckReceived+0x3c>)
    2cb4:	47a0      	blx	r4
    2cb6:	2800      	cmp	r0, #0
    2cb8:	d00d      	beq.n	2cd6 <nwkTxAckReceived+0x36>
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2cba:	7803      	ldrb	r3, [r0, #0]
    2cbc:	2b16      	cmp	r3, #22
    2cbe:	d1f9      	bne.n	2cb4 <nwkTxAckReceived+0x14>
    2cc0:	7b02      	ldrb	r2, [r0, #12]
    2cc2:	786b      	ldrb	r3, [r5, #1]
    2cc4:	429a      	cmp	r2, r3
    2cc6:	d1f5      	bne.n	2cb4 <nwkTxAckReceived+0x14>
			frame->state = NWK_TX_STATE_CONFIRM;
    2cc8:	2317      	movs	r3, #23
    2cca:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2ccc:	78aa      	ldrb	r2, [r5, #2]
    2cce:	3371      	adds	r3, #113	; 0x71
    2cd0:	54c2      	strb	r2, [r0, r3]
			return true;
    2cd2:	3b87      	subs	r3, #135	; 0x87
    2cd4:	e7e9      	b.n	2caa <nwkTxAckReceived+0xa>
	return false;
    2cd6:	2300      	movs	r3, #0
    2cd8:	e7e7      	b.n	2caa <nwkTxAckReceived+0xa>
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	00002a05 	.word	0x00002a05

00002ce0 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2ce0:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2ce2:	4b0e      	ldr	r3, [pc, #56]	; (2d1c <PHY_Init+0x3c>)
    2ce4:	4798      	blx	r3
	PhyReset();
    2ce6:	4b0e      	ldr	r3, [pc, #56]	; (2d20 <PHY_Init+0x40>)
    2ce8:	4798      	blx	r3
	phyRxState = false;
    2cea:	2200      	movs	r2, #0
    2cec:	4b0d      	ldr	r3, [pc, #52]	; (2d24 <PHY_Init+0x44>)
    2cee:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2cf0:	3201      	adds	r2, #1
    2cf2:	4b0d      	ldr	r3, [pc, #52]	; (2d28 <PHY_Init+0x48>)
    2cf4:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2cf6:	4e0d      	ldr	r6, [pc, #52]	; (2d2c <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2cf8:	4d0d      	ldr	r5, [pc, #52]	; (2d30 <PHY_Init+0x50>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2cfa:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    2cfc:	2108      	movs	r1, #8
    2cfe:	2002      	movs	r0, #2
    2d00:	47b0      	blx	r6
	value = trx_reg_read(reg);
    2d02:	2001      	movs	r0, #1
    2d04:	47a8      	blx	r5
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2d06:	4020      	ands	r0, r4
    2d08:	2808      	cmp	r0, #8
    2d0a:	d1f7      	bne.n	2cfc <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    2d0c:	212e      	movs	r1, #46	; 0x2e
    2d0e:	3804      	subs	r0, #4
    2d10:	4c06      	ldr	r4, [pc, #24]	; (2d2c <PHY_Init+0x4c>)
    2d12:	47a0      	blx	r4
    2d14:	21a0      	movs	r1, #160	; 0xa0
    2d16:	200c      	movs	r0, #12
    2d18:	47a0      	blx	r4
}
    2d1a:	bd70      	pop	{r4, r5, r6, pc}
    2d1c:	00003001 	.word	0x00003001
    2d20:	0000311d 	.word	0x0000311d
    2d24:	2000078c 	.word	0x2000078c
    2d28:	2000078d 	.word	0x2000078d
    2d2c:	00003249 	.word	0x00003249
    2d30:	0000314d 	.word	0x0000314d

00002d34 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2d34:	b510      	push	{r4, lr}
	SYS_TimerInit();
    2d36:	4b04      	ldr	r3, [pc, #16]	; (2d48 <SYS_Init+0x14>)
    2d38:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2d3a:	4b04      	ldr	r3, [pc, #16]	; (2d4c <SYS_Init+0x18>)
    2d3c:	4798      	blx	r3
#endif
	PHY_Init();
    2d3e:	4b04      	ldr	r3, [pc, #16]	; (2d50 <SYS_Init+0x1c>)
    2d40:	4798      	blx	r3
	NWK_Init();
    2d42:	4b04      	ldr	r3, [pc, #16]	; (2d54 <SYS_Init+0x20>)
    2d44:	4798      	blx	r3
}
    2d46:	bd10      	pop	{r4, pc}
    2d48:	00002dd1 	.word	0x00002dd1
    2d4c:	00002fe1 	.word	0x00002fe1
    2d50:	00002ce1 	.word	0x00002ce1
    2d54:	00002981 	.word	0x00002981

00002d58 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2d58:	b530      	push	{r4, r5, lr}
	if (timers) {
    2d5a:	4b14      	ldr	r3, [pc, #80]	; (2dac <placeTimer+0x54>)
    2d5c:	681d      	ldr	r5, [r3, #0]
    2d5e:	2d00      	cmp	r5, #0
    2d60:	d01c      	beq.n	2d9c <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2d62:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2d64:	6869      	ldr	r1, [r5, #4]
    2d66:	428a      	cmp	r2, r1
    2d68:	d309      	bcc.n	2d7e <placeTimer+0x26>
    2d6a:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    2d6c:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d6e:	6823      	ldr	r3, [r4, #0]
    2d70:	2b00      	cmp	r3, #0
    2d72:	d008      	beq.n	2d86 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    2d74:	6859      	ldr	r1, [r3, #4]
    2d76:	4291      	cmp	r1, r2
    2d78:	d803      	bhi.n	2d82 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d7a:	001c      	movs	r4, r3
    2d7c:	e7f6      	b.n	2d6c <placeTimer+0x14>
    2d7e:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    2d80:	2400      	movs	r4, #0
				t->timeout -= timeout;
    2d82:	1a89      	subs	r1, r1, r2
    2d84:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    2d86:	6042      	str	r2, [r0, #4]

		if (prev) {
    2d88:	2c00      	cmp	r4, #0
    2d8a:	d003      	beq.n	2d94 <placeTimer+0x3c>
			timer->next = prev->next;
    2d8c:	6823      	ldr	r3, [r4, #0]
    2d8e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2d90:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    2d92:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    2d94:	6005      	str	r5, [r0, #0]
			timers = timer;
    2d96:	4b05      	ldr	r3, [pc, #20]	; (2dac <placeTimer+0x54>)
    2d98:	6018      	str	r0, [r3, #0]
    2d9a:	e7fa      	b.n	2d92 <placeTimer+0x3a>
		timer->next = NULL;
    2d9c:	2300      	movs	r3, #0
    2d9e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2da0:	6883      	ldr	r3, [r0, #8]
    2da2:	6043      	str	r3, [r0, #4]
		timers = timer;
    2da4:	4b01      	ldr	r3, [pc, #4]	; (2dac <placeTimer+0x54>)
    2da6:	6018      	str	r0, [r3, #0]
}
    2da8:	e7f3      	b.n	2d92 <placeTimer+0x3a>
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	20000790 	.word	0x20000790

00002db0 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2db0:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    2db2:	4a04      	ldr	r2, [pc, #16]	; (2dc4 <SYS_HwExpiry_Cb+0x14>)
    2db4:	7813      	ldrb	r3, [r2, #0]
    2db6:	3301      	adds	r3, #1
    2db8:	b2db      	uxtb	r3, r3
    2dba:	7013      	strb	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2dbc:	4802      	ldr	r0, [pc, #8]	; (2dc8 <SYS_HwExpiry_Cb+0x18>)
    2dbe:	4b03      	ldr	r3, [pc, #12]	; (2dcc <SYS_HwExpiry_Cb+0x1c>)
    2dc0:	4798      	blx	r3
}
    2dc2:	bd10      	pop	{r4, pc}
    2dc4:	200015c8 	.word	0x200015c8
    2dc8:	00002710 	.word	0x00002710
    2dcc:	00003405 	.word	0x00003405

00002dd0 <SYS_TimerInit>:
{
    2dd0:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2dd2:	2400      	movs	r4, #0
    2dd4:	4b06      	ldr	r3, [pc, #24]	; (2df0 <SYS_TimerInit+0x20>)
    2dd6:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2dd8:	4806      	ldr	r0, [pc, #24]	; (2df4 <SYS_TimerInit+0x24>)
    2dda:	4b07      	ldr	r3, [pc, #28]	; (2df8 <SYS_TimerInit+0x28>)
    2ddc:	4798      	blx	r3
	common_tc_init();
    2dde:	4b07      	ldr	r3, [pc, #28]	; (2dfc <SYS_TimerInit+0x2c>)
    2de0:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2de2:	4807      	ldr	r0, [pc, #28]	; (2e00 <SYS_TimerInit+0x30>)
    2de4:	4b07      	ldr	r3, [pc, #28]	; (2e04 <SYS_TimerInit+0x34>)
    2de6:	4798      	blx	r3
	timers = NULL;
    2de8:	4b07      	ldr	r3, [pc, #28]	; (2e08 <SYS_TimerInit+0x38>)
    2dea:	601c      	str	r4, [r3, #0]
}
    2dec:	bd10      	pop	{r4, pc}
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	200015c8 	.word	0x200015c8
    2df4:	00002db1 	.word	0x00002db1
    2df8:	000034f5 	.word	0x000034f5
    2dfc:	00003471 	.word	0x00003471
    2e00:	00002710 	.word	0x00002710
    2e04:	00003405 	.word	0x00003405
    2e08:	20000790 	.word	0x20000790

00002e0c <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e0c:	4b09      	ldr	r3, [pc, #36]	; (2e34 <SYS_TimerStarted+0x28>)
    2e0e:	681b      	ldr	r3, [r3, #0]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d00a      	beq.n	2e2a <SYS_TimerStarted+0x1e>
		if (t == timer) {
    2e14:	4283      	cmp	r3, r0
    2e16:	d00a      	beq.n	2e2e <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2e18:	681b      	ldr	r3, [r3, #0]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d003      	beq.n	2e26 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    2e1e:	4298      	cmp	r0, r3
    2e20:	d1fa      	bne.n	2e18 <SYS_TimerStarted+0xc>
			return true;
    2e22:	2001      	movs	r0, #1
    2e24:	e000      	b.n	2e28 <SYS_TimerStarted+0x1c>
	return false;
    2e26:	2000      	movs	r0, #0
}
    2e28:	4770      	bx	lr
	return false;
    2e2a:	2000      	movs	r0, #0
    2e2c:	e7fc      	b.n	2e28 <SYS_TimerStarted+0x1c>
			return true;
    2e2e:	2001      	movs	r0, #1
    2e30:	e7fa      	b.n	2e28 <SYS_TimerStarted+0x1c>
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	20000790 	.word	0x20000790

00002e38 <SYS_TimerStart>:
{
    2e38:	b510      	push	{r4, lr}
    2e3a:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    2e3c:	4b04      	ldr	r3, [pc, #16]	; (2e50 <SYS_TimerStart+0x18>)
    2e3e:	4798      	blx	r3
    2e40:	2800      	cmp	r0, #0
    2e42:	d000      	beq.n	2e46 <SYS_TimerStart+0xe>
}
    2e44:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    2e46:	0020      	movs	r0, r4
    2e48:	4b02      	ldr	r3, [pc, #8]	; (2e54 <SYS_TimerStart+0x1c>)
    2e4a:	4798      	blx	r3
}
    2e4c:	e7fa      	b.n	2e44 <SYS_TimerStart+0xc>
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	00002e0d 	.word	0x00002e0d
    2e54:	00002d59 	.word	0x00002d59

00002e58 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2e58:	b510      	push	{r4, lr}
	tmr_cca_callback();
    2e5a:	4b01      	ldr	r3, [pc, #4]	; (2e60 <tc_cca_callback+0x8>)
    2e5c:	4798      	blx	r3
}
    2e5e:	bd10      	pop	{r4, pc}
    2e60:	000034d9 	.word	0x000034d9

00002e64 <tc_ovf_callback>:
{
    2e64:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    2e66:	4b01      	ldr	r3, [pc, #4]	; (2e6c <tc_ovf_callback+0x8>)
    2e68:	4798      	blx	r3
}
    2e6a:	bd10      	pop	{r4, pc}
    2e6c:	00003491 	.word	0x00003491

00002e70 <tmr_read_count>:
{
    2e70:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2e72:	4802      	ldr	r0, [pc, #8]	; (2e7c <tmr_read_count+0xc>)
    2e74:	4b02      	ldr	r3, [pc, #8]	; (2e80 <tmr_read_count+0x10>)
    2e76:	4798      	blx	r3
    2e78:	b280      	uxth	r0, r0
}
    2e7a:	bd10      	pop	{r4, pc}
    2e7c:	20001600 	.word	0x20001600
    2e80:	0000274d 	.word	0x0000274d

00002e84 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2e84:	4b03      	ldr	r3, [pc, #12]	; (2e94 <tmr_disable_cc_interrupt+0x10>)
    2e86:	2110      	movs	r1, #16
    2e88:	681a      	ldr	r2, [r3, #0]
    2e8a:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2e8c:	7e5a      	ldrb	r2, [r3, #25]
    2e8e:	438a      	bics	r2, r1
    2e90:	765a      	strb	r2, [r3, #25]
}
    2e92:	4770      	bx	lr
    2e94:	20001600 	.word	0x20001600

00002e98 <tmr_enable_cc_interrupt>:
{
    2e98:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e9a:	4c0a      	ldr	r4, [pc, #40]	; (2ec4 <tmr_enable_cc_interrupt+0x2c>)
    2e9c:	6820      	ldr	r0, [r4, #0]
    2e9e:	4b0a      	ldr	r3, [pc, #40]	; (2ec8 <tmr_enable_cc_interrupt+0x30>)
    2ea0:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2ea2:	4b0a      	ldr	r3, [pc, #40]	; (2ecc <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ea4:	5c1b      	ldrb	r3, [r3, r0]
    2ea6:	221f      	movs	r2, #31
    2ea8:	401a      	ands	r2, r3
    2eaa:	2301      	movs	r3, #1
    2eac:	4093      	lsls	r3, r2
    2eae:	4a08      	ldr	r2, [pc, #32]	; (2ed0 <tmr_enable_cc_interrupt+0x38>)
    2eb0:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2eb2:	7e63      	ldrb	r3, [r4, #25]
    2eb4:	2210      	movs	r2, #16
    2eb6:	4313      	orrs	r3, r2
    2eb8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2eba:	6823      	ldr	r3, [r4, #0]
    2ebc:	2210      	movs	r2, #16
    2ebe:	735a      	strb	r2, [r3, #13]
}
    2ec0:	bd10      	pop	{r4, pc}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	20001600 	.word	0x20001600
    2ec8:	000024d9 	.word	0x000024d9
    2ecc:	00008b94 	.word	0x00008b94
    2ed0:	e000e100 	.word	0xe000e100

00002ed4 <tmr_write_cmpreg>:
{
    2ed4:	b510      	push	{r4, lr}
    2ed6:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2ed8:	2100      	movs	r1, #0
    2eda:	4802      	ldr	r0, [pc, #8]	; (2ee4 <tmr_write_cmpreg+0x10>)
    2edc:	4b02      	ldr	r3, [pc, #8]	; (2ee8 <tmr_write_cmpreg+0x14>)
    2ede:	4798      	blx	r3
}
    2ee0:	bd10      	pop	{r4, pc}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	20001600 	.word	0x20001600
    2ee8:	00002779 	.word	0x00002779

00002eec <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eee:	46ce      	mov	lr, r9
    2ef0:	4647      	mov	r7, r8
    2ef2:	b580      	push	{r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2ef4:	4a2d      	ldr	r2, [pc, #180]	; (2fac <tmr_init+0xc0>)
    2ef6:	2300      	movs	r3, #0
    2ef8:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2efa:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2efc:	2100      	movs	r1, #0
    2efe:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2f00:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2f02:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2f04:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2f06:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2f08:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2f0a:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2f0c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2f0e:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2f10:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2f12:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2f14:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2f16:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2f18:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2f1a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2f1c:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2f1e:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2f20:	3b01      	subs	r3, #1
    2f22:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2f24:	4c22      	ldr	r4, [pc, #136]	; (2fb0 <tmr_init+0xc4>)
    2f26:	4923      	ldr	r1, [pc, #140]	; (2fb4 <tmr_init+0xc8>)
    2f28:	0020      	movs	r0, r4
    2f2a:	4b23      	ldr	r3, [pc, #140]	; (2fb8 <tmr_init+0xcc>)
    2f2c:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2f2e:	2200      	movs	r2, #0
    2f30:	4922      	ldr	r1, [pc, #136]	; (2fbc <tmr_init+0xd0>)
    2f32:	0020      	movs	r0, r4
    2f34:	4d22      	ldr	r5, [pc, #136]	; (2fc0 <tmr_init+0xd4>)
    2f36:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2f38:	2202      	movs	r2, #2
    2f3a:	4922      	ldr	r1, [pc, #136]	; (2fc4 <tmr_init+0xd8>)
    2f3c:	0020      	movs	r0, r4
    2f3e:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f40:	6820      	ldr	r0, [r4, #0]
    2f42:	4b21      	ldr	r3, [pc, #132]	; (2fc8 <tmr_init+0xdc>)
    2f44:	4699      	mov	r9, r3
    2f46:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f48:	4b20      	ldr	r3, [pc, #128]	; (2fcc <tmr_init+0xe0>)
    2f4a:	4698      	mov	r8, r3
    2f4c:	5c1b      	ldrb	r3, [r3, r0]
    2f4e:	261f      	movs	r6, #31
    2f50:	4033      	ands	r3, r6
    2f52:	2501      	movs	r5, #1
    2f54:	002a      	movs	r2, r5
    2f56:	409a      	lsls	r2, r3
    2f58:	4f1d      	ldr	r7, [pc, #116]	; (2fd0 <tmr_init+0xe4>)
    2f5a:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2f5c:	7e63      	ldrb	r3, [r4, #25]
    2f5e:	2201      	movs	r2, #1
    2f60:	4313      	orrs	r3, r2
    2f62:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2f64:	6823      	ldr	r3, [r4, #0]
    2f66:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f68:	0018      	movs	r0, r3
    2f6a:	47c8      	blx	r9
    2f6c:	4643      	mov	r3, r8
    2f6e:	5c1b      	ldrb	r3, [r3, r0]
    2f70:	401e      	ands	r6, r3
    2f72:	40b5      	lsls	r5, r6
    2f74:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f76:	7e63      	ldrb	r3, [r4, #25]
    2f78:	2210      	movs	r2, #16
    2f7a:	4313      	orrs	r3, r2
    2f7c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f7e:	6822      	ldr	r2, [r4, #0]
    2f80:	2310      	movs	r3, #16
    2f82:	7353      	strb	r3, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f84:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2f86:	b25b      	sxtb	r3, r3
    2f88:	2b00      	cmp	r3, #0
    2f8a:	dbfb      	blt.n	2f84 <tmr_init+0x98>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2f8c:	8813      	ldrh	r3, [r2, #0]
    2f8e:	2102      	movs	r1, #2
    2f90:	430b      	orrs	r3, r1
    2f92:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2f94:	2000      	movs	r0, #0
    2f96:	4b0f      	ldr	r3, [pc, #60]	; (2fd4 <tmr_init+0xe8>)
    2f98:	4798      	blx	r3
    2f9a:	490f      	ldr	r1, [pc, #60]	; (2fd8 <tmr_init+0xec>)
    2f9c:	4b0f      	ldr	r3, [pc, #60]	; (2fdc <tmr_init+0xf0>)
    2f9e:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2fa0:	b2c0      	uxtb	r0, r0
}
    2fa2:	bc0c      	pop	{r2, r3}
    2fa4:	4690      	mov	r8, r2
    2fa6:	4699      	mov	r9, r3
    2fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2faa:	46c0      	nop			; (mov r8, r8)
    2fac:	200015cc 	.word	0x200015cc
    2fb0:	20001600 	.word	0x20001600
    2fb4:	42002c00 	.word	0x42002c00
    2fb8:	00002511 	.word	0x00002511
    2fbc:	00002e65 	.word	0x00002e65
    2fc0:	00002411 	.word	0x00002411
    2fc4:	00002e59 	.word	0x00002e59
    2fc8:	000024d9 	.word	0x000024d9
    2fcc:	00008b94 	.word	0x00008b94
    2fd0:	e000e100 	.word	0xe000e100
    2fd4:	000021a1 	.word	0x000021a1
    2fd8:	000f4240 	.word	0x000f4240
    2fdc:	00005f19 	.word	0x00005f19

00002fe0 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2fe0:	4770      	bx	lr
	...

00002fe4 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    2fe4:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    2fe6:	2201      	movs	r2, #1
    2fe8:	4b03      	ldr	r3, [pc, #12]	; (2ff8 <AT86RFX_ISR+0x14>)
    2fea:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    2fec:	4b03      	ldr	r3, [pc, #12]	; (2ffc <AT86RFX_ISR+0x18>)
    2fee:	681b      	ldr	r3, [r3, #0]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d000      	beq.n	2ff6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    2ff4:	4798      	blx	r3
	}
}
    2ff6:	bd10      	pop	{r4, pc}
    2ff8:	40001800 	.word	0x40001800
    2ffc:	20000794 	.word	0x20000794

00003000 <trx_spi_init>:

void trx_spi_init(void)
{
    3000:	b530      	push	{r4, r5, lr}
    3002:	b085      	sub	sp, #20
	config->address_enabled = false;
    3004:	4a34      	ldr	r2, [pc, #208]	; (30d8 <trx_spi_init+0xd8>)
    3006:	2300      	movs	r3, #0
    3008:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    300a:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    300c:	213f      	movs	r1, #63	; 0x3f
    300e:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    3010:	4c32      	ldr	r4, [pc, #200]	; (30dc <trx_spi_init+0xdc>)
    3012:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3014:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3016:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3018:	2201      	movs	r2, #1
    301a:	4669      	mov	r1, sp
    301c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    301e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3020:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3022:	203f      	movs	r0, #63	; 0x3f
    3024:	4b2e      	ldr	r3, [pc, #184]	; (30e0 <trx_spi_init+0xe0>)
    3026:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3028:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    302a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    302c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    302e:	2900      	cmp	r1, #0
    3030:	d104      	bne.n	303c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3032:	0953      	lsrs	r3, r2, #5
    3034:	01db      	lsls	r3, r3, #7
    3036:	492b      	ldr	r1, [pc, #172]	; (30e4 <trx_spi_init+0xe4>)
    3038:	468c      	mov	ip, r1
    303a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    303c:	211f      	movs	r1, #31
    303e:	4011      	ands	r1, r2
    3040:	2201      	movs	r2, #1
    3042:	0010      	movs	r0, r2
    3044:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3046:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3048:	4c27      	ldr	r4, [pc, #156]	; (30e8 <trx_spi_init+0xe8>)
    304a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    304c:	2300      	movs	r3, #0
    304e:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3050:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3052:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3054:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3056:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3058:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    305a:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    305c:	3223      	adds	r2, #35	; 0x23
    305e:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3060:	0020      	movs	r0, r4
    3062:	3018      	adds	r0, #24
    3064:	3a18      	subs	r2, #24
    3066:	2100      	movs	r1, #0
    3068:	4b20      	ldr	r3, [pc, #128]	; (30ec <trx_spi_init+0xec>)
    306a:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    306c:	2380      	movs	r3, #128	; 0x80
    306e:	025b      	lsls	r3, r3, #9
    3070:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3072:	4b1f      	ldr	r3, [pc, #124]	; (30f0 <trx_spi_init+0xf0>)
    3074:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3076:	4b1f      	ldr	r3, [pc, #124]	; (30f4 <trx_spi_init+0xf4>)
    3078:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    307a:	2301      	movs	r3, #1
    307c:	425b      	negs	r3, r3
    307e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3080:	4b1d      	ldr	r3, [pc, #116]	; (30f8 <trx_spi_init+0xf8>)
    3082:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3084:	4b1d      	ldr	r3, [pc, #116]	; (30fc <trx_spi_init+0xfc>)
    3086:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3088:	4d1d      	ldr	r5, [pc, #116]	; (3100 <trx_spi_init+0x100>)
    308a:	0022      	movs	r2, r4
    308c:	491d      	ldr	r1, [pc, #116]	; (3104 <trx_spi_init+0x104>)
    308e:	0028      	movs	r0, r5
    3090:	4b1d      	ldr	r3, [pc, #116]	; (3108 <trx_spi_init+0x108>)
    3092:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3094:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3096:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3098:	2b00      	cmp	r3, #0
    309a:	d1fc      	bne.n	3096 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    309c:	6813      	ldr	r3, [r2, #0]
    309e:	2502      	movs	r5, #2
    30a0:	432b      	orrs	r3, r5
    30a2:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    30a4:	ac01      	add	r4, sp, #4
    30a6:	0020      	movs	r0, r4
    30a8:	4b18      	ldr	r3, [pc, #96]	; (310c <trx_spi_init+0x10c>)
    30aa:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    30ac:	2320      	movs	r3, #32
    30ae:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    30b0:	2380      	movs	r3, #128	; 0x80
    30b2:	039b      	lsls	r3, r3, #14
    30b4:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    30b6:	7225      	strb	r5, [r4, #8]
	#if (SAML21)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    30b8:	2301      	movs	r3, #1
    30ba:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    30bc:	2200      	movs	r2, #0
    30be:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    30c0:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    30c2:	0021      	movs	r1, r4
    30c4:	2000      	movs	r0, #0
    30c6:	4b12      	ldr	r3, [pc, #72]	; (3110 <trx_spi_init+0x110>)
    30c8:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    30ca:	2200      	movs	r2, #0
    30cc:	2100      	movs	r1, #0
    30ce:	4811      	ldr	r0, [pc, #68]	; (3114 <trx_spi_init+0x114>)
    30d0:	4b11      	ldr	r3, [pc, #68]	; (3118 <trx_spi_init+0x118>)
    30d2:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    30d4:	b005      	add	sp, #20
    30d6:	bd30      	pop	{r4, r5, pc}
    30d8:	20001620 	.word	0x20001620
    30dc:	20001624 	.word	0x20001624
    30e0:	00000c71 	.word	0x00000c71
    30e4:	41004400 	.word	0x41004400
    30e8:	20001628 	.word	0x20001628
    30ec:	0000355b 	.word	0x0000355b
    30f0:	004c4b40 	.word	0x004c4b40
    30f4:	00530005 	.word	0x00530005
    30f8:	003e0005 	.word	0x003e0005
    30fc:	00520005 	.word	0x00520005
    3100:	20001660 	.word	0x20001660
    3104:	42001800 	.word	0x42001800
    3108:	00001159 	.word	0x00001159
    310c:	00000be5 	.word	0x00000be5
    3110:	00000bf9 	.word	0x00000bf9
    3114:	00002fe5 	.word	0x00002fe5
    3118:	00000ae1 	.word	0x00000ae1

0000311c <PhyReset>:

void PhyReset(void)
{
    311c:	b570      	push	{r4, r5, r6, lr}
    311e:	4c08      	ldr	r4, [pc, #32]	; (3140 <PhyReset+0x24>)
    3120:	2580      	movs	r5, #128	; 0x80
    3122:	022d      	lsls	r5, r5, #8
    3124:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    3126:	2280      	movs	r2, #128	; 0x80
    3128:	0352      	lsls	r2, r2, #13
    312a:	4b06      	ldr	r3, [pc, #24]	; (3144 <PhyReset+0x28>)
    312c:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    312e:	20a5      	movs	r0, #165	; 0xa5
    3130:	0040      	lsls	r0, r0, #1
    3132:	4e05      	ldr	r6, [pc, #20]	; (3148 <PhyReset+0x2c>)
    3134:	47b0      	blx	r6
    3136:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3138:	200a      	movs	r0, #10
    313a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    313c:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    313e:	bd70      	pop	{r4, r5, r6, pc}
    3140:	41004480 	.word	0x41004480
    3144:	41004400 	.word	0x41004400
    3148:	00000971 	.word	0x00000971

0000314c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    314c:	b570      	push	{r4, r5, r6, lr}
    314e:	b082      	sub	sp, #8
    3150:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3152:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3156:	425a      	negs	r2, r3
    3158:	4153      	adcs	r3, r2
    315a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    315c:	b672      	cpsid	i
    315e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3162:	2200      	movs	r2, #0
    3164:	4b33      	ldr	r3, [pc, #204]	; (3234 <trx_reg_read+0xe8>)
    3166:	701a      	strb	r2, [r3, #0]
	return flags;
    3168:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    316a:	4e33      	ldr	r6, [pc, #204]	; (3238 <trx_reg_read+0xec>)
    316c:	3201      	adds	r2, #1
    316e:	4933      	ldr	r1, [pc, #204]	; (323c <trx_reg_read+0xf0>)
    3170:	0030      	movs	r0, r6
    3172:	4b33      	ldr	r3, [pc, #204]	; (3240 <trx_reg_read+0xf4>)
    3174:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3176:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3178:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    317a:	7e1a      	ldrb	r2, [r3, #24]
    317c:	420a      	tst	r2, r1
    317e:	d0fc      	beq.n	317a <trx_reg_read+0x2e>
    3180:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3182:	07d2      	lsls	r2, r2, #31
    3184:	d502      	bpl.n	318c <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3186:	2280      	movs	r2, #128	; 0x80
    3188:	4315      	orrs	r5, r2
    318a:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    318c:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    318e:	7e1a      	ldrb	r2, [r3, #24]
    3190:	420a      	tst	r2, r1
    3192:	d0fc      	beq.n	318e <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3194:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3196:	7e1a      	ldrb	r2, [r3, #24]
    3198:	420a      	tst	r2, r1
    319a:	d0fc      	beq.n	3196 <trx_reg_read+0x4a>
    319c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    319e:	0752      	lsls	r2, r2, #29
    31a0:	d50c      	bpl.n	31bc <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31a2:	8b5a      	ldrh	r2, [r3, #26]
    31a4:	0752      	lsls	r2, r2, #29
    31a6:	d501      	bpl.n	31ac <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31a8:	2204      	movs	r2, #4
    31aa:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31ac:	4a22      	ldr	r2, [pc, #136]	; (3238 <trx_reg_read+0xec>)
    31ae:	7992      	ldrb	r2, [r2, #6]
    31b0:	2a01      	cmp	r2, #1
    31b2:	d034      	beq.n	321e <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31b6:	b2d2      	uxtb	r2, r2
    31b8:	4922      	ldr	r1, [pc, #136]	; (3244 <trx_reg_read+0xf8>)
    31ba:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    31bc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    31be:	7e1a      	ldrb	r2, [r3, #24]
    31c0:	420a      	tst	r2, r1
    31c2:	d0fc      	beq.n	31be <trx_reg_read+0x72>
    31c4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    31c6:	07d2      	lsls	r2, r2, #31
    31c8:	d501      	bpl.n	31ce <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    31ca:	2200      	movs	r2, #0
    31cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    31ce:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    31d0:	7e1a      	ldrb	r2, [r3, #24]
    31d2:	420a      	tst	r2, r1
    31d4:	d0fc      	beq.n	31d0 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    31d6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    31d8:	7e1a      	ldrb	r2, [r3, #24]
    31da:	420a      	tst	r2, r1
    31dc:	d0fc      	beq.n	31d8 <trx_reg_read+0x8c>
    31de:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    31e0:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    31e2:	0752      	lsls	r2, r2, #29
    31e4:	d50a      	bpl.n	31fc <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    31e6:	8b5a      	ldrh	r2, [r3, #26]
    31e8:	0752      	lsls	r2, r2, #29
    31ea:	d501      	bpl.n	31f0 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    31ec:	2204      	movs	r2, #4
    31ee:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    31f0:	4a11      	ldr	r2, [pc, #68]	; (3238 <trx_reg_read+0xec>)
    31f2:	7992      	ldrb	r2, [r2, #6]
    31f4:	2a01      	cmp	r2, #1
    31f6:	d018      	beq.n	322a <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    31f8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    31fa:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    31fc:	2200      	movs	r2, #0
    31fe:	490f      	ldr	r1, [pc, #60]	; (323c <trx_reg_read+0xf0>)
    3200:	480d      	ldr	r0, [pc, #52]	; (3238 <trx_reg_read+0xec>)
    3202:	4b0f      	ldr	r3, [pc, #60]	; (3240 <trx_reg_read+0xf4>)
    3204:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3206:	23ff      	movs	r3, #255	; 0xff
    3208:	4223      	tst	r3, r4
    320a:	d005      	beq.n	3218 <trx_reg_read+0xcc>
		cpu_irq_enable();
    320c:	2201      	movs	r2, #1
    320e:	4b09      	ldr	r3, [pc, #36]	; (3234 <trx_reg_read+0xe8>)
    3210:	701a      	strb	r2, [r3, #0]
    3212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3216:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3218:	b2e8      	uxtb	r0, r5
}
    321a:	b002      	add	sp, #8
    321c:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    321e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3220:	05d2      	lsls	r2, r2, #23
    3222:	0dd2      	lsrs	r2, r2, #23
    3224:	4907      	ldr	r1, [pc, #28]	; (3244 <trx_reg_read+0xf8>)
    3226:	800a      	strh	r2, [r1, #0]
    3228:	e7c8      	b.n	31bc <trx_reg_read+0x70>
    322a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    322c:	05ed      	lsls	r5, r5, #23
    322e:	0ded      	lsrs	r5, r5, #23
    3230:	e7e4      	b.n	31fc <trx_reg_read+0xb0>
    3232:	46c0      	nop			; (mov r8, r8)
    3234:	20000008 	.word	0x20000008
    3238:	20001660 	.word	0x20001660
    323c:	20001624 	.word	0x20001624
    3240:	0000141d 	.word	0x0000141d
    3244:	2000161c 	.word	0x2000161c

00003248 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3248:	b5f0      	push	{r4, r5, r6, r7, lr}
    324a:	b083      	sub	sp, #12
    324c:	0006      	movs	r6, r0
    324e:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3250:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3254:	425a      	negs	r2, r3
    3256:	4153      	adcs	r3, r2
    3258:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    325a:	b672      	cpsid	i
    325c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3260:	2200      	movs	r2, #0
    3262:	4b34      	ldr	r3, [pc, #208]	; (3334 <trx_reg_write+0xec>)
    3264:	701a      	strb	r2, [r3, #0]
	return flags;
    3266:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3268:	4f33      	ldr	r7, [pc, #204]	; (3338 <trx_reg_write+0xf0>)
    326a:	3201      	adds	r2, #1
    326c:	4933      	ldr	r1, [pc, #204]	; (333c <trx_reg_write+0xf4>)
    326e:	0038      	movs	r0, r7
    3270:	4b33      	ldr	r3, [pc, #204]	; (3340 <trx_reg_write+0xf8>)
    3272:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3274:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3276:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3278:	7e1a      	ldrb	r2, [r3, #24]
    327a:	420a      	tst	r2, r1
    327c:	d0fc      	beq.n	3278 <trx_reg_write+0x30>
    327e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3280:	07d2      	lsls	r2, r2, #31
    3282:	d502      	bpl.n	328a <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3284:	22c0      	movs	r2, #192	; 0xc0
    3286:	4316      	orrs	r6, r2
    3288:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    328a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    328c:	7e1a      	ldrb	r2, [r3, #24]
    328e:	420a      	tst	r2, r1
    3290:	d0fc      	beq.n	328c <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3292:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3294:	7e1a      	ldrb	r2, [r3, #24]
    3296:	420a      	tst	r2, r1
    3298:	d0fc      	beq.n	3294 <trx_reg_write+0x4c>
    329a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    329c:	0752      	lsls	r2, r2, #29
    329e:	d50c      	bpl.n	32ba <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    32a0:	8b5a      	ldrh	r2, [r3, #26]
    32a2:	0752      	lsls	r2, r2, #29
    32a4:	d501      	bpl.n	32aa <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    32a6:	2204      	movs	r2, #4
    32a8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    32aa:	4a23      	ldr	r2, [pc, #140]	; (3338 <trx_reg_write+0xf0>)
    32ac:	7992      	ldrb	r2, [r2, #6]
    32ae:	2a01      	cmp	r2, #1
    32b0:	d033      	beq.n	331a <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    32b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32b4:	b2d2      	uxtb	r2, r2
    32b6:	4923      	ldr	r1, [pc, #140]	; (3344 <trx_reg_write+0xfc>)
    32b8:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    32ba:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    32bc:	7e1a      	ldrb	r2, [r3, #24]
    32be:	420a      	tst	r2, r1
    32c0:	d0fc      	beq.n	32bc <trx_reg_write+0x74>
    32c2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    32c4:	07d2      	lsls	r2, r2, #31
    32c6:	d500      	bpl.n	32ca <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    32c8:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    32ca:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    32cc:	7e1a      	ldrb	r2, [r3, #24]
    32ce:	420a      	tst	r2, r1
    32d0:	d0fc      	beq.n	32cc <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    32d2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    32d4:	7e1a      	ldrb	r2, [r3, #24]
    32d6:	420a      	tst	r2, r1
    32d8:	d0fc      	beq.n	32d4 <trx_reg_write+0x8c>
    32da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    32dc:	0752      	lsls	r2, r2, #29
    32de:	d50c      	bpl.n	32fa <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    32e0:	8b5a      	ldrh	r2, [r3, #26]
    32e2:	0752      	lsls	r2, r2, #29
    32e4:	d501      	bpl.n	32ea <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    32e6:	2204      	movs	r2, #4
    32e8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    32ea:	4a13      	ldr	r2, [pc, #76]	; (3338 <trx_reg_write+0xf0>)
    32ec:	7992      	ldrb	r2, [r2, #6]
    32ee:	2a01      	cmp	r2, #1
    32f0:	d019      	beq.n	3326 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    32f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32f4:	b2db      	uxtb	r3, r3
    32f6:	4a13      	ldr	r2, [pc, #76]	; (3344 <trx_reg_write+0xfc>)
    32f8:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    32fa:	2200      	movs	r2, #0
    32fc:	490f      	ldr	r1, [pc, #60]	; (333c <trx_reg_write+0xf4>)
    32fe:	480e      	ldr	r0, [pc, #56]	; (3338 <trx_reg_write+0xf0>)
    3300:	4b0f      	ldr	r3, [pc, #60]	; (3340 <trx_reg_write+0xf8>)
    3302:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3304:	23ff      	movs	r3, #255	; 0xff
    3306:	422b      	tst	r3, r5
    3308:	d005      	beq.n	3316 <trx_reg_write+0xce>
		cpu_irq_enable();
    330a:	2201      	movs	r2, #1
    330c:	4b09      	ldr	r3, [pc, #36]	; (3334 <trx_reg_write+0xec>)
    330e:	701a      	strb	r2, [r3, #0]
    3310:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3314:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3316:	b003      	add	sp, #12
    3318:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    331a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    331c:	05d2      	lsls	r2, r2, #23
    331e:	0dd2      	lsrs	r2, r2, #23
    3320:	4908      	ldr	r1, [pc, #32]	; (3344 <trx_reg_write+0xfc>)
    3322:	800a      	strh	r2, [r1, #0]
    3324:	e7c9      	b.n	32ba <trx_reg_write+0x72>
    3326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3328:	05db      	lsls	r3, r3, #23
    332a:	0ddb      	lsrs	r3, r3, #23
    332c:	4a05      	ldr	r2, [pc, #20]	; (3344 <trx_reg_write+0xfc>)
    332e:	8013      	strh	r3, [r2, #0]
    3330:	e7e3      	b.n	32fa <trx_reg_write+0xb2>
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	20000008 	.word	0x20000008
    3338:	20001660 	.word	0x20001660
    333c:	20001624 	.word	0x20001624
    3340:	0000141d 	.word	0x0000141d
    3344:	2000161c 	.word	0x2000161c

00003348 <setup>:

#include "TheArtist.h"
/************************************************************************/
/*                                                                      */
/************************************************************************/
void setup(void) {
    3348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// [SYSTEM INITIALIZE]
	// [NOTICE!]!! sequence of this calls is important!
	irq_initialize_vectors();
	system_init();
    334a:	4b1b      	ldr	r3, [pc, #108]	; (33b8 <setup+0x70>)
    334c:	4798      	blx	r3
	delay_init();
    334e:	4b1b      	ldr	r3, [pc, #108]	; (33bc <setup+0x74>)
    3350:	4798      	blx	r3
	SYS_Init();	
    3352:	4b1b      	ldr	r3, [pc, #108]	; (33c0 <setup+0x78>)
    3354:	4798      	blx	r3
	
	artist_ultrasonic_tc_configure();
    3356:	4b1b      	ldr	r3, [pc, #108]	; (33c4 <setup+0x7c>)
    3358:	4798      	blx	r3
	artist_scheduler_tc_configure();
    335a:	4b1b      	ldr	r3, [pc, #108]	; (33c8 <setup+0x80>)
    335c:	4798      	blx	r3
	artist_configure_tc_callbacks();  
    335e:	4b1b      	ldr	r3, [pc, #108]	; (33cc <setup+0x84>)
    3360:	4798      	blx	r3
	artist_init_maze(); 
    3362:	4b1b      	ldr	r3, [pc, #108]	; (33d0 <setup+0x88>)
    3364:	4798      	blx	r3

	cpu_irq_enable();
    3366:	4e1b      	ldr	r6, [pc, #108]	; (33d4 <setup+0x8c>)
    3368:	2701      	movs	r7, #1
    336a:	7037      	strb	r7, [r6, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    336c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3370:	b662      	cpsie	i
	
	// [ultrasonic]
	artist_ultrasonic_configure(&(artist_front.us_instance_right),
    3372:	4c19      	ldr	r4, [pc, #100]	; (33d8 <setup+0x90>)
    3374:	220f      	movs	r2, #15
    3376:	211c      	movs	r1, #28
    3378:	0020      	movs	r0, r4
    337a:	4d18      	ldr	r5, [pc, #96]	; (33dc <setup+0x94>)
    337c:	47a8      	blx	r5
	CONF_ARTIST_RIGHT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_center),
    337e:	0020      	movs	r0, r4
    3380:	3810      	subs	r0, #16
    3382:	220f      	movs	r2, #15
    3384:	210d      	movs	r1, #13
    3386:	47a8      	blx	r5
	CONF_ARTIST_CENTER_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_configure(&(artist_front.us_instance_left),
    3388:	0020      	movs	r0, r4
    338a:	3808      	subs	r0, #8
    338c:	220f      	movs	r2, #15
    338e:	2117      	movs	r1, #23
    3390:	47a8      	blx	r5
	CONF_ARTIST_LEFT_ULTRASONIC_ECHO_PIN,
	CONF_ARTIST_ULTRASONIC_TRIGGER_PIN);
	
	artist_ultrasonic_gpio_init();
    3392:	4b13      	ldr	r3, [pc, #76]	; (33e0 <setup+0x98>)
    3394:	4798      	blx	r3
	
	//! [ultrasonic]
	
	
	artist_usart_configure(&(artist_front.usart_instance));
    3396:	3c4c      	subs	r4, #76	; 0x4c
    3398:	0020      	movs	r0, r4
    339a:	4b12      	ldr	r3, [pc, #72]	; (33e4 <setup+0x9c>)
    339c:	4798      	blx	r3
	cpu_irq_enable();
    339e:	7037      	strb	r7, [r6, #0]
    33a0:	f3bf 8f5f 	dmb	sy
    33a4:	b662      	cpsie	i
	
	system_interrupt_enable_global();

	
	usart_read_buffer_job( &(artist_front.usart_instance),
    33a6:	2205      	movs	r2, #5
    33a8:	490f      	ldr	r1, [pc, #60]	; (33e8 <setup+0xa0>)
    33aa:	0020      	movs	r0, r4
    33ac:	4b0f      	ldr	r3, [pc, #60]	; (33ec <setup+0xa4>)
    33ae:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
	
	//radioInit();  
	
	printf("front node setup complete\n"); 
    33b0:	480f      	ldr	r0, [pc, #60]	; (33f0 <setup+0xa8>)
    33b2:	4b10      	ldr	r3, [pc, #64]	; (33f4 <setup+0xac>)
    33b4:	4798      	blx	r3
	
}
    33b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33b8:	000023e5 	.word	0x000023e5
    33bc:	00000931 	.word	0x00000931
    33c0:	00002d35 	.word	0x00002d35
    33c4:	0000063d 	.word	0x0000063d
    33c8:	0000080d 	.word	0x0000080d
    33cc:	000008e1 	.word	0x000008e1
    33d0:	00000115 	.word	0x00000115
    33d4:	20000008 	.word	0x20000008
    33d8:	20000878 	.word	0x20000878
    33dc:	000002b9 	.word	0x000002b9
    33e0:	000002c9 	.word	0x000002c9
    33e4:	000006d1 	.word	0x000006d1
    33e8:	200014a4 	.word	0x200014a4
    33ec:	000019b1 	.word	0x000019b1
    33f0:	00008b98 	.word	0x00008b98
    33f4:	00003f41 	.word	0x00003f41

000033f8 <main>:
	//SYS_TaskHandler();  
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int main (void) {
    33f8:	b510      	push	{r4, lr}
	setup();
    33fa:	4b01      	ldr	r3, [pc, #4]	; (3400 <main+0x8>)
    33fc:	4798      	blx	r3
    33fe:	e7fe      	b.n	33fe <main+0x6>
    3400:	00003349 	.word	0x00003349

00003404 <common_tc_delay>:
    3404:	b510      	push	{r4, lr}
    3406:	1c04      	adds	r4, r0, #0
    3408:	4b13      	ldr	r3, [pc, #76]	; (3458 <common_tc_delay+0x54>)
    340a:	4798      	blx	r3
    340c:	4b13      	ldr	r3, [pc, #76]	; (345c <common_tc_delay+0x58>)
    340e:	781a      	ldrb	r2, [r3, #0]
    3410:	4362      	muls	r2, r4
    3412:	1881      	adds	r1, r0, r2
    3414:	4b12      	ldr	r3, [pc, #72]	; (3460 <common_tc_delay+0x5c>)
    3416:	6059      	str	r1, [r3, #4]
    3418:	6859      	ldr	r1, [r3, #4]
    341a:	0c09      	lsrs	r1, r1, #16
    341c:	6059      	str	r1, [r3, #4]
    341e:	685b      	ldr	r3, [r3, #4]
    3420:	2b00      	cmp	r3, #0
    3422:	d007      	beq.n	3434 <common_tc_delay+0x30>
    3424:	4b0e      	ldr	r3, [pc, #56]	; (3460 <common_tc_delay+0x5c>)
    3426:	6859      	ldr	r1, [r3, #4]
    3428:	3201      	adds	r2, #1
    342a:	1880      	adds	r0, r0, r2
    342c:	8118      	strh	r0, [r3, #8]
    342e:	4b0d      	ldr	r3, [pc, #52]	; (3464 <common_tc_delay+0x60>)
    3430:	4798      	blx	r3
    3432:	e004      	b.n	343e <common_tc_delay+0x3a>
    3434:	1882      	adds	r2, r0, r2
    3436:	4b0a      	ldr	r3, [pc, #40]	; (3460 <common_tc_delay+0x5c>)
    3438:	811a      	strh	r2, [r3, #8]
    343a:	4b0b      	ldr	r3, [pc, #44]	; (3468 <common_tc_delay+0x64>)
    343c:	4798      	blx	r3
    343e:	4b08      	ldr	r3, [pc, #32]	; (3460 <common_tc_delay+0x5c>)
    3440:	891b      	ldrh	r3, [r3, #8]
    3442:	2b63      	cmp	r3, #99	; 0x63
    3444:	d802      	bhi.n	344c <common_tc_delay+0x48>
    3446:	3364      	adds	r3, #100	; 0x64
    3448:	4a05      	ldr	r2, [pc, #20]	; (3460 <common_tc_delay+0x5c>)
    344a:	8113      	strh	r3, [r2, #8]
    344c:	4b04      	ldr	r3, [pc, #16]	; (3460 <common_tc_delay+0x5c>)
    344e:	8918      	ldrh	r0, [r3, #8]
    3450:	4b06      	ldr	r3, [pc, #24]	; (346c <common_tc_delay+0x68>)
    3452:	4798      	blx	r3
    3454:	bd10      	pop	{r4, pc}
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	00002e71 	.word	0x00002e71
    345c:	2000166c 	.word	0x2000166c
    3460:	20000798 	.word	0x20000798
    3464:	00002e85 	.word	0x00002e85
    3468:	00002e99 	.word	0x00002e99
    346c:	00002ed5 	.word	0x00002ed5

00003470 <common_tc_init>:
    3470:	b508      	push	{r3, lr}
    3472:	2200      	movs	r2, #0
    3474:	4b03      	ldr	r3, [pc, #12]	; (3484 <common_tc_init+0x14>)
    3476:	701a      	strb	r2, [r3, #0]
    3478:	4b03      	ldr	r3, [pc, #12]	; (3488 <common_tc_init+0x18>)
    347a:	4798      	blx	r3
    347c:	4b03      	ldr	r3, [pc, #12]	; (348c <common_tc_init+0x1c>)
    347e:	7018      	strb	r0, [r3, #0]
    3480:	bd08      	pop	{r3, pc}
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	20000798 	.word	0x20000798
    3488:	00002eed 	.word	0x00002eed
    348c:	2000166c 	.word	0x2000166c

00003490 <tmr_ovf_callback>:
    3490:	b508      	push	{r3, lr}
    3492:	4b0e      	ldr	r3, [pc, #56]	; (34cc <tmr_ovf_callback+0x3c>)
    3494:	685b      	ldr	r3, [r3, #4]
    3496:	2b00      	cmp	r3, #0
    3498:	d007      	beq.n	34aa <tmr_ovf_callback+0x1a>
    349a:	4a0c      	ldr	r2, [pc, #48]	; (34cc <tmr_ovf_callback+0x3c>)
    349c:	6853      	ldr	r3, [r2, #4]
    349e:	3b01      	subs	r3, #1
    34a0:	6053      	str	r3, [r2, #4]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d101      	bne.n	34aa <tmr_ovf_callback+0x1a>
    34a6:	4b0a      	ldr	r3, [pc, #40]	; (34d0 <tmr_ovf_callback+0x40>)
    34a8:	4798      	blx	r3
    34aa:	4a08      	ldr	r2, [pc, #32]	; (34cc <tmr_ovf_callback+0x3c>)
    34ac:	7813      	ldrb	r3, [r2, #0]
    34ae:	3301      	adds	r3, #1
    34b0:	b2db      	uxtb	r3, r3
    34b2:	7013      	strb	r3, [r2, #0]
    34b4:	4a07      	ldr	r2, [pc, #28]	; (34d4 <tmr_ovf_callback+0x44>)
    34b6:	7812      	ldrb	r2, [r2, #0]
    34b8:	429a      	cmp	r2, r3
    34ba:	d806      	bhi.n	34ca <tmr_ovf_callback+0x3a>
    34bc:	4b03      	ldr	r3, [pc, #12]	; (34cc <tmr_ovf_callback+0x3c>)
    34be:	2200      	movs	r2, #0
    34c0:	701a      	strb	r2, [r3, #0]
    34c2:	68db      	ldr	r3, [r3, #12]
    34c4:	2b00      	cmp	r3, #0
    34c6:	d000      	beq.n	34ca <tmr_ovf_callback+0x3a>
    34c8:	4798      	blx	r3
    34ca:	bd08      	pop	{r3, pc}
    34cc:	20000798 	.word	0x20000798
    34d0:	00002e99 	.word	0x00002e99
    34d4:	2000166c 	.word	0x2000166c

000034d8 <tmr_cca_callback>:
    34d8:	b508      	push	{r3, lr}
    34da:	4b04      	ldr	r3, [pc, #16]	; (34ec <tmr_cca_callback+0x14>)
    34dc:	4798      	blx	r3
    34de:	4b04      	ldr	r3, [pc, #16]	; (34f0 <tmr_cca_callback+0x18>)
    34e0:	691b      	ldr	r3, [r3, #16]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d000      	beq.n	34e8 <tmr_cca_callback+0x10>
    34e6:	4798      	blx	r3
    34e8:	bd08      	pop	{r3, pc}
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	00002e85 	.word	0x00002e85
    34f0:	20000798 	.word	0x20000798

000034f4 <set_common_tc_expiry_callback>:
    34f4:	4b01      	ldr	r3, [pc, #4]	; (34fc <set_common_tc_expiry_callback+0x8>)
    34f6:	6118      	str	r0, [r3, #16]
    34f8:	4770      	bx	lr
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	20000798 	.word	0x20000798

00003500 <__libc_init_array>:
    3500:	b570      	push	{r4, r5, r6, lr}
    3502:	2600      	movs	r6, #0
    3504:	4d0c      	ldr	r5, [pc, #48]	; (3538 <__libc_init_array+0x38>)
    3506:	4c0d      	ldr	r4, [pc, #52]	; (353c <__libc_init_array+0x3c>)
    3508:	1b64      	subs	r4, r4, r5
    350a:	10a4      	asrs	r4, r4, #2
    350c:	42a6      	cmp	r6, r4
    350e:	d109      	bne.n	3524 <__libc_init_array+0x24>
    3510:	2600      	movs	r6, #0
    3512:	f005 fd51 	bl	8fb8 <_init>
    3516:	4d0a      	ldr	r5, [pc, #40]	; (3540 <__libc_init_array+0x40>)
    3518:	4c0a      	ldr	r4, [pc, #40]	; (3544 <__libc_init_array+0x44>)
    351a:	1b64      	subs	r4, r4, r5
    351c:	10a4      	asrs	r4, r4, #2
    351e:	42a6      	cmp	r6, r4
    3520:	d105      	bne.n	352e <__libc_init_array+0x2e>
    3522:	bd70      	pop	{r4, r5, r6, pc}
    3524:	00b3      	lsls	r3, r6, #2
    3526:	58eb      	ldr	r3, [r5, r3]
    3528:	4798      	blx	r3
    352a:	3601      	adds	r6, #1
    352c:	e7ee      	b.n	350c <__libc_init_array+0xc>
    352e:	00b3      	lsls	r3, r6, #2
    3530:	58eb      	ldr	r3, [r5, r3]
    3532:	4798      	blx	r3
    3534:	3601      	adds	r6, #1
    3536:	e7f2      	b.n	351e <__libc_init_array+0x1e>
    3538:	00008fc4 	.word	0x00008fc4
    353c:	00008fc4 	.word	0x00008fc4
    3540:	00008fc4 	.word	0x00008fc4
    3544:	00008fc8 	.word	0x00008fc8

00003548 <memcpy>:
    3548:	2300      	movs	r3, #0
    354a:	b510      	push	{r4, lr}
    354c:	429a      	cmp	r2, r3
    354e:	d100      	bne.n	3552 <memcpy+0xa>
    3550:	bd10      	pop	{r4, pc}
    3552:	5ccc      	ldrb	r4, [r1, r3]
    3554:	54c4      	strb	r4, [r0, r3]
    3556:	3301      	adds	r3, #1
    3558:	e7f8      	b.n	354c <memcpy+0x4>

0000355a <memset>:
    355a:	0003      	movs	r3, r0
    355c:	1882      	adds	r2, r0, r2
    355e:	4293      	cmp	r3, r2
    3560:	d100      	bne.n	3564 <memset+0xa>
    3562:	4770      	bx	lr
    3564:	7019      	strb	r1, [r3, #0]
    3566:	3301      	adds	r3, #1
    3568:	e7f9      	b.n	355e <memset+0x4>

0000356a <__cvt>:
    356a:	b5f0      	push	{r4, r5, r6, r7, lr}
    356c:	b08b      	sub	sp, #44	; 0x2c
    356e:	0014      	movs	r4, r2
    3570:	1e1d      	subs	r5, r3, #0
    3572:	9912      	ldr	r1, [sp, #72]	; 0x48
    3574:	da53      	bge.n	361e <__cvt+0xb4>
    3576:	2480      	movs	r4, #128	; 0x80
    3578:	0624      	lsls	r4, r4, #24
    357a:	191b      	adds	r3, r3, r4
    357c:	001d      	movs	r5, r3
    357e:	0014      	movs	r4, r2
    3580:	232d      	movs	r3, #45	; 0x2d
    3582:	700b      	strb	r3, [r1, #0]
    3584:	2320      	movs	r3, #32
    3586:	9e14      	ldr	r6, [sp, #80]	; 0x50
    3588:	2203      	movs	r2, #3
    358a:	439e      	bics	r6, r3
    358c:	2e46      	cmp	r6, #70	; 0x46
    358e:	d007      	beq.n	35a0 <__cvt+0x36>
    3590:	0033      	movs	r3, r6
    3592:	3b45      	subs	r3, #69	; 0x45
    3594:	4259      	negs	r1, r3
    3596:	414b      	adcs	r3, r1
    3598:	9910      	ldr	r1, [sp, #64]	; 0x40
    359a:	3a01      	subs	r2, #1
    359c:	18cb      	adds	r3, r1, r3
    359e:	9310      	str	r3, [sp, #64]	; 0x40
    35a0:	ab09      	add	r3, sp, #36	; 0x24
    35a2:	9304      	str	r3, [sp, #16]
    35a4:	ab08      	add	r3, sp, #32
    35a6:	9303      	str	r3, [sp, #12]
    35a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    35aa:	9200      	str	r2, [sp, #0]
    35ac:	9302      	str	r3, [sp, #8]
    35ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    35b0:	0022      	movs	r2, r4
    35b2:	9301      	str	r3, [sp, #4]
    35b4:	002b      	movs	r3, r5
    35b6:	f000 fedb 	bl	4370 <_dtoa_r>
    35ba:	0007      	movs	r7, r0
    35bc:	2e47      	cmp	r6, #71	; 0x47
    35be:	d102      	bne.n	35c6 <__cvt+0x5c>
    35c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    35c2:	07db      	lsls	r3, r3, #31
    35c4:	d524      	bpl.n	3610 <__cvt+0xa6>
    35c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    35c8:	18fb      	adds	r3, r7, r3
    35ca:	9307      	str	r3, [sp, #28]
    35cc:	2e46      	cmp	r6, #70	; 0x46
    35ce:	d114      	bne.n	35fa <__cvt+0x90>
    35d0:	783b      	ldrb	r3, [r7, #0]
    35d2:	2b30      	cmp	r3, #48	; 0x30
    35d4:	d10c      	bne.n	35f0 <__cvt+0x86>
    35d6:	2200      	movs	r2, #0
    35d8:	2300      	movs	r3, #0
    35da:	0020      	movs	r0, r4
    35dc:	0029      	movs	r1, r5
    35de:	f002 fe21 	bl	6224 <__aeabi_dcmpeq>
    35e2:	2800      	cmp	r0, #0
    35e4:	d104      	bne.n	35f0 <__cvt+0x86>
    35e6:	2301      	movs	r3, #1
    35e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    35ea:	1a9b      	subs	r3, r3, r2
    35ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    35ee:	6013      	str	r3, [r2, #0]
    35f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    35f2:	9a07      	ldr	r2, [sp, #28]
    35f4:	681b      	ldr	r3, [r3, #0]
    35f6:	18d3      	adds	r3, r2, r3
    35f8:	9307      	str	r3, [sp, #28]
    35fa:	2200      	movs	r2, #0
    35fc:	2300      	movs	r3, #0
    35fe:	0020      	movs	r0, r4
    3600:	0029      	movs	r1, r5
    3602:	f002 fe0f 	bl	6224 <__aeabi_dcmpeq>
    3606:	2230      	movs	r2, #48	; 0x30
    3608:	2800      	cmp	r0, #0
    360a:	d00d      	beq.n	3628 <__cvt+0xbe>
    360c:	9b07      	ldr	r3, [sp, #28]
    360e:	9309      	str	r3, [sp, #36]	; 0x24
    3610:	0038      	movs	r0, r7
    3612:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3614:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3616:	1bdb      	subs	r3, r3, r7
    3618:	6013      	str	r3, [r2, #0]
    361a:	b00b      	add	sp, #44	; 0x2c
    361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    361e:	2300      	movs	r3, #0
    3620:	e7af      	b.n	3582 <__cvt+0x18>
    3622:	1c59      	adds	r1, r3, #1
    3624:	9109      	str	r1, [sp, #36]	; 0x24
    3626:	701a      	strb	r2, [r3, #0]
    3628:	9b09      	ldr	r3, [sp, #36]	; 0x24
    362a:	9907      	ldr	r1, [sp, #28]
    362c:	4299      	cmp	r1, r3
    362e:	d8f8      	bhi.n	3622 <__cvt+0xb8>
    3630:	e7ee      	b.n	3610 <__cvt+0xa6>

00003632 <__exponent>:
    3632:	b5f0      	push	{r4, r5, r6, r7, lr}
    3634:	232b      	movs	r3, #43	; 0x2b
    3636:	b085      	sub	sp, #20
    3638:	0007      	movs	r7, r0
    363a:	000c      	movs	r4, r1
    363c:	7002      	strb	r2, [r0, #0]
    363e:	1c86      	adds	r6, r0, #2
    3640:	2900      	cmp	r1, #0
    3642:	da01      	bge.n	3648 <__exponent+0x16>
    3644:	232d      	movs	r3, #45	; 0x2d
    3646:	424c      	negs	r4, r1
    3648:	707b      	strb	r3, [r7, #1]
    364a:	2c09      	cmp	r4, #9
    364c:	dd23      	ble.n	3696 <__exponent+0x64>
    364e:	ab02      	add	r3, sp, #8
    3650:	1ddd      	adds	r5, r3, #7
    3652:	1e6b      	subs	r3, r5, #1
    3654:	0020      	movs	r0, r4
    3656:	210a      	movs	r1, #10
    3658:	9301      	str	r3, [sp, #4]
    365a:	f002 fdcd 	bl	61f8 <__aeabi_idivmod>
    365e:	1e6b      	subs	r3, r5, #1
    3660:	3130      	adds	r1, #48	; 0x30
    3662:	7019      	strb	r1, [r3, #0]
    3664:	0020      	movs	r0, r4
    3666:	210a      	movs	r1, #10
    3668:	f002 fce0 	bl	602c <__divsi3>
    366c:	0004      	movs	r4, r0
    366e:	2809      	cmp	r0, #9
    3670:	dc0a      	bgt.n	3688 <__exponent+0x56>
    3672:	3d02      	subs	r5, #2
    3674:	3430      	adds	r4, #48	; 0x30
    3676:	702c      	strb	r4, [r5, #0]
    3678:	ab02      	add	r3, sp, #8
    367a:	3307      	adds	r3, #7
    367c:	0030      	movs	r0, r6
    367e:	42ab      	cmp	r3, r5
    3680:	d804      	bhi.n	368c <__exponent+0x5a>
    3682:	1bc0      	subs	r0, r0, r7
    3684:	b005      	add	sp, #20
    3686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3688:	9d01      	ldr	r5, [sp, #4]
    368a:	e7e2      	b.n	3652 <__exponent+0x20>
    368c:	782b      	ldrb	r3, [r5, #0]
    368e:	3501      	adds	r5, #1
    3690:	7033      	strb	r3, [r6, #0]
    3692:	3601      	adds	r6, #1
    3694:	e7f0      	b.n	3678 <__exponent+0x46>
    3696:	2330      	movs	r3, #48	; 0x30
    3698:	18e4      	adds	r4, r4, r3
    369a:	7033      	strb	r3, [r6, #0]
    369c:	1cb0      	adds	r0, r6, #2
    369e:	7074      	strb	r4, [r6, #1]
    36a0:	e7ef      	b.n	3682 <__exponent+0x50>
	...

000036a4 <_printf_float>:
    36a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36a6:	b095      	sub	sp, #84	; 0x54
    36a8:	000c      	movs	r4, r1
    36aa:	920a      	str	r2, [sp, #40]	; 0x28
    36ac:	930b      	str	r3, [sp, #44]	; 0x2c
    36ae:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    36b0:	9009      	str	r0, [sp, #36]	; 0x24
    36b2:	f001 fdd3 	bl	525c <_localeconv_r>
    36b6:	6803      	ldr	r3, [r0, #0]
    36b8:	0018      	movs	r0, r3
    36ba:	930d      	str	r3, [sp, #52]	; 0x34
    36bc:	f000 fd00 	bl	40c0 <strlen>
    36c0:	2300      	movs	r3, #0
    36c2:	9312      	str	r3, [sp, #72]	; 0x48
    36c4:	6823      	ldr	r3, [r4, #0]
    36c6:	900e      	str	r0, [sp, #56]	; 0x38
    36c8:	930c      	str	r3, [sp, #48]	; 0x30
    36ca:	990c      	ldr	r1, [sp, #48]	; 0x30
    36cc:	7e27      	ldrb	r7, [r4, #24]
    36ce:	682b      	ldr	r3, [r5, #0]
    36d0:	2207      	movs	r2, #7
    36d2:	05c9      	lsls	r1, r1, #23
    36d4:	d547      	bpl.n	3766 <_printf_float+0xc2>
    36d6:	189b      	adds	r3, r3, r2
    36d8:	4393      	bics	r3, r2
    36da:	001a      	movs	r2, r3
    36dc:	3208      	adds	r2, #8
    36de:	602a      	str	r2, [r5, #0]
    36e0:	681a      	ldr	r2, [r3, #0]
    36e2:	685b      	ldr	r3, [r3, #4]
    36e4:	64a2      	str	r2, [r4, #72]	; 0x48
    36e6:	64e3      	str	r3, [r4, #76]	; 0x4c
    36e8:	2201      	movs	r2, #1
    36ea:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    36ec:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    36ee:	006b      	lsls	r3, r5, #1
    36f0:	085b      	lsrs	r3, r3, #1
    36f2:	930f      	str	r3, [sp, #60]	; 0x3c
    36f4:	4252      	negs	r2, r2
    36f6:	4ba7      	ldr	r3, [pc, #668]	; (3994 <_printf_float+0x2f0>)
    36f8:	0030      	movs	r0, r6
    36fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    36fc:	f004 fff0 	bl	86e0 <__aeabi_dcmpun>
    3700:	2800      	cmp	r0, #0
    3702:	d000      	beq.n	3706 <_printf_float+0x62>
    3704:	e206      	b.n	3b14 <_printf_float+0x470>
    3706:	2201      	movs	r2, #1
    3708:	4ba2      	ldr	r3, [pc, #648]	; (3994 <_printf_float+0x2f0>)
    370a:	4252      	negs	r2, r2
    370c:	0030      	movs	r0, r6
    370e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3710:	f002 fd98 	bl	6244 <__aeabi_dcmple>
    3714:	2800      	cmp	r0, #0
    3716:	d000      	beq.n	371a <_printf_float+0x76>
    3718:	e1fc      	b.n	3b14 <_printf_float+0x470>
    371a:	2200      	movs	r2, #0
    371c:	2300      	movs	r3, #0
    371e:	0030      	movs	r0, r6
    3720:	0029      	movs	r1, r5
    3722:	f002 fd85 	bl	6230 <__aeabi_dcmplt>
    3726:	2800      	cmp	r0, #0
    3728:	d003      	beq.n	3732 <_printf_float+0x8e>
    372a:	0023      	movs	r3, r4
    372c:	222d      	movs	r2, #45	; 0x2d
    372e:	3343      	adds	r3, #67	; 0x43
    3730:	701a      	strb	r2, [r3, #0]
    3732:	4d99      	ldr	r5, [pc, #612]	; (3998 <_printf_float+0x2f4>)
    3734:	2f47      	cmp	r7, #71	; 0x47
    3736:	d800      	bhi.n	373a <_printf_float+0x96>
    3738:	4d98      	ldr	r5, [pc, #608]	; (399c <_printf_float+0x2f8>)
    373a:	2303      	movs	r3, #3
    373c:	2600      	movs	r6, #0
    373e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3740:	6123      	str	r3, [r4, #16]
    3742:	3301      	adds	r3, #1
    3744:	439a      	bics	r2, r3
    3746:	6022      	str	r2, [r4, #0]
    3748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    374a:	aa13      	add	r2, sp, #76	; 0x4c
    374c:	9300      	str	r3, [sp, #0]
    374e:	0021      	movs	r1, r4
    3750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3752:	9809      	ldr	r0, [sp, #36]	; 0x24
    3754:	f000 f9f2 	bl	3b3c <_printf_common>
    3758:	1c43      	adds	r3, r0, #1
    375a:	d000      	beq.n	375e <_printf_float+0xba>
    375c:	e09c      	b.n	3898 <_printf_float+0x1f4>
    375e:	2001      	movs	r0, #1
    3760:	4240      	negs	r0, r0
    3762:	b015      	add	sp, #84	; 0x54
    3764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3766:	3307      	adds	r3, #7
    3768:	e7b6      	b.n	36d8 <_printf_float+0x34>
    376a:	2380      	movs	r3, #128	; 0x80
    376c:	6862      	ldr	r2, [r4, #4]
    376e:	00db      	lsls	r3, r3, #3
    3770:	1c51      	adds	r1, r2, #1
    3772:	d145      	bne.n	3800 <_printf_float+0x15c>
    3774:	3207      	adds	r2, #7
    3776:	6062      	str	r2, [r4, #4]
    3778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    377a:	2100      	movs	r1, #0
    377c:	4313      	orrs	r3, r2
    377e:	aa12      	add	r2, sp, #72	; 0x48
    3780:	9205      	str	r2, [sp, #20]
    3782:	aa11      	add	r2, sp, #68	; 0x44
    3784:	9203      	str	r2, [sp, #12]
    3786:	2223      	movs	r2, #35	; 0x23
    3788:	6023      	str	r3, [r4, #0]
    378a:	9106      	str	r1, [sp, #24]
    378c:	9301      	str	r3, [sp, #4]
    378e:	a908      	add	r1, sp, #32
    3790:	6863      	ldr	r3, [r4, #4]
    3792:	1852      	adds	r2, r2, r1
    3794:	9202      	str	r2, [sp, #8]
    3796:	9300      	str	r3, [sp, #0]
    3798:	0032      	movs	r2, r6
    379a:	002b      	movs	r3, r5
    379c:	9704      	str	r7, [sp, #16]
    379e:	9809      	ldr	r0, [sp, #36]	; 0x24
    37a0:	f7ff fee3 	bl	356a <__cvt>
    37a4:	2320      	movs	r3, #32
    37a6:	003a      	movs	r2, r7
    37a8:	0005      	movs	r5, r0
    37aa:	439a      	bics	r2, r3
    37ac:	2a47      	cmp	r2, #71	; 0x47
    37ae:	d107      	bne.n	37c0 <_printf_float+0x11c>
    37b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37b2:	1cda      	adds	r2, r3, #3
    37b4:	db02      	blt.n	37bc <_printf_float+0x118>
    37b6:	6862      	ldr	r2, [r4, #4]
    37b8:	4293      	cmp	r3, r2
    37ba:	dd5b      	ble.n	3874 <_printf_float+0x1d0>
    37bc:	3f02      	subs	r7, #2
    37be:	b2ff      	uxtb	r7, r7
    37c0:	9911      	ldr	r1, [sp, #68]	; 0x44
    37c2:	2f65      	cmp	r7, #101	; 0x65
    37c4:	d83b      	bhi.n	383e <_printf_float+0x19a>
    37c6:	0020      	movs	r0, r4
    37c8:	3901      	subs	r1, #1
    37ca:	003a      	movs	r2, r7
    37cc:	3050      	adds	r0, #80	; 0x50
    37ce:	9111      	str	r1, [sp, #68]	; 0x44
    37d0:	f7ff ff2f 	bl	3632 <__exponent>
    37d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    37d6:	0006      	movs	r6, r0
    37d8:	1883      	adds	r3, r0, r2
    37da:	6123      	str	r3, [r4, #16]
    37dc:	2a01      	cmp	r2, #1
    37de:	dc02      	bgt.n	37e6 <_printf_float+0x142>
    37e0:	6822      	ldr	r2, [r4, #0]
    37e2:	07d2      	lsls	r2, r2, #31
    37e4:	d501      	bpl.n	37ea <_printf_float+0x146>
    37e6:	3301      	adds	r3, #1
    37e8:	6123      	str	r3, [r4, #16]
    37ea:	2323      	movs	r3, #35	; 0x23
    37ec:	aa08      	add	r2, sp, #32
    37ee:	189b      	adds	r3, r3, r2
    37f0:	781b      	ldrb	r3, [r3, #0]
    37f2:	2b00      	cmp	r3, #0
    37f4:	d0a8      	beq.n	3748 <_printf_float+0xa4>
    37f6:	0023      	movs	r3, r4
    37f8:	222d      	movs	r2, #45	; 0x2d
    37fa:	3343      	adds	r3, #67	; 0x43
    37fc:	701a      	strb	r2, [r3, #0]
    37fe:	e7a3      	b.n	3748 <_printf_float+0xa4>
    3800:	2f67      	cmp	r7, #103	; 0x67
    3802:	d001      	beq.n	3808 <_printf_float+0x164>
    3804:	2f47      	cmp	r7, #71	; 0x47
    3806:	d1b7      	bne.n	3778 <_printf_float+0xd4>
    3808:	2a00      	cmp	r2, #0
    380a:	d016      	beq.n	383a <_printf_float+0x196>
    380c:	990c      	ldr	r1, [sp, #48]	; 0x30
    380e:	a808      	add	r0, sp, #32
    3810:	430b      	orrs	r3, r1
    3812:	2100      	movs	r1, #0
    3814:	9106      	str	r1, [sp, #24]
    3816:	a912      	add	r1, sp, #72	; 0x48
    3818:	9105      	str	r1, [sp, #20]
    381a:	a911      	add	r1, sp, #68	; 0x44
    381c:	9103      	str	r1, [sp, #12]
    381e:	2123      	movs	r1, #35	; 0x23
    3820:	1809      	adds	r1, r1, r0
    3822:	6023      	str	r3, [r4, #0]
    3824:	9301      	str	r3, [sp, #4]
    3826:	9200      	str	r2, [sp, #0]
    3828:	002b      	movs	r3, r5
    382a:	9704      	str	r7, [sp, #16]
    382c:	9102      	str	r1, [sp, #8]
    382e:	0032      	movs	r2, r6
    3830:	9809      	ldr	r0, [sp, #36]	; 0x24
    3832:	f7ff fe9a 	bl	356a <__cvt>
    3836:	0005      	movs	r5, r0
    3838:	e7ba      	b.n	37b0 <_printf_float+0x10c>
    383a:	2201      	movs	r2, #1
    383c:	e79b      	b.n	3776 <_printf_float+0xd2>
    383e:	2f66      	cmp	r7, #102	; 0x66
    3840:	d119      	bne.n	3876 <_printf_float+0x1d2>
    3842:	6863      	ldr	r3, [r4, #4]
    3844:	2900      	cmp	r1, #0
    3846:	dd0c      	ble.n	3862 <_printf_float+0x1be>
    3848:	6121      	str	r1, [r4, #16]
    384a:	2b00      	cmp	r3, #0
    384c:	d102      	bne.n	3854 <_printf_float+0x1b0>
    384e:	6822      	ldr	r2, [r4, #0]
    3850:	07d2      	lsls	r2, r2, #31
    3852:	d502      	bpl.n	385a <_printf_float+0x1b6>
    3854:	3301      	adds	r3, #1
    3856:	185b      	adds	r3, r3, r1
    3858:	6123      	str	r3, [r4, #16]
    385a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    385c:	2600      	movs	r6, #0
    385e:	65a3      	str	r3, [r4, #88]	; 0x58
    3860:	e7c3      	b.n	37ea <_printf_float+0x146>
    3862:	2b00      	cmp	r3, #0
    3864:	d103      	bne.n	386e <_printf_float+0x1ca>
    3866:	2201      	movs	r2, #1
    3868:	6821      	ldr	r1, [r4, #0]
    386a:	4211      	tst	r1, r2
    386c:	d000      	beq.n	3870 <_printf_float+0x1cc>
    386e:	1c9a      	adds	r2, r3, #2
    3870:	6122      	str	r2, [r4, #16]
    3872:	e7f2      	b.n	385a <_printf_float+0x1b6>
    3874:	2767      	movs	r7, #103	; 0x67
    3876:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3878:	9812      	ldr	r0, [sp, #72]	; 0x48
    387a:	4283      	cmp	r3, r0
    387c:	db05      	blt.n	388a <_printf_float+0x1e6>
    387e:	6822      	ldr	r2, [r4, #0]
    3880:	6123      	str	r3, [r4, #16]
    3882:	07d2      	lsls	r2, r2, #31
    3884:	d5e9      	bpl.n	385a <_printf_float+0x1b6>
    3886:	3301      	adds	r3, #1
    3888:	e7e6      	b.n	3858 <_printf_float+0x1b4>
    388a:	2201      	movs	r2, #1
    388c:	2b00      	cmp	r3, #0
    388e:	dc01      	bgt.n	3894 <_printf_float+0x1f0>
    3890:	1892      	adds	r2, r2, r2
    3892:	1ad2      	subs	r2, r2, r3
    3894:	1812      	adds	r2, r2, r0
    3896:	e7eb      	b.n	3870 <_printf_float+0x1cc>
    3898:	6822      	ldr	r2, [r4, #0]
    389a:	0553      	lsls	r3, r2, #21
    389c:	d408      	bmi.n	38b0 <_printf_float+0x20c>
    389e:	6923      	ldr	r3, [r4, #16]
    38a0:	002a      	movs	r2, r5
    38a2:	990a      	ldr	r1, [sp, #40]	; 0x28
    38a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    38a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38a8:	47a8      	blx	r5
    38aa:	1c43      	adds	r3, r0, #1
    38ac:	d129      	bne.n	3902 <_printf_float+0x25e>
    38ae:	e756      	b.n	375e <_printf_float+0xba>
    38b0:	2f65      	cmp	r7, #101	; 0x65
    38b2:	d800      	bhi.n	38b6 <_printf_float+0x212>
    38b4:	e0dc      	b.n	3a70 <_printf_float+0x3cc>
    38b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    38b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    38ba:	2200      	movs	r2, #0
    38bc:	2300      	movs	r3, #0
    38be:	f002 fcb1 	bl	6224 <__aeabi_dcmpeq>
    38c2:	2800      	cmp	r0, #0
    38c4:	d035      	beq.n	3932 <_printf_float+0x28e>
    38c6:	2301      	movs	r3, #1
    38c8:	4a35      	ldr	r2, [pc, #212]	; (39a0 <_printf_float+0x2fc>)
    38ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    38cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    38ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38d0:	47a8      	blx	r5
    38d2:	1c43      	adds	r3, r0, #1
    38d4:	d100      	bne.n	38d8 <_printf_float+0x234>
    38d6:	e742      	b.n	375e <_printf_float+0xba>
    38d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38da:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38dc:	4293      	cmp	r3, r2
    38de:	db02      	blt.n	38e6 <_printf_float+0x242>
    38e0:	6823      	ldr	r3, [r4, #0]
    38e2:	07db      	lsls	r3, r3, #31
    38e4:	d50d      	bpl.n	3902 <_printf_float+0x25e>
    38e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    38ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    38ec:	990a      	ldr	r1, [sp, #40]	; 0x28
    38ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    38f0:	47a8      	blx	r5
    38f2:	2500      	movs	r5, #0
    38f4:	1c43      	adds	r3, r0, #1
    38f6:	d100      	bne.n	38fa <_printf_float+0x256>
    38f8:	e731      	b.n	375e <_printf_float+0xba>
    38fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    38fc:	3b01      	subs	r3, #1
    38fe:	429d      	cmp	r5, r3
    3900:	db0b      	blt.n	391a <_printf_float+0x276>
    3902:	6823      	ldr	r3, [r4, #0]
    3904:	2500      	movs	r5, #0
    3906:	079b      	lsls	r3, r3, #30
    3908:	d500      	bpl.n	390c <_printf_float+0x268>
    390a:	e0fd      	b.n	3b08 <_printf_float+0x464>
    390c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    390e:	68e0      	ldr	r0, [r4, #12]
    3910:	4298      	cmp	r0, r3
    3912:	db00      	blt.n	3916 <_printf_float+0x272>
    3914:	e725      	b.n	3762 <_printf_float+0xbe>
    3916:	0018      	movs	r0, r3
    3918:	e723      	b.n	3762 <_printf_float+0xbe>
    391a:	0022      	movs	r2, r4
    391c:	2301      	movs	r3, #1
    391e:	321a      	adds	r2, #26
    3920:	990a      	ldr	r1, [sp, #40]	; 0x28
    3922:	9809      	ldr	r0, [sp, #36]	; 0x24
    3924:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3926:	47b0      	blx	r6
    3928:	1c43      	adds	r3, r0, #1
    392a:	d100      	bne.n	392e <_printf_float+0x28a>
    392c:	e717      	b.n	375e <_printf_float+0xba>
    392e:	3501      	adds	r5, #1
    3930:	e7e3      	b.n	38fa <_printf_float+0x256>
    3932:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3934:	2b00      	cmp	r3, #0
    3936:	dc35      	bgt.n	39a4 <_printf_float+0x300>
    3938:	2301      	movs	r3, #1
    393a:	4a19      	ldr	r2, [pc, #100]	; (39a0 <_printf_float+0x2fc>)
    393c:	990a      	ldr	r1, [sp, #40]	; 0x28
    393e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3940:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3942:	47b0      	blx	r6
    3944:	1c43      	adds	r3, r0, #1
    3946:	d100      	bne.n	394a <_printf_float+0x2a6>
    3948:	e709      	b.n	375e <_printf_float+0xba>
    394a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    394c:	2b00      	cmp	r3, #0
    394e:	d105      	bne.n	395c <_printf_float+0x2b8>
    3950:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3952:	2b00      	cmp	r3, #0
    3954:	d102      	bne.n	395c <_printf_float+0x2b8>
    3956:	6823      	ldr	r3, [r4, #0]
    3958:	07db      	lsls	r3, r3, #31
    395a:	d5d2      	bpl.n	3902 <_printf_float+0x25e>
    395c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    395e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3962:	990a      	ldr	r1, [sp, #40]	; 0x28
    3964:	9809      	ldr	r0, [sp, #36]	; 0x24
    3966:	47b0      	blx	r6
    3968:	2600      	movs	r6, #0
    396a:	1c43      	adds	r3, r0, #1
    396c:	d100      	bne.n	3970 <_printf_float+0x2cc>
    396e:	e6f6      	b.n	375e <_printf_float+0xba>
    3970:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3972:	425b      	negs	r3, r3
    3974:	429e      	cmp	r6, r3
    3976:	db01      	blt.n	397c <_printf_float+0x2d8>
    3978:	9b12      	ldr	r3, [sp, #72]	; 0x48
    397a:	e791      	b.n	38a0 <_printf_float+0x1fc>
    397c:	0022      	movs	r2, r4
    397e:	2301      	movs	r3, #1
    3980:	321a      	adds	r2, #26
    3982:	990a      	ldr	r1, [sp, #40]	; 0x28
    3984:	9809      	ldr	r0, [sp, #36]	; 0x24
    3986:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3988:	47b8      	blx	r7
    398a:	1c43      	adds	r3, r0, #1
    398c:	d100      	bne.n	3990 <_printf_float+0x2ec>
    398e:	e6e6      	b.n	375e <_printf_float+0xba>
    3990:	3601      	adds	r6, #1
    3992:	e7ed      	b.n	3970 <_printf_float+0x2cc>
    3994:	7fefffff 	.word	0x7fefffff
    3998:	00008bbc 	.word	0x00008bbc
    399c:	00008bb8 	.word	0x00008bb8
    39a0:	00008bc8 	.word	0x00008bc8
    39a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    39a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
    39a8:	429e      	cmp	r6, r3
    39aa:	dd00      	ble.n	39ae <_printf_float+0x30a>
    39ac:	001e      	movs	r6, r3
    39ae:	2e00      	cmp	r6, #0
    39b0:	dc35      	bgt.n	3a1e <_printf_float+0x37a>
    39b2:	2300      	movs	r3, #0
    39b4:	930c      	str	r3, [sp, #48]	; 0x30
    39b6:	43f3      	mvns	r3, r6
    39b8:	17db      	asrs	r3, r3, #31
    39ba:	930f      	str	r3, [sp, #60]	; 0x3c
    39bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    39be:	6da7      	ldr	r7, [r4, #88]	; 0x58
    39c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    39c2:	4033      	ands	r3, r6
    39c4:	1afb      	subs	r3, r7, r3
    39c6:	429a      	cmp	r2, r3
    39c8:	db32      	blt.n	3a30 <_printf_float+0x38c>
    39ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    39cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    39ce:	4293      	cmp	r3, r2
    39d0:	db3c      	blt.n	3a4c <_printf_float+0x3a8>
    39d2:	6823      	ldr	r3, [r4, #0]
    39d4:	07db      	lsls	r3, r3, #31
    39d6:	d439      	bmi.n	3a4c <_printf_float+0x3a8>
    39d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
    39da:	9a11      	ldr	r2, [sp, #68]	; 0x44
    39dc:	1bf3      	subs	r3, r6, r7
    39de:	1ab6      	subs	r6, r6, r2
    39e0:	429e      	cmp	r6, r3
    39e2:	dd00      	ble.n	39e6 <_printf_float+0x342>
    39e4:	001e      	movs	r6, r3
    39e6:	2e00      	cmp	r6, #0
    39e8:	dc39      	bgt.n	3a5e <_printf_float+0x3ba>
    39ea:	43f7      	mvns	r7, r6
    39ec:	2500      	movs	r5, #0
    39ee:	17fb      	asrs	r3, r7, #31
    39f0:	930c      	str	r3, [sp, #48]	; 0x30
    39f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    39f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39f6:	990c      	ldr	r1, [sp, #48]	; 0x30
    39f8:	1a9b      	subs	r3, r3, r2
    39fa:	0032      	movs	r2, r6
    39fc:	400a      	ands	r2, r1
    39fe:	1a9b      	subs	r3, r3, r2
    3a00:	429d      	cmp	r5, r3
    3a02:	db00      	blt.n	3a06 <_printf_float+0x362>
    3a04:	e77d      	b.n	3902 <_printf_float+0x25e>
    3a06:	0022      	movs	r2, r4
    3a08:	2301      	movs	r3, #1
    3a0a:	321a      	adds	r2, #26
    3a0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a10:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a12:	47b8      	blx	r7
    3a14:	1c43      	adds	r3, r0, #1
    3a16:	d100      	bne.n	3a1a <_printf_float+0x376>
    3a18:	e6a1      	b.n	375e <_printf_float+0xba>
    3a1a:	3501      	adds	r5, #1
    3a1c:	e7e9      	b.n	39f2 <_printf_float+0x34e>
    3a1e:	0033      	movs	r3, r6
    3a20:	002a      	movs	r2, r5
    3a22:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a24:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a28:	47b8      	blx	r7
    3a2a:	1c43      	adds	r3, r0, #1
    3a2c:	d1c1      	bne.n	39b2 <_printf_float+0x30e>
    3a2e:	e696      	b.n	375e <_printf_float+0xba>
    3a30:	0022      	movs	r2, r4
    3a32:	2301      	movs	r3, #1
    3a34:	321a      	adds	r2, #26
    3a36:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a38:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a3c:	47b8      	blx	r7
    3a3e:	1c43      	adds	r3, r0, #1
    3a40:	d100      	bne.n	3a44 <_printf_float+0x3a0>
    3a42:	e68c      	b.n	375e <_printf_float+0xba>
    3a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3a46:	3301      	adds	r3, #1
    3a48:	930c      	str	r3, [sp, #48]	; 0x30
    3a4a:	e7b7      	b.n	39bc <_printf_float+0x318>
    3a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a50:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a52:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3a56:	47b0      	blx	r6
    3a58:	1c43      	adds	r3, r0, #1
    3a5a:	d1bd      	bne.n	39d8 <_printf_float+0x334>
    3a5c:	e67f      	b.n	375e <_printf_float+0xba>
    3a5e:	19ea      	adds	r2, r5, r7
    3a60:	0033      	movs	r3, r6
    3a62:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a64:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3a68:	47a8      	blx	r5
    3a6a:	1c43      	adds	r3, r0, #1
    3a6c:	d1bd      	bne.n	39ea <_printf_float+0x346>
    3a6e:	e676      	b.n	375e <_printf_float+0xba>
    3a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3a72:	2b01      	cmp	r3, #1
    3a74:	dc02      	bgt.n	3a7c <_printf_float+0x3d8>
    3a76:	2301      	movs	r3, #1
    3a78:	421a      	tst	r2, r3
    3a7a:	d038      	beq.n	3aee <_printf_float+0x44a>
    3a7c:	2301      	movs	r3, #1
    3a7e:	002a      	movs	r2, r5
    3a80:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a82:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a86:	47b8      	blx	r7
    3a88:	1c43      	adds	r3, r0, #1
    3a8a:	d100      	bne.n	3a8e <_printf_float+0x3ea>
    3a8c:	e667      	b.n	375e <_printf_float+0xba>
    3a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3a92:	990a      	ldr	r1, [sp, #40]	; 0x28
    3a94:	9809      	ldr	r0, [sp, #36]	; 0x24
    3a96:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3a98:	47b8      	blx	r7
    3a9a:	1c43      	adds	r3, r0, #1
    3a9c:	d100      	bne.n	3aa0 <_printf_float+0x3fc>
    3a9e:	e65e      	b.n	375e <_printf_float+0xba>
    3aa0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    3aa2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    3aa4:	2200      	movs	r2, #0
    3aa6:	2300      	movs	r3, #0
    3aa8:	f002 fbbc 	bl	6224 <__aeabi_dcmpeq>
    3aac:	2800      	cmp	r0, #0
    3aae:	d008      	beq.n	3ac2 <_printf_float+0x41e>
    3ab0:	2500      	movs	r5, #0
    3ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ab4:	3b01      	subs	r3, #1
    3ab6:	429d      	cmp	r5, r3
    3ab8:	db0d      	blt.n	3ad6 <_printf_float+0x432>
    3aba:	0022      	movs	r2, r4
    3abc:	0033      	movs	r3, r6
    3abe:	3250      	adds	r2, #80	; 0x50
    3ac0:	e6ef      	b.n	38a2 <_printf_float+0x1fe>
    3ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ac4:	1c6a      	adds	r2, r5, #1
    3ac6:	3b01      	subs	r3, #1
    3ac8:	990a      	ldr	r1, [sp, #40]	; 0x28
    3aca:	9809      	ldr	r0, [sp, #36]	; 0x24
    3acc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3ace:	47a8      	blx	r5
    3ad0:	1c43      	adds	r3, r0, #1
    3ad2:	d1f2      	bne.n	3aba <_printf_float+0x416>
    3ad4:	e643      	b.n	375e <_printf_float+0xba>
    3ad6:	0022      	movs	r2, r4
    3ad8:	2301      	movs	r3, #1
    3ada:	321a      	adds	r2, #26
    3adc:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ade:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ae0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3ae2:	47b8      	blx	r7
    3ae4:	1c43      	adds	r3, r0, #1
    3ae6:	d100      	bne.n	3aea <_printf_float+0x446>
    3ae8:	e639      	b.n	375e <_printf_float+0xba>
    3aea:	3501      	adds	r5, #1
    3aec:	e7e1      	b.n	3ab2 <_printf_float+0x40e>
    3aee:	002a      	movs	r2, r5
    3af0:	e7ea      	b.n	3ac8 <_printf_float+0x424>
    3af2:	0022      	movs	r2, r4
    3af4:	2301      	movs	r3, #1
    3af6:	3219      	adds	r2, #25
    3af8:	990a      	ldr	r1, [sp, #40]	; 0x28
    3afa:	9809      	ldr	r0, [sp, #36]	; 0x24
    3afc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3afe:	47b0      	blx	r6
    3b00:	1c43      	adds	r3, r0, #1
    3b02:	d100      	bne.n	3b06 <_printf_float+0x462>
    3b04:	e62b      	b.n	375e <_printf_float+0xba>
    3b06:	3501      	adds	r5, #1
    3b08:	68e3      	ldr	r3, [r4, #12]
    3b0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3b0c:	1a9b      	subs	r3, r3, r2
    3b0e:	429d      	cmp	r5, r3
    3b10:	dbef      	blt.n	3af2 <_printf_float+0x44e>
    3b12:	e6fb      	b.n	390c <_printf_float+0x268>
    3b14:	0032      	movs	r2, r6
    3b16:	002b      	movs	r3, r5
    3b18:	0030      	movs	r0, r6
    3b1a:	0029      	movs	r1, r5
    3b1c:	f004 fde0 	bl	86e0 <__aeabi_dcmpun>
    3b20:	2800      	cmp	r0, #0
    3b22:	d100      	bne.n	3b26 <_printf_float+0x482>
    3b24:	e621      	b.n	376a <_printf_float+0xc6>
    3b26:	4d03      	ldr	r5, [pc, #12]	; (3b34 <_printf_float+0x490>)
    3b28:	2f47      	cmp	r7, #71	; 0x47
    3b2a:	d900      	bls.n	3b2e <_printf_float+0x48a>
    3b2c:	e605      	b.n	373a <_printf_float+0x96>
    3b2e:	4d02      	ldr	r5, [pc, #8]	; (3b38 <_printf_float+0x494>)
    3b30:	e603      	b.n	373a <_printf_float+0x96>
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	00008bc4 	.word	0x00008bc4
    3b38:	00008bc0 	.word	0x00008bc0

00003b3c <_printf_common>:
    3b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b3e:	0015      	movs	r5, r2
    3b40:	9301      	str	r3, [sp, #4]
    3b42:	688a      	ldr	r2, [r1, #8]
    3b44:	690b      	ldr	r3, [r1, #16]
    3b46:	9000      	str	r0, [sp, #0]
    3b48:	000c      	movs	r4, r1
    3b4a:	4293      	cmp	r3, r2
    3b4c:	da00      	bge.n	3b50 <_printf_common+0x14>
    3b4e:	0013      	movs	r3, r2
    3b50:	0022      	movs	r2, r4
    3b52:	602b      	str	r3, [r5, #0]
    3b54:	3243      	adds	r2, #67	; 0x43
    3b56:	7812      	ldrb	r2, [r2, #0]
    3b58:	2a00      	cmp	r2, #0
    3b5a:	d001      	beq.n	3b60 <_printf_common+0x24>
    3b5c:	3301      	adds	r3, #1
    3b5e:	602b      	str	r3, [r5, #0]
    3b60:	6823      	ldr	r3, [r4, #0]
    3b62:	069b      	lsls	r3, r3, #26
    3b64:	d502      	bpl.n	3b6c <_printf_common+0x30>
    3b66:	682b      	ldr	r3, [r5, #0]
    3b68:	3302      	adds	r3, #2
    3b6a:	602b      	str	r3, [r5, #0]
    3b6c:	2706      	movs	r7, #6
    3b6e:	6823      	ldr	r3, [r4, #0]
    3b70:	401f      	ands	r7, r3
    3b72:	d027      	beq.n	3bc4 <_printf_common+0x88>
    3b74:	0023      	movs	r3, r4
    3b76:	3343      	adds	r3, #67	; 0x43
    3b78:	781b      	ldrb	r3, [r3, #0]
    3b7a:	1e5a      	subs	r2, r3, #1
    3b7c:	4193      	sbcs	r3, r2
    3b7e:	6822      	ldr	r2, [r4, #0]
    3b80:	0692      	lsls	r2, r2, #26
    3b82:	d430      	bmi.n	3be6 <_printf_common+0xaa>
    3b84:	0022      	movs	r2, r4
    3b86:	9901      	ldr	r1, [sp, #4]
    3b88:	3243      	adds	r2, #67	; 0x43
    3b8a:	9800      	ldr	r0, [sp, #0]
    3b8c:	9e08      	ldr	r6, [sp, #32]
    3b8e:	47b0      	blx	r6
    3b90:	1c43      	adds	r3, r0, #1
    3b92:	d025      	beq.n	3be0 <_printf_common+0xa4>
    3b94:	2306      	movs	r3, #6
    3b96:	6820      	ldr	r0, [r4, #0]
    3b98:	682a      	ldr	r2, [r5, #0]
    3b9a:	68e1      	ldr	r1, [r4, #12]
    3b9c:	4003      	ands	r3, r0
    3b9e:	2500      	movs	r5, #0
    3ba0:	2b04      	cmp	r3, #4
    3ba2:	d103      	bne.n	3bac <_printf_common+0x70>
    3ba4:	1a8d      	subs	r5, r1, r2
    3ba6:	43eb      	mvns	r3, r5
    3ba8:	17db      	asrs	r3, r3, #31
    3baa:	401d      	ands	r5, r3
    3bac:	68a3      	ldr	r3, [r4, #8]
    3bae:	6922      	ldr	r2, [r4, #16]
    3bb0:	4293      	cmp	r3, r2
    3bb2:	dd01      	ble.n	3bb8 <_printf_common+0x7c>
    3bb4:	1a9b      	subs	r3, r3, r2
    3bb6:	18ed      	adds	r5, r5, r3
    3bb8:	2700      	movs	r7, #0
    3bba:	42bd      	cmp	r5, r7
    3bbc:	d120      	bne.n	3c00 <_printf_common+0xc4>
    3bbe:	2000      	movs	r0, #0
    3bc0:	e010      	b.n	3be4 <_printf_common+0xa8>
    3bc2:	3701      	adds	r7, #1
    3bc4:	68e3      	ldr	r3, [r4, #12]
    3bc6:	682a      	ldr	r2, [r5, #0]
    3bc8:	1a9b      	subs	r3, r3, r2
    3bca:	429f      	cmp	r7, r3
    3bcc:	dad2      	bge.n	3b74 <_printf_common+0x38>
    3bce:	0022      	movs	r2, r4
    3bd0:	2301      	movs	r3, #1
    3bd2:	3219      	adds	r2, #25
    3bd4:	9901      	ldr	r1, [sp, #4]
    3bd6:	9800      	ldr	r0, [sp, #0]
    3bd8:	9e08      	ldr	r6, [sp, #32]
    3bda:	47b0      	blx	r6
    3bdc:	1c43      	adds	r3, r0, #1
    3bde:	d1f0      	bne.n	3bc2 <_printf_common+0x86>
    3be0:	2001      	movs	r0, #1
    3be2:	4240      	negs	r0, r0
    3be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3be6:	2030      	movs	r0, #48	; 0x30
    3be8:	18e1      	adds	r1, r4, r3
    3bea:	3143      	adds	r1, #67	; 0x43
    3bec:	7008      	strb	r0, [r1, #0]
    3bee:	0021      	movs	r1, r4
    3bf0:	1c5a      	adds	r2, r3, #1
    3bf2:	3145      	adds	r1, #69	; 0x45
    3bf4:	7809      	ldrb	r1, [r1, #0]
    3bf6:	18a2      	adds	r2, r4, r2
    3bf8:	3243      	adds	r2, #67	; 0x43
    3bfa:	3302      	adds	r3, #2
    3bfc:	7011      	strb	r1, [r2, #0]
    3bfe:	e7c1      	b.n	3b84 <_printf_common+0x48>
    3c00:	0022      	movs	r2, r4
    3c02:	2301      	movs	r3, #1
    3c04:	321a      	adds	r2, #26
    3c06:	9901      	ldr	r1, [sp, #4]
    3c08:	9800      	ldr	r0, [sp, #0]
    3c0a:	9e08      	ldr	r6, [sp, #32]
    3c0c:	47b0      	blx	r6
    3c0e:	1c43      	adds	r3, r0, #1
    3c10:	d0e6      	beq.n	3be0 <_printf_common+0xa4>
    3c12:	3701      	adds	r7, #1
    3c14:	e7d1      	b.n	3bba <_printf_common+0x7e>
	...

00003c18 <_printf_i>:
    3c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c1a:	b08b      	sub	sp, #44	; 0x2c
    3c1c:	9206      	str	r2, [sp, #24]
    3c1e:	000a      	movs	r2, r1
    3c20:	3243      	adds	r2, #67	; 0x43
    3c22:	9307      	str	r3, [sp, #28]
    3c24:	9005      	str	r0, [sp, #20]
    3c26:	9204      	str	r2, [sp, #16]
    3c28:	7e0a      	ldrb	r2, [r1, #24]
    3c2a:	000c      	movs	r4, r1
    3c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3c2e:	2a6e      	cmp	r2, #110	; 0x6e
    3c30:	d100      	bne.n	3c34 <_printf_i+0x1c>
    3c32:	e08f      	b.n	3d54 <_printf_i+0x13c>
    3c34:	d817      	bhi.n	3c66 <_printf_i+0x4e>
    3c36:	2a63      	cmp	r2, #99	; 0x63
    3c38:	d02c      	beq.n	3c94 <_printf_i+0x7c>
    3c3a:	d808      	bhi.n	3c4e <_printf_i+0x36>
    3c3c:	2a00      	cmp	r2, #0
    3c3e:	d100      	bne.n	3c42 <_printf_i+0x2a>
    3c40:	e099      	b.n	3d76 <_printf_i+0x15e>
    3c42:	2a58      	cmp	r2, #88	; 0x58
    3c44:	d054      	beq.n	3cf0 <_printf_i+0xd8>
    3c46:	0026      	movs	r6, r4
    3c48:	3642      	adds	r6, #66	; 0x42
    3c4a:	7032      	strb	r2, [r6, #0]
    3c4c:	e029      	b.n	3ca2 <_printf_i+0x8a>
    3c4e:	2a64      	cmp	r2, #100	; 0x64
    3c50:	d001      	beq.n	3c56 <_printf_i+0x3e>
    3c52:	2a69      	cmp	r2, #105	; 0x69
    3c54:	d1f7      	bne.n	3c46 <_printf_i+0x2e>
    3c56:	6821      	ldr	r1, [r4, #0]
    3c58:	681a      	ldr	r2, [r3, #0]
    3c5a:	0608      	lsls	r0, r1, #24
    3c5c:	d523      	bpl.n	3ca6 <_printf_i+0x8e>
    3c5e:	1d11      	adds	r1, r2, #4
    3c60:	6019      	str	r1, [r3, #0]
    3c62:	6815      	ldr	r5, [r2, #0]
    3c64:	e025      	b.n	3cb2 <_printf_i+0x9a>
    3c66:	2a73      	cmp	r2, #115	; 0x73
    3c68:	d100      	bne.n	3c6c <_printf_i+0x54>
    3c6a:	e088      	b.n	3d7e <_printf_i+0x166>
    3c6c:	d808      	bhi.n	3c80 <_printf_i+0x68>
    3c6e:	2a6f      	cmp	r2, #111	; 0x6f
    3c70:	d029      	beq.n	3cc6 <_printf_i+0xae>
    3c72:	2a70      	cmp	r2, #112	; 0x70
    3c74:	d1e7      	bne.n	3c46 <_printf_i+0x2e>
    3c76:	2220      	movs	r2, #32
    3c78:	6809      	ldr	r1, [r1, #0]
    3c7a:	430a      	orrs	r2, r1
    3c7c:	6022      	str	r2, [r4, #0]
    3c7e:	e003      	b.n	3c88 <_printf_i+0x70>
    3c80:	2a75      	cmp	r2, #117	; 0x75
    3c82:	d020      	beq.n	3cc6 <_printf_i+0xae>
    3c84:	2a78      	cmp	r2, #120	; 0x78
    3c86:	d1de      	bne.n	3c46 <_printf_i+0x2e>
    3c88:	0022      	movs	r2, r4
    3c8a:	2178      	movs	r1, #120	; 0x78
    3c8c:	3245      	adds	r2, #69	; 0x45
    3c8e:	7011      	strb	r1, [r2, #0]
    3c90:	4a6c      	ldr	r2, [pc, #432]	; (3e44 <_printf_i+0x22c>)
    3c92:	e030      	b.n	3cf6 <_printf_i+0xde>
    3c94:	000e      	movs	r6, r1
    3c96:	681a      	ldr	r2, [r3, #0]
    3c98:	3642      	adds	r6, #66	; 0x42
    3c9a:	1d11      	adds	r1, r2, #4
    3c9c:	6019      	str	r1, [r3, #0]
    3c9e:	6813      	ldr	r3, [r2, #0]
    3ca0:	7033      	strb	r3, [r6, #0]
    3ca2:	2301      	movs	r3, #1
    3ca4:	e079      	b.n	3d9a <_printf_i+0x182>
    3ca6:	0649      	lsls	r1, r1, #25
    3ca8:	d5d9      	bpl.n	3c5e <_printf_i+0x46>
    3caa:	1d11      	adds	r1, r2, #4
    3cac:	6019      	str	r1, [r3, #0]
    3cae:	2300      	movs	r3, #0
    3cb0:	5ed5      	ldrsh	r5, [r2, r3]
    3cb2:	2d00      	cmp	r5, #0
    3cb4:	da03      	bge.n	3cbe <_printf_i+0xa6>
    3cb6:	232d      	movs	r3, #45	; 0x2d
    3cb8:	9a04      	ldr	r2, [sp, #16]
    3cba:	426d      	negs	r5, r5
    3cbc:	7013      	strb	r3, [r2, #0]
    3cbe:	4b62      	ldr	r3, [pc, #392]	; (3e48 <_printf_i+0x230>)
    3cc0:	270a      	movs	r7, #10
    3cc2:	9303      	str	r3, [sp, #12]
    3cc4:	e02f      	b.n	3d26 <_printf_i+0x10e>
    3cc6:	6820      	ldr	r0, [r4, #0]
    3cc8:	6819      	ldr	r1, [r3, #0]
    3cca:	0605      	lsls	r5, r0, #24
    3ccc:	d503      	bpl.n	3cd6 <_printf_i+0xbe>
    3cce:	1d08      	adds	r0, r1, #4
    3cd0:	6018      	str	r0, [r3, #0]
    3cd2:	680d      	ldr	r5, [r1, #0]
    3cd4:	e005      	b.n	3ce2 <_printf_i+0xca>
    3cd6:	0640      	lsls	r0, r0, #25
    3cd8:	d5f9      	bpl.n	3cce <_printf_i+0xb6>
    3cda:	680d      	ldr	r5, [r1, #0]
    3cdc:	1d08      	adds	r0, r1, #4
    3cde:	6018      	str	r0, [r3, #0]
    3ce0:	b2ad      	uxth	r5, r5
    3ce2:	4b59      	ldr	r3, [pc, #356]	; (3e48 <_printf_i+0x230>)
    3ce4:	2708      	movs	r7, #8
    3ce6:	9303      	str	r3, [sp, #12]
    3ce8:	2a6f      	cmp	r2, #111	; 0x6f
    3cea:	d018      	beq.n	3d1e <_printf_i+0x106>
    3cec:	270a      	movs	r7, #10
    3cee:	e016      	b.n	3d1e <_printf_i+0x106>
    3cf0:	3145      	adds	r1, #69	; 0x45
    3cf2:	700a      	strb	r2, [r1, #0]
    3cf4:	4a54      	ldr	r2, [pc, #336]	; (3e48 <_printf_i+0x230>)
    3cf6:	9203      	str	r2, [sp, #12]
    3cf8:	681a      	ldr	r2, [r3, #0]
    3cfa:	6821      	ldr	r1, [r4, #0]
    3cfc:	1d10      	adds	r0, r2, #4
    3cfe:	6018      	str	r0, [r3, #0]
    3d00:	6815      	ldr	r5, [r2, #0]
    3d02:	0608      	lsls	r0, r1, #24
    3d04:	d522      	bpl.n	3d4c <_printf_i+0x134>
    3d06:	07cb      	lsls	r3, r1, #31
    3d08:	d502      	bpl.n	3d10 <_printf_i+0xf8>
    3d0a:	2320      	movs	r3, #32
    3d0c:	4319      	orrs	r1, r3
    3d0e:	6021      	str	r1, [r4, #0]
    3d10:	2710      	movs	r7, #16
    3d12:	2d00      	cmp	r5, #0
    3d14:	d103      	bne.n	3d1e <_printf_i+0x106>
    3d16:	2320      	movs	r3, #32
    3d18:	6822      	ldr	r2, [r4, #0]
    3d1a:	439a      	bics	r2, r3
    3d1c:	6022      	str	r2, [r4, #0]
    3d1e:	0023      	movs	r3, r4
    3d20:	2200      	movs	r2, #0
    3d22:	3343      	adds	r3, #67	; 0x43
    3d24:	701a      	strb	r2, [r3, #0]
    3d26:	6863      	ldr	r3, [r4, #4]
    3d28:	60a3      	str	r3, [r4, #8]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	db5c      	blt.n	3de8 <_printf_i+0x1d0>
    3d2e:	2204      	movs	r2, #4
    3d30:	6821      	ldr	r1, [r4, #0]
    3d32:	4391      	bics	r1, r2
    3d34:	6021      	str	r1, [r4, #0]
    3d36:	2d00      	cmp	r5, #0
    3d38:	d158      	bne.n	3dec <_printf_i+0x1d4>
    3d3a:	9e04      	ldr	r6, [sp, #16]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d064      	beq.n	3e0a <_printf_i+0x1f2>
    3d40:	0026      	movs	r6, r4
    3d42:	9b03      	ldr	r3, [sp, #12]
    3d44:	3642      	adds	r6, #66	; 0x42
    3d46:	781b      	ldrb	r3, [r3, #0]
    3d48:	7033      	strb	r3, [r6, #0]
    3d4a:	e05e      	b.n	3e0a <_printf_i+0x1f2>
    3d4c:	0648      	lsls	r0, r1, #25
    3d4e:	d5da      	bpl.n	3d06 <_printf_i+0xee>
    3d50:	b2ad      	uxth	r5, r5
    3d52:	e7d8      	b.n	3d06 <_printf_i+0xee>
    3d54:	6809      	ldr	r1, [r1, #0]
    3d56:	681a      	ldr	r2, [r3, #0]
    3d58:	0608      	lsls	r0, r1, #24
    3d5a:	d505      	bpl.n	3d68 <_printf_i+0x150>
    3d5c:	1d11      	adds	r1, r2, #4
    3d5e:	6019      	str	r1, [r3, #0]
    3d60:	6813      	ldr	r3, [r2, #0]
    3d62:	6962      	ldr	r2, [r4, #20]
    3d64:	601a      	str	r2, [r3, #0]
    3d66:	e006      	b.n	3d76 <_printf_i+0x15e>
    3d68:	0649      	lsls	r1, r1, #25
    3d6a:	d5f7      	bpl.n	3d5c <_printf_i+0x144>
    3d6c:	1d11      	adds	r1, r2, #4
    3d6e:	6019      	str	r1, [r3, #0]
    3d70:	6813      	ldr	r3, [r2, #0]
    3d72:	8aa2      	ldrh	r2, [r4, #20]
    3d74:	801a      	strh	r2, [r3, #0]
    3d76:	2300      	movs	r3, #0
    3d78:	9e04      	ldr	r6, [sp, #16]
    3d7a:	6123      	str	r3, [r4, #16]
    3d7c:	e054      	b.n	3e28 <_printf_i+0x210>
    3d7e:	681a      	ldr	r2, [r3, #0]
    3d80:	1d11      	adds	r1, r2, #4
    3d82:	6019      	str	r1, [r3, #0]
    3d84:	6816      	ldr	r6, [r2, #0]
    3d86:	2100      	movs	r1, #0
    3d88:	6862      	ldr	r2, [r4, #4]
    3d8a:	0030      	movs	r0, r6
    3d8c:	f001 fae2 	bl	5354 <memchr>
    3d90:	2800      	cmp	r0, #0
    3d92:	d001      	beq.n	3d98 <_printf_i+0x180>
    3d94:	1b80      	subs	r0, r0, r6
    3d96:	6060      	str	r0, [r4, #4]
    3d98:	6863      	ldr	r3, [r4, #4]
    3d9a:	6123      	str	r3, [r4, #16]
    3d9c:	2300      	movs	r3, #0
    3d9e:	9a04      	ldr	r2, [sp, #16]
    3da0:	7013      	strb	r3, [r2, #0]
    3da2:	e041      	b.n	3e28 <_printf_i+0x210>
    3da4:	6923      	ldr	r3, [r4, #16]
    3da6:	0032      	movs	r2, r6
    3da8:	9906      	ldr	r1, [sp, #24]
    3daa:	9805      	ldr	r0, [sp, #20]
    3dac:	9d07      	ldr	r5, [sp, #28]
    3dae:	47a8      	blx	r5
    3db0:	1c43      	adds	r3, r0, #1
    3db2:	d043      	beq.n	3e3c <_printf_i+0x224>
    3db4:	6823      	ldr	r3, [r4, #0]
    3db6:	2500      	movs	r5, #0
    3db8:	079b      	lsls	r3, r3, #30
    3dba:	d40f      	bmi.n	3ddc <_printf_i+0x1c4>
    3dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3dbe:	68e0      	ldr	r0, [r4, #12]
    3dc0:	4298      	cmp	r0, r3
    3dc2:	da3d      	bge.n	3e40 <_printf_i+0x228>
    3dc4:	0018      	movs	r0, r3
    3dc6:	e03b      	b.n	3e40 <_printf_i+0x228>
    3dc8:	0022      	movs	r2, r4
    3dca:	2301      	movs	r3, #1
    3dcc:	3219      	adds	r2, #25
    3dce:	9906      	ldr	r1, [sp, #24]
    3dd0:	9805      	ldr	r0, [sp, #20]
    3dd2:	9e07      	ldr	r6, [sp, #28]
    3dd4:	47b0      	blx	r6
    3dd6:	1c43      	adds	r3, r0, #1
    3dd8:	d030      	beq.n	3e3c <_printf_i+0x224>
    3dda:	3501      	adds	r5, #1
    3ddc:	68e3      	ldr	r3, [r4, #12]
    3dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3de0:	1a9b      	subs	r3, r3, r2
    3de2:	429d      	cmp	r5, r3
    3de4:	dbf0      	blt.n	3dc8 <_printf_i+0x1b0>
    3de6:	e7e9      	b.n	3dbc <_printf_i+0x1a4>
    3de8:	2d00      	cmp	r5, #0
    3dea:	d0a9      	beq.n	3d40 <_printf_i+0x128>
    3dec:	9e04      	ldr	r6, [sp, #16]
    3dee:	0028      	movs	r0, r5
    3df0:	0039      	movs	r1, r7
    3df2:	f002 f917 	bl	6024 <__aeabi_uidivmod>
    3df6:	9b03      	ldr	r3, [sp, #12]
    3df8:	3e01      	subs	r6, #1
    3dfa:	5c5b      	ldrb	r3, [r3, r1]
    3dfc:	0028      	movs	r0, r5
    3dfe:	7033      	strb	r3, [r6, #0]
    3e00:	0039      	movs	r1, r7
    3e02:	f002 f889 	bl	5f18 <__udivsi3>
    3e06:	1e05      	subs	r5, r0, #0
    3e08:	d1f1      	bne.n	3dee <_printf_i+0x1d6>
    3e0a:	2f08      	cmp	r7, #8
    3e0c:	d109      	bne.n	3e22 <_printf_i+0x20a>
    3e0e:	6823      	ldr	r3, [r4, #0]
    3e10:	07db      	lsls	r3, r3, #31
    3e12:	d506      	bpl.n	3e22 <_printf_i+0x20a>
    3e14:	6863      	ldr	r3, [r4, #4]
    3e16:	6922      	ldr	r2, [r4, #16]
    3e18:	4293      	cmp	r3, r2
    3e1a:	dc02      	bgt.n	3e22 <_printf_i+0x20a>
    3e1c:	2330      	movs	r3, #48	; 0x30
    3e1e:	3e01      	subs	r6, #1
    3e20:	7033      	strb	r3, [r6, #0]
    3e22:	9b04      	ldr	r3, [sp, #16]
    3e24:	1b9b      	subs	r3, r3, r6
    3e26:	6123      	str	r3, [r4, #16]
    3e28:	9b07      	ldr	r3, [sp, #28]
    3e2a:	aa09      	add	r2, sp, #36	; 0x24
    3e2c:	9300      	str	r3, [sp, #0]
    3e2e:	0021      	movs	r1, r4
    3e30:	9b06      	ldr	r3, [sp, #24]
    3e32:	9805      	ldr	r0, [sp, #20]
    3e34:	f7ff fe82 	bl	3b3c <_printf_common>
    3e38:	1c43      	adds	r3, r0, #1
    3e3a:	d1b3      	bne.n	3da4 <_printf_i+0x18c>
    3e3c:	2001      	movs	r0, #1
    3e3e:	4240      	negs	r0, r0
    3e40:	b00b      	add	sp, #44	; 0x2c
    3e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e44:	00008bdb 	.word	0x00008bdb
    3e48:	00008bca 	.word	0x00008bca

00003e4c <iprintf>:
    3e4c:	b40f      	push	{r0, r1, r2, r3}
    3e4e:	4b0b      	ldr	r3, [pc, #44]	; (3e7c <iprintf+0x30>)
    3e50:	b513      	push	{r0, r1, r4, lr}
    3e52:	681c      	ldr	r4, [r3, #0]
    3e54:	2c00      	cmp	r4, #0
    3e56:	d005      	beq.n	3e64 <iprintf+0x18>
    3e58:	69a3      	ldr	r3, [r4, #24]
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d102      	bne.n	3e64 <iprintf+0x18>
    3e5e:	0020      	movs	r0, r4
    3e60:	f001 f966 	bl	5130 <__sinit>
    3e64:	ab05      	add	r3, sp, #20
    3e66:	9a04      	ldr	r2, [sp, #16]
    3e68:	68a1      	ldr	r1, [r4, #8]
    3e6a:	0020      	movs	r0, r4
    3e6c:	9301      	str	r3, [sp, #4]
    3e6e:	f001 fe3d 	bl	5aec <_vfiprintf_r>
    3e72:	bc16      	pop	{r1, r2, r4}
    3e74:	bc08      	pop	{r3}
    3e76:	b004      	add	sp, #16
    3e78:	4718      	bx	r3
    3e7a:	46c0      	nop			; (mov r8, r8)
    3e7c:	2000000c 	.word	0x2000000c

00003e80 <_puts_r>:
    3e80:	b570      	push	{r4, r5, r6, lr}
    3e82:	0005      	movs	r5, r0
    3e84:	000e      	movs	r6, r1
    3e86:	2800      	cmp	r0, #0
    3e88:	d004      	beq.n	3e94 <_puts_r+0x14>
    3e8a:	6983      	ldr	r3, [r0, #24]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d101      	bne.n	3e94 <_puts_r+0x14>
    3e90:	f001 f94e 	bl	5130 <__sinit>
    3e94:	69ab      	ldr	r3, [r5, #24]
    3e96:	68ac      	ldr	r4, [r5, #8]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d102      	bne.n	3ea2 <_puts_r+0x22>
    3e9c:	0028      	movs	r0, r5
    3e9e:	f001 f947 	bl	5130 <__sinit>
    3ea2:	4b24      	ldr	r3, [pc, #144]	; (3f34 <_puts_r+0xb4>)
    3ea4:	429c      	cmp	r4, r3
    3ea6:	d10f      	bne.n	3ec8 <_puts_r+0x48>
    3ea8:	686c      	ldr	r4, [r5, #4]
    3eaa:	89a3      	ldrh	r3, [r4, #12]
    3eac:	071b      	lsls	r3, r3, #28
    3eae:	d502      	bpl.n	3eb6 <_puts_r+0x36>
    3eb0:	6923      	ldr	r3, [r4, #16]
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d120      	bne.n	3ef8 <_puts_r+0x78>
    3eb6:	0021      	movs	r1, r4
    3eb8:	0028      	movs	r0, r5
    3eba:	f000 f95f 	bl	417c <__swsetup_r>
    3ebe:	2800      	cmp	r0, #0
    3ec0:	d01a      	beq.n	3ef8 <_puts_r+0x78>
    3ec2:	2001      	movs	r0, #1
    3ec4:	4240      	negs	r0, r0
    3ec6:	bd70      	pop	{r4, r5, r6, pc}
    3ec8:	4b1b      	ldr	r3, [pc, #108]	; (3f38 <_puts_r+0xb8>)
    3eca:	429c      	cmp	r4, r3
    3ecc:	d101      	bne.n	3ed2 <_puts_r+0x52>
    3ece:	68ac      	ldr	r4, [r5, #8]
    3ed0:	e7eb      	b.n	3eaa <_puts_r+0x2a>
    3ed2:	4b1a      	ldr	r3, [pc, #104]	; (3f3c <_puts_r+0xbc>)
    3ed4:	429c      	cmp	r4, r3
    3ed6:	d1e8      	bne.n	3eaa <_puts_r+0x2a>
    3ed8:	68ec      	ldr	r4, [r5, #12]
    3eda:	e7e6      	b.n	3eaa <_puts_r+0x2a>
    3edc:	3b01      	subs	r3, #1
    3ede:	3601      	adds	r6, #1
    3ee0:	60a3      	str	r3, [r4, #8]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	da04      	bge.n	3ef0 <_puts_r+0x70>
    3ee6:	69a2      	ldr	r2, [r4, #24]
    3ee8:	4293      	cmp	r3, r2
    3eea:	db16      	blt.n	3f1a <_puts_r+0x9a>
    3eec:	290a      	cmp	r1, #10
    3eee:	d014      	beq.n	3f1a <_puts_r+0x9a>
    3ef0:	6823      	ldr	r3, [r4, #0]
    3ef2:	1c5a      	adds	r2, r3, #1
    3ef4:	6022      	str	r2, [r4, #0]
    3ef6:	7019      	strb	r1, [r3, #0]
    3ef8:	7831      	ldrb	r1, [r6, #0]
    3efa:	68a3      	ldr	r3, [r4, #8]
    3efc:	2900      	cmp	r1, #0
    3efe:	d1ed      	bne.n	3edc <_puts_r+0x5c>
    3f00:	3b01      	subs	r3, #1
    3f02:	60a3      	str	r3, [r4, #8]
    3f04:	2b00      	cmp	r3, #0
    3f06:	da0f      	bge.n	3f28 <_puts_r+0xa8>
    3f08:	0022      	movs	r2, r4
    3f0a:	310a      	adds	r1, #10
    3f0c:	0028      	movs	r0, r5
    3f0e:	f000 f8df 	bl	40d0 <__swbuf_r>
    3f12:	1c43      	adds	r3, r0, #1
    3f14:	d0d5      	beq.n	3ec2 <_puts_r+0x42>
    3f16:	200a      	movs	r0, #10
    3f18:	e7d5      	b.n	3ec6 <_puts_r+0x46>
    3f1a:	0022      	movs	r2, r4
    3f1c:	0028      	movs	r0, r5
    3f1e:	f000 f8d7 	bl	40d0 <__swbuf_r>
    3f22:	1c43      	adds	r3, r0, #1
    3f24:	d1e8      	bne.n	3ef8 <_puts_r+0x78>
    3f26:	e7cc      	b.n	3ec2 <_puts_r+0x42>
    3f28:	200a      	movs	r0, #10
    3f2a:	6823      	ldr	r3, [r4, #0]
    3f2c:	1c5a      	adds	r2, r3, #1
    3f2e:	6022      	str	r2, [r4, #0]
    3f30:	7018      	strb	r0, [r3, #0]
    3f32:	e7c8      	b.n	3ec6 <_puts_r+0x46>
    3f34:	00008c1c 	.word	0x00008c1c
    3f38:	00008c3c 	.word	0x00008c3c
    3f3c:	00008bfc 	.word	0x00008bfc

00003f40 <puts>:
    3f40:	b510      	push	{r4, lr}
    3f42:	4b03      	ldr	r3, [pc, #12]	; (3f50 <puts+0x10>)
    3f44:	0001      	movs	r1, r0
    3f46:	6818      	ldr	r0, [r3, #0]
    3f48:	f7ff ff9a 	bl	3e80 <_puts_r>
    3f4c:	bd10      	pop	{r4, pc}
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	2000000c 	.word	0x2000000c

00003f54 <setbuf>:
    3f54:	424a      	negs	r2, r1
    3f56:	414a      	adcs	r2, r1
    3f58:	2380      	movs	r3, #128	; 0x80
    3f5a:	b510      	push	{r4, lr}
    3f5c:	0052      	lsls	r2, r2, #1
    3f5e:	00db      	lsls	r3, r3, #3
    3f60:	f000 f802 	bl	3f68 <setvbuf>
    3f64:	bd10      	pop	{r4, pc}
	...

00003f68 <setvbuf>:
    3f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f6a:	001d      	movs	r5, r3
    3f6c:	4b4f      	ldr	r3, [pc, #316]	; (40ac <setvbuf+0x144>)
    3f6e:	b085      	sub	sp, #20
    3f70:	681e      	ldr	r6, [r3, #0]
    3f72:	0004      	movs	r4, r0
    3f74:	000f      	movs	r7, r1
    3f76:	9200      	str	r2, [sp, #0]
    3f78:	2e00      	cmp	r6, #0
    3f7a:	d005      	beq.n	3f88 <setvbuf+0x20>
    3f7c:	69b3      	ldr	r3, [r6, #24]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d102      	bne.n	3f88 <setvbuf+0x20>
    3f82:	0030      	movs	r0, r6
    3f84:	f001 f8d4 	bl	5130 <__sinit>
    3f88:	4b49      	ldr	r3, [pc, #292]	; (40b0 <setvbuf+0x148>)
    3f8a:	429c      	cmp	r4, r3
    3f8c:	d150      	bne.n	4030 <setvbuf+0xc8>
    3f8e:	6874      	ldr	r4, [r6, #4]
    3f90:	9b00      	ldr	r3, [sp, #0]
    3f92:	2b02      	cmp	r3, #2
    3f94:	d005      	beq.n	3fa2 <setvbuf+0x3a>
    3f96:	2b01      	cmp	r3, #1
    3f98:	d900      	bls.n	3f9c <setvbuf+0x34>
    3f9a:	e084      	b.n	40a6 <setvbuf+0x13e>
    3f9c:	2d00      	cmp	r5, #0
    3f9e:	da00      	bge.n	3fa2 <setvbuf+0x3a>
    3fa0:	e081      	b.n	40a6 <setvbuf+0x13e>
    3fa2:	0021      	movs	r1, r4
    3fa4:	0030      	movs	r0, r6
    3fa6:	f001 f855 	bl	5054 <_fflush_r>
    3faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3fac:	2900      	cmp	r1, #0
    3fae:	d008      	beq.n	3fc2 <setvbuf+0x5a>
    3fb0:	0023      	movs	r3, r4
    3fb2:	3344      	adds	r3, #68	; 0x44
    3fb4:	4299      	cmp	r1, r3
    3fb6:	d002      	beq.n	3fbe <setvbuf+0x56>
    3fb8:	0030      	movs	r0, r6
    3fba:	f001 fcc7 	bl	594c <_free_r>
    3fbe:	2300      	movs	r3, #0
    3fc0:	6363      	str	r3, [r4, #52]	; 0x34
    3fc2:	2300      	movs	r3, #0
    3fc4:	61a3      	str	r3, [r4, #24]
    3fc6:	6063      	str	r3, [r4, #4]
    3fc8:	89a3      	ldrh	r3, [r4, #12]
    3fca:	061b      	lsls	r3, r3, #24
    3fcc:	d503      	bpl.n	3fd6 <setvbuf+0x6e>
    3fce:	6921      	ldr	r1, [r4, #16]
    3fd0:	0030      	movs	r0, r6
    3fd2:	f001 fcbb 	bl	594c <_free_r>
    3fd6:	89a3      	ldrh	r3, [r4, #12]
    3fd8:	4a36      	ldr	r2, [pc, #216]	; (40b4 <setvbuf+0x14c>)
    3fda:	4013      	ands	r3, r2
    3fdc:	81a3      	strh	r3, [r4, #12]
    3fde:	9b00      	ldr	r3, [sp, #0]
    3fe0:	2b02      	cmp	r3, #2
    3fe2:	d05a      	beq.n	409a <setvbuf+0x132>
    3fe4:	ab03      	add	r3, sp, #12
    3fe6:	aa02      	add	r2, sp, #8
    3fe8:	0021      	movs	r1, r4
    3fea:	0030      	movs	r0, r6
    3fec:	f001 f942 	bl	5274 <__swhatbuf_r>
    3ff0:	89a3      	ldrh	r3, [r4, #12]
    3ff2:	4318      	orrs	r0, r3
    3ff4:	81a0      	strh	r0, [r4, #12]
    3ff6:	2d00      	cmp	r5, #0
    3ff8:	d124      	bne.n	4044 <setvbuf+0xdc>
    3ffa:	9d02      	ldr	r5, [sp, #8]
    3ffc:	0028      	movs	r0, r5
    3ffe:	f001 f99f 	bl	5340 <malloc>
    4002:	9501      	str	r5, [sp, #4]
    4004:	1e07      	subs	r7, r0, #0
    4006:	d142      	bne.n	408e <setvbuf+0x126>
    4008:	9b02      	ldr	r3, [sp, #8]
    400a:	9301      	str	r3, [sp, #4]
    400c:	42ab      	cmp	r3, r5
    400e:	d139      	bne.n	4084 <setvbuf+0x11c>
    4010:	2001      	movs	r0, #1
    4012:	4240      	negs	r0, r0
    4014:	2302      	movs	r3, #2
    4016:	89a2      	ldrh	r2, [r4, #12]
    4018:	4313      	orrs	r3, r2
    401a:	81a3      	strh	r3, [r4, #12]
    401c:	2300      	movs	r3, #0
    401e:	60a3      	str	r3, [r4, #8]
    4020:	0023      	movs	r3, r4
    4022:	3347      	adds	r3, #71	; 0x47
    4024:	6023      	str	r3, [r4, #0]
    4026:	6123      	str	r3, [r4, #16]
    4028:	2301      	movs	r3, #1
    402a:	6163      	str	r3, [r4, #20]
    402c:	b005      	add	sp, #20
    402e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4030:	4b21      	ldr	r3, [pc, #132]	; (40b8 <setvbuf+0x150>)
    4032:	429c      	cmp	r4, r3
    4034:	d101      	bne.n	403a <setvbuf+0xd2>
    4036:	68b4      	ldr	r4, [r6, #8]
    4038:	e7aa      	b.n	3f90 <setvbuf+0x28>
    403a:	4b20      	ldr	r3, [pc, #128]	; (40bc <setvbuf+0x154>)
    403c:	429c      	cmp	r4, r3
    403e:	d1a7      	bne.n	3f90 <setvbuf+0x28>
    4040:	68f4      	ldr	r4, [r6, #12]
    4042:	e7a5      	b.n	3f90 <setvbuf+0x28>
    4044:	2f00      	cmp	r7, #0
    4046:	d0d9      	beq.n	3ffc <setvbuf+0x94>
    4048:	69b3      	ldr	r3, [r6, #24]
    404a:	2b00      	cmp	r3, #0
    404c:	d102      	bne.n	4054 <setvbuf+0xec>
    404e:	0030      	movs	r0, r6
    4050:	f001 f86e 	bl	5130 <__sinit>
    4054:	9b00      	ldr	r3, [sp, #0]
    4056:	2b01      	cmp	r3, #1
    4058:	d103      	bne.n	4062 <setvbuf+0xfa>
    405a:	89a3      	ldrh	r3, [r4, #12]
    405c:	9a00      	ldr	r2, [sp, #0]
    405e:	431a      	orrs	r2, r3
    4060:	81a2      	strh	r2, [r4, #12]
    4062:	2008      	movs	r0, #8
    4064:	89a3      	ldrh	r3, [r4, #12]
    4066:	6027      	str	r7, [r4, #0]
    4068:	6127      	str	r7, [r4, #16]
    406a:	6165      	str	r5, [r4, #20]
    406c:	4018      	ands	r0, r3
    406e:	d018      	beq.n	40a2 <setvbuf+0x13a>
    4070:	2001      	movs	r0, #1
    4072:	4018      	ands	r0, r3
    4074:	2300      	movs	r3, #0
    4076:	4298      	cmp	r0, r3
    4078:	d011      	beq.n	409e <setvbuf+0x136>
    407a:	426d      	negs	r5, r5
    407c:	60a3      	str	r3, [r4, #8]
    407e:	61a5      	str	r5, [r4, #24]
    4080:	0018      	movs	r0, r3
    4082:	e7d3      	b.n	402c <setvbuf+0xc4>
    4084:	9801      	ldr	r0, [sp, #4]
    4086:	f001 f95b 	bl	5340 <malloc>
    408a:	1e07      	subs	r7, r0, #0
    408c:	d0c0      	beq.n	4010 <setvbuf+0xa8>
    408e:	2380      	movs	r3, #128	; 0x80
    4090:	89a2      	ldrh	r2, [r4, #12]
    4092:	9d01      	ldr	r5, [sp, #4]
    4094:	4313      	orrs	r3, r2
    4096:	81a3      	strh	r3, [r4, #12]
    4098:	e7d6      	b.n	4048 <setvbuf+0xe0>
    409a:	2000      	movs	r0, #0
    409c:	e7ba      	b.n	4014 <setvbuf+0xac>
    409e:	60a5      	str	r5, [r4, #8]
    40a0:	e7c4      	b.n	402c <setvbuf+0xc4>
    40a2:	60a0      	str	r0, [r4, #8]
    40a4:	e7c2      	b.n	402c <setvbuf+0xc4>
    40a6:	2001      	movs	r0, #1
    40a8:	4240      	negs	r0, r0
    40aa:	e7bf      	b.n	402c <setvbuf+0xc4>
    40ac:	2000000c 	.word	0x2000000c
    40b0:	00008c1c 	.word	0x00008c1c
    40b4:	fffff35c 	.word	0xfffff35c
    40b8:	00008c3c 	.word	0x00008c3c
    40bc:	00008bfc 	.word	0x00008bfc

000040c0 <strlen>:
    40c0:	2300      	movs	r3, #0
    40c2:	5cc2      	ldrb	r2, [r0, r3]
    40c4:	3301      	adds	r3, #1
    40c6:	2a00      	cmp	r2, #0
    40c8:	d1fb      	bne.n	40c2 <strlen+0x2>
    40ca:	1e58      	subs	r0, r3, #1
    40cc:	4770      	bx	lr
	...

000040d0 <__swbuf_r>:
    40d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40d2:	0005      	movs	r5, r0
    40d4:	000e      	movs	r6, r1
    40d6:	0014      	movs	r4, r2
    40d8:	2800      	cmp	r0, #0
    40da:	d004      	beq.n	40e6 <__swbuf_r+0x16>
    40dc:	6983      	ldr	r3, [r0, #24]
    40de:	2b00      	cmp	r3, #0
    40e0:	d101      	bne.n	40e6 <__swbuf_r+0x16>
    40e2:	f001 f825 	bl	5130 <__sinit>
    40e6:	4b22      	ldr	r3, [pc, #136]	; (4170 <__swbuf_r+0xa0>)
    40e8:	429c      	cmp	r4, r3
    40ea:	d12d      	bne.n	4148 <__swbuf_r+0x78>
    40ec:	686c      	ldr	r4, [r5, #4]
    40ee:	69a3      	ldr	r3, [r4, #24]
    40f0:	60a3      	str	r3, [r4, #8]
    40f2:	89a3      	ldrh	r3, [r4, #12]
    40f4:	071b      	lsls	r3, r3, #28
    40f6:	d531      	bpl.n	415c <__swbuf_r+0x8c>
    40f8:	6923      	ldr	r3, [r4, #16]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d02e      	beq.n	415c <__swbuf_r+0x8c>
    40fe:	6823      	ldr	r3, [r4, #0]
    4100:	6922      	ldr	r2, [r4, #16]
    4102:	b2f7      	uxtb	r7, r6
    4104:	1a98      	subs	r0, r3, r2
    4106:	6963      	ldr	r3, [r4, #20]
    4108:	b2f6      	uxtb	r6, r6
    410a:	4298      	cmp	r0, r3
    410c:	db05      	blt.n	411a <__swbuf_r+0x4a>
    410e:	0021      	movs	r1, r4
    4110:	0028      	movs	r0, r5
    4112:	f000 ff9f 	bl	5054 <_fflush_r>
    4116:	2800      	cmp	r0, #0
    4118:	d126      	bne.n	4168 <__swbuf_r+0x98>
    411a:	68a3      	ldr	r3, [r4, #8]
    411c:	3001      	adds	r0, #1
    411e:	3b01      	subs	r3, #1
    4120:	60a3      	str	r3, [r4, #8]
    4122:	6823      	ldr	r3, [r4, #0]
    4124:	1c5a      	adds	r2, r3, #1
    4126:	6022      	str	r2, [r4, #0]
    4128:	701f      	strb	r7, [r3, #0]
    412a:	6963      	ldr	r3, [r4, #20]
    412c:	4298      	cmp	r0, r3
    412e:	d004      	beq.n	413a <__swbuf_r+0x6a>
    4130:	89a3      	ldrh	r3, [r4, #12]
    4132:	07db      	lsls	r3, r3, #31
    4134:	d51a      	bpl.n	416c <__swbuf_r+0x9c>
    4136:	2e0a      	cmp	r6, #10
    4138:	d118      	bne.n	416c <__swbuf_r+0x9c>
    413a:	0021      	movs	r1, r4
    413c:	0028      	movs	r0, r5
    413e:	f000 ff89 	bl	5054 <_fflush_r>
    4142:	2800      	cmp	r0, #0
    4144:	d012      	beq.n	416c <__swbuf_r+0x9c>
    4146:	e00f      	b.n	4168 <__swbuf_r+0x98>
    4148:	4b0a      	ldr	r3, [pc, #40]	; (4174 <__swbuf_r+0xa4>)
    414a:	429c      	cmp	r4, r3
    414c:	d101      	bne.n	4152 <__swbuf_r+0x82>
    414e:	68ac      	ldr	r4, [r5, #8]
    4150:	e7cd      	b.n	40ee <__swbuf_r+0x1e>
    4152:	4b09      	ldr	r3, [pc, #36]	; (4178 <__swbuf_r+0xa8>)
    4154:	429c      	cmp	r4, r3
    4156:	d1ca      	bne.n	40ee <__swbuf_r+0x1e>
    4158:	68ec      	ldr	r4, [r5, #12]
    415a:	e7c8      	b.n	40ee <__swbuf_r+0x1e>
    415c:	0021      	movs	r1, r4
    415e:	0028      	movs	r0, r5
    4160:	f000 f80c 	bl	417c <__swsetup_r>
    4164:	2800      	cmp	r0, #0
    4166:	d0ca      	beq.n	40fe <__swbuf_r+0x2e>
    4168:	2601      	movs	r6, #1
    416a:	4276      	negs	r6, r6
    416c:	0030      	movs	r0, r6
    416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4170:	00008c1c 	.word	0x00008c1c
    4174:	00008c3c 	.word	0x00008c3c
    4178:	00008bfc 	.word	0x00008bfc

0000417c <__swsetup_r>:
    417c:	4b36      	ldr	r3, [pc, #216]	; (4258 <__swsetup_r+0xdc>)
    417e:	b570      	push	{r4, r5, r6, lr}
    4180:	681d      	ldr	r5, [r3, #0]
    4182:	0006      	movs	r6, r0
    4184:	000c      	movs	r4, r1
    4186:	2d00      	cmp	r5, #0
    4188:	d005      	beq.n	4196 <__swsetup_r+0x1a>
    418a:	69ab      	ldr	r3, [r5, #24]
    418c:	2b00      	cmp	r3, #0
    418e:	d102      	bne.n	4196 <__swsetup_r+0x1a>
    4190:	0028      	movs	r0, r5
    4192:	f000 ffcd 	bl	5130 <__sinit>
    4196:	4b31      	ldr	r3, [pc, #196]	; (425c <__swsetup_r+0xe0>)
    4198:	429c      	cmp	r4, r3
    419a:	d10f      	bne.n	41bc <__swsetup_r+0x40>
    419c:	686c      	ldr	r4, [r5, #4]
    419e:	230c      	movs	r3, #12
    41a0:	5ee2      	ldrsh	r2, [r4, r3]
    41a2:	b293      	uxth	r3, r2
    41a4:	0719      	lsls	r1, r3, #28
    41a6:	d42d      	bmi.n	4204 <__swsetup_r+0x88>
    41a8:	06d9      	lsls	r1, r3, #27
    41aa:	d411      	bmi.n	41d0 <__swsetup_r+0x54>
    41ac:	2309      	movs	r3, #9
    41ae:	2001      	movs	r0, #1
    41b0:	6033      	str	r3, [r6, #0]
    41b2:	3337      	adds	r3, #55	; 0x37
    41b4:	4313      	orrs	r3, r2
    41b6:	81a3      	strh	r3, [r4, #12]
    41b8:	4240      	negs	r0, r0
    41ba:	bd70      	pop	{r4, r5, r6, pc}
    41bc:	4b28      	ldr	r3, [pc, #160]	; (4260 <__swsetup_r+0xe4>)
    41be:	429c      	cmp	r4, r3
    41c0:	d101      	bne.n	41c6 <__swsetup_r+0x4a>
    41c2:	68ac      	ldr	r4, [r5, #8]
    41c4:	e7eb      	b.n	419e <__swsetup_r+0x22>
    41c6:	4b27      	ldr	r3, [pc, #156]	; (4264 <__swsetup_r+0xe8>)
    41c8:	429c      	cmp	r4, r3
    41ca:	d1e8      	bne.n	419e <__swsetup_r+0x22>
    41cc:	68ec      	ldr	r4, [r5, #12]
    41ce:	e7e6      	b.n	419e <__swsetup_r+0x22>
    41d0:	075b      	lsls	r3, r3, #29
    41d2:	d513      	bpl.n	41fc <__swsetup_r+0x80>
    41d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    41d6:	2900      	cmp	r1, #0
    41d8:	d008      	beq.n	41ec <__swsetup_r+0x70>
    41da:	0023      	movs	r3, r4
    41dc:	3344      	adds	r3, #68	; 0x44
    41de:	4299      	cmp	r1, r3
    41e0:	d002      	beq.n	41e8 <__swsetup_r+0x6c>
    41e2:	0030      	movs	r0, r6
    41e4:	f001 fbb2 	bl	594c <_free_r>
    41e8:	2300      	movs	r3, #0
    41ea:	6363      	str	r3, [r4, #52]	; 0x34
    41ec:	2224      	movs	r2, #36	; 0x24
    41ee:	89a3      	ldrh	r3, [r4, #12]
    41f0:	4393      	bics	r3, r2
    41f2:	81a3      	strh	r3, [r4, #12]
    41f4:	2300      	movs	r3, #0
    41f6:	6063      	str	r3, [r4, #4]
    41f8:	6923      	ldr	r3, [r4, #16]
    41fa:	6023      	str	r3, [r4, #0]
    41fc:	2308      	movs	r3, #8
    41fe:	89a2      	ldrh	r2, [r4, #12]
    4200:	4313      	orrs	r3, r2
    4202:	81a3      	strh	r3, [r4, #12]
    4204:	6923      	ldr	r3, [r4, #16]
    4206:	2b00      	cmp	r3, #0
    4208:	d10b      	bne.n	4222 <__swsetup_r+0xa6>
    420a:	21a0      	movs	r1, #160	; 0xa0
    420c:	2280      	movs	r2, #128	; 0x80
    420e:	89a3      	ldrh	r3, [r4, #12]
    4210:	0089      	lsls	r1, r1, #2
    4212:	0092      	lsls	r2, r2, #2
    4214:	400b      	ands	r3, r1
    4216:	4293      	cmp	r3, r2
    4218:	d003      	beq.n	4222 <__swsetup_r+0xa6>
    421a:	0021      	movs	r1, r4
    421c:	0030      	movs	r0, r6
    421e:	f001 f851 	bl	52c4 <__smakebuf_r>
    4222:	2301      	movs	r3, #1
    4224:	89a2      	ldrh	r2, [r4, #12]
    4226:	4013      	ands	r3, r2
    4228:	d011      	beq.n	424e <__swsetup_r+0xd2>
    422a:	2300      	movs	r3, #0
    422c:	60a3      	str	r3, [r4, #8]
    422e:	6963      	ldr	r3, [r4, #20]
    4230:	425b      	negs	r3, r3
    4232:	61a3      	str	r3, [r4, #24]
    4234:	2000      	movs	r0, #0
    4236:	6923      	ldr	r3, [r4, #16]
    4238:	4283      	cmp	r3, r0
    423a:	d1be      	bne.n	41ba <__swsetup_r+0x3e>
    423c:	230c      	movs	r3, #12
    423e:	5ee2      	ldrsh	r2, [r4, r3]
    4240:	0613      	lsls	r3, r2, #24
    4242:	d5ba      	bpl.n	41ba <__swsetup_r+0x3e>
    4244:	2340      	movs	r3, #64	; 0x40
    4246:	4313      	orrs	r3, r2
    4248:	81a3      	strh	r3, [r4, #12]
    424a:	3801      	subs	r0, #1
    424c:	e7b5      	b.n	41ba <__swsetup_r+0x3e>
    424e:	0792      	lsls	r2, r2, #30
    4250:	d400      	bmi.n	4254 <__swsetup_r+0xd8>
    4252:	6963      	ldr	r3, [r4, #20]
    4254:	60a3      	str	r3, [r4, #8]
    4256:	e7ed      	b.n	4234 <__swsetup_r+0xb8>
    4258:	2000000c 	.word	0x2000000c
    425c:	00008c1c 	.word	0x00008c1c
    4260:	00008c3c 	.word	0x00008c3c
    4264:	00008bfc 	.word	0x00008bfc

00004268 <quorem>:
    4268:	b5f0      	push	{r4, r5, r6, r7, lr}
    426a:	6903      	ldr	r3, [r0, #16]
    426c:	690c      	ldr	r4, [r1, #16]
    426e:	b089      	sub	sp, #36	; 0x24
    4270:	0007      	movs	r7, r0
    4272:	9105      	str	r1, [sp, #20]
    4274:	2600      	movs	r6, #0
    4276:	429c      	cmp	r4, r3
    4278:	dc6d      	bgt.n	4356 <quorem+0xee>
    427a:	000b      	movs	r3, r1
    427c:	3c01      	subs	r4, #1
    427e:	3314      	adds	r3, #20
    4280:	00a5      	lsls	r5, r4, #2
    4282:	9303      	str	r3, [sp, #12]
    4284:	195b      	adds	r3, r3, r5
    4286:	9304      	str	r3, [sp, #16]
    4288:	0003      	movs	r3, r0
    428a:	3314      	adds	r3, #20
    428c:	9302      	str	r3, [sp, #8]
    428e:	195d      	adds	r5, r3, r5
    4290:	9b04      	ldr	r3, [sp, #16]
    4292:	6828      	ldr	r0, [r5, #0]
    4294:	681b      	ldr	r3, [r3, #0]
    4296:	1c59      	adds	r1, r3, #1
    4298:	9301      	str	r3, [sp, #4]
    429a:	f001 fe3d 	bl	5f18 <__udivsi3>
    429e:	9001      	str	r0, [sp, #4]
    42a0:	42b0      	cmp	r0, r6
    42a2:	d02d      	beq.n	4300 <quorem+0x98>
    42a4:	9b03      	ldr	r3, [sp, #12]
    42a6:	9802      	ldr	r0, [sp, #8]
    42a8:	469c      	mov	ip, r3
    42aa:	9606      	str	r6, [sp, #24]
    42ac:	4662      	mov	r2, ip
    42ae:	ca08      	ldmia	r2!, {r3}
    42b0:	4694      	mov	ip, r2
    42b2:	9a01      	ldr	r2, [sp, #4]
    42b4:	b299      	uxth	r1, r3
    42b6:	4351      	muls	r1, r2
    42b8:	0c1b      	lsrs	r3, r3, #16
    42ba:	4353      	muls	r3, r2
    42bc:	1989      	adds	r1, r1, r6
    42be:	0c0a      	lsrs	r2, r1, #16
    42c0:	189b      	adds	r3, r3, r2
    42c2:	9307      	str	r3, [sp, #28]
    42c4:	8802      	ldrh	r2, [r0, #0]
    42c6:	0c1e      	lsrs	r6, r3, #16
    42c8:	9b06      	ldr	r3, [sp, #24]
    42ca:	b289      	uxth	r1, r1
    42cc:	18d2      	adds	r2, r2, r3
    42ce:	6803      	ldr	r3, [r0, #0]
    42d0:	1a52      	subs	r2, r2, r1
    42d2:	0c19      	lsrs	r1, r3, #16
    42d4:	466b      	mov	r3, sp
    42d6:	8b9b      	ldrh	r3, [r3, #28]
    42d8:	1acb      	subs	r3, r1, r3
    42da:	1411      	asrs	r1, r2, #16
    42dc:	185b      	adds	r3, r3, r1
    42de:	1419      	asrs	r1, r3, #16
    42e0:	b292      	uxth	r2, r2
    42e2:	041b      	lsls	r3, r3, #16
    42e4:	431a      	orrs	r2, r3
    42e6:	9b04      	ldr	r3, [sp, #16]
    42e8:	9106      	str	r1, [sp, #24]
    42ea:	c004      	stmia	r0!, {r2}
    42ec:	4563      	cmp	r3, ip
    42ee:	d2dd      	bcs.n	42ac <quorem+0x44>
    42f0:	682b      	ldr	r3, [r5, #0]
    42f2:	2b00      	cmp	r3, #0
    42f4:	d104      	bne.n	4300 <quorem+0x98>
    42f6:	9b02      	ldr	r3, [sp, #8]
    42f8:	3d04      	subs	r5, #4
    42fa:	42ab      	cmp	r3, r5
    42fc:	d32e      	bcc.n	435c <quorem+0xf4>
    42fe:	613c      	str	r4, [r7, #16]
    4300:	9905      	ldr	r1, [sp, #20]
    4302:	0038      	movs	r0, r7
    4304:	f001 fa43 	bl	578e <__mcmp>
    4308:	2800      	cmp	r0, #0
    430a:	db23      	blt.n	4354 <quorem+0xec>
    430c:	2500      	movs	r5, #0
    430e:	9b01      	ldr	r3, [sp, #4]
    4310:	9802      	ldr	r0, [sp, #8]
    4312:	3301      	adds	r3, #1
    4314:	9903      	ldr	r1, [sp, #12]
    4316:	9301      	str	r3, [sp, #4]
    4318:	c908      	ldmia	r1!, {r3}
    431a:	8802      	ldrh	r2, [r0, #0]
    431c:	1955      	adds	r5, r2, r5
    431e:	b29a      	uxth	r2, r3
    4320:	1aaa      	subs	r2, r5, r2
    4322:	6805      	ldr	r5, [r0, #0]
    4324:	0c1b      	lsrs	r3, r3, #16
    4326:	0c2d      	lsrs	r5, r5, #16
    4328:	1aeb      	subs	r3, r5, r3
    432a:	1415      	asrs	r5, r2, #16
    432c:	195b      	adds	r3, r3, r5
    432e:	141d      	asrs	r5, r3, #16
    4330:	b292      	uxth	r2, r2
    4332:	041b      	lsls	r3, r3, #16
    4334:	4313      	orrs	r3, r2
    4336:	c008      	stmia	r0!, {r3}
    4338:	9b04      	ldr	r3, [sp, #16]
    433a:	428b      	cmp	r3, r1
    433c:	d2ec      	bcs.n	4318 <quorem+0xb0>
    433e:	9a02      	ldr	r2, [sp, #8]
    4340:	00a3      	lsls	r3, r4, #2
    4342:	18d3      	adds	r3, r2, r3
    4344:	681a      	ldr	r2, [r3, #0]
    4346:	2a00      	cmp	r2, #0
    4348:	d104      	bne.n	4354 <quorem+0xec>
    434a:	9a02      	ldr	r2, [sp, #8]
    434c:	3b04      	subs	r3, #4
    434e:	429a      	cmp	r2, r3
    4350:	d309      	bcc.n	4366 <quorem+0xfe>
    4352:	613c      	str	r4, [r7, #16]
    4354:	9e01      	ldr	r6, [sp, #4]
    4356:	0030      	movs	r0, r6
    4358:	b009      	add	sp, #36	; 0x24
    435a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    435c:	682b      	ldr	r3, [r5, #0]
    435e:	2b00      	cmp	r3, #0
    4360:	d1cd      	bne.n	42fe <quorem+0x96>
    4362:	3c01      	subs	r4, #1
    4364:	e7c7      	b.n	42f6 <quorem+0x8e>
    4366:	681a      	ldr	r2, [r3, #0]
    4368:	2a00      	cmp	r2, #0
    436a:	d1f2      	bne.n	4352 <quorem+0xea>
    436c:	3c01      	subs	r4, #1
    436e:	e7ec      	b.n	434a <quorem+0xe2>

00004370 <_dtoa_r>:
    4370:	b5f0      	push	{r4, r5, r6, r7, lr}
    4372:	0016      	movs	r6, r2
    4374:	001f      	movs	r7, r3
    4376:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4378:	b09d      	sub	sp, #116	; 0x74
    437a:	9004      	str	r0, [sp, #16]
    437c:	9d25      	ldr	r5, [sp, #148]	; 0x94
    437e:	9606      	str	r6, [sp, #24]
    4380:	9707      	str	r7, [sp, #28]
    4382:	2c00      	cmp	r4, #0
    4384:	d108      	bne.n	4398 <_dtoa_r+0x28>
    4386:	2010      	movs	r0, #16
    4388:	f000 ffda 	bl	5340 <malloc>
    438c:	9b04      	ldr	r3, [sp, #16]
    438e:	6258      	str	r0, [r3, #36]	; 0x24
    4390:	6044      	str	r4, [r0, #4]
    4392:	6084      	str	r4, [r0, #8]
    4394:	6004      	str	r4, [r0, #0]
    4396:	60c4      	str	r4, [r0, #12]
    4398:	9b04      	ldr	r3, [sp, #16]
    439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    439c:	6819      	ldr	r1, [r3, #0]
    439e:	2900      	cmp	r1, #0
    43a0:	d00b      	beq.n	43ba <_dtoa_r+0x4a>
    43a2:	685a      	ldr	r2, [r3, #4]
    43a4:	2301      	movs	r3, #1
    43a6:	4093      	lsls	r3, r2
    43a8:	604a      	str	r2, [r1, #4]
    43aa:	608b      	str	r3, [r1, #8]
    43ac:	9804      	ldr	r0, [sp, #16]
    43ae:	f001 f814 	bl	53da <_Bfree>
    43b2:	2200      	movs	r2, #0
    43b4:	9b04      	ldr	r3, [sp, #16]
    43b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43b8:	601a      	str	r2, [r3, #0]
    43ba:	9b07      	ldr	r3, [sp, #28]
    43bc:	2b00      	cmp	r3, #0
    43be:	da1f      	bge.n	4400 <_dtoa_r+0x90>
    43c0:	2301      	movs	r3, #1
    43c2:	602b      	str	r3, [r5, #0]
    43c4:	007b      	lsls	r3, r7, #1
    43c6:	085b      	lsrs	r3, r3, #1
    43c8:	9307      	str	r3, [sp, #28]
    43ca:	9c07      	ldr	r4, [sp, #28]
    43cc:	4bb7      	ldr	r3, [pc, #732]	; (46ac <_dtoa_r+0x33c>)
    43ce:	0022      	movs	r2, r4
    43d0:	9319      	str	r3, [sp, #100]	; 0x64
    43d2:	401a      	ands	r2, r3
    43d4:	429a      	cmp	r2, r3
    43d6:	d116      	bne.n	4406 <_dtoa_r+0x96>
    43d8:	4bb5      	ldr	r3, [pc, #724]	; (46b0 <_dtoa_r+0x340>)
    43da:	9a24      	ldr	r2, [sp, #144]	; 0x90
    43dc:	6013      	str	r3, [r2, #0]
    43de:	9b06      	ldr	r3, [sp, #24]
    43e0:	2b00      	cmp	r3, #0
    43e2:	d103      	bne.n	43ec <_dtoa_r+0x7c>
    43e4:	0324      	lsls	r4, r4, #12
    43e6:	d101      	bne.n	43ec <_dtoa_r+0x7c>
    43e8:	f000 fd91 	bl	4f0e <_dtoa_r+0xb9e>
    43ec:	4bb1      	ldr	r3, [pc, #708]	; (46b4 <_dtoa_r+0x344>)
    43ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
    43f0:	930a      	str	r3, [sp, #40]	; 0x28
    43f2:	4bb1      	ldr	r3, [pc, #708]	; (46b8 <_dtoa_r+0x348>)
    43f4:	2a00      	cmp	r2, #0
    43f6:	d001      	beq.n	43fc <_dtoa_r+0x8c>
    43f8:	f000 fd8f 	bl	4f1a <_dtoa_r+0xbaa>
    43fc:	f000 fd8f 	bl	4f1e <_dtoa_r+0xbae>
    4400:	2300      	movs	r3, #0
    4402:	602b      	str	r3, [r5, #0]
    4404:	e7e1      	b.n	43ca <_dtoa_r+0x5a>
    4406:	9e06      	ldr	r6, [sp, #24]
    4408:	9f07      	ldr	r7, [sp, #28]
    440a:	2200      	movs	r2, #0
    440c:	2300      	movs	r3, #0
    440e:	0030      	movs	r0, r6
    4410:	0039      	movs	r1, r7
    4412:	f001 ff07 	bl	6224 <__aeabi_dcmpeq>
    4416:	1e05      	subs	r5, r0, #0
    4418:	d00e      	beq.n	4438 <_dtoa_r+0xc8>
    441a:	2301      	movs	r3, #1
    441c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    441e:	6013      	str	r3, [r2, #0]
    4420:	4ba6      	ldr	r3, [pc, #664]	; (46bc <_dtoa_r+0x34c>)
    4422:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4424:	930a      	str	r3, [sp, #40]	; 0x28
    4426:	2a00      	cmp	r2, #0
    4428:	d101      	bne.n	442e <_dtoa_r+0xbe>
    442a:	f000 fd78 	bl	4f1e <_dtoa_r+0xbae>
    442e:	4aa4      	ldr	r2, [pc, #656]	; (46c0 <_dtoa_r+0x350>)
    4430:	9926      	ldr	r1, [sp, #152]	; 0x98
    4432:	600a      	str	r2, [r1, #0]
    4434:	f000 fd73 	bl	4f1e <_dtoa_r+0xbae>
    4438:	ab1a      	add	r3, sp, #104	; 0x68
    443a:	9301      	str	r3, [sp, #4]
    443c:	ab1b      	add	r3, sp, #108	; 0x6c
    443e:	9300      	str	r3, [sp, #0]
    4440:	0032      	movs	r2, r6
    4442:	003b      	movs	r3, r7
    4444:	9804      	ldr	r0, [sp, #16]
    4446:	f001 fa1f 	bl	5888 <__d2b>
    444a:	0063      	lsls	r3, r4, #1
    444c:	9005      	str	r0, [sp, #20]
    444e:	0d5b      	lsrs	r3, r3, #21
    4450:	d100      	bne.n	4454 <_dtoa_r+0xe4>
    4452:	e07f      	b.n	4554 <_dtoa_r+0x1e4>
    4454:	033a      	lsls	r2, r7, #12
    4456:	4c9b      	ldr	r4, [pc, #620]	; (46c4 <_dtoa_r+0x354>)
    4458:	0b12      	lsrs	r2, r2, #12
    445a:	4314      	orrs	r4, r2
    445c:	0021      	movs	r1, r4
    445e:	4a9a      	ldr	r2, [pc, #616]	; (46c8 <_dtoa_r+0x358>)
    4460:	0030      	movs	r0, r6
    4462:	9518      	str	r5, [sp, #96]	; 0x60
    4464:	189e      	adds	r6, r3, r2
    4466:	2200      	movs	r2, #0
    4468:	4b98      	ldr	r3, [pc, #608]	; (46cc <_dtoa_r+0x35c>)
    446a:	f003 fe23 	bl	80b4 <__aeabi_dsub>
    446e:	4a98      	ldr	r2, [pc, #608]	; (46d0 <_dtoa_r+0x360>)
    4470:	4b98      	ldr	r3, [pc, #608]	; (46d4 <_dtoa_r+0x364>)
    4472:	f003 fb9f 	bl	7bb4 <__aeabi_dmul>
    4476:	4a98      	ldr	r2, [pc, #608]	; (46d8 <_dtoa_r+0x368>)
    4478:	4b98      	ldr	r3, [pc, #608]	; (46dc <_dtoa_r+0x36c>)
    447a:	f002 fc57 	bl	6d2c <__aeabi_dadd>
    447e:	0004      	movs	r4, r0
    4480:	0030      	movs	r0, r6
    4482:	000d      	movs	r5, r1
    4484:	f004 f980 	bl	8788 <__aeabi_i2d>
    4488:	4a95      	ldr	r2, [pc, #596]	; (46e0 <_dtoa_r+0x370>)
    448a:	4b96      	ldr	r3, [pc, #600]	; (46e4 <_dtoa_r+0x374>)
    448c:	f003 fb92 	bl	7bb4 <__aeabi_dmul>
    4490:	0002      	movs	r2, r0
    4492:	000b      	movs	r3, r1
    4494:	0020      	movs	r0, r4
    4496:	0029      	movs	r1, r5
    4498:	f002 fc48 	bl	6d2c <__aeabi_dadd>
    449c:	0004      	movs	r4, r0
    449e:	000d      	movs	r5, r1
    44a0:	f004 f93e 	bl	8720 <__aeabi_d2iz>
    44a4:	2200      	movs	r2, #0
    44a6:	9003      	str	r0, [sp, #12]
    44a8:	2300      	movs	r3, #0
    44aa:	0020      	movs	r0, r4
    44ac:	0029      	movs	r1, r5
    44ae:	f001 febf 	bl	6230 <__aeabi_dcmplt>
    44b2:	2800      	cmp	r0, #0
    44b4:	d00e      	beq.n	44d4 <_dtoa_r+0x164>
    44b6:	9803      	ldr	r0, [sp, #12]
    44b8:	f004 f966 	bl	8788 <__aeabi_i2d>
    44bc:	000b      	movs	r3, r1
    44be:	0002      	movs	r2, r0
    44c0:	0029      	movs	r1, r5
    44c2:	0020      	movs	r0, r4
    44c4:	f001 feae 	bl	6224 <__aeabi_dcmpeq>
    44c8:	0003      	movs	r3, r0
    44ca:	4258      	negs	r0, r3
    44cc:	4158      	adcs	r0, r3
    44ce:	9b03      	ldr	r3, [sp, #12]
    44d0:	1a1b      	subs	r3, r3, r0
    44d2:	9303      	str	r3, [sp, #12]
    44d4:	2301      	movs	r3, #1
    44d6:	9316      	str	r3, [sp, #88]	; 0x58
    44d8:	9b03      	ldr	r3, [sp, #12]
    44da:	2b16      	cmp	r3, #22
    44dc:	d80f      	bhi.n	44fe <_dtoa_r+0x18e>
    44de:	4982      	ldr	r1, [pc, #520]	; (46e8 <_dtoa_r+0x378>)
    44e0:	00db      	lsls	r3, r3, #3
    44e2:	18c9      	adds	r1, r1, r3
    44e4:	6808      	ldr	r0, [r1, #0]
    44e6:	6849      	ldr	r1, [r1, #4]
    44e8:	9a06      	ldr	r2, [sp, #24]
    44ea:	9b07      	ldr	r3, [sp, #28]
    44ec:	f001 feb4 	bl	6258 <__aeabi_dcmpgt>
    44f0:	2800      	cmp	r0, #0
    44f2:	d04b      	beq.n	458c <_dtoa_r+0x21c>
    44f4:	9b03      	ldr	r3, [sp, #12]
    44f6:	3b01      	subs	r3, #1
    44f8:	9303      	str	r3, [sp, #12]
    44fa:	2300      	movs	r3, #0
    44fc:	9316      	str	r3, [sp, #88]	; 0x58
    44fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4500:	1b9e      	subs	r6, r3, r6
    4502:	2300      	movs	r3, #0
    4504:	930b      	str	r3, [sp, #44]	; 0x2c
    4506:	0033      	movs	r3, r6
    4508:	3b01      	subs	r3, #1
    450a:	930c      	str	r3, [sp, #48]	; 0x30
    450c:	d504      	bpl.n	4518 <_dtoa_r+0x1a8>
    450e:	2301      	movs	r3, #1
    4510:	1b9b      	subs	r3, r3, r6
    4512:	930b      	str	r3, [sp, #44]	; 0x2c
    4514:	2300      	movs	r3, #0
    4516:	930c      	str	r3, [sp, #48]	; 0x30
    4518:	9b03      	ldr	r3, [sp, #12]
    451a:	2b00      	cmp	r3, #0
    451c:	db38      	blt.n	4590 <_dtoa_r+0x220>
    451e:	9a03      	ldr	r2, [sp, #12]
    4520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4522:	4694      	mov	ip, r2
    4524:	4463      	add	r3, ip
    4526:	930c      	str	r3, [sp, #48]	; 0x30
    4528:	2300      	movs	r3, #0
    452a:	920f      	str	r2, [sp, #60]	; 0x3c
    452c:	9308      	str	r3, [sp, #32]
    452e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4530:	2501      	movs	r5, #1
    4532:	2b09      	cmp	r3, #9
    4534:	d900      	bls.n	4538 <_dtoa_r+0x1c8>
    4536:	e091      	b.n	465c <_dtoa_r+0x2ec>
    4538:	2b05      	cmp	r3, #5
    453a:	dd02      	ble.n	4542 <_dtoa_r+0x1d2>
    453c:	2500      	movs	r5, #0
    453e:	3b04      	subs	r3, #4
    4540:	9322      	str	r3, [sp, #136]	; 0x88
    4542:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4544:	1e98      	subs	r0, r3, #2
    4546:	2803      	cmp	r0, #3
    4548:	d900      	bls.n	454c <_dtoa_r+0x1dc>
    454a:	e091      	b.n	4670 <_dtoa_r+0x300>
    454c:	f001 fcda 	bl	5f04 <__gnu_thumb1_case_uqi>
    4550:	76298482 	.word	0x76298482
    4554:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4556:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    4558:	189e      	adds	r6, r3, r2
    455a:	4b64      	ldr	r3, [pc, #400]	; (46ec <_dtoa_r+0x37c>)
    455c:	18f2      	adds	r2, r6, r3
    455e:	2a20      	cmp	r2, #32
    4560:	dd0f      	ble.n	4582 <_dtoa_r+0x212>
    4562:	4b63      	ldr	r3, [pc, #396]	; (46f0 <_dtoa_r+0x380>)
    4564:	9806      	ldr	r0, [sp, #24]
    4566:	18f3      	adds	r3, r6, r3
    4568:	40d8      	lsrs	r0, r3
    456a:	2340      	movs	r3, #64	; 0x40
    456c:	1a9b      	subs	r3, r3, r2
    456e:	409c      	lsls	r4, r3
    4570:	4320      	orrs	r0, r4
    4572:	f004 f94b 	bl	880c <__aeabi_ui2d>
    4576:	2301      	movs	r3, #1
    4578:	4c5e      	ldr	r4, [pc, #376]	; (46f4 <_dtoa_r+0x384>)
    457a:	3e01      	subs	r6, #1
    457c:	1909      	adds	r1, r1, r4
    457e:	9318      	str	r3, [sp, #96]	; 0x60
    4580:	e771      	b.n	4466 <_dtoa_r+0xf6>
    4582:	2320      	movs	r3, #32
    4584:	9806      	ldr	r0, [sp, #24]
    4586:	1a9b      	subs	r3, r3, r2
    4588:	4098      	lsls	r0, r3
    458a:	e7f2      	b.n	4572 <_dtoa_r+0x202>
    458c:	9016      	str	r0, [sp, #88]	; 0x58
    458e:	e7b6      	b.n	44fe <_dtoa_r+0x18e>
    4590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4592:	9a03      	ldr	r2, [sp, #12]
    4594:	1a9b      	subs	r3, r3, r2
    4596:	930b      	str	r3, [sp, #44]	; 0x2c
    4598:	4253      	negs	r3, r2
    459a:	9308      	str	r3, [sp, #32]
    459c:	2300      	movs	r3, #0
    459e:	930f      	str	r3, [sp, #60]	; 0x3c
    45a0:	e7c5      	b.n	452e <_dtoa_r+0x1be>
    45a2:	2301      	movs	r3, #1
    45a4:	930e      	str	r3, [sp, #56]	; 0x38
    45a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    45a8:	2b00      	cmp	r3, #0
    45aa:	dd65      	ble.n	4678 <_dtoa_r+0x308>
    45ac:	001f      	movs	r7, r3
    45ae:	930d      	str	r3, [sp, #52]	; 0x34
    45b0:	9a04      	ldr	r2, [sp, #16]
    45b2:	6a54      	ldr	r4, [r2, #36]	; 0x24
    45b4:	2200      	movs	r2, #0
    45b6:	6062      	str	r2, [r4, #4]
    45b8:	3204      	adds	r2, #4
    45ba:	0011      	movs	r1, r2
    45bc:	3114      	adds	r1, #20
    45be:	4299      	cmp	r1, r3
    45c0:	d95f      	bls.n	4682 <_dtoa_r+0x312>
    45c2:	6861      	ldr	r1, [r4, #4]
    45c4:	9804      	ldr	r0, [sp, #16]
    45c6:	f000 fed0 	bl	536a <_Balloc>
    45ca:	9b04      	ldr	r3, [sp, #16]
    45cc:	6020      	str	r0, [r4, #0]
    45ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45d0:	681b      	ldr	r3, [r3, #0]
    45d2:	930a      	str	r3, [sp, #40]	; 0x28
    45d4:	2f0e      	cmp	r7, #14
    45d6:	d900      	bls.n	45da <_dtoa_r+0x26a>
    45d8:	e105      	b.n	47e6 <_dtoa_r+0x476>
    45da:	2d00      	cmp	r5, #0
    45dc:	d100      	bne.n	45e0 <_dtoa_r+0x270>
    45de:	e102      	b.n	47e6 <_dtoa_r+0x476>
    45e0:	9b06      	ldr	r3, [sp, #24]
    45e2:	9c07      	ldr	r4, [sp, #28]
    45e4:	9314      	str	r3, [sp, #80]	; 0x50
    45e6:	9415      	str	r4, [sp, #84]	; 0x54
    45e8:	9b03      	ldr	r3, [sp, #12]
    45ea:	2b00      	cmp	r3, #0
    45ec:	dc00      	bgt.n	45f0 <_dtoa_r+0x280>
    45ee:	e085      	b.n	46fc <_dtoa_r+0x38c>
    45f0:	001a      	movs	r2, r3
    45f2:	210f      	movs	r1, #15
    45f4:	4b3c      	ldr	r3, [pc, #240]	; (46e8 <_dtoa_r+0x378>)
    45f6:	400a      	ands	r2, r1
    45f8:	00d2      	lsls	r2, r2, #3
    45fa:	189b      	adds	r3, r3, r2
    45fc:	685c      	ldr	r4, [r3, #4]
    45fe:	681b      	ldr	r3, [r3, #0]
    4600:	9310      	str	r3, [sp, #64]	; 0x40
    4602:	9411      	str	r4, [sp, #68]	; 0x44
    4604:	9b03      	ldr	r3, [sp, #12]
    4606:	2402      	movs	r4, #2
    4608:	111d      	asrs	r5, r3, #4
    460a:	06eb      	lsls	r3, r5, #27
    460c:	d50a      	bpl.n	4624 <_dtoa_r+0x2b4>
    460e:	4b3a      	ldr	r3, [pc, #232]	; (46f8 <_dtoa_r+0x388>)
    4610:	400d      	ands	r5, r1
    4612:	6a1a      	ldr	r2, [r3, #32]
    4614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4616:	9814      	ldr	r0, [sp, #80]	; 0x50
    4618:	9915      	ldr	r1, [sp, #84]	; 0x54
    461a:	f002 fe97 	bl	734c <__aeabi_ddiv>
    461e:	9006      	str	r0, [sp, #24]
    4620:	9107      	str	r1, [sp, #28]
    4622:	3401      	adds	r4, #1
    4624:	4e34      	ldr	r6, [pc, #208]	; (46f8 <_dtoa_r+0x388>)
    4626:	2d00      	cmp	r5, #0
    4628:	d130      	bne.n	468c <_dtoa_r+0x31c>
    462a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    462c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    462e:	9806      	ldr	r0, [sp, #24]
    4630:	9907      	ldr	r1, [sp, #28]
    4632:	f002 fe8b 	bl	734c <__aeabi_ddiv>
    4636:	9006      	str	r0, [sp, #24]
    4638:	9107      	str	r1, [sp, #28]
    463a:	e07a      	b.n	4732 <_dtoa_r+0x3c2>
    463c:	2301      	movs	r3, #1
    463e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    4640:	930e      	str	r3, [sp, #56]	; 0x38
    4642:	4694      	mov	ip, r2
    4644:	9b03      	ldr	r3, [sp, #12]
    4646:	4463      	add	r3, ip
    4648:	1c5f      	adds	r7, r3, #1
    464a:	930d      	str	r3, [sp, #52]	; 0x34
    464c:	1e3b      	subs	r3, r7, #0
    464e:	dcaf      	bgt.n	45b0 <_dtoa_r+0x240>
    4650:	2301      	movs	r3, #1
    4652:	e7ad      	b.n	45b0 <_dtoa_r+0x240>
    4654:	2300      	movs	r3, #0
    4656:	e7a5      	b.n	45a4 <_dtoa_r+0x234>
    4658:	2300      	movs	r3, #0
    465a:	e7f0      	b.n	463e <_dtoa_r+0x2ce>
    465c:	2300      	movs	r3, #0
    465e:	950e      	str	r5, [sp, #56]	; 0x38
    4660:	9322      	str	r3, [sp, #136]	; 0x88
    4662:	3b01      	subs	r3, #1
    4664:	2200      	movs	r2, #0
    4666:	930d      	str	r3, [sp, #52]	; 0x34
    4668:	001f      	movs	r7, r3
    466a:	3313      	adds	r3, #19
    466c:	9223      	str	r2, [sp, #140]	; 0x8c
    466e:	e79f      	b.n	45b0 <_dtoa_r+0x240>
    4670:	2301      	movs	r3, #1
    4672:	930e      	str	r3, [sp, #56]	; 0x38
    4674:	3b02      	subs	r3, #2
    4676:	e7f5      	b.n	4664 <_dtoa_r+0x2f4>
    4678:	2301      	movs	r3, #1
    467a:	930d      	str	r3, [sp, #52]	; 0x34
    467c:	001f      	movs	r7, r3
    467e:	001a      	movs	r2, r3
    4680:	e7f4      	b.n	466c <_dtoa_r+0x2fc>
    4682:	6861      	ldr	r1, [r4, #4]
    4684:	0052      	lsls	r2, r2, #1
    4686:	3101      	adds	r1, #1
    4688:	6061      	str	r1, [r4, #4]
    468a:	e796      	b.n	45ba <_dtoa_r+0x24a>
    468c:	2301      	movs	r3, #1
    468e:	421d      	tst	r5, r3
    4690:	d008      	beq.n	46a4 <_dtoa_r+0x334>
    4692:	9810      	ldr	r0, [sp, #64]	; 0x40
    4694:	9911      	ldr	r1, [sp, #68]	; 0x44
    4696:	18e4      	adds	r4, r4, r3
    4698:	6832      	ldr	r2, [r6, #0]
    469a:	6873      	ldr	r3, [r6, #4]
    469c:	f003 fa8a 	bl	7bb4 <__aeabi_dmul>
    46a0:	9010      	str	r0, [sp, #64]	; 0x40
    46a2:	9111      	str	r1, [sp, #68]	; 0x44
    46a4:	106d      	asrs	r5, r5, #1
    46a6:	3608      	adds	r6, #8
    46a8:	e7bd      	b.n	4626 <_dtoa_r+0x2b6>
    46aa:	46c0      	nop			; (mov r8, r8)
    46ac:	7ff00000 	.word	0x7ff00000
    46b0:	0000270f 	.word	0x0000270f
    46b4:	00008bf5 	.word	0x00008bf5
    46b8:	00008bf8 	.word	0x00008bf8
    46bc:	00008bc8 	.word	0x00008bc8
    46c0:	00008bc9 	.word	0x00008bc9
    46c4:	3ff00000 	.word	0x3ff00000
    46c8:	fffffc01 	.word	0xfffffc01
    46cc:	3ff80000 	.word	0x3ff80000
    46d0:	636f4361 	.word	0x636f4361
    46d4:	3fd287a7 	.word	0x3fd287a7
    46d8:	8b60c8b3 	.word	0x8b60c8b3
    46dc:	3fc68a28 	.word	0x3fc68a28
    46e0:	509f79fb 	.word	0x509f79fb
    46e4:	3fd34413 	.word	0x3fd34413
    46e8:	00008c88 	.word	0x00008c88
    46ec:	00000432 	.word	0x00000432
    46f0:	00000412 	.word	0x00000412
    46f4:	fe100000 	.word	0xfe100000
    46f8:	00008c60 	.word	0x00008c60
    46fc:	9b03      	ldr	r3, [sp, #12]
    46fe:	2402      	movs	r4, #2
    4700:	2b00      	cmp	r3, #0
    4702:	d016      	beq.n	4732 <_dtoa_r+0x3c2>
    4704:	9814      	ldr	r0, [sp, #80]	; 0x50
    4706:	9915      	ldr	r1, [sp, #84]	; 0x54
    4708:	425d      	negs	r5, r3
    470a:	230f      	movs	r3, #15
    470c:	4aca      	ldr	r2, [pc, #808]	; (4a38 <_dtoa_r+0x6c8>)
    470e:	402b      	ands	r3, r5
    4710:	00db      	lsls	r3, r3, #3
    4712:	18d3      	adds	r3, r2, r3
    4714:	681a      	ldr	r2, [r3, #0]
    4716:	685b      	ldr	r3, [r3, #4]
    4718:	f003 fa4c 	bl	7bb4 <__aeabi_dmul>
    471c:	2300      	movs	r3, #0
    471e:	9006      	str	r0, [sp, #24]
    4720:	9107      	str	r1, [sp, #28]
    4722:	4ec6      	ldr	r6, [pc, #792]	; (4a3c <_dtoa_r+0x6cc>)
    4724:	112d      	asrs	r5, r5, #4
    4726:	2d00      	cmp	r5, #0
    4728:	d000      	beq.n	472c <_dtoa_r+0x3bc>
    472a:	e08c      	b.n	4846 <_dtoa_r+0x4d6>
    472c:	2b00      	cmp	r3, #0
    472e:	d000      	beq.n	4732 <_dtoa_r+0x3c2>
    4730:	e781      	b.n	4636 <_dtoa_r+0x2c6>
    4732:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4734:	2b00      	cmp	r3, #0
    4736:	d100      	bne.n	473a <_dtoa_r+0x3ca>
    4738:	e091      	b.n	485e <_dtoa_r+0x4ee>
    473a:	9a06      	ldr	r2, [sp, #24]
    473c:	9b07      	ldr	r3, [sp, #28]
    473e:	9210      	str	r2, [sp, #64]	; 0x40
    4740:	9311      	str	r3, [sp, #68]	; 0x44
    4742:	9810      	ldr	r0, [sp, #64]	; 0x40
    4744:	9911      	ldr	r1, [sp, #68]	; 0x44
    4746:	2200      	movs	r2, #0
    4748:	4bbd      	ldr	r3, [pc, #756]	; (4a40 <_dtoa_r+0x6d0>)
    474a:	f001 fd71 	bl	6230 <__aeabi_dcmplt>
    474e:	2800      	cmp	r0, #0
    4750:	d100      	bne.n	4754 <_dtoa_r+0x3e4>
    4752:	e084      	b.n	485e <_dtoa_r+0x4ee>
    4754:	2f00      	cmp	r7, #0
    4756:	d100      	bne.n	475a <_dtoa_r+0x3ea>
    4758:	e081      	b.n	485e <_dtoa_r+0x4ee>
    475a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    475c:	2b00      	cmp	r3, #0
    475e:	dd3e      	ble.n	47de <_dtoa_r+0x46e>
    4760:	9810      	ldr	r0, [sp, #64]	; 0x40
    4762:	9911      	ldr	r1, [sp, #68]	; 0x44
    4764:	9b03      	ldr	r3, [sp, #12]
    4766:	2200      	movs	r2, #0
    4768:	1e5e      	subs	r6, r3, #1
    476a:	4bb6      	ldr	r3, [pc, #728]	; (4a44 <_dtoa_r+0x6d4>)
    476c:	f003 fa22 	bl	7bb4 <__aeabi_dmul>
    4770:	9006      	str	r0, [sp, #24]
    4772:	9107      	str	r1, [sp, #28]
    4774:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4776:	3401      	adds	r4, #1
    4778:	0020      	movs	r0, r4
    477a:	f004 f805 	bl	8788 <__aeabi_i2d>
    477e:	9a06      	ldr	r2, [sp, #24]
    4780:	9b07      	ldr	r3, [sp, #28]
    4782:	f003 fa17 	bl	7bb4 <__aeabi_dmul>
    4786:	2200      	movs	r2, #0
    4788:	4baf      	ldr	r3, [pc, #700]	; (4a48 <_dtoa_r+0x6d8>)
    478a:	f002 facf 	bl	6d2c <__aeabi_dadd>
    478e:	9012      	str	r0, [sp, #72]	; 0x48
    4790:	9113      	str	r1, [sp, #76]	; 0x4c
    4792:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4794:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    4796:	4aad      	ldr	r2, [pc, #692]	; (4a4c <_dtoa_r+0x6dc>)
    4798:	9310      	str	r3, [sp, #64]	; 0x40
    479a:	9411      	str	r4, [sp, #68]	; 0x44
    479c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    479e:	189c      	adds	r4, r3, r2
    47a0:	9411      	str	r4, [sp, #68]	; 0x44
    47a2:	2d00      	cmp	r5, #0
    47a4:	d15e      	bne.n	4864 <_dtoa_r+0x4f4>
    47a6:	9806      	ldr	r0, [sp, #24]
    47a8:	9907      	ldr	r1, [sp, #28]
    47aa:	2200      	movs	r2, #0
    47ac:	4ba8      	ldr	r3, [pc, #672]	; (4a50 <_dtoa_r+0x6e0>)
    47ae:	f003 fc81 	bl	80b4 <__aeabi_dsub>
    47b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47b4:	0023      	movs	r3, r4
    47b6:	9006      	str	r0, [sp, #24]
    47b8:	9107      	str	r1, [sp, #28]
    47ba:	f001 fd4d 	bl	6258 <__aeabi_dcmpgt>
    47be:	2800      	cmp	r0, #0
    47c0:	d000      	beq.n	47c4 <_dtoa_r+0x454>
    47c2:	e301      	b.n	4dc8 <_dtoa_r+0xa58>
    47c4:	48a3      	ldr	r0, [pc, #652]	; (4a54 <_dtoa_r+0x6e4>)
    47c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    47c8:	4684      	mov	ip, r0
    47ca:	4461      	add	r1, ip
    47cc:	000b      	movs	r3, r1
    47ce:	9806      	ldr	r0, [sp, #24]
    47d0:	9907      	ldr	r1, [sp, #28]
    47d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    47d4:	f001 fd2c 	bl	6230 <__aeabi_dcmplt>
    47d8:	2800      	cmp	r0, #0
    47da:	d000      	beq.n	47de <_dtoa_r+0x46e>
    47dc:	e2e8      	b.n	4db0 <_dtoa_r+0xa40>
    47de:	9b14      	ldr	r3, [sp, #80]	; 0x50
    47e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
    47e2:	9306      	str	r3, [sp, #24]
    47e4:	9407      	str	r4, [sp, #28]
    47e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    47e8:	2b00      	cmp	r3, #0
    47ea:	da00      	bge.n	47ee <_dtoa_r+0x47e>
    47ec:	e157      	b.n	4a9e <_dtoa_r+0x72e>
    47ee:	9a03      	ldr	r2, [sp, #12]
    47f0:	2a0e      	cmp	r2, #14
    47f2:	dd00      	ble.n	47f6 <_dtoa_r+0x486>
    47f4:	e153      	b.n	4a9e <_dtoa_r+0x72e>
    47f6:	4b90      	ldr	r3, [pc, #576]	; (4a38 <_dtoa_r+0x6c8>)
    47f8:	00d2      	lsls	r2, r2, #3
    47fa:	189b      	adds	r3, r3, r2
    47fc:	685c      	ldr	r4, [r3, #4]
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	9308      	str	r3, [sp, #32]
    4802:	9409      	str	r4, [sp, #36]	; 0x24
    4804:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4806:	2b00      	cmp	r3, #0
    4808:	db00      	blt.n	480c <_dtoa_r+0x49c>
    480a:	e0ce      	b.n	49aa <_dtoa_r+0x63a>
    480c:	2f00      	cmp	r7, #0
    480e:	dd00      	ble.n	4812 <_dtoa_r+0x4a2>
    4810:	e0cb      	b.n	49aa <_dtoa_r+0x63a>
    4812:	d000      	beq.n	4816 <_dtoa_r+0x4a6>
    4814:	e2cf      	b.n	4db6 <_dtoa_r+0xa46>
    4816:	9808      	ldr	r0, [sp, #32]
    4818:	9909      	ldr	r1, [sp, #36]	; 0x24
    481a:	2200      	movs	r2, #0
    481c:	4b8c      	ldr	r3, [pc, #560]	; (4a50 <_dtoa_r+0x6e0>)
    481e:	f003 f9c9 	bl	7bb4 <__aeabi_dmul>
    4822:	9a06      	ldr	r2, [sp, #24]
    4824:	9b07      	ldr	r3, [sp, #28]
    4826:	f001 fd21 	bl	626c <__aeabi_dcmpge>
    482a:	003e      	movs	r6, r7
    482c:	9708      	str	r7, [sp, #32]
    482e:	2800      	cmp	r0, #0
    4830:	d000      	beq.n	4834 <_dtoa_r+0x4c4>
    4832:	e2a4      	b.n	4d7e <_dtoa_r+0xa0e>
    4834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4838:	1c5d      	adds	r5, r3, #1
    483a:	2331      	movs	r3, #49	; 0x31
    483c:	7013      	strb	r3, [r2, #0]
    483e:	9b03      	ldr	r3, [sp, #12]
    4840:	3301      	adds	r3, #1
    4842:	9303      	str	r3, [sp, #12]
    4844:	e29f      	b.n	4d86 <_dtoa_r+0xa16>
    4846:	2201      	movs	r2, #1
    4848:	4215      	tst	r5, r2
    484a:	d005      	beq.n	4858 <_dtoa_r+0x4e8>
    484c:	18a4      	adds	r4, r4, r2
    484e:	6832      	ldr	r2, [r6, #0]
    4850:	6873      	ldr	r3, [r6, #4]
    4852:	f003 f9af 	bl	7bb4 <__aeabi_dmul>
    4856:	2301      	movs	r3, #1
    4858:	106d      	asrs	r5, r5, #1
    485a:	3608      	adds	r6, #8
    485c:	e763      	b.n	4726 <_dtoa_r+0x3b6>
    485e:	9e03      	ldr	r6, [sp, #12]
    4860:	003d      	movs	r5, r7
    4862:	e789      	b.n	4778 <_dtoa_r+0x408>
    4864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4866:	1e69      	subs	r1, r5, #1
    4868:	1952      	adds	r2, r2, r5
    486a:	9217      	str	r2, [sp, #92]	; 0x5c
    486c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    486e:	4b72      	ldr	r3, [pc, #456]	; (4a38 <_dtoa_r+0x6c8>)
    4870:	00c9      	lsls	r1, r1, #3
    4872:	2a00      	cmp	r2, #0
    4874:	d04a      	beq.n	490c <_dtoa_r+0x59c>
    4876:	185b      	adds	r3, r3, r1
    4878:	681a      	ldr	r2, [r3, #0]
    487a:	685b      	ldr	r3, [r3, #4]
    487c:	2000      	movs	r0, #0
    487e:	4976      	ldr	r1, [pc, #472]	; (4a58 <_dtoa_r+0x6e8>)
    4880:	f002 fd64 	bl	734c <__aeabi_ddiv>
    4884:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4886:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4888:	f003 fc14 	bl	80b4 <__aeabi_dsub>
    488c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    488e:	9010      	str	r0, [sp, #64]	; 0x40
    4890:	9111      	str	r1, [sp, #68]	; 0x44
    4892:	9312      	str	r3, [sp, #72]	; 0x48
    4894:	9806      	ldr	r0, [sp, #24]
    4896:	9907      	ldr	r1, [sp, #28]
    4898:	f003 ff42 	bl	8720 <__aeabi_d2iz>
    489c:	0004      	movs	r4, r0
    489e:	f003 ff73 	bl	8788 <__aeabi_i2d>
    48a2:	0002      	movs	r2, r0
    48a4:	000b      	movs	r3, r1
    48a6:	9806      	ldr	r0, [sp, #24]
    48a8:	9907      	ldr	r1, [sp, #28]
    48aa:	f003 fc03 	bl	80b4 <__aeabi_dsub>
    48ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    48b0:	3430      	adds	r4, #48	; 0x30
    48b2:	1c5d      	adds	r5, r3, #1
    48b4:	701c      	strb	r4, [r3, #0]
    48b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    48b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    48ba:	9006      	str	r0, [sp, #24]
    48bc:	9107      	str	r1, [sp, #28]
    48be:	f001 fcb7 	bl	6230 <__aeabi_dcmplt>
    48c2:	2800      	cmp	r0, #0
    48c4:	d165      	bne.n	4992 <_dtoa_r+0x622>
    48c6:	9a06      	ldr	r2, [sp, #24]
    48c8:	9b07      	ldr	r3, [sp, #28]
    48ca:	2000      	movs	r0, #0
    48cc:	495c      	ldr	r1, [pc, #368]	; (4a40 <_dtoa_r+0x6d0>)
    48ce:	f003 fbf1 	bl	80b4 <__aeabi_dsub>
    48d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    48d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    48d6:	f001 fcab 	bl	6230 <__aeabi_dcmplt>
    48da:	2800      	cmp	r0, #0
    48dc:	d000      	beq.n	48e0 <_dtoa_r+0x570>
    48de:	e0be      	b.n	4a5e <_dtoa_r+0x6ee>
    48e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    48e2:	429d      	cmp	r5, r3
    48e4:	d100      	bne.n	48e8 <_dtoa_r+0x578>
    48e6:	e77a      	b.n	47de <_dtoa_r+0x46e>
    48e8:	9810      	ldr	r0, [sp, #64]	; 0x40
    48ea:	9911      	ldr	r1, [sp, #68]	; 0x44
    48ec:	2200      	movs	r2, #0
    48ee:	4b55      	ldr	r3, [pc, #340]	; (4a44 <_dtoa_r+0x6d4>)
    48f0:	f003 f960 	bl	7bb4 <__aeabi_dmul>
    48f4:	2200      	movs	r2, #0
    48f6:	9010      	str	r0, [sp, #64]	; 0x40
    48f8:	9111      	str	r1, [sp, #68]	; 0x44
    48fa:	9806      	ldr	r0, [sp, #24]
    48fc:	9907      	ldr	r1, [sp, #28]
    48fe:	4b51      	ldr	r3, [pc, #324]	; (4a44 <_dtoa_r+0x6d4>)
    4900:	f003 f958 	bl	7bb4 <__aeabi_dmul>
    4904:	9512      	str	r5, [sp, #72]	; 0x48
    4906:	9006      	str	r0, [sp, #24]
    4908:	9107      	str	r1, [sp, #28]
    490a:	e7c3      	b.n	4894 <_dtoa_r+0x524>
    490c:	1859      	adds	r1, r3, r1
    490e:	6808      	ldr	r0, [r1, #0]
    4910:	6849      	ldr	r1, [r1, #4]
    4912:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4914:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4916:	f003 f94d 	bl	7bb4 <__aeabi_dmul>
    491a:	9010      	str	r0, [sp, #64]	; 0x40
    491c:	9111      	str	r1, [sp, #68]	; 0x44
    491e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4920:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    4922:	9806      	ldr	r0, [sp, #24]
    4924:	9907      	ldr	r1, [sp, #28]
    4926:	f003 fefb 	bl	8720 <__aeabi_d2iz>
    492a:	9012      	str	r0, [sp, #72]	; 0x48
    492c:	f003 ff2c 	bl	8788 <__aeabi_i2d>
    4930:	0002      	movs	r2, r0
    4932:	000b      	movs	r3, r1
    4934:	9806      	ldr	r0, [sp, #24]
    4936:	9907      	ldr	r1, [sp, #28]
    4938:	f003 fbbc 	bl	80b4 <__aeabi_dsub>
    493c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    493e:	9006      	str	r0, [sp, #24]
    4940:	9107      	str	r1, [sp, #28]
    4942:	3330      	adds	r3, #48	; 0x30
    4944:	7023      	strb	r3, [r4, #0]
    4946:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4948:	3401      	adds	r4, #1
    494a:	2200      	movs	r2, #0
    494c:	42a3      	cmp	r3, r4
    494e:	d124      	bne.n	499a <_dtoa_r+0x62a>
    4950:	4b41      	ldr	r3, [pc, #260]	; (4a58 <_dtoa_r+0x6e8>)
    4952:	9810      	ldr	r0, [sp, #64]	; 0x40
    4954:	9911      	ldr	r1, [sp, #68]	; 0x44
    4956:	f002 f9e9 	bl	6d2c <__aeabi_dadd>
    495a:	0002      	movs	r2, r0
    495c:	000b      	movs	r3, r1
    495e:	9806      	ldr	r0, [sp, #24]
    4960:	9907      	ldr	r1, [sp, #28]
    4962:	f001 fc79 	bl	6258 <__aeabi_dcmpgt>
    4966:	2800      	cmp	r0, #0
    4968:	d000      	beq.n	496c <_dtoa_r+0x5fc>
    496a:	e078      	b.n	4a5e <_dtoa_r+0x6ee>
    496c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    496e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4970:	2000      	movs	r0, #0
    4972:	4939      	ldr	r1, [pc, #228]	; (4a58 <_dtoa_r+0x6e8>)
    4974:	f003 fb9e 	bl	80b4 <__aeabi_dsub>
    4978:	0002      	movs	r2, r0
    497a:	000b      	movs	r3, r1
    497c:	9806      	ldr	r0, [sp, #24]
    497e:	9907      	ldr	r1, [sp, #28]
    4980:	f001 fc56 	bl	6230 <__aeabi_dcmplt>
    4984:	2800      	cmp	r0, #0
    4986:	d100      	bne.n	498a <_dtoa_r+0x61a>
    4988:	e729      	b.n	47de <_dtoa_r+0x46e>
    498a:	1e6b      	subs	r3, r5, #1
    498c:	781a      	ldrb	r2, [r3, #0]
    498e:	2a30      	cmp	r2, #48	; 0x30
    4990:	d001      	beq.n	4996 <_dtoa_r+0x626>
    4992:	9603      	str	r6, [sp, #12]
    4994:	e03f      	b.n	4a16 <_dtoa_r+0x6a6>
    4996:	001d      	movs	r5, r3
    4998:	e7f7      	b.n	498a <_dtoa_r+0x61a>
    499a:	9806      	ldr	r0, [sp, #24]
    499c:	9907      	ldr	r1, [sp, #28]
    499e:	4b29      	ldr	r3, [pc, #164]	; (4a44 <_dtoa_r+0x6d4>)
    49a0:	f003 f908 	bl	7bb4 <__aeabi_dmul>
    49a4:	9006      	str	r0, [sp, #24]
    49a6:	9107      	str	r1, [sp, #28]
    49a8:	e7bb      	b.n	4922 <_dtoa_r+0x5b2>
    49aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    49ac:	9a08      	ldr	r2, [sp, #32]
    49ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49b0:	9806      	ldr	r0, [sp, #24]
    49b2:	9907      	ldr	r1, [sp, #28]
    49b4:	f002 fcca 	bl	734c <__aeabi_ddiv>
    49b8:	f003 feb2 	bl	8720 <__aeabi_d2iz>
    49bc:	0004      	movs	r4, r0
    49be:	f003 fee3 	bl	8788 <__aeabi_i2d>
    49c2:	9a08      	ldr	r2, [sp, #32]
    49c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49c6:	f003 f8f5 	bl	7bb4 <__aeabi_dmul>
    49ca:	000b      	movs	r3, r1
    49cc:	0002      	movs	r2, r0
    49ce:	9806      	ldr	r0, [sp, #24]
    49d0:	9907      	ldr	r1, [sp, #28]
    49d2:	f003 fb6f 	bl	80b4 <__aeabi_dsub>
    49d6:	0023      	movs	r3, r4
    49d8:	3330      	adds	r3, #48	; 0x30
    49da:	7033      	strb	r3, [r6, #0]
    49dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    49de:	1c75      	adds	r5, r6, #1
    49e0:	1aeb      	subs	r3, r5, r3
    49e2:	429f      	cmp	r7, r3
    49e4:	d14c      	bne.n	4a80 <_dtoa_r+0x710>
    49e6:	0002      	movs	r2, r0
    49e8:	000b      	movs	r3, r1
    49ea:	f002 f99f 	bl	6d2c <__aeabi_dadd>
    49ee:	0006      	movs	r6, r0
    49f0:	000f      	movs	r7, r1
    49f2:	0002      	movs	r2, r0
    49f4:	000b      	movs	r3, r1
    49f6:	9808      	ldr	r0, [sp, #32]
    49f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    49fa:	f001 fc19 	bl	6230 <__aeabi_dcmplt>
    49fe:	2800      	cmp	r0, #0
    4a00:	d12c      	bne.n	4a5c <_dtoa_r+0x6ec>
    4a02:	9808      	ldr	r0, [sp, #32]
    4a04:	9909      	ldr	r1, [sp, #36]	; 0x24
    4a06:	0032      	movs	r2, r6
    4a08:	003b      	movs	r3, r7
    4a0a:	f001 fc0b 	bl	6224 <__aeabi_dcmpeq>
    4a0e:	2800      	cmp	r0, #0
    4a10:	d001      	beq.n	4a16 <_dtoa_r+0x6a6>
    4a12:	07e3      	lsls	r3, r4, #31
    4a14:	d422      	bmi.n	4a5c <_dtoa_r+0x6ec>
    4a16:	9905      	ldr	r1, [sp, #20]
    4a18:	9804      	ldr	r0, [sp, #16]
    4a1a:	f000 fcde 	bl	53da <_Bfree>
    4a1e:	2300      	movs	r3, #0
    4a20:	702b      	strb	r3, [r5, #0]
    4a22:	9b03      	ldr	r3, [sp, #12]
    4a24:	9a24      	ldr	r2, [sp, #144]	; 0x90
    4a26:	3301      	adds	r3, #1
    4a28:	6013      	str	r3, [r2, #0]
    4a2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d100      	bne.n	4a32 <_dtoa_r+0x6c2>
    4a30:	e275      	b.n	4f1e <_dtoa_r+0xbae>
    4a32:	601d      	str	r5, [r3, #0]
    4a34:	e273      	b.n	4f1e <_dtoa_r+0xbae>
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	00008c88 	.word	0x00008c88
    4a3c:	00008c60 	.word	0x00008c60
    4a40:	3ff00000 	.word	0x3ff00000
    4a44:	40240000 	.word	0x40240000
    4a48:	401c0000 	.word	0x401c0000
    4a4c:	fcc00000 	.word	0xfcc00000
    4a50:	40140000 	.word	0x40140000
    4a54:	7cc00000 	.word	0x7cc00000
    4a58:	3fe00000 	.word	0x3fe00000
    4a5c:	9e03      	ldr	r6, [sp, #12]
    4a5e:	1e6b      	subs	r3, r5, #1
    4a60:	781a      	ldrb	r2, [r3, #0]
    4a62:	2a39      	cmp	r2, #57	; 0x39
    4a64:	d106      	bne.n	4a74 <_dtoa_r+0x704>
    4a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a68:	429a      	cmp	r2, r3
    4a6a:	d107      	bne.n	4a7c <_dtoa_r+0x70c>
    4a6c:	2330      	movs	r3, #48	; 0x30
    4a6e:	7013      	strb	r3, [r2, #0]
    4a70:	0013      	movs	r3, r2
    4a72:	3601      	adds	r6, #1
    4a74:	781a      	ldrb	r2, [r3, #0]
    4a76:	3201      	adds	r2, #1
    4a78:	701a      	strb	r2, [r3, #0]
    4a7a:	e78a      	b.n	4992 <_dtoa_r+0x622>
    4a7c:	001d      	movs	r5, r3
    4a7e:	e7ee      	b.n	4a5e <_dtoa_r+0x6ee>
    4a80:	2200      	movs	r2, #0
    4a82:	4bcf      	ldr	r3, [pc, #828]	; (4dc0 <_dtoa_r+0xa50>)
    4a84:	f003 f896 	bl	7bb4 <__aeabi_dmul>
    4a88:	2200      	movs	r2, #0
    4a8a:	2300      	movs	r3, #0
    4a8c:	9006      	str	r0, [sp, #24]
    4a8e:	9107      	str	r1, [sp, #28]
    4a90:	002e      	movs	r6, r5
    4a92:	f001 fbc7 	bl	6224 <__aeabi_dcmpeq>
    4a96:	2800      	cmp	r0, #0
    4a98:	d100      	bne.n	4a9c <_dtoa_r+0x72c>
    4a9a:	e787      	b.n	49ac <_dtoa_r+0x63c>
    4a9c:	e7bb      	b.n	4a16 <_dtoa_r+0x6a6>
    4a9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4aa0:	2a00      	cmp	r2, #0
    4aa2:	d100      	bne.n	4aa6 <_dtoa_r+0x736>
    4aa4:	e087      	b.n	4bb6 <_dtoa_r+0x846>
    4aa6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4aa8:	2a01      	cmp	r2, #1
    4aaa:	dc6e      	bgt.n	4b8a <_dtoa_r+0x81a>
    4aac:	9a18      	ldr	r2, [sp, #96]	; 0x60
    4aae:	2a00      	cmp	r2, #0
    4ab0:	d067      	beq.n	4b82 <_dtoa_r+0x812>
    4ab2:	4ac4      	ldr	r2, [pc, #784]	; (4dc4 <_dtoa_r+0xa54>)
    4ab4:	189b      	adds	r3, r3, r2
    4ab6:	9d08      	ldr	r5, [sp, #32]
    4ab8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4aba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4abc:	2101      	movs	r1, #1
    4abe:	18d2      	adds	r2, r2, r3
    4ac0:	920b      	str	r2, [sp, #44]	; 0x2c
    4ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4ac4:	9804      	ldr	r0, [sp, #16]
    4ac6:	18d3      	adds	r3, r2, r3
    4ac8:	930c      	str	r3, [sp, #48]	; 0x30
    4aca:	f000 fd24 	bl	5516 <__i2b>
    4ace:	0006      	movs	r6, r0
    4ad0:	2c00      	cmp	r4, #0
    4ad2:	dd0e      	ble.n	4af2 <_dtoa_r+0x782>
    4ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	dd0b      	ble.n	4af2 <_dtoa_r+0x782>
    4ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4adc:	0023      	movs	r3, r4
    4ade:	4294      	cmp	r4, r2
    4ae0:	dd00      	ble.n	4ae4 <_dtoa_r+0x774>
    4ae2:	0013      	movs	r3, r2
    4ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4ae6:	1ae4      	subs	r4, r4, r3
    4ae8:	1ad2      	subs	r2, r2, r3
    4aea:	920b      	str	r2, [sp, #44]	; 0x2c
    4aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4aee:	1ad3      	subs	r3, r2, r3
    4af0:	930c      	str	r3, [sp, #48]	; 0x30
    4af2:	9b08      	ldr	r3, [sp, #32]
    4af4:	2b00      	cmp	r3, #0
    4af6:	d01e      	beq.n	4b36 <_dtoa_r+0x7c6>
    4af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4afa:	2b00      	cmp	r3, #0
    4afc:	d05f      	beq.n	4bbe <_dtoa_r+0x84e>
    4afe:	2d00      	cmp	r5, #0
    4b00:	dd11      	ble.n	4b26 <_dtoa_r+0x7b6>
    4b02:	0031      	movs	r1, r6
    4b04:	002a      	movs	r2, r5
    4b06:	9804      	ldr	r0, [sp, #16]
    4b08:	f000 fd9e 	bl	5648 <__pow5mult>
    4b0c:	9a05      	ldr	r2, [sp, #20]
    4b0e:	0001      	movs	r1, r0
    4b10:	0006      	movs	r6, r0
    4b12:	9804      	ldr	r0, [sp, #16]
    4b14:	f000 fd08 	bl	5528 <__multiply>
    4b18:	9905      	ldr	r1, [sp, #20]
    4b1a:	9010      	str	r0, [sp, #64]	; 0x40
    4b1c:	9804      	ldr	r0, [sp, #16]
    4b1e:	f000 fc5c 	bl	53da <_Bfree>
    4b22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4b24:	9305      	str	r3, [sp, #20]
    4b26:	9b08      	ldr	r3, [sp, #32]
    4b28:	1b5a      	subs	r2, r3, r5
    4b2a:	d004      	beq.n	4b36 <_dtoa_r+0x7c6>
    4b2c:	9905      	ldr	r1, [sp, #20]
    4b2e:	9804      	ldr	r0, [sp, #16]
    4b30:	f000 fd8a 	bl	5648 <__pow5mult>
    4b34:	9005      	str	r0, [sp, #20]
    4b36:	2101      	movs	r1, #1
    4b38:	9804      	ldr	r0, [sp, #16]
    4b3a:	f000 fcec 	bl	5516 <__i2b>
    4b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4b40:	9008      	str	r0, [sp, #32]
    4b42:	2b00      	cmp	r3, #0
    4b44:	dd3d      	ble.n	4bc2 <_dtoa_r+0x852>
    4b46:	001a      	movs	r2, r3
    4b48:	0001      	movs	r1, r0
    4b4a:	9804      	ldr	r0, [sp, #16]
    4b4c:	f000 fd7c 	bl	5648 <__pow5mult>
    4b50:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4b52:	9008      	str	r0, [sp, #32]
    4b54:	2500      	movs	r5, #0
    4b56:	2b01      	cmp	r3, #1
    4b58:	dc3b      	bgt.n	4bd2 <_dtoa_r+0x862>
    4b5a:	2500      	movs	r5, #0
    4b5c:	9b06      	ldr	r3, [sp, #24]
    4b5e:	42ab      	cmp	r3, r5
    4b60:	d133      	bne.n	4bca <_dtoa_r+0x85a>
    4b62:	9b07      	ldr	r3, [sp, #28]
    4b64:	031b      	lsls	r3, r3, #12
    4b66:	42ab      	cmp	r3, r5
    4b68:	d12f      	bne.n	4bca <_dtoa_r+0x85a>
    4b6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4b6c:	9a07      	ldr	r2, [sp, #28]
    4b6e:	4213      	tst	r3, r2
    4b70:	d02b      	beq.n	4bca <_dtoa_r+0x85a>
    4b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b74:	3501      	adds	r5, #1
    4b76:	3301      	adds	r3, #1
    4b78:	930b      	str	r3, [sp, #44]	; 0x2c
    4b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b7c:	3301      	adds	r3, #1
    4b7e:	930c      	str	r3, [sp, #48]	; 0x30
    4b80:	e023      	b.n	4bca <_dtoa_r+0x85a>
    4b82:	2336      	movs	r3, #54	; 0x36
    4b84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    4b86:	1a9b      	subs	r3, r3, r2
    4b88:	e795      	b.n	4ab6 <_dtoa_r+0x746>
    4b8a:	9b08      	ldr	r3, [sp, #32]
    4b8c:	1e7d      	subs	r5, r7, #1
    4b8e:	42ab      	cmp	r3, r5
    4b90:	db06      	blt.n	4ba0 <_dtoa_r+0x830>
    4b92:	1b5d      	subs	r5, r3, r5
    4b94:	2f00      	cmp	r7, #0
    4b96:	da0b      	bge.n	4bb0 <_dtoa_r+0x840>
    4b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b9a:	1bdc      	subs	r4, r3, r7
    4b9c:	2300      	movs	r3, #0
    4b9e:	e78c      	b.n	4aba <_dtoa_r+0x74a>
    4ba0:	9b08      	ldr	r3, [sp, #32]
    4ba2:	9508      	str	r5, [sp, #32]
    4ba4:	1aea      	subs	r2, r5, r3
    4ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4ba8:	2500      	movs	r5, #0
    4baa:	189b      	adds	r3, r3, r2
    4bac:	930f      	str	r3, [sp, #60]	; 0x3c
    4bae:	e7f1      	b.n	4b94 <_dtoa_r+0x824>
    4bb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4bb2:	003b      	movs	r3, r7
    4bb4:	e781      	b.n	4aba <_dtoa_r+0x74a>
    4bb6:	9d08      	ldr	r5, [sp, #32]
    4bb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4bba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4bbc:	e788      	b.n	4ad0 <_dtoa_r+0x760>
    4bbe:	9a08      	ldr	r2, [sp, #32]
    4bc0:	e7b4      	b.n	4b2c <_dtoa_r+0x7bc>
    4bc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4bc4:	2500      	movs	r5, #0
    4bc6:	2b01      	cmp	r3, #1
    4bc8:	ddc7      	ble.n	4b5a <_dtoa_r+0x7ea>
    4bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4bcc:	2001      	movs	r0, #1
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d00b      	beq.n	4bea <_dtoa_r+0x87a>
    4bd2:	9b08      	ldr	r3, [sp, #32]
    4bd4:	9a08      	ldr	r2, [sp, #32]
    4bd6:	691b      	ldr	r3, [r3, #16]
    4bd8:	930f      	str	r3, [sp, #60]	; 0x3c
    4bda:	3303      	adds	r3, #3
    4bdc:	009b      	lsls	r3, r3, #2
    4bde:	18d3      	adds	r3, r2, r3
    4be0:	6858      	ldr	r0, [r3, #4]
    4be2:	f000 fc4f 	bl	5484 <__hi0bits>
    4be6:	2320      	movs	r3, #32
    4be8:	1a18      	subs	r0, r3, r0
    4bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4bec:	18c0      	adds	r0, r0, r3
    4bee:	231f      	movs	r3, #31
    4bf0:	4018      	ands	r0, r3
    4bf2:	d100      	bne.n	4bf6 <_dtoa_r+0x886>
    4bf4:	e0ab      	b.n	4d4e <_dtoa_r+0x9de>
    4bf6:	3301      	adds	r3, #1
    4bf8:	1a1b      	subs	r3, r3, r0
    4bfa:	2b04      	cmp	r3, #4
    4bfc:	dc00      	bgt.n	4c00 <_dtoa_r+0x890>
    4bfe:	e09b      	b.n	4d38 <_dtoa_r+0x9c8>
    4c00:	231c      	movs	r3, #28
    4c02:	1a18      	subs	r0, r3, r0
    4c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c06:	1824      	adds	r4, r4, r0
    4c08:	181b      	adds	r3, r3, r0
    4c0a:	930b      	str	r3, [sp, #44]	; 0x2c
    4c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c0e:	181b      	adds	r3, r3, r0
    4c10:	930c      	str	r3, [sp, #48]	; 0x30
    4c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c14:	2b00      	cmp	r3, #0
    4c16:	dd05      	ble.n	4c24 <_dtoa_r+0x8b4>
    4c18:	001a      	movs	r2, r3
    4c1a:	9905      	ldr	r1, [sp, #20]
    4c1c:	9804      	ldr	r0, [sp, #16]
    4c1e:	f000 fd65 	bl	56ec <__lshift>
    4c22:	9005      	str	r0, [sp, #20]
    4c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4c26:	2b00      	cmp	r3, #0
    4c28:	dd05      	ble.n	4c36 <_dtoa_r+0x8c6>
    4c2a:	001a      	movs	r2, r3
    4c2c:	9908      	ldr	r1, [sp, #32]
    4c2e:	9804      	ldr	r0, [sp, #16]
    4c30:	f000 fd5c 	bl	56ec <__lshift>
    4c34:	9008      	str	r0, [sp, #32]
    4c36:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4c38:	2b00      	cmp	r3, #0
    4c3a:	d100      	bne.n	4c3e <_dtoa_r+0x8ce>
    4c3c:	e089      	b.n	4d52 <_dtoa_r+0x9e2>
    4c3e:	9908      	ldr	r1, [sp, #32]
    4c40:	9805      	ldr	r0, [sp, #20]
    4c42:	f000 fda4 	bl	578e <__mcmp>
    4c46:	2800      	cmp	r0, #0
    4c48:	db00      	blt.n	4c4c <_dtoa_r+0x8dc>
    4c4a:	e082      	b.n	4d52 <_dtoa_r+0x9e2>
    4c4c:	9b03      	ldr	r3, [sp, #12]
    4c4e:	220a      	movs	r2, #10
    4c50:	3b01      	subs	r3, #1
    4c52:	9303      	str	r3, [sp, #12]
    4c54:	9905      	ldr	r1, [sp, #20]
    4c56:	2300      	movs	r3, #0
    4c58:	9804      	ldr	r0, [sp, #16]
    4c5a:	f000 fbd7 	bl	540c <__multadd>
    4c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c60:	9005      	str	r0, [sp, #20]
    4c62:	2b00      	cmp	r3, #0
    4c64:	d100      	bne.n	4c68 <_dtoa_r+0x8f8>
    4c66:	e15d      	b.n	4f24 <_dtoa_r+0xbb4>
    4c68:	2300      	movs	r3, #0
    4c6a:	0031      	movs	r1, r6
    4c6c:	220a      	movs	r2, #10
    4c6e:	9804      	ldr	r0, [sp, #16]
    4c70:	f000 fbcc 	bl	540c <__multadd>
    4c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4c76:	0006      	movs	r6, r0
    4c78:	2b00      	cmp	r3, #0
    4c7a:	dc02      	bgt.n	4c82 <_dtoa_r+0x912>
    4c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4c7e:	2b02      	cmp	r3, #2
    4c80:	dc6d      	bgt.n	4d5e <_dtoa_r+0x9ee>
    4c82:	2c00      	cmp	r4, #0
    4c84:	dd05      	ble.n	4c92 <_dtoa_r+0x922>
    4c86:	0031      	movs	r1, r6
    4c88:	0022      	movs	r2, r4
    4c8a:	9804      	ldr	r0, [sp, #16]
    4c8c:	f000 fd2e 	bl	56ec <__lshift>
    4c90:	0006      	movs	r6, r0
    4c92:	0030      	movs	r0, r6
    4c94:	2d00      	cmp	r5, #0
    4c96:	d011      	beq.n	4cbc <_dtoa_r+0x94c>
    4c98:	6871      	ldr	r1, [r6, #4]
    4c9a:	9804      	ldr	r0, [sp, #16]
    4c9c:	f000 fb65 	bl	536a <_Balloc>
    4ca0:	0031      	movs	r1, r6
    4ca2:	0004      	movs	r4, r0
    4ca4:	6933      	ldr	r3, [r6, #16]
    4ca6:	310c      	adds	r1, #12
    4ca8:	1c9a      	adds	r2, r3, #2
    4caa:	0092      	lsls	r2, r2, #2
    4cac:	300c      	adds	r0, #12
    4cae:	f7fe fc4b 	bl	3548 <memcpy>
    4cb2:	2201      	movs	r2, #1
    4cb4:	0021      	movs	r1, r4
    4cb6:	9804      	ldr	r0, [sp, #16]
    4cb8:	f000 fd18 	bl	56ec <__lshift>
    4cbc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4cc0:	3f01      	subs	r7, #1
    4cc2:	930b      	str	r3, [sp, #44]	; 0x2c
    4cc4:	19db      	adds	r3, r3, r7
    4cc6:	0037      	movs	r7, r6
    4cc8:	0006      	movs	r6, r0
    4cca:	930f      	str	r3, [sp, #60]	; 0x3c
    4ccc:	9908      	ldr	r1, [sp, #32]
    4cce:	9805      	ldr	r0, [sp, #20]
    4cd0:	f7ff faca 	bl	4268 <quorem>
    4cd4:	0039      	movs	r1, r7
    4cd6:	900d      	str	r0, [sp, #52]	; 0x34
    4cd8:	0004      	movs	r4, r0
    4cda:	9805      	ldr	r0, [sp, #20]
    4cdc:	f000 fd57 	bl	578e <__mcmp>
    4ce0:	0032      	movs	r2, r6
    4ce2:	900e      	str	r0, [sp, #56]	; 0x38
    4ce4:	9908      	ldr	r1, [sp, #32]
    4ce6:	9804      	ldr	r0, [sp, #16]
    4ce8:	f000 fd6a 	bl	57c0 <__mdiff>
    4cec:	2301      	movs	r3, #1
    4cee:	930c      	str	r3, [sp, #48]	; 0x30
    4cf0:	68c3      	ldr	r3, [r0, #12]
    4cf2:	3430      	adds	r4, #48	; 0x30
    4cf4:	0005      	movs	r5, r0
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d104      	bne.n	4d04 <_dtoa_r+0x994>
    4cfa:	0001      	movs	r1, r0
    4cfc:	9805      	ldr	r0, [sp, #20]
    4cfe:	f000 fd46 	bl	578e <__mcmp>
    4d02:	900c      	str	r0, [sp, #48]	; 0x30
    4d04:	0029      	movs	r1, r5
    4d06:	9804      	ldr	r0, [sp, #16]
    4d08:	f000 fb67 	bl	53da <_Bfree>
    4d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d0e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4d10:	4313      	orrs	r3, r2
    4d12:	d000      	beq.n	4d16 <_dtoa_r+0x9a6>
    4d14:	e089      	b.n	4e2a <_dtoa_r+0xaba>
    4d16:	9a06      	ldr	r2, [sp, #24]
    4d18:	3301      	adds	r3, #1
    4d1a:	4213      	tst	r3, r2
    4d1c:	d000      	beq.n	4d20 <_dtoa_r+0x9b0>
    4d1e:	e084      	b.n	4e2a <_dtoa_r+0xaba>
    4d20:	2c39      	cmp	r4, #57	; 0x39
    4d22:	d100      	bne.n	4d26 <_dtoa_r+0x9b6>
    4d24:	e0a3      	b.n	4e6e <_dtoa_r+0xafe>
    4d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4d28:	2b00      	cmp	r3, #0
    4d2a:	dd01      	ble.n	4d30 <_dtoa_r+0x9c0>
    4d2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4d2e:	3431      	adds	r4, #49	; 0x31
    4d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4d32:	1c5d      	adds	r5, r3, #1
    4d34:	701c      	strb	r4, [r3, #0]
    4d36:	e027      	b.n	4d88 <_dtoa_r+0xa18>
    4d38:	2b04      	cmp	r3, #4
    4d3a:	d100      	bne.n	4d3e <_dtoa_r+0x9ce>
    4d3c:	e769      	b.n	4c12 <_dtoa_r+0x8a2>
    4d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4d40:	331c      	adds	r3, #28
    4d42:	18d2      	adds	r2, r2, r3
    4d44:	920b      	str	r2, [sp, #44]	; 0x2c
    4d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4d48:	18e4      	adds	r4, r4, r3
    4d4a:	18d3      	adds	r3, r2, r3
    4d4c:	e760      	b.n	4c10 <_dtoa_r+0x8a0>
    4d4e:	0003      	movs	r3, r0
    4d50:	e7f5      	b.n	4d3e <_dtoa_r+0x9ce>
    4d52:	2f00      	cmp	r7, #0
    4d54:	dc3c      	bgt.n	4dd0 <_dtoa_r+0xa60>
    4d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4d58:	2b02      	cmp	r3, #2
    4d5a:	dd39      	ble.n	4dd0 <_dtoa_r+0xa60>
    4d5c:	970d      	str	r7, [sp, #52]	; 0x34
    4d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4d60:	2b00      	cmp	r3, #0
    4d62:	d10c      	bne.n	4d7e <_dtoa_r+0xa0e>
    4d64:	9908      	ldr	r1, [sp, #32]
    4d66:	2205      	movs	r2, #5
    4d68:	9804      	ldr	r0, [sp, #16]
    4d6a:	f000 fb4f 	bl	540c <__multadd>
    4d6e:	9008      	str	r0, [sp, #32]
    4d70:	0001      	movs	r1, r0
    4d72:	9805      	ldr	r0, [sp, #20]
    4d74:	f000 fd0b 	bl	578e <__mcmp>
    4d78:	2800      	cmp	r0, #0
    4d7a:	dd00      	ble.n	4d7e <_dtoa_r+0xa0e>
    4d7c:	e55a      	b.n	4834 <_dtoa_r+0x4c4>
    4d7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    4d80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4d82:	43db      	mvns	r3, r3
    4d84:	9303      	str	r3, [sp, #12]
    4d86:	2700      	movs	r7, #0
    4d88:	9908      	ldr	r1, [sp, #32]
    4d8a:	9804      	ldr	r0, [sp, #16]
    4d8c:	f000 fb25 	bl	53da <_Bfree>
    4d90:	2e00      	cmp	r6, #0
    4d92:	d100      	bne.n	4d96 <_dtoa_r+0xa26>
    4d94:	e63f      	b.n	4a16 <_dtoa_r+0x6a6>
    4d96:	2f00      	cmp	r7, #0
    4d98:	d005      	beq.n	4da6 <_dtoa_r+0xa36>
    4d9a:	42b7      	cmp	r7, r6
    4d9c:	d003      	beq.n	4da6 <_dtoa_r+0xa36>
    4d9e:	0039      	movs	r1, r7
    4da0:	9804      	ldr	r0, [sp, #16]
    4da2:	f000 fb1a 	bl	53da <_Bfree>
    4da6:	0031      	movs	r1, r6
    4da8:	9804      	ldr	r0, [sp, #16]
    4daa:	f000 fb16 	bl	53da <_Bfree>
    4dae:	e632      	b.n	4a16 <_dtoa_r+0x6a6>
    4db0:	9508      	str	r5, [sp, #32]
    4db2:	002e      	movs	r6, r5
    4db4:	e7e3      	b.n	4d7e <_dtoa_r+0xa0e>
    4db6:	2300      	movs	r3, #0
    4db8:	9308      	str	r3, [sp, #32]
    4dba:	001e      	movs	r6, r3
    4dbc:	e7df      	b.n	4d7e <_dtoa_r+0xa0e>
    4dbe:	46c0      	nop			; (mov r8, r8)
    4dc0:	40240000 	.word	0x40240000
    4dc4:	00000433 	.word	0x00000433
    4dc8:	9603      	str	r6, [sp, #12]
    4dca:	9508      	str	r5, [sp, #32]
    4dcc:	002e      	movs	r6, r5
    4dce:	e531      	b.n	4834 <_dtoa_r+0x4c4>
    4dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4dd2:	970d      	str	r7, [sp, #52]	; 0x34
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d000      	beq.n	4dda <_dtoa_r+0xa6a>
    4dd8:	e753      	b.n	4c82 <_dtoa_r+0x912>
    4dda:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4ddc:	9908      	ldr	r1, [sp, #32]
    4dde:	9805      	ldr	r0, [sp, #20]
    4de0:	f7ff fa42 	bl	4268 <quorem>
    4de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4de6:	3030      	adds	r0, #48	; 0x30
    4de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4dea:	7028      	strb	r0, [r5, #0]
    4dec:	3501      	adds	r5, #1
    4dee:	0004      	movs	r4, r0
    4df0:	1aeb      	subs	r3, r5, r3
    4df2:	429a      	cmp	r2, r3
    4df4:	dc78      	bgt.n	4ee8 <_dtoa_r+0xb78>
    4df6:	1e15      	subs	r5, r2, #0
    4df8:	dc00      	bgt.n	4dfc <_dtoa_r+0xa8c>
    4dfa:	2501      	movs	r5, #1
    4dfc:	2700      	movs	r7, #0
    4dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4e00:	195d      	adds	r5, r3, r5
    4e02:	9905      	ldr	r1, [sp, #20]
    4e04:	2201      	movs	r2, #1
    4e06:	9804      	ldr	r0, [sp, #16]
    4e08:	f000 fc70 	bl	56ec <__lshift>
    4e0c:	9908      	ldr	r1, [sp, #32]
    4e0e:	9005      	str	r0, [sp, #20]
    4e10:	f000 fcbd 	bl	578e <__mcmp>
    4e14:	2800      	cmp	r0, #0
    4e16:	dc2f      	bgt.n	4e78 <_dtoa_r+0xb08>
    4e18:	d101      	bne.n	4e1e <_dtoa_r+0xaae>
    4e1a:	07e3      	lsls	r3, r4, #31
    4e1c:	d42c      	bmi.n	4e78 <_dtoa_r+0xb08>
    4e1e:	1e6b      	subs	r3, r5, #1
    4e20:	781a      	ldrb	r2, [r3, #0]
    4e22:	2a30      	cmp	r2, #48	; 0x30
    4e24:	d1b0      	bne.n	4d88 <_dtoa_r+0xa18>
    4e26:	001d      	movs	r5, r3
    4e28:	e7f9      	b.n	4e1e <_dtoa_r+0xaae>
    4e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	db07      	blt.n	4e40 <_dtoa_r+0xad0>
    4e30:	001d      	movs	r5, r3
    4e32:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4e34:	431d      	orrs	r5, r3
    4e36:	d126      	bne.n	4e86 <_dtoa_r+0xb16>
    4e38:	2301      	movs	r3, #1
    4e3a:	9a06      	ldr	r2, [sp, #24]
    4e3c:	4213      	tst	r3, r2
    4e3e:	d122      	bne.n	4e86 <_dtoa_r+0xb16>
    4e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e42:	2b00      	cmp	r3, #0
    4e44:	dc00      	bgt.n	4e48 <_dtoa_r+0xad8>
    4e46:	e773      	b.n	4d30 <_dtoa_r+0x9c0>
    4e48:	9905      	ldr	r1, [sp, #20]
    4e4a:	2201      	movs	r2, #1
    4e4c:	9804      	ldr	r0, [sp, #16]
    4e4e:	f000 fc4d 	bl	56ec <__lshift>
    4e52:	9908      	ldr	r1, [sp, #32]
    4e54:	9005      	str	r0, [sp, #20]
    4e56:	f000 fc9a 	bl	578e <__mcmp>
    4e5a:	2800      	cmp	r0, #0
    4e5c:	dc04      	bgt.n	4e68 <_dtoa_r+0xaf8>
    4e5e:	d000      	beq.n	4e62 <_dtoa_r+0xaf2>
    4e60:	e766      	b.n	4d30 <_dtoa_r+0x9c0>
    4e62:	07e3      	lsls	r3, r4, #31
    4e64:	d400      	bmi.n	4e68 <_dtoa_r+0xaf8>
    4e66:	e763      	b.n	4d30 <_dtoa_r+0x9c0>
    4e68:	2c39      	cmp	r4, #57	; 0x39
    4e6a:	d000      	beq.n	4e6e <_dtoa_r+0xafe>
    4e6c:	e75e      	b.n	4d2c <_dtoa_r+0x9bc>
    4e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4e72:	1c5d      	adds	r5, r3, #1
    4e74:	2339      	movs	r3, #57	; 0x39
    4e76:	7013      	strb	r3, [r2, #0]
    4e78:	1e6b      	subs	r3, r5, #1
    4e7a:	781a      	ldrb	r2, [r3, #0]
    4e7c:	2a39      	cmp	r2, #57	; 0x39
    4e7e:	d03b      	beq.n	4ef8 <_dtoa_r+0xb88>
    4e80:	3201      	adds	r2, #1
    4e82:	701a      	strb	r2, [r3, #0]
    4e84:	e780      	b.n	4d88 <_dtoa_r+0xa18>
    4e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e88:	3301      	adds	r3, #1
    4e8a:	930d      	str	r3, [sp, #52]	; 0x34
    4e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e8e:	2b00      	cmp	r3, #0
    4e90:	dd05      	ble.n	4e9e <_dtoa_r+0xb2e>
    4e92:	2c39      	cmp	r4, #57	; 0x39
    4e94:	d0eb      	beq.n	4e6e <_dtoa_r+0xafe>
    4e96:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4e98:	3401      	adds	r4, #1
    4e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4e9c:	e74a      	b.n	4d34 <_dtoa_r+0x9c4>
    4e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    4ea2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4ea4:	701c      	strb	r4, [r3, #0]
    4ea6:	4293      	cmp	r3, r2
    4ea8:	d0ab      	beq.n	4e02 <_dtoa_r+0xa92>
    4eaa:	2300      	movs	r3, #0
    4eac:	220a      	movs	r2, #10
    4eae:	9905      	ldr	r1, [sp, #20]
    4eb0:	9804      	ldr	r0, [sp, #16]
    4eb2:	f000 faab 	bl	540c <__multadd>
    4eb6:	2300      	movs	r3, #0
    4eb8:	9005      	str	r0, [sp, #20]
    4eba:	220a      	movs	r2, #10
    4ebc:	0039      	movs	r1, r7
    4ebe:	9804      	ldr	r0, [sp, #16]
    4ec0:	42b7      	cmp	r7, r6
    4ec2:	d106      	bne.n	4ed2 <_dtoa_r+0xb62>
    4ec4:	f000 faa2 	bl	540c <__multadd>
    4ec8:	0007      	movs	r7, r0
    4eca:	0006      	movs	r6, r0
    4ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4ece:	930b      	str	r3, [sp, #44]	; 0x2c
    4ed0:	e6fc      	b.n	4ccc <_dtoa_r+0x95c>
    4ed2:	f000 fa9b 	bl	540c <__multadd>
    4ed6:	0031      	movs	r1, r6
    4ed8:	0007      	movs	r7, r0
    4eda:	2300      	movs	r3, #0
    4edc:	220a      	movs	r2, #10
    4ede:	9804      	ldr	r0, [sp, #16]
    4ee0:	f000 fa94 	bl	540c <__multadd>
    4ee4:	0006      	movs	r6, r0
    4ee6:	e7f1      	b.n	4ecc <_dtoa_r+0xb5c>
    4ee8:	2300      	movs	r3, #0
    4eea:	220a      	movs	r2, #10
    4eec:	9905      	ldr	r1, [sp, #20]
    4eee:	9804      	ldr	r0, [sp, #16]
    4ef0:	f000 fa8c 	bl	540c <__multadd>
    4ef4:	9005      	str	r0, [sp, #20]
    4ef6:	e771      	b.n	4ddc <_dtoa_r+0xa6c>
    4ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4efa:	429a      	cmp	r2, r3
    4efc:	d105      	bne.n	4f0a <_dtoa_r+0xb9a>
    4efe:	9b03      	ldr	r3, [sp, #12]
    4f00:	3301      	adds	r3, #1
    4f02:	9303      	str	r3, [sp, #12]
    4f04:	2331      	movs	r3, #49	; 0x31
    4f06:	7013      	strb	r3, [r2, #0]
    4f08:	e73e      	b.n	4d88 <_dtoa_r+0xa18>
    4f0a:	001d      	movs	r5, r3
    4f0c:	e7b4      	b.n	4e78 <_dtoa_r+0xb08>
    4f0e:	4b0a      	ldr	r3, [pc, #40]	; (4f38 <_dtoa_r+0xbc8>)
    4f10:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4f12:	930a      	str	r3, [sp, #40]	; 0x28
    4f14:	4b09      	ldr	r3, [pc, #36]	; (4f3c <_dtoa_r+0xbcc>)
    4f16:	2a00      	cmp	r2, #0
    4f18:	d001      	beq.n	4f1e <_dtoa_r+0xbae>
    4f1a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    4f1c:	6013      	str	r3, [r2, #0]
    4f1e:	980a      	ldr	r0, [sp, #40]	; 0x28
    4f20:	b01d      	add	sp, #116	; 0x74
    4f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4f26:	2b00      	cmp	r3, #0
    4f28:	dd00      	ble.n	4f2c <_dtoa_r+0xbbc>
    4f2a:	e756      	b.n	4dda <_dtoa_r+0xa6a>
    4f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4f2e:	2b02      	cmp	r3, #2
    4f30:	dc00      	bgt.n	4f34 <_dtoa_r+0xbc4>
    4f32:	e752      	b.n	4dda <_dtoa_r+0xa6a>
    4f34:	e713      	b.n	4d5e <_dtoa_r+0x9ee>
    4f36:	46c0      	nop			; (mov r8, r8)
    4f38:	00008bec 	.word	0x00008bec
    4f3c:	00008bf4 	.word	0x00008bf4

00004f40 <__sflush_r>:
    4f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f42:	898a      	ldrh	r2, [r1, #12]
    4f44:	0005      	movs	r5, r0
    4f46:	000c      	movs	r4, r1
    4f48:	0713      	lsls	r3, r2, #28
    4f4a:	d460      	bmi.n	500e <__sflush_r+0xce>
    4f4c:	684b      	ldr	r3, [r1, #4]
    4f4e:	2b00      	cmp	r3, #0
    4f50:	dc04      	bgt.n	4f5c <__sflush_r+0x1c>
    4f52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4f54:	2b00      	cmp	r3, #0
    4f56:	dc01      	bgt.n	4f5c <__sflush_r+0x1c>
    4f58:	2000      	movs	r0, #0
    4f5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4f5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4f5e:	2f00      	cmp	r7, #0
    4f60:	d0fa      	beq.n	4f58 <__sflush_r+0x18>
    4f62:	2300      	movs	r3, #0
    4f64:	682e      	ldr	r6, [r5, #0]
    4f66:	602b      	str	r3, [r5, #0]
    4f68:	2380      	movs	r3, #128	; 0x80
    4f6a:	015b      	lsls	r3, r3, #5
    4f6c:	401a      	ands	r2, r3
    4f6e:	d034      	beq.n	4fda <__sflush_r+0x9a>
    4f70:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4f72:	89a3      	ldrh	r3, [r4, #12]
    4f74:	075b      	lsls	r3, r3, #29
    4f76:	d506      	bpl.n	4f86 <__sflush_r+0x46>
    4f78:	6863      	ldr	r3, [r4, #4]
    4f7a:	1ac0      	subs	r0, r0, r3
    4f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4f7e:	2b00      	cmp	r3, #0
    4f80:	d001      	beq.n	4f86 <__sflush_r+0x46>
    4f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4f84:	1ac0      	subs	r0, r0, r3
    4f86:	0002      	movs	r2, r0
    4f88:	6a21      	ldr	r1, [r4, #32]
    4f8a:	2300      	movs	r3, #0
    4f8c:	0028      	movs	r0, r5
    4f8e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4f90:	47b8      	blx	r7
    4f92:	89a1      	ldrh	r1, [r4, #12]
    4f94:	1c43      	adds	r3, r0, #1
    4f96:	d106      	bne.n	4fa6 <__sflush_r+0x66>
    4f98:	682b      	ldr	r3, [r5, #0]
    4f9a:	2b1d      	cmp	r3, #29
    4f9c:	d831      	bhi.n	5002 <__sflush_r+0xc2>
    4f9e:	4a2c      	ldr	r2, [pc, #176]	; (5050 <__sflush_r+0x110>)
    4fa0:	40da      	lsrs	r2, r3
    4fa2:	07d3      	lsls	r3, r2, #31
    4fa4:	d52d      	bpl.n	5002 <__sflush_r+0xc2>
    4fa6:	2300      	movs	r3, #0
    4fa8:	6063      	str	r3, [r4, #4]
    4faa:	6923      	ldr	r3, [r4, #16]
    4fac:	6023      	str	r3, [r4, #0]
    4fae:	04cb      	lsls	r3, r1, #19
    4fb0:	d505      	bpl.n	4fbe <__sflush_r+0x7e>
    4fb2:	1c43      	adds	r3, r0, #1
    4fb4:	d102      	bne.n	4fbc <__sflush_r+0x7c>
    4fb6:	682b      	ldr	r3, [r5, #0]
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d100      	bne.n	4fbe <__sflush_r+0x7e>
    4fbc:	6560      	str	r0, [r4, #84]	; 0x54
    4fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4fc0:	602e      	str	r6, [r5, #0]
    4fc2:	2900      	cmp	r1, #0
    4fc4:	d0c8      	beq.n	4f58 <__sflush_r+0x18>
    4fc6:	0023      	movs	r3, r4
    4fc8:	3344      	adds	r3, #68	; 0x44
    4fca:	4299      	cmp	r1, r3
    4fcc:	d002      	beq.n	4fd4 <__sflush_r+0x94>
    4fce:	0028      	movs	r0, r5
    4fd0:	f000 fcbc 	bl	594c <_free_r>
    4fd4:	2000      	movs	r0, #0
    4fd6:	6360      	str	r0, [r4, #52]	; 0x34
    4fd8:	e7bf      	b.n	4f5a <__sflush_r+0x1a>
    4fda:	2301      	movs	r3, #1
    4fdc:	6a21      	ldr	r1, [r4, #32]
    4fde:	0028      	movs	r0, r5
    4fe0:	47b8      	blx	r7
    4fe2:	1c43      	adds	r3, r0, #1
    4fe4:	d1c5      	bne.n	4f72 <__sflush_r+0x32>
    4fe6:	682b      	ldr	r3, [r5, #0]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d0c2      	beq.n	4f72 <__sflush_r+0x32>
    4fec:	2b1d      	cmp	r3, #29
    4fee:	d001      	beq.n	4ff4 <__sflush_r+0xb4>
    4ff0:	2b16      	cmp	r3, #22
    4ff2:	d101      	bne.n	4ff8 <__sflush_r+0xb8>
    4ff4:	602e      	str	r6, [r5, #0]
    4ff6:	e7af      	b.n	4f58 <__sflush_r+0x18>
    4ff8:	2340      	movs	r3, #64	; 0x40
    4ffa:	89a2      	ldrh	r2, [r4, #12]
    4ffc:	4313      	orrs	r3, r2
    4ffe:	81a3      	strh	r3, [r4, #12]
    5000:	e7ab      	b.n	4f5a <__sflush_r+0x1a>
    5002:	2340      	movs	r3, #64	; 0x40
    5004:	430b      	orrs	r3, r1
    5006:	2001      	movs	r0, #1
    5008:	81a3      	strh	r3, [r4, #12]
    500a:	4240      	negs	r0, r0
    500c:	e7a5      	b.n	4f5a <__sflush_r+0x1a>
    500e:	690f      	ldr	r7, [r1, #16]
    5010:	2f00      	cmp	r7, #0
    5012:	d0a1      	beq.n	4f58 <__sflush_r+0x18>
    5014:	680b      	ldr	r3, [r1, #0]
    5016:	600f      	str	r7, [r1, #0]
    5018:	1bdb      	subs	r3, r3, r7
    501a:	9301      	str	r3, [sp, #4]
    501c:	2300      	movs	r3, #0
    501e:	0792      	lsls	r2, r2, #30
    5020:	d100      	bne.n	5024 <__sflush_r+0xe4>
    5022:	694b      	ldr	r3, [r1, #20]
    5024:	60a3      	str	r3, [r4, #8]
    5026:	9b01      	ldr	r3, [sp, #4]
    5028:	2b00      	cmp	r3, #0
    502a:	dc00      	bgt.n	502e <__sflush_r+0xee>
    502c:	e794      	b.n	4f58 <__sflush_r+0x18>
    502e:	9b01      	ldr	r3, [sp, #4]
    5030:	003a      	movs	r2, r7
    5032:	6a21      	ldr	r1, [r4, #32]
    5034:	0028      	movs	r0, r5
    5036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5038:	47b0      	blx	r6
    503a:	2800      	cmp	r0, #0
    503c:	dc03      	bgt.n	5046 <__sflush_r+0x106>
    503e:	2340      	movs	r3, #64	; 0x40
    5040:	89a2      	ldrh	r2, [r4, #12]
    5042:	4313      	orrs	r3, r2
    5044:	e7df      	b.n	5006 <__sflush_r+0xc6>
    5046:	9b01      	ldr	r3, [sp, #4]
    5048:	183f      	adds	r7, r7, r0
    504a:	1a1b      	subs	r3, r3, r0
    504c:	9301      	str	r3, [sp, #4]
    504e:	e7ea      	b.n	5026 <__sflush_r+0xe6>
    5050:	20400001 	.word	0x20400001

00005054 <_fflush_r>:
    5054:	690b      	ldr	r3, [r1, #16]
    5056:	b570      	push	{r4, r5, r6, lr}
    5058:	0005      	movs	r5, r0
    505a:	000c      	movs	r4, r1
    505c:	2b00      	cmp	r3, #0
    505e:	d101      	bne.n	5064 <_fflush_r+0x10>
    5060:	2000      	movs	r0, #0
    5062:	bd70      	pop	{r4, r5, r6, pc}
    5064:	2800      	cmp	r0, #0
    5066:	d004      	beq.n	5072 <_fflush_r+0x1e>
    5068:	6983      	ldr	r3, [r0, #24]
    506a:	2b00      	cmp	r3, #0
    506c:	d101      	bne.n	5072 <_fflush_r+0x1e>
    506e:	f000 f85f 	bl	5130 <__sinit>
    5072:	4b0b      	ldr	r3, [pc, #44]	; (50a0 <_fflush_r+0x4c>)
    5074:	429c      	cmp	r4, r3
    5076:	d109      	bne.n	508c <_fflush_r+0x38>
    5078:	686c      	ldr	r4, [r5, #4]
    507a:	220c      	movs	r2, #12
    507c:	5ea3      	ldrsh	r3, [r4, r2]
    507e:	2b00      	cmp	r3, #0
    5080:	d0ee      	beq.n	5060 <_fflush_r+0xc>
    5082:	0021      	movs	r1, r4
    5084:	0028      	movs	r0, r5
    5086:	f7ff ff5b 	bl	4f40 <__sflush_r>
    508a:	e7ea      	b.n	5062 <_fflush_r+0xe>
    508c:	4b05      	ldr	r3, [pc, #20]	; (50a4 <_fflush_r+0x50>)
    508e:	429c      	cmp	r4, r3
    5090:	d101      	bne.n	5096 <_fflush_r+0x42>
    5092:	68ac      	ldr	r4, [r5, #8]
    5094:	e7f1      	b.n	507a <_fflush_r+0x26>
    5096:	4b04      	ldr	r3, [pc, #16]	; (50a8 <_fflush_r+0x54>)
    5098:	429c      	cmp	r4, r3
    509a:	d1ee      	bne.n	507a <_fflush_r+0x26>
    509c:	68ec      	ldr	r4, [r5, #12]
    509e:	e7ec      	b.n	507a <_fflush_r+0x26>
    50a0:	00008c1c 	.word	0x00008c1c
    50a4:	00008c3c 	.word	0x00008c3c
    50a8:	00008bfc 	.word	0x00008bfc

000050ac <_cleanup_r>:
    50ac:	b510      	push	{r4, lr}
    50ae:	4902      	ldr	r1, [pc, #8]	; (50b8 <_cleanup_r+0xc>)
    50b0:	f000 f8b2 	bl	5218 <_fwalk_reent>
    50b4:	bd10      	pop	{r4, pc}
    50b6:	46c0      	nop			; (mov r8, r8)
    50b8:	00005055 	.word	0x00005055

000050bc <std.isra.0>:
    50bc:	2300      	movs	r3, #0
    50be:	b510      	push	{r4, lr}
    50c0:	0004      	movs	r4, r0
    50c2:	6003      	str	r3, [r0, #0]
    50c4:	6043      	str	r3, [r0, #4]
    50c6:	6083      	str	r3, [r0, #8]
    50c8:	8181      	strh	r1, [r0, #12]
    50ca:	6643      	str	r3, [r0, #100]	; 0x64
    50cc:	81c2      	strh	r2, [r0, #14]
    50ce:	6103      	str	r3, [r0, #16]
    50d0:	6143      	str	r3, [r0, #20]
    50d2:	6183      	str	r3, [r0, #24]
    50d4:	0019      	movs	r1, r3
    50d6:	2208      	movs	r2, #8
    50d8:	305c      	adds	r0, #92	; 0x5c
    50da:	f7fe fa3e 	bl	355a <memset>
    50de:	4b05      	ldr	r3, [pc, #20]	; (50f4 <std.isra.0+0x38>)
    50e0:	6224      	str	r4, [r4, #32]
    50e2:	6263      	str	r3, [r4, #36]	; 0x24
    50e4:	4b04      	ldr	r3, [pc, #16]	; (50f8 <std.isra.0+0x3c>)
    50e6:	62a3      	str	r3, [r4, #40]	; 0x28
    50e8:	4b04      	ldr	r3, [pc, #16]	; (50fc <std.isra.0+0x40>)
    50ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    50ec:	4b04      	ldr	r3, [pc, #16]	; (5100 <std.isra.0+0x44>)
    50ee:	6323      	str	r3, [r4, #48]	; 0x30
    50f0:	bd10      	pop	{r4, pc}
    50f2:	46c0      	nop			; (mov r8, r8)
    50f4:	00005d49 	.word	0x00005d49
    50f8:	00005d71 	.word	0x00005d71
    50fc:	00005da9 	.word	0x00005da9
    5100:	00005dd5 	.word	0x00005dd5

00005104 <__sfmoreglue>:
    5104:	b570      	push	{r4, r5, r6, lr}
    5106:	2568      	movs	r5, #104	; 0x68
    5108:	1e4a      	subs	r2, r1, #1
    510a:	4355      	muls	r5, r2
    510c:	000e      	movs	r6, r1
    510e:	0029      	movs	r1, r5
    5110:	3174      	adds	r1, #116	; 0x74
    5112:	f000 fc65 	bl	59e0 <_malloc_r>
    5116:	1e04      	subs	r4, r0, #0
    5118:	d008      	beq.n	512c <__sfmoreglue+0x28>
    511a:	2100      	movs	r1, #0
    511c:	002a      	movs	r2, r5
    511e:	6001      	str	r1, [r0, #0]
    5120:	6046      	str	r6, [r0, #4]
    5122:	300c      	adds	r0, #12
    5124:	60a0      	str	r0, [r4, #8]
    5126:	3268      	adds	r2, #104	; 0x68
    5128:	f7fe fa17 	bl	355a <memset>
    512c:	0020      	movs	r0, r4
    512e:	bd70      	pop	{r4, r5, r6, pc}

00005130 <__sinit>:
    5130:	6983      	ldr	r3, [r0, #24]
    5132:	b513      	push	{r0, r1, r4, lr}
    5134:	0004      	movs	r4, r0
    5136:	2b00      	cmp	r3, #0
    5138:	d128      	bne.n	518c <__sinit+0x5c>
    513a:	6483      	str	r3, [r0, #72]	; 0x48
    513c:	64c3      	str	r3, [r0, #76]	; 0x4c
    513e:	6503      	str	r3, [r0, #80]	; 0x50
    5140:	4b13      	ldr	r3, [pc, #76]	; (5190 <__sinit+0x60>)
    5142:	4a14      	ldr	r2, [pc, #80]	; (5194 <__sinit+0x64>)
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	6282      	str	r2, [r0, #40]	; 0x28
    5148:	9301      	str	r3, [sp, #4]
    514a:	4298      	cmp	r0, r3
    514c:	d101      	bne.n	5152 <__sinit+0x22>
    514e:	2301      	movs	r3, #1
    5150:	6183      	str	r3, [r0, #24]
    5152:	0020      	movs	r0, r4
    5154:	f000 f820 	bl	5198 <__sfp>
    5158:	6060      	str	r0, [r4, #4]
    515a:	0020      	movs	r0, r4
    515c:	f000 f81c 	bl	5198 <__sfp>
    5160:	60a0      	str	r0, [r4, #8]
    5162:	0020      	movs	r0, r4
    5164:	f000 f818 	bl	5198 <__sfp>
    5168:	2200      	movs	r2, #0
    516a:	60e0      	str	r0, [r4, #12]
    516c:	2104      	movs	r1, #4
    516e:	6860      	ldr	r0, [r4, #4]
    5170:	f7ff ffa4 	bl	50bc <std.isra.0>
    5174:	2201      	movs	r2, #1
    5176:	2109      	movs	r1, #9
    5178:	68a0      	ldr	r0, [r4, #8]
    517a:	f7ff ff9f 	bl	50bc <std.isra.0>
    517e:	2202      	movs	r2, #2
    5180:	2112      	movs	r1, #18
    5182:	68e0      	ldr	r0, [r4, #12]
    5184:	f7ff ff9a 	bl	50bc <std.isra.0>
    5188:	2301      	movs	r3, #1
    518a:	61a3      	str	r3, [r4, #24]
    518c:	bd13      	pop	{r0, r1, r4, pc}
    518e:	46c0      	nop			; (mov r8, r8)
    5190:	00008bb4 	.word	0x00008bb4
    5194:	000050ad 	.word	0x000050ad

00005198 <__sfp>:
    5198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    519a:	4b1e      	ldr	r3, [pc, #120]	; (5214 <__sfp+0x7c>)
    519c:	0007      	movs	r7, r0
    519e:	681e      	ldr	r6, [r3, #0]
    51a0:	69b3      	ldr	r3, [r6, #24]
    51a2:	2b00      	cmp	r3, #0
    51a4:	d102      	bne.n	51ac <__sfp+0x14>
    51a6:	0030      	movs	r0, r6
    51a8:	f7ff ffc2 	bl	5130 <__sinit>
    51ac:	3648      	adds	r6, #72	; 0x48
    51ae:	68b4      	ldr	r4, [r6, #8]
    51b0:	6873      	ldr	r3, [r6, #4]
    51b2:	3b01      	subs	r3, #1
    51b4:	d504      	bpl.n	51c0 <__sfp+0x28>
    51b6:	6833      	ldr	r3, [r6, #0]
    51b8:	2b00      	cmp	r3, #0
    51ba:	d007      	beq.n	51cc <__sfp+0x34>
    51bc:	6836      	ldr	r6, [r6, #0]
    51be:	e7f6      	b.n	51ae <__sfp+0x16>
    51c0:	220c      	movs	r2, #12
    51c2:	5ea5      	ldrsh	r5, [r4, r2]
    51c4:	2d00      	cmp	r5, #0
    51c6:	d00d      	beq.n	51e4 <__sfp+0x4c>
    51c8:	3468      	adds	r4, #104	; 0x68
    51ca:	e7f2      	b.n	51b2 <__sfp+0x1a>
    51cc:	2104      	movs	r1, #4
    51ce:	0038      	movs	r0, r7
    51d0:	f7ff ff98 	bl	5104 <__sfmoreglue>
    51d4:	6030      	str	r0, [r6, #0]
    51d6:	2800      	cmp	r0, #0
    51d8:	d1f0      	bne.n	51bc <__sfp+0x24>
    51da:	230c      	movs	r3, #12
    51dc:	0004      	movs	r4, r0
    51de:	603b      	str	r3, [r7, #0]
    51e0:	0020      	movs	r0, r4
    51e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51e4:	2301      	movs	r3, #1
    51e6:	0020      	movs	r0, r4
    51e8:	425b      	negs	r3, r3
    51ea:	81e3      	strh	r3, [r4, #14]
    51ec:	3302      	adds	r3, #2
    51ee:	81a3      	strh	r3, [r4, #12]
    51f0:	6665      	str	r5, [r4, #100]	; 0x64
    51f2:	6025      	str	r5, [r4, #0]
    51f4:	60a5      	str	r5, [r4, #8]
    51f6:	6065      	str	r5, [r4, #4]
    51f8:	6125      	str	r5, [r4, #16]
    51fa:	6165      	str	r5, [r4, #20]
    51fc:	61a5      	str	r5, [r4, #24]
    51fe:	2208      	movs	r2, #8
    5200:	0029      	movs	r1, r5
    5202:	305c      	adds	r0, #92	; 0x5c
    5204:	f7fe f9a9 	bl	355a <memset>
    5208:	6365      	str	r5, [r4, #52]	; 0x34
    520a:	63a5      	str	r5, [r4, #56]	; 0x38
    520c:	64a5      	str	r5, [r4, #72]	; 0x48
    520e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5210:	e7e6      	b.n	51e0 <__sfp+0x48>
    5212:	46c0      	nop			; (mov r8, r8)
    5214:	00008bb4 	.word	0x00008bb4

00005218 <_fwalk_reent>:
    5218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    521a:	0004      	movs	r4, r0
    521c:	0007      	movs	r7, r0
    521e:	2600      	movs	r6, #0
    5220:	9101      	str	r1, [sp, #4]
    5222:	3448      	adds	r4, #72	; 0x48
    5224:	2c00      	cmp	r4, #0
    5226:	d101      	bne.n	522c <_fwalk_reent+0x14>
    5228:	0030      	movs	r0, r6
    522a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    522c:	6863      	ldr	r3, [r4, #4]
    522e:	68a5      	ldr	r5, [r4, #8]
    5230:	9300      	str	r3, [sp, #0]
    5232:	9b00      	ldr	r3, [sp, #0]
    5234:	3b01      	subs	r3, #1
    5236:	9300      	str	r3, [sp, #0]
    5238:	d501      	bpl.n	523e <_fwalk_reent+0x26>
    523a:	6824      	ldr	r4, [r4, #0]
    523c:	e7f2      	b.n	5224 <_fwalk_reent+0xc>
    523e:	89ab      	ldrh	r3, [r5, #12]
    5240:	2b01      	cmp	r3, #1
    5242:	d908      	bls.n	5256 <_fwalk_reent+0x3e>
    5244:	220e      	movs	r2, #14
    5246:	5eab      	ldrsh	r3, [r5, r2]
    5248:	3301      	adds	r3, #1
    524a:	d004      	beq.n	5256 <_fwalk_reent+0x3e>
    524c:	0029      	movs	r1, r5
    524e:	0038      	movs	r0, r7
    5250:	9b01      	ldr	r3, [sp, #4]
    5252:	4798      	blx	r3
    5254:	4306      	orrs	r6, r0
    5256:	3568      	adds	r5, #104	; 0x68
    5258:	e7eb      	b.n	5232 <_fwalk_reent+0x1a>
	...

0000525c <_localeconv_r>:
    525c:	4b03      	ldr	r3, [pc, #12]	; (526c <_localeconv_r+0x10>)
    525e:	681b      	ldr	r3, [r3, #0]
    5260:	6a18      	ldr	r0, [r3, #32]
    5262:	2800      	cmp	r0, #0
    5264:	d100      	bne.n	5268 <_localeconv_r+0xc>
    5266:	4802      	ldr	r0, [pc, #8]	; (5270 <_localeconv_r+0x14>)
    5268:	30f0      	adds	r0, #240	; 0xf0
    526a:	4770      	bx	lr
    526c:	2000000c 	.word	0x2000000c
    5270:	20000070 	.word	0x20000070

00005274 <__swhatbuf_r>:
    5274:	b570      	push	{r4, r5, r6, lr}
    5276:	000e      	movs	r6, r1
    5278:	001d      	movs	r5, r3
    527a:	230e      	movs	r3, #14
    527c:	5ec9      	ldrsh	r1, [r1, r3]
    527e:	b090      	sub	sp, #64	; 0x40
    5280:	0014      	movs	r4, r2
    5282:	2900      	cmp	r1, #0
    5284:	da07      	bge.n	5296 <__swhatbuf_r+0x22>
    5286:	2300      	movs	r3, #0
    5288:	602b      	str	r3, [r5, #0]
    528a:	89b3      	ldrh	r3, [r6, #12]
    528c:	061b      	lsls	r3, r3, #24
    528e:	d411      	bmi.n	52b4 <__swhatbuf_r+0x40>
    5290:	2380      	movs	r3, #128	; 0x80
    5292:	00db      	lsls	r3, r3, #3
    5294:	e00f      	b.n	52b6 <__swhatbuf_r+0x42>
    5296:	aa01      	add	r2, sp, #4
    5298:	f000 fdc8 	bl	5e2c <_fstat_r>
    529c:	2800      	cmp	r0, #0
    529e:	dbf2      	blt.n	5286 <__swhatbuf_r+0x12>
    52a0:	22f0      	movs	r2, #240	; 0xf0
    52a2:	9b02      	ldr	r3, [sp, #8]
    52a4:	0212      	lsls	r2, r2, #8
    52a6:	4013      	ands	r3, r2
    52a8:	4a05      	ldr	r2, [pc, #20]	; (52c0 <__swhatbuf_r+0x4c>)
    52aa:	189b      	adds	r3, r3, r2
    52ac:	425a      	negs	r2, r3
    52ae:	4153      	adcs	r3, r2
    52b0:	602b      	str	r3, [r5, #0]
    52b2:	e7ed      	b.n	5290 <__swhatbuf_r+0x1c>
    52b4:	2340      	movs	r3, #64	; 0x40
    52b6:	2000      	movs	r0, #0
    52b8:	6023      	str	r3, [r4, #0]
    52ba:	b010      	add	sp, #64	; 0x40
    52bc:	bd70      	pop	{r4, r5, r6, pc}
    52be:	46c0      	nop			; (mov r8, r8)
    52c0:	ffffe000 	.word	0xffffe000

000052c4 <__smakebuf_r>:
    52c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    52c6:	2602      	movs	r6, #2
    52c8:	898b      	ldrh	r3, [r1, #12]
    52ca:	0005      	movs	r5, r0
    52cc:	000c      	movs	r4, r1
    52ce:	4233      	tst	r3, r6
    52d0:	d006      	beq.n	52e0 <__smakebuf_r+0x1c>
    52d2:	0023      	movs	r3, r4
    52d4:	3347      	adds	r3, #71	; 0x47
    52d6:	6023      	str	r3, [r4, #0]
    52d8:	6123      	str	r3, [r4, #16]
    52da:	2301      	movs	r3, #1
    52dc:	6163      	str	r3, [r4, #20]
    52de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    52e0:	ab01      	add	r3, sp, #4
    52e2:	466a      	mov	r2, sp
    52e4:	f7ff ffc6 	bl	5274 <__swhatbuf_r>
    52e8:	9900      	ldr	r1, [sp, #0]
    52ea:	0007      	movs	r7, r0
    52ec:	0028      	movs	r0, r5
    52ee:	f000 fb77 	bl	59e0 <_malloc_r>
    52f2:	2800      	cmp	r0, #0
    52f4:	d106      	bne.n	5304 <__smakebuf_r+0x40>
    52f6:	220c      	movs	r2, #12
    52f8:	5ea3      	ldrsh	r3, [r4, r2]
    52fa:	059a      	lsls	r2, r3, #22
    52fc:	d4ef      	bmi.n	52de <__smakebuf_r+0x1a>
    52fe:	431e      	orrs	r6, r3
    5300:	81a6      	strh	r6, [r4, #12]
    5302:	e7e6      	b.n	52d2 <__smakebuf_r+0xe>
    5304:	4b0d      	ldr	r3, [pc, #52]	; (533c <__smakebuf_r+0x78>)
    5306:	62ab      	str	r3, [r5, #40]	; 0x28
    5308:	2380      	movs	r3, #128	; 0x80
    530a:	89a2      	ldrh	r2, [r4, #12]
    530c:	6020      	str	r0, [r4, #0]
    530e:	4313      	orrs	r3, r2
    5310:	81a3      	strh	r3, [r4, #12]
    5312:	9b00      	ldr	r3, [sp, #0]
    5314:	6120      	str	r0, [r4, #16]
    5316:	6163      	str	r3, [r4, #20]
    5318:	9b01      	ldr	r3, [sp, #4]
    531a:	2b00      	cmp	r3, #0
    531c:	d00a      	beq.n	5334 <__smakebuf_r+0x70>
    531e:	230e      	movs	r3, #14
    5320:	5ee1      	ldrsh	r1, [r4, r3]
    5322:	0028      	movs	r0, r5
    5324:	f000 fd94 	bl	5e50 <_isatty_r>
    5328:	2800      	cmp	r0, #0
    532a:	d003      	beq.n	5334 <__smakebuf_r+0x70>
    532c:	2301      	movs	r3, #1
    532e:	89a2      	ldrh	r2, [r4, #12]
    5330:	4313      	orrs	r3, r2
    5332:	81a3      	strh	r3, [r4, #12]
    5334:	89a0      	ldrh	r0, [r4, #12]
    5336:	4338      	orrs	r0, r7
    5338:	81a0      	strh	r0, [r4, #12]
    533a:	e7d0      	b.n	52de <__smakebuf_r+0x1a>
    533c:	000050ad 	.word	0x000050ad

00005340 <malloc>:
    5340:	b510      	push	{r4, lr}
    5342:	4b03      	ldr	r3, [pc, #12]	; (5350 <malloc+0x10>)
    5344:	0001      	movs	r1, r0
    5346:	6818      	ldr	r0, [r3, #0]
    5348:	f000 fb4a 	bl	59e0 <_malloc_r>
    534c:	bd10      	pop	{r4, pc}
    534e:	46c0      	nop			; (mov r8, r8)
    5350:	2000000c 	.word	0x2000000c

00005354 <memchr>:
    5354:	b2c9      	uxtb	r1, r1
    5356:	1882      	adds	r2, r0, r2
    5358:	4290      	cmp	r0, r2
    535a:	d101      	bne.n	5360 <memchr+0xc>
    535c:	2000      	movs	r0, #0
    535e:	4770      	bx	lr
    5360:	7803      	ldrb	r3, [r0, #0]
    5362:	428b      	cmp	r3, r1
    5364:	d0fb      	beq.n	535e <memchr+0xa>
    5366:	3001      	adds	r0, #1
    5368:	e7f6      	b.n	5358 <memchr+0x4>

0000536a <_Balloc>:
    536a:	b570      	push	{r4, r5, r6, lr}
    536c:	6a46      	ldr	r6, [r0, #36]	; 0x24
    536e:	0004      	movs	r4, r0
    5370:	000d      	movs	r5, r1
    5372:	2e00      	cmp	r6, #0
    5374:	d107      	bne.n	5386 <_Balloc+0x1c>
    5376:	2010      	movs	r0, #16
    5378:	f7ff ffe2 	bl	5340 <malloc>
    537c:	6260      	str	r0, [r4, #36]	; 0x24
    537e:	6046      	str	r6, [r0, #4]
    5380:	6086      	str	r6, [r0, #8]
    5382:	6006      	str	r6, [r0, #0]
    5384:	60c6      	str	r6, [r0, #12]
    5386:	6a66      	ldr	r6, [r4, #36]	; 0x24
    5388:	68f3      	ldr	r3, [r6, #12]
    538a:	2b00      	cmp	r3, #0
    538c:	d013      	beq.n	53b6 <_Balloc+0x4c>
    538e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5390:	00aa      	lsls	r2, r5, #2
    5392:	68db      	ldr	r3, [r3, #12]
    5394:	189b      	adds	r3, r3, r2
    5396:	6818      	ldr	r0, [r3, #0]
    5398:	2800      	cmp	r0, #0
    539a:	d118      	bne.n	53ce <_Balloc+0x64>
    539c:	2101      	movs	r1, #1
    539e:	000e      	movs	r6, r1
    53a0:	40ae      	lsls	r6, r5
    53a2:	1d72      	adds	r2, r6, #5
    53a4:	0092      	lsls	r2, r2, #2
    53a6:	0020      	movs	r0, r4
    53a8:	f000 fac2 	bl	5930 <_calloc_r>
    53ac:	2800      	cmp	r0, #0
    53ae:	d00c      	beq.n	53ca <_Balloc+0x60>
    53b0:	6045      	str	r5, [r0, #4]
    53b2:	6086      	str	r6, [r0, #8]
    53b4:	e00d      	b.n	53d2 <_Balloc+0x68>
    53b6:	2221      	movs	r2, #33	; 0x21
    53b8:	2104      	movs	r1, #4
    53ba:	0020      	movs	r0, r4
    53bc:	f000 fab8 	bl	5930 <_calloc_r>
    53c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53c2:	60f0      	str	r0, [r6, #12]
    53c4:	68db      	ldr	r3, [r3, #12]
    53c6:	2b00      	cmp	r3, #0
    53c8:	d1e1      	bne.n	538e <_Balloc+0x24>
    53ca:	2000      	movs	r0, #0
    53cc:	bd70      	pop	{r4, r5, r6, pc}
    53ce:	6802      	ldr	r2, [r0, #0]
    53d0:	601a      	str	r2, [r3, #0]
    53d2:	2300      	movs	r3, #0
    53d4:	6103      	str	r3, [r0, #16]
    53d6:	60c3      	str	r3, [r0, #12]
    53d8:	e7f8      	b.n	53cc <_Balloc+0x62>

000053da <_Bfree>:
    53da:	b570      	push	{r4, r5, r6, lr}
    53dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    53de:	0006      	movs	r6, r0
    53e0:	000d      	movs	r5, r1
    53e2:	2c00      	cmp	r4, #0
    53e4:	d107      	bne.n	53f6 <_Bfree+0x1c>
    53e6:	2010      	movs	r0, #16
    53e8:	f7ff ffaa 	bl	5340 <malloc>
    53ec:	6270      	str	r0, [r6, #36]	; 0x24
    53ee:	6044      	str	r4, [r0, #4]
    53f0:	6084      	str	r4, [r0, #8]
    53f2:	6004      	str	r4, [r0, #0]
    53f4:	60c4      	str	r4, [r0, #12]
    53f6:	2d00      	cmp	r5, #0
    53f8:	d007      	beq.n	540a <_Bfree+0x30>
    53fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
    53fc:	686a      	ldr	r2, [r5, #4]
    53fe:	68db      	ldr	r3, [r3, #12]
    5400:	0092      	lsls	r2, r2, #2
    5402:	189b      	adds	r3, r3, r2
    5404:	681a      	ldr	r2, [r3, #0]
    5406:	602a      	str	r2, [r5, #0]
    5408:	601d      	str	r5, [r3, #0]
    540a:	bd70      	pop	{r4, r5, r6, pc}

0000540c <__multadd>:
    540c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    540e:	001e      	movs	r6, r3
    5410:	2314      	movs	r3, #20
    5412:	469c      	mov	ip, r3
    5414:	0007      	movs	r7, r0
    5416:	000c      	movs	r4, r1
    5418:	2000      	movs	r0, #0
    541a:	690d      	ldr	r5, [r1, #16]
    541c:	448c      	add	ip, r1
    541e:	4663      	mov	r3, ip
    5420:	8819      	ldrh	r1, [r3, #0]
    5422:	681b      	ldr	r3, [r3, #0]
    5424:	4351      	muls	r1, r2
    5426:	0c1b      	lsrs	r3, r3, #16
    5428:	4353      	muls	r3, r2
    542a:	1989      	adds	r1, r1, r6
    542c:	0c0e      	lsrs	r6, r1, #16
    542e:	199b      	adds	r3, r3, r6
    5430:	b289      	uxth	r1, r1
    5432:	0c1e      	lsrs	r6, r3, #16
    5434:	041b      	lsls	r3, r3, #16
    5436:	185b      	adds	r3, r3, r1
    5438:	4661      	mov	r1, ip
    543a:	3001      	adds	r0, #1
    543c:	c108      	stmia	r1!, {r3}
    543e:	468c      	mov	ip, r1
    5440:	4285      	cmp	r5, r0
    5442:	dcec      	bgt.n	541e <__multadd+0x12>
    5444:	2e00      	cmp	r6, #0
    5446:	d01b      	beq.n	5480 <__multadd+0x74>
    5448:	68a3      	ldr	r3, [r4, #8]
    544a:	429d      	cmp	r5, r3
    544c:	db12      	blt.n	5474 <__multadd+0x68>
    544e:	6863      	ldr	r3, [r4, #4]
    5450:	0038      	movs	r0, r7
    5452:	1c59      	adds	r1, r3, #1
    5454:	f7ff ff89 	bl	536a <_Balloc>
    5458:	0021      	movs	r1, r4
    545a:	6923      	ldr	r3, [r4, #16]
    545c:	9001      	str	r0, [sp, #4]
    545e:	1c9a      	adds	r2, r3, #2
    5460:	0092      	lsls	r2, r2, #2
    5462:	310c      	adds	r1, #12
    5464:	300c      	adds	r0, #12
    5466:	f7fe f86f 	bl	3548 <memcpy>
    546a:	0021      	movs	r1, r4
    546c:	0038      	movs	r0, r7
    546e:	f7ff ffb4 	bl	53da <_Bfree>
    5472:	9c01      	ldr	r4, [sp, #4]
    5474:	1d2b      	adds	r3, r5, #4
    5476:	009b      	lsls	r3, r3, #2
    5478:	18e3      	adds	r3, r4, r3
    547a:	3501      	adds	r5, #1
    547c:	605e      	str	r6, [r3, #4]
    547e:	6125      	str	r5, [r4, #16]
    5480:	0020      	movs	r0, r4
    5482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005484 <__hi0bits>:
    5484:	0003      	movs	r3, r0
    5486:	0c02      	lsrs	r2, r0, #16
    5488:	2000      	movs	r0, #0
    548a:	4282      	cmp	r2, r0
    548c:	d101      	bne.n	5492 <__hi0bits+0xe>
    548e:	041b      	lsls	r3, r3, #16
    5490:	3010      	adds	r0, #16
    5492:	0e1a      	lsrs	r2, r3, #24
    5494:	d101      	bne.n	549a <__hi0bits+0x16>
    5496:	3008      	adds	r0, #8
    5498:	021b      	lsls	r3, r3, #8
    549a:	0f1a      	lsrs	r2, r3, #28
    549c:	d101      	bne.n	54a2 <__hi0bits+0x1e>
    549e:	3004      	adds	r0, #4
    54a0:	011b      	lsls	r3, r3, #4
    54a2:	0f9a      	lsrs	r2, r3, #30
    54a4:	d101      	bne.n	54aa <__hi0bits+0x26>
    54a6:	3002      	adds	r0, #2
    54a8:	009b      	lsls	r3, r3, #2
    54aa:	2b00      	cmp	r3, #0
    54ac:	db03      	blt.n	54b6 <__hi0bits+0x32>
    54ae:	3001      	adds	r0, #1
    54b0:	005b      	lsls	r3, r3, #1
    54b2:	d400      	bmi.n	54b6 <__hi0bits+0x32>
    54b4:	2020      	movs	r0, #32
    54b6:	4770      	bx	lr

000054b8 <__lo0bits>:
    54b8:	2207      	movs	r2, #7
    54ba:	6803      	ldr	r3, [r0, #0]
    54bc:	b510      	push	{r4, lr}
    54be:	0001      	movs	r1, r0
    54c0:	401a      	ands	r2, r3
    54c2:	d00d      	beq.n	54e0 <__lo0bits+0x28>
    54c4:	2401      	movs	r4, #1
    54c6:	2000      	movs	r0, #0
    54c8:	4223      	tst	r3, r4
    54ca:	d105      	bne.n	54d8 <__lo0bits+0x20>
    54cc:	3002      	adds	r0, #2
    54ce:	4203      	tst	r3, r0
    54d0:	d003      	beq.n	54da <__lo0bits+0x22>
    54d2:	40e3      	lsrs	r3, r4
    54d4:	0020      	movs	r0, r4
    54d6:	600b      	str	r3, [r1, #0]
    54d8:	bd10      	pop	{r4, pc}
    54da:	089b      	lsrs	r3, r3, #2
    54dc:	600b      	str	r3, [r1, #0]
    54de:	e7fb      	b.n	54d8 <__lo0bits+0x20>
    54e0:	b29c      	uxth	r4, r3
    54e2:	0010      	movs	r0, r2
    54e4:	2c00      	cmp	r4, #0
    54e6:	d101      	bne.n	54ec <__lo0bits+0x34>
    54e8:	2010      	movs	r0, #16
    54ea:	0c1b      	lsrs	r3, r3, #16
    54ec:	b2da      	uxtb	r2, r3
    54ee:	2a00      	cmp	r2, #0
    54f0:	d101      	bne.n	54f6 <__lo0bits+0x3e>
    54f2:	3008      	adds	r0, #8
    54f4:	0a1b      	lsrs	r3, r3, #8
    54f6:	071a      	lsls	r2, r3, #28
    54f8:	d101      	bne.n	54fe <__lo0bits+0x46>
    54fa:	3004      	adds	r0, #4
    54fc:	091b      	lsrs	r3, r3, #4
    54fe:	079a      	lsls	r2, r3, #30
    5500:	d101      	bne.n	5506 <__lo0bits+0x4e>
    5502:	3002      	adds	r0, #2
    5504:	089b      	lsrs	r3, r3, #2
    5506:	07da      	lsls	r2, r3, #31
    5508:	d4e8      	bmi.n	54dc <__lo0bits+0x24>
    550a:	085b      	lsrs	r3, r3, #1
    550c:	d001      	beq.n	5512 <__lo0bits+0x5a>
    550e:	3001      	adds	r0, #1
    5510:	e7e4      	b.n	54dc <__lo0bits+0x24>
    5512:	2020      	movs	r0, #32
    5514:	e7e0      	b.n	54d8 <__lo0bits+0x20>

00005516 <__i2b>:
    5516:	b510      	push	{r4, lr}
    5518:	000c      	movs	r4, r1
    551a:	2101      	movs	r1, #1
    551c:	f7ff ff25 	bl	536a <_Balloc>
    5520:	2301      	movs	r3, #1
    5522:	6144      	str	r4, [r0, #20]
    5524:	6103      	str	r3, [r0, #16]
    5526:	bd10      	pop	{r4, pc}

00005528 <__multiply>:
    5528:	b5f0      	push	{r4, r5, r6, r7, lr}
    552a:	690b      	ldr	r3, [r1, #16]
    552c:	0015      	movs	r5, r2
    552e:	6912      	ldr	r2, [r2, #16]
    5530:	b089      	sub	sp, #36	; 0x24
    5532:	000c      	movs	r4, r1
    5534:	4293      	cmp	r3, r2
    5536:	da01      	bge.n	553c <__multiply+0x14>
    5538:	002c      	movs	r4, r5
    553a:	000d      	movs	r5, r1
    553c:	6927      	ldr	r7, [r4, #16]
    553e:	692e      	ldr	r6, [r5, #16]
    5540:	68a2      	ldr	r2, [r4, #8]
    5542:	19bb      	adds	r3, r7, r6
    5544:	6861      	ldr	r1, [r4, #4]
    5546:	9301      	str	r3, [sp, #4]
    5548:	4293      	cmp	r3, r2
    554a:	dd00      	ble.n	554e <__multiply+0x26>
    554c:	3101      	adds	r1, #1
    554e:	f7ff ff0c 	bl	536a <_Balloc>
    5552:	0003      	movs	r3, r0
    5554:	3314      	adds	r3, #20
    5556:	9300      	str	r3, [sp, #0]
    5558:	9a00      	ldr	r2, [sp, #0]
    555a:	19bb      	adds	r3, r7, r6
    555c:	4694      	mov	ip, r2
    555e:	009b      	lsls	r3, r3, #2
    5560:	449c      	add	ip, r3
    5562:	0013      	movs	r3, r2
    5564:	2200      	movs	r2, #0
    5566:	9004      	str	r0, [sp, #16]
    5568:	4563      	cmp	r3, ip
    556a:	d31c      	bcc.n	55a6 <__multiply+0x7e>
    556c:	002a      	movs	r2, r5
    556e:	3414      	adds	r4, #20
    5570:	00bf      	lsls	r7, r7, #2
    5572:	19e3      	adds	r3, r4, r7
    5574:	3214      	adds	r2, #20
    5576:	00b6      	lsls	r6, r6, #2
    5578:	9305      	str	r3, [sp, #20]
    557a:	1993      	adds	r3, r2, r6
    557c:	9402      	str	r4, [sp, #8]
    557e:	9306      	str	r3, [sp, #24]
    5580:	9b06      	ldr	r3, [sp, #24]
    5582:	429a      	cmp	r2, r3
    5584:	d311      	bcc.n	55aa <__multiply+0x82>
    5586:	9b01      	ldr	r3, [sp, #4]
    5588:	2b00      	cmp	r3, #0
    558a:	dd06      	ble.n	559a <__multiply+0x72>
    558c:	2304      	movs	r3, #4
    558e:	425b      	negs	r3, r3
    5590:	449c      	add	ip, r3
    5592:	4663      	mov	r3, ip
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	2b00      	cmp	r3, #0
    5598:	d051      	beq.n	563e <__multiply+0x116>
    559a:	9b04      	ldr	r3, [sp, #16]
    559c:	9a01      	ldr	r2, [sp, #4]
    559e:	0018      	movs	r0, r3
    55a0:	611a      	str	r2, [r3, #16]
    55a2:	b009      	add	sp, #36	; 0x24
    55a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55a6:	c304      	stmia	r3!, {r2}
    55a8:	e7de      	b.n	5568 <__multiply+0x40>
    55aa:	8814      	ldrh	r4, [r2, #0]
    55ac:	2c00      	cmp	r4, #0
    55ae:	d01e      	beq.n	55ee <__multiply+0xc6>
    55b0:	2600      	movs	r6, #0
    55b2:	9d00      	ldr	r5, [sp, #0]
    55b4:	9f02      	ldr	r7, [sp, #8]
    55b6:	cf01      	ldmia	r7!, {r0}
    55b8:	9507      	str	r5, [sp, #28]
    55ba:	cd08      	ldmia	r5!, {r3}
    55bc:	9303      	str	r3, [sp, #12]
    55be:	b283      	uxth	r3, r0
    55c0:	4363      	muls	r3, r4
    55c2:	0019      	movs	r1, r3
    55c4:	466b      	mov	r3, sp
    55c6:	0c00      	lsrs	r0, r0, #16
    55c8:	899b      	ldrh	r3, [r3, #12]
    55ca:	4360      	muls	r0, r4
    55cc:	18cb      	adds	r3, r1, r3
    55ce:	9903      	ldr	r1, [sp, #12]
    55d0:	199b      	adds	r3, r3, r6
    55d2:	0c09      	lsrs	r1, r1, #16
    55d4:	1841      	adds	r1, r0, r1
    55d6:	0c18      	lsrs	r0, r3, #16
    55d8:	1809      	adds	r1, r1, r0
    55da:	0c0e      	lsrs	r6, r1, #16
    55dc:	b29b      	uxth	r3, r3
    55de:	0409      	lsls	r1, r1, #16
    55e0:	430b      	orrs	r3, r1
    55e2:	9907      	ldr	r1, [sp, #28]
    55e4:	600b      	str	r3, [r1, #0]
    55e6:	9b05      	ldr	r3, [sp, #20]
    55e8:	42bb      	cmp	r3, r7
    55ea:	d8e4      	bhi.n	55b6 <__multiply+0x8e>
    55ec:	602e      	str	r6, [r5, #0]
    55ee:	6813      	ldr	r3, [r2, #0]
    55f0:	0c1b      	lsrs	r3, r3, #16
    55f2:	9303      	str	r3, [sp, #12]
    55f4:	d01e      	beq.n	5634 <__multiply+0x10c>
    55f6:	2600      	movs	r6, #0
    55f8:	9b00      	ldr	r3, [sp, #0]
    55fa:	9c02      	ldr	r4, [sp, #8]
    55fc:	681b      	ldr	r3, [r3, #0]
    55fe:	9800      	ldr	r0, [sp, #0]
    5600:	0007      	movs	r7, r0
    5602:	8821      	ldrh	r1, [r4, #0]
    5604:	9d03      	ldr	r5, [sp, #12]
    5606:	b29b      	uxth	r3, r3
    5608:	4369      	muls	r1, r5
    560a:	c820      	ldmia	r0!, {r5}
    560c:	0c2d      	lsrs	r5, r5, #16
    560e:	1949      	adds	r1, r1, r5
    5610:	198e      	adds	r6, r1, r6
    5612:	0431      	lsls	r1, r6, #16
    5614:	430b      	orrs	r3, r1
    5616:	603b      	str	r3, [r7, #0]
    5618:	cc08      	ldmia	r4!, {r3}
    561a:	9903      	ldr	r1, [sp, #12]
    561c:	0c1b      	lsrs	r3, r3, #16
    561e:	434b      	muls	r3, r1
    5620:	6879      	ldr	r1, [r7, #4]
    5622:	0c36      	lsrs	r6, r6, #16
    5624:	b289      	uxth	r1, r1
    5626:	185b      	adds	r3, r3, r1
    5628:	9905      	ldr	r1, [sp, #20]
    562a:	199b      	adds	r3, r3, r6
    562c:	0c1e      	lsrs	r6, r3, #16
    562e:	42a1      	cmp	r1, r4
    5630:	d8e6      	bhi.n	5600 <__multiply+0xd8>
    5632:	6003      	str	r3, [r0, #0]
    5634:	9b00      	ldr	r3, [sp, #0]
    5636:	3204      	adds	r2, #4
    5638:	3304      	adds	r3, #4
    563a:	9300      	str	r3, [sp, #0]
    563c:	e7a0      	b.n	5580 <__multiply+0x58>
    563e:	9b01      	ldr	r3, [sp, #4]
    5640:	3b01      	subs	r3, #1
    5642:	9301      	str	r3, [sp, #4]
    5644:	e79f      	b.n	5586 <__multiply+0x5e>
	...

00005648 <__pow5mult>:
    5648:	2303      	movs	r3, #3
    564a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    564c:	4013      	ands	r3, r2
    564e:	0005      	movs	r5, r0
    5650:	000e      	movs	r6, r1
    5652:	0014      	movs	r4, r2
    5654:	2b00      	cmp	r3, #0
    5656:	d008      	beq.n	566a <__pow5mult+0x22>
    5658:	4922      	ldr	r1, [pc, #136]	; (56e4 <__pow5mult+0x9c>)
    565a:	3b01      	subs	r3, #1
    565c:	009a      	lsls	r2, r3, #2
    565e:	5852      	ldr	r2, [r2, r1]
    5660:	2300      	movs	r3, #0
    5662:	0031      	movs	r1, r6
    5664:	f7ff fed2 	bl	540c <__multadd>
    5668:	0006      	movs	r6, r0
    566a:	10a3      	asrs	r3, r4, #2
    566c:	9301      	str	r3, [sp, #4]
    566e:	d036      	beq.n	56de <__pow5mult+0x96>
    5670:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    5672:	2c00      	cmp	r4, #0
    5674:	d107      	bne.n	5686 <__pow5mult+0x3e>
    5676:	2010      	movs	r0, #16
    5678:	f7ff fe62 	bl	5340 <malloc>
    567c:	6268      	str	r0, [r5, #36]	; 0x24
    567e:	6044      	str	r4, [r0, #4]
    5680:	6084      	str	r4, [r0, #8]
    5682:	6004      	str	r4, [r0, #0]
    5684:	60c4      	str	r4, [r0, #12]
    5686:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    5688:	68bc      	ldr	r4, [r7, #8]
    568a:	2c00      	cmp	r4, #0
    568c:	d107      	bne.n	569e <__pow5mult+0x56>
    568e:	4916      	ldr	r1, [pc, #88]	; (56e8 <__pow5mult+0xa0>)
    5690:	0028      	movs	r0, r5
    5692:	f7ff ff40 	bl	5516 <__i2b>
    5696:	2300      	movs	r3, #0
    5698:	0004      	movs	r4, r0
    569a:	60b8      	str	r0, [r7, #8]
    569c:	6003      	str	r3, [r0, #0]
    569e:	2201      	movs	r2, #1
    56a0:	9b01      	ldr	r3, [sp, #4]
    56a2:	4213      	tst	r3, r2
    56a4:	d00a      	beq.n	56bc <__pow5mult+0x74>
    56a6:	0031      	movs	r1, r6
    56a8:	0022      	movs	r2, r4
    56aa:	0028      	movs	r0, r5
    56ac:	f7ff ff3c 	bl	5528 <__multiply>
    56b0:	0007      	movs	r7, r0
    56b2:	0031      	movs	r1, r6
    56b4:	0028      	movs	r0, r5
    56b6:	f7ff fe90 	bl	53da <_Bfree>
    56ba:	003e      	movs	r6, r7
    56bc:	9b01      	ldr	r3, [sp, #4]
    56be:	105b      	asrs	r3, r3, #1
    56c0:	9301      	str	r3, [sp, #4]
    56c2:	d00c      	beq.n	56de <__pow5mult+0x96>
    56c4:	6820      	ldr	r0, [r4, #0]
    56c6:	2800      	cmp	r0, #0
    56c8:	d107      	bne.n	56da <__pow5mult+0x92>
    56ca:	0022      	movs	r2, r4
    56cc:	0021      	movs	r1, r4
    56ce:	0028      	movs	r0, r5
    56d0:	f7ff ff2a 	bl	5528 <__multiply>
    56d4:	2300      	movs	r3, #0
    56d6:	6020      	str	r0, [r4, #0]
    56d8:	6003      	str	r3, [r0, #0]
    56da:	0004      	movs	r4, r0
    56dc:	e7df      	b.n	569e <__pow5mult+0x56>
    56de:	0030      	movs	r0, r6
    56e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    56e2:	46c0      	nop			; (mov r8, r8)
    56e4:	00008d50 	.word	0x00008d50
    56e8:	00000271 	.word	0x00000271

000056ec <__lshift>:
    56ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    56ee:	000d      	movs	r5, r1
    56f0:	0017      	movs	r7, r2
    56f2:	692b      	ldr	r3, [r5, #16]
    56f4:	1154      	asrs	r4, r2, #5
    56f6:	b085      	sub	sp, #20
    56f8:	18e3      	adds	r3, r4, r3
    56fa:	9302      	str	r3, [sp, #8]
    56fc:	3301      	adds	r3, #1
    56fe:	9301      	str	r3, [sp, #4]
    5700:	6849      	ldr	r1, [r1, #4]
    5702:	68ab      	ldr	r3, [r5, #8]
    5704:	9003      	str	r0, [sp, #12]
    5706:	9a01      	ldr	r2, [sp, #4]
    5708:	4293      	cmp	r3, r2
    570a:	db34      	blt.n	5776 <__lshift+0x8a>
    570c:	9803      	ldr	r0, [sp, #12]
    570e:	f7ff fe2c 	bl	536a <_Balloc>
    5712:	2300      	movs	r3, #0
    5714:	0002      	movs	r2, r0
    5716:	0006      	movs	r6, r0
    5718:	0019      	movs	r1, r3
    571a:	3214      	adds	r2, #20
    571c:	42a3      	cmp	r3, r4
    571e:	db2d      	blt.n	577c <__lshift+0x90>
    5720:	43e3      	mvns	r3, r4
    5722:	17db      	asrs	r3, r3, #31
    5724:	401c      	ands	r4, r3
    5726:	002b      	movs	r3, r5
    5728:	211f      	movs	r1, #31
    572a:	00a4      	lsls	r4, r4, #2
    572c:	1914      	adds	r4, r2, r4
    572e:	692a      	ldr	r2, [r5, #16]
    5730:	3314      	adds	r3, #20
    5732:	0092      	lsls	r2, r2, #2
    5734:	189a      	adds	r2, r3, r2
    5736:	400f      	ands	r7, r1
    5738:	d024      	beq.n	5784 <__lshift+0x98>
    573a:	3101      	adds	r1, #1
    573c:	1bc9      	subs	r1, r1, r7
    573e:	468c      	mov	ip, r1
    5740:	2100      	movs	r1, #0
    5742:	6818      	ldr	r0, [r3, #0]
    5744:	40b8      	lsls	r0, r7
    5746:	4301      	orrs	r1, r0
    5748:	4660      	mov	r0, ip
    574a:	6021      	str	r1, [r4, #0]
    574c:	cb02      	ldmia	r3!, {r1}
    574e:	3404      	adds	r4, #4
    5750:	40c1      	lsrs	r1, r0
    5752:	429a      	cmp	r2, r3
    5754:	d8f5      	bhi.n	5742 <__lshift+0x56>
    5756:	6021      	str	r1, [r4, #0]
    5758:	2900      	cmp	r1, #0
    575a:	d002      	beq.n	5762 <__lshift+0x76>
    575c:	9b02      	ldr	r3, [sp, #8]
    575e:	3302      	adds	r3, #2
    5760:	9301      	str	r3, [sp, #4]
    5762:	9b01      	ldr	r3, [sp, #4]
    5764:	9803      	ldr	r0, [sp, #12]
    5766:	3b01      	subs	r3, #1
    5768:	6133      	str	r3, [r6, #16]
    576a:	0029      	movs	r1, r5
    576c:	f7ff fe35 	bl	53da <_Bfree>
    5770:	0030      	movs	r0, r6
    5772:	b005      	add	sp, #20
    5774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5776:	3101      	adds	r1, #1
    5778:	005b      	lsls	r3, r3, #1
    577a:	e7c4      	b.n	5706 <__lshift+0x1a>
    577c:	0098      	lsls	r0, r3, #2
    577e:	5011      	str	r1, [r2, r0]
    5780:	3301      	adds	r3, #1
    5782:	e7cb      	b.n	571c <__lshift+0x30>
    5784:	cb02      	ldmia	r3!, {r1}
    5786:	c402      	stmia	r4!, {r1}
    5788:	429a      	cmp	r2, r3
    578a:	d8fb      	bhi.n	5784 <__lshift+0x98>
    578c:	e7e9      	b.n	5762 <__lshift+0x76>

0000578e <__mcmp>:
    578e:	690a      	ldr	r2, [r1, #16]
    5790:	6903      	ldr	r3, [r0, #16]
    5792:	b530      	push	{r4, r5, lr}
    5794:	1a9b      	subs	r3, r3, r2
    5796:	d10e      	bne.n	57b6 <__mcmp+0x28>
    5798:	0092      	lsls	r2, r2, #2
    579a:	3014      	adds	r0, #20
    579c:	3114      	adds	r1, #20
    579e:	1884      	adds	r4, r0, r2
    57a0:	1889      	adds	r1, r1, r2
    57a2:	3c04      	subs	r4, #4
    57a4:	3904      	subs	r1, #4
    57a6:	6822      	ldr	r2, [r4, #0]
    57a8:	680d      	ldr	r5, [r1, #0]
    57aa:	42aa      	cmp	r2, r5
    57ac:	d005      	beq.n	57ba <__mcmp+0x2c>
    57ae:	42aa      	cmp	r2, r5
    57b0:	4192      	sbcs	r2, r2
    57b2:	2301      	movs	r3, #1
    57b4:	4313      	orrs	r3, r2
    57b6:	0018      	movs	r0, r3
    57b8:	bd30      	pop	{r4, r5, pc}
    57ba:	42a0      	cmp	r0, r4
    57bc:	d3f1      	bcc.n	57a2 <__mcmp+0x14>
    57be:	e7fa      	b.n	57b6 <__mcmp+0x28>

000057c0 <__mdiff>:
    57c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57c2:	000d      	movs	r5, r1
    57c4:	b085      	sub	sp, #20
    57c6:	0007      	movs	r7, r0
    57c8:	0011      	movs	r1, r2
    57ca:	0028      	movs	r0, r5
    57cc:	0014      	movs	r4, r2
    57ce:	f7ff ffde 	bl	578e <__mcmp>
    57d2:	1e06      	subs	r6, r0, #0
    57d4:	d108      	bne.n	57e8 <__mdiff+0x28>
    57d6:	0001      	movs	r1, r0
    57d8:	0038      	movs	r0, r7
    57da:	f7ff fdc6 	bl	536a <_Balloc>
    57de:	2301      	movs	r3, #1
    57e0:	6146      	str	r6, [r0, #20]
    57e2:	6103      	str	r3, [r0, #16]
    57e4:	b005      	add	sp, #20
    57e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57e8:	2301      	movs	r3, #1
    57ea:	9301      	str	r3, [sp, #4]
    57ec:	2800      	cmp	r0, #0
    57ee:	db04      	blt.n	57fa <__mdiff+0x3a>
    57f0:	0023      	movs	r3, r4
    57f2:	002c      	movs	r4, r5
    57f4:	001d      	movs	r5, r3
    57f6:	2300      	movs	r3, #0
    57f8:	9301      	str	r3, [sp, #4]
    57fa:	6861      	ldr	r1, [r4, #4]
    57fc:	0038      	movs	r0, r7
    57fe:	f7ff fdb4 	bl	536a <_Balloc>
    5802:	002f      	movs	r7, r5
    5804:	2200      	movs	r2, #0
    5806:	9b01      	ldr	r3, [sp, #4]
    5808:	6926      	ldr	r6, [r4, #16]
    580a:	60c3      	str	r3, [r0, #12]
    580c:	3414      	adds	r4, #20
    580e:	00b3      	lsls	r3, r6, #2
    5810:	18e3      	adds	r3, r4, r3
    5812:	9302      	str	r3, [sp, #8]
    5814:	692b      	ldr	r3, [r5, #16]
    5816:	3714      	adds	r7, #20
    5818:	009b      	lsls	r3, r3, #2
    581a:	18fb      	adds	r3, r7, r3
    581c:	9303      	str	r3, [sp, #12]
    581e:	0003      	movs	r3, r0
    5820:	4694      	mov	ip, r2
    5822:	3314      	adds	r3, #20
    5824:	cc20      	ldmia	r4!, {r5}
    5826:	cf04      	ldmia	r7!, {r2}
    5828:	9201      	str	r2, [sp, #4]
    582a:	b2aa      	uxth	r2, r5
    582c:	4494      	add	ip, r2
    582e:	466a      	mov	r2, sp
    5830:	4661      	mov	r1, ip
    5832:	8892      	ldrh	r2, [r2, #4]
    5834:	0c2d      	lsrs	r5, r5, #16
    5836:	1a8a      	subs	r2, r1, r2
    5838:	9901      	ldr	r1, [sp, #4]
    583a:	0c09      	lsrs	r1, r1, #16
    583c:	1a69      	subs	r1, r5, r1
    583e:	1415      	asrs	r5, r2, #16
    5840:	1949      	adds	r1, r1, r5
    5842:	140d      	asrs	r5, r1, #16
    5844:	b292      	uxth	r2, r2
    5846:	0409      	lsls	r1, r1, #16
    5848:	430a      	orrs	r2, r1
    584a:	601a      	str	r2, [r3, #0]
    584c:	9a03      	ldr	r2, [sp, #12]
    584e:	46ac      	mov	ip, r5
    5850:	3304      	adds	r3, #4
    5852:	42ba      	cmp	r2, r7
    5854:	d8e6      	bhi.n	5824 <__mdiff+0x64>
    5856:	9902      	ldr	r1, [sp, #8]
    5858:	001a      	movs	r2, r3
    585a:	428c      	cmp	r4, r1
    585c:	d305      	bcc.n	586a <__mdiff+0xaa>
    585e:	3a04      	subs	r2, #4
    5860:	6813      	ldr	r3, [r2, #0]
    5862:	2b00      	cmp	r3, #0
    5864:	d00e      	beq.n	5884 <__mdiff+0xc4>
    5866:	6106      	str	r6, [r0, #16]
    5868:	e7bc      	b.n	57e4 <__mdiff+0x24>
    586a:	cc04      	ldmia	r4!, {r2}
    586c:	b291      	uxth	r1, r2
    586e:	4461      	add	r1, ip
    5870:	140d      	asrs	r5, r1, #16
    5872:	0c12      	lsrs	r2, r2, #16
    5874:	1952      	adds	r2, r2, r5
    5876:	1415      	asrs	r5, r2, #16
    5878:	b289      	uxth	r1, r1
    587a:	0412      	lsls	r2, r2, #16
    587c:	430a      	orrs	r2, r1
    587e:	46ac      	mov	ip, r5
    5880:	c304      	stmia	r3!, {r2}
    5882:	e7e8      	b.n	5856 <__mdiff+0x96>
    5884:	3e01      	subs	r6, #1
    5886:	e7ea      	b.n	585e <__mdiff+0x9e>

00005888 <__d2b>:
    5888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    588a:	001d      	movs	r5, r3
    588c:	2101      	movs	r1, #1
    588e:	9f08      	ldr	r7, [sp, #32]
    5890:	0014      	movs	r4, r2
    5892:	f7ff fd6a 	bl	536a <_Balloc>
    5896:	032b      	lsls	r3, r5, #12
    5898:	006d      	lsls	r5, r5, #1
    589a:	0006      	movs	r6, r0
    589c:	0b1b      	lsrs	r3, r3, #12
    589e:	0d6d      	lsrs	r5, r5, #21
    58a0:	d124      	bne.n	58ec <__d2b+0x64>
    58a2:	9301      	str	r3, [sp, #4]
    58a4:	2c00      	cmp	r4, #0
    58a6:	d027      	beq.n	58f8 <__d2b+0x70>
    58a8:	4668      	mov	r0, sp
    58aa:	9400      	str	r4, [sp, #0]
    58ac:	f7ff fe04 	bl	54b8 <__lo0bits>
    58b0:	9c00      	ldr	r4, [sp, #0]
    58b2:	2800      	cmp	r0, #0
    58b4:	d01e      	beq.n	58f4 <__d2b+0x6c>
    58b6:	9b01      	ldr	r3, [sp, #4]
    58b8:	2120      	movs	r1, #32
    58ba:	001a      	movs	r2, r3
    58bc:	1a09      	subs	r1, r1, r0
    58be:	408a      	lsls	r2, r1
    58c0:	40c3      	lsrs	r3, r0
    58c2:	4322      	orrs	r2, r4
    58c4:	6172      	str	r2, [r6, #20]
    58c6:	9301      	str	r3, [sp, #4]
    58c8:	9c01      	ldr	r4, [sp, #4]
    58ca:	61b4      	str	r4, [r6, #24]
    58cc:	1e63      	subs	r3, r4, #1
    58ce:	419c      	sbcs	r4, r3
    58d0:	3401      	adds	r4, #1
    58d2:	6134      	str	r4, [r6, #16]
    58d4:	2d00      	cmp	r5, #0
    58d6:	d018      	beq.n	590a <__d2b+0x82>
    58d8:	4b12      	ldr	r3, [pc, #72]	; (5924 <__d2b+0x9c>)
    58da:	18ed      	adds	r5, r5, r3
    58dc:	2335      	movs	r3, #53	; 0x35
    58de:	182d      	adds	r5, r5, r0
    58e0:	603d      	str	r5, [r7, #0]
    58e2:	1a18      	subs	r0, r3, r0
    58e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58e6:	6018      	str	r0, [r3, #0]
    58e8:	0030      	movs	r0, r6
    58ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    58ec:	2280      	movs	r2, #128	; 0x80
    58ee:	0352      	lsls	r2, r2, #13
    58f0:	4313      	orrs	r3, r2
    58f2:	e7d6      	b.n	58a2 <__d2b+0x1a>
    58f4:	6174      	str	r4, [r6, #20]
    58f6:	e7e7      	b.n	58c8 <__d2b+0x40>
    58f8:	a801      	add	r0, sp, #4
    58fa:	f7ff fddd 	bl	54b8 <__lo0bits>
    58fe:	2401      	movs	r4, #1
    5900:	9b01      	ldr	r3, [sp, #4]
    5902:	6134      	str	r4, [r6, #16]
    5904:	6173      	str	r3, [r6, #20]
    5906:	3020      	adds	r0, #32
    5908:	e7e4      	b.n	58d4 <__d2b+0x4c>
    590a:	4b07      	ldr	r3, [pc, #28]	; (5928 <__d2b+0xa0>)
    590c:	18c0      	adds	r0, r0, r3
    590e:	4b07      	ldr	r3, [pc, #28]	; (592c <__d2b+0xa4>)
    5910:	6038      	str	r0, [r7, #0]
    5912:	18e3      	adds	r3, r4, r3
    5914:	009b      	lsls	r3, r3, #2
    5916:	18f3      	adds	r3, r6, r3
    5918:	6958      	ldr	r0, [r3, #20]
    591a:	f7ff fdb3 	bl	5484 <__hi0bits>
    591e:	0164      	lsls	r4, r4, #5
    5920:	1a20      	subs	r0, r4, r0
    5922:	e7df      	b.n	58e4 <__d2b+0x5c>
    5924:	fffffbcd 	.word	0xfffffbcd
    5928:	fffffbce 	.word	0xfffffbce
    592c:	3fffffff 	.word	0x3fffffff

00005930 <_calloc_r>:
    5930:	434a      	muls	r2, r1
    5932:	b570      	push	{r4, r5, r6, lr}
    5934:	0011      	movs	r1, r2
    5936:	0014      	movs	r4, r2
    5938:	f000 f852 	bl	59e0 <_malloc_r>
    593c:	1e05      	subs	r5, r0, #0
    593e:	d003      	beq.n	5948 <_calloc_r+0x18>
    5940:	0022      	movs	r2, r4
    5942:	2100      	movs	r1, #0
    5944:	f7fd fe09 	bl	355a <memset>
    5948:	0028      	movs	r0, r5
    594a:	bd70      	pop	{r4, r5, r6, pc}

0000594c <_free_r>:
    594c:	b570      	push	{r4, r5, r6, lr}
    594e:	0005      	movs	r5, r0
    5950:	2900      	cmp	r1, #0
    5952:	d010      	beq.n	5976 <_free_r+0x2a>
    5954:	1f0c      	subs	r4, r1, #4
    5956:	6823      	ldr	r3, [r4, #0]
    5958:	2b00      	cmp	r3, #0
    595a:	da00      	bge.n	595e <_free_r+0x12>
    595c:	18e4      	adds	r4, r4, r3
    595e:	0028      	movs	r0, r5
    5960:	f000 faae 	bl	5ec0 <__malloc_lock>
    5964:	4a1d      	ldr	r2, [pc, #116]	; (59dc <_free_r+0x90>)
    5966:	6813      	ldr	r3, [r2, #0]
    5968:	2b00      	cmp	r3, #0
    596a:	d105      	bne.n	5978 <_free_r+0x2c>
    596c:	6063      	str	r3, [r4, #4]
    596e:	6014      	str	r4, [r2, #0]
    5970:	0028      	movs	r0, r5
    5972:	f000 faa6 	bl	5ec2 <__malloc_unlock>
    5976:	bd70      	pop	{r4, r5, r6, pc}
    5978:	42a3      	cmp	r3, r4
    597a:	d909      	bls.n	5990 <_free_r+0x44>
    597c:	6821      	ldr	r1, [r4, #0]
    597e:	1860      	adds	r0, r4, r1
    5980:	4283      	cmp	r3, r0
    5982:	d1f3      	bne.n	596c <_free_r+0x20>
    5984:	6818      	ldr	r0, [r3, #0]
    5986:	685b      	ldr	r3, [r3, #4]
    5988:	1841      	adds	r1, r0, r1
    598a:	6021      	str	r1, [r4, #0]
    598c:	e7ee      	b.n	596c <_free_r+0x20>
    598e:	0013      	movs	r3, r2
    5990:	685a      	ldr	r2, [r3, #4]
    5992:	2a00      	cmp	r2, #0
    5994:	d001      	beq.n	599a <_free_r+0x4e>
    5996:	42a2      	cmp	r2, r4
    5998:	d9f9      	bls.n	598e <_free_r+0x42>
    599a:	6819      	ldr	r1, [r3, #0]
    599c:	1858      	adds	r0, r3, r1
    599e:	42a0      	cmp	r0, r4
    59a0:	d10b      	bne.n	59ba <_free_r+0x6e>
    59a2:	6820      	ldr	r0, [r4, #0]
    59a4:	1809      	adds	r1, r1, r0
    59a6:	1858      	adds	r0, r3, r1
    59a8:	6019      	str	r1, [r3, #0]
    59aa:	4282      	cmp	r2, r0
    59ac:	d1e0      	bne.n	5970 <_free_r+0x24>
    59ae:	6810      	ldr	r0, [r2, #0]
    59b0:	6852      	ldr	r2, [r2, #4]
    59b2:	1841      	adds	r1, r0, r1
    59b4:	6019      	str	r1, [r3, #0]
    59b6:	605a      	str	r2, [r3, #4]
    59b8:	e7da      	b.n	5970 <_free_r+0x24>
    59ba:	42a0      	cmp	r0, r4
    59bc:	d902      	bls.n	59c4 <_free_r+0x78>
    59be:	230c      	movs	r3, #12
    59c0:	602b      	str	r3, [r5, #0]
    59c2:	e7d5      	b.n	5970 <_free_r+0x24>
    59c4:	6821      	ldr	r1, [r4, #0]
    59c6:	1860      	adds	r0, r4, r1
    59c8:	4282      	cmp	r2, r0
    59ca:	d103      	bne.n	59d4 <_free_r+0x88>
    59cc:	6810      	ldr	r0, [r2, #0]
    59ce:	6852      	ldr	r2, [r2, #4]
    59d0:	1841      	adds	r1, r0, r1
    59d2:	6021      	str	r1, [r4, #0]
    59d4:	6062      	str	r2, [r4, #4]
    59d6:	605c      	str	r4, [r3, #4]
    59d8:	e7ca      	b.n	5970 <_free_r+0x24>
    59da:	46c0      	nop			; (mov r8, r8)
    59dc:	200007ac 	.word	0x200007ac

000059e0 <_malloc_r>:
    59e0:	2303      	movs	r3, #3
    59e2:	b570      	push	{r4, r5, r6, lr}
    59e4:	1ccd      	adds	r5, r1, #3
    59e6:	439d      	bics	r5, r3
    59e8:	3508      	adds	r5, #8
    59ea:	0006      	movs	r6, r0
    59ec:	2d0c      	cmp	r5, #12
    59ee:	d21e      	bcs.n	5a2e <_malloc_r+0x4e>
    59f0:	250c      	movs	r5, #12
    59f2:	42a9      	cmp	r1, r5
    59f4:	d81d      	bhi.n	5a32 <_malloc_r+0x52>
    59f6:	0030      	movs	r0, r6
    59f8:	f000 fa62 	bl	5ec0 <__malloc_lock>
    59fc:	4a25      	ldr	r2, [pc, #148]	; (5a94 <_malloc_r+0xb4>)
    59fe:	6814      	ldr	r4, [r2, #0]
    5a00:	0021      	movs	r1, r4
    5a02:	2900      	cmp	r1, #0
    5a04:	d119      	bne.n	5a3a <_malloc_r+0x5a>
    5a06:	4c24      	ldr	r4, [pc, #144]	; (5a98 <_malloc_r+0xb8>)
    5a08:	6823      	ldr	r3, [r4, #0]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d103      	bne.n	5a16 <_malloc_r+0x36>
    5a0e:	0030      	movs	r0, r6
    5a10:	f000 f988 	bl	5d24 <_sbrk_r>
    5a14:	6020      	str	r0, [r4, #0]
    5a16:	0029      	movs	r1, r5
    5a18:	0030      	movs	r0, r6
    5a1a:	f000 f983 	bl	5d24 <_sbrk_r>
    5a1e:	1c43      	adds	r3, r0, #1
    5a20:	d12c      	bne.n	5a7c <_malloc_r+0x9c>
    5a22:	230c      	movs	r3, #12
    5a24:	0030      	movs	r0, r6
    5a26:	6033      	str	r3, [r6, #0]
    5a28:	f000 fa4b 	bl	5ec2 <__malloc_unlock>
    5a2c:	e003      	b.n	5a36 <_malloc_r+0x56>
    5a2e:	2d00      	cmp	r5, #0
    5a30:	dadf      	bge.n	59f2 <_malloc_r+0x12>
    5a32:	230c      	movs	r3, #12
    5a34:	6033      	str	r3, [r6, #0]
    5a36:	2000      	movs	r0, #0
    5a38:	bd70      	pop	{r4, r5, r6, pc}
    5a3a:	680b      	ldr	r3, [r1, #0]
    5a3c:	1b5b      	subs	r3, r3, r5
    5a3e:	d41a      	bmi.n	5a76 <_malloc_r+0x96>
    5a40:	2b0b      	cmp	r3, #11
    5a42:	d903      	bls.n	5a4c <_malloc_r+0x6c>
    5a44:	600b      	str	r3, [r1, #0]
    5a46:	18cc      	adds	r4, r1, r3
    5a48:	6025      	str	r5, [r4, #0]
    5a4a:	e003      	b.n	5a54 <_malloc_r+0x74>
    5a4c:	428c      	cmp	r4, r1
    5a4e:	d10e      	bne.n	5a6e <_malloc_r+0x8e>
    5a50:	6863      	ldr	r3, [r4, #4]
    5a52:	6013      	str	r3, [r2, #0]
    5a54:	0030      	movs	r0, r6
    5a56:	f000 fa34 	bl	5ec2 <__malloc_unlock>
    5a5a:	0020      	movs	r0, r4
    5a5c:	2207      	movs	r2, #7
    5a5e:	300b      	adds	r0, #11
    5a60:	1d23      	adds	r3, r4, #4
    5a62:	4390      	bics	r0, r2
    5a64:	1ac3      	subs	r3, r0, r3
    5a66:	d0e7      	beq.n	5a38 <_malloc_r+0x58>
    5a68:	425a      	negs	r2, r3
    5a6a:	50e2      	str	r2, [r4, r3]
    5a6c:	e7e4      	b.n	5a38 <_malloc_r+0x58>
    5a6e:	684b      	ldr	r3, [r1, #4]
    5a70:	6063      	str	r3, [r4, #4]
    5a72:	000c      	movs	r4, r1
    5a74:	e7ee      	b.n	5a54 <_malloc_r+0x74>
    5a76:	000c      	movs	r4, r1
    5a78:	6849      	ldr	r1, [r1, #4]
    5a7a:	e7c2      	b.n	5a02 <_malloc_r+0x22>
    5a7c:	2303      	movs	r3, #3
    5a7e:	1cc4      	adds	r4, r0, #3
    5a80:	439c      	bics	r4, r3
    5a82:	42a0      	cmp	r0, r4
    5a84:	d0e0      	beq.n	5a48 <_malloc_r+0x68>
    5a86:	1a21      	subs	r1, r4, r0
    5a88:	0030      	movs	r0, r6
    5a8a:	f000 f94b 	bl	5d24 <_sbrk_r>
    5a8e:	1c43      	adds	r3, r0, #1
    5a90:	d1da      	bne.n	5a48 <_malloc_r+0x68>
    5a92:	e7c6      	b.n	5a22 <_malloc_r+0x42>
    5a94:	200007ac 	.word	0x200007ac
    5a98:	200007b0 	.word	0x200007b0

00005a9c <__sfputc_r>:
    5a9c:	6893      	ldr	r3, [r2, #8]
    5a9e:	b510      	push	{r4, lr}
    5aa0:	3b01      	subs	r3, #1
    5aa2:	6093      	str	r3, [r2, #8]
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	da05      	bge.n	5ab4 <__sfputc_r+0x18>
    5aa8:	6994      	ldr	r4, [r2, #24]
    5aaa:	42a3      	cmp	r3, r4
    5aac:	db08      	blt.n	5ac0 <__sfputc_r+0x24>
    5aae:	b2cb      	uxtb	r3, r1
    5ab0:	2b0a      	cmp	r3, #10
    5ab2:	d005      	beq.n	5ac0 <__sfputc_r+0x24>
    5ab4:	6813      	ldr	r3, [r2, #0]
    5ab6:	1c58      	adds	r0, r3, #1
    5ab8:	6010      	str	r0, [r2, #0]
    5aba:	7019      	strb	r1, [r3, #0]
    5abc:	b2c8      	uxtb	r0, r1
    5abe:	bd10      	pop	{r4, pc}
    5ac0:	f7fe fb06 	bl	40d0 <__swbuf_r>
    5ac4:	e7fb      	b.n	5abe <__sfputc_r+0x22>

00005ac6 <__sfputs_r>:
    5ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ac8:	0006      	movs	r6, r0
    5aca:	000f      	movs	r7, r1
    5acc:	0014      	movs	r4, r2
    5ace:	18d5      	adds	r5, r2, r3
    5ad0:	42ac      	cmp	r4, r5
    5ad2:	d101      	bne.n	5ad8 <__sfputs_r+0x12>
    5ad4:	2000      	movs	r0, #0
    5ad6:	e007      	b.n	5ae8 <__sfputs_r+0x22>
    5ad8:	7821      	ldrb	r1, [r4, #0]
    5ada:	003a      	movs	r2, r7
    5adc:	0030      	movs	r0, r6
    5ade:	f7ff ffdd 	bl	5a9c <__sfputc_r>
    5ae2:	3401      	adds	r4, #1
    5ae4:	1c43      	adds	r3, r0, #1
    5ae6:	d1f3      	bne.n	5ad0 <__sfputs_r+0xa>
    5ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005aec <_vfiprintf_r>:
    5aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aee:	b09f      	sub	sp, #124	; 0x7c
    5af0:	0006      	movs	r6, r0
    5af2:	000f      	movs	r7, r1
    5af4:	0014      	movs	r4, r2
    5af6:	9305      	str	r3, [sp, #20]
    5af8:	2800      	cmp	r0, #0
    5afa:	d004      	beq.n	5b06 <_vfiprintf_r+0x1a>
    5afc:	6983      	ldr	r3, [r0, #24]
    5afe:	2b00      	cmp	r3, #0
    5b00:	d101      	bne.n	5b06 <_vfiprintf_r+0x1a>
    5b02:	f7ff fb15 	bl	5130 <__sinit>
    5b06:	4b7f      	ldr	r3, [pc, #508]	; (5d04 <_vfiprintf_r+0x218>)
    5b08:	429f      	cmp	r7, r3
    5b0a:	d15c      	bne.n	5bc6 <_vfiprintf_r+0xda>
    5b0c:	6877      	ldr	r7, [r6, #4]
    5b0e:	89bb      	ldrh	r3, [r7, #12]
    5b10:	071b      	lsls	r3, r3, #28
    5b12:	d562      	bpl.n	5bda <_vfiprintf_r+0xee>
    5b14:	693b      	ldr	r3, [r7, #16]
    5b16:	2b00      	cmp	r3, #0
    5b18:	d05f      	beq.n	5bda <_vfiprintf_r+0xee>
    5b1a:	2300      	movs	r3, #0
    5b1c:	ad06      	add	r5, sp, #24
    5b1e:	616b      	str	r3, [r5, #20]
    5b20:	3320      	adds	r3, #32
    5b22:	766b      	strb	r3, [r5, #25]
    5b24:	3310      	adds	r3, #16
    5b26:	76ab      	strb	r3, [r5, #26]
    5b28:	9402      	str	r4, [sp, #8]
    5b2a:	9c02      	ldr	r4, [sp, #8]
    5b2c:	7823      	ldrb	r3, [r4, #0]
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d15d      	bne.n	5bee <_vfiprintf_r+0x102>
    5b32:	9b02      	ldr	r3, [sp, #8]
    5b34:	1ae3      	subs	r3, r4, r3
    5b36:	9304      	str	r3, [sp, #16]
    5b38:	d00d      	beq.n	5b56 <_vfiprintf_r+0x6a>
    5b3a:	9b04      	ldr	r3, [sp, #16]
    5b3c:	9a02      	ldr	r2, [sp, #8]
    5b3e:	0039      	movs	r1, r7
    5b40:	0030      	movs	r0, r6
    5b42:	f7ff ffc0 	bl	5ac6 <__sfputs_r>
    5b46:	1c43      	adds	r3, r0, #1
    5b48:	d100      	bne.n	5b4c <_vfiprintf_r+0x60>
    5b4a:	e0cc      	b.n	5ce6 <_vfiprintf_r+0x1fa>
    5b4c:	696a      	ldr	r2, [r5, #20]
    5b4e:	9b04      	ldr	r3, [sp, #16]
    5b50:	4694      	mov	ip, r2
    5b52:	4463      	add	r3, ip
    5b54:	616b      	str	r3, [r5, #20]
    5b56:	7823      	ldrb	r3, [r4, #0]
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d100      	bne.n	5b5e <_vfiprintf_r+0x72>
    5b5c:	e0c3      	b.n	5ce6 <_vfiprintf_r+0x1fa>
    5b5e:	2201      	movs	r2, #1
    5b60:	2300      	movs	r3, #0
    5b62:	4252      	negs	r2, r2
    5b64:	606a      	str	r2, [r5, #4]
    5b66:	a902      	add	r1, sp, #8
    5b68:	3254      	adds	r2, #84	; 0x54
    5b6a:	1852      	adds	r2, r2, r1
    5b6c:	3401      	adds	r4, #1
    5b6e:	602b      	str	r3, [r5, #0]
    5b70:	60eb      	str	r3, [r5, #12]
    5b72:	60ab      	str	r3, [r5, #8]
    5b74:	7013      	strb	r3, [r2, #0]
    5b76:	65ab      	str	r3, [r5, #88]	; 0x58
    5b78:	7821      	ldrb	r1, [r4, #0]
    5b7a:	2205      	movs	r2, #5
    5b7c:	4862      	ldr	r0, [pc, #392]	; (5d08 <_vfiprintf_r+0x21c>)
    5b7e:	f7ff fbe9 	bl	5354 <memchr>
    5b82:	1c63      	adds	r3, r4, #1
    5b84:	469c      	mov	ip, r3
    5b86:	2800      	cmp	r0, #0
    5b88:	d135      	bne.n	5bf6 <_vfiprintf_r+0x10a>
    5b8a:	6829      	ldr	r1, [r5, #0]
    5b8c:	06cb      	lsls	r3, r1, #27
    5b8e:	d504      	bpl.n	5b9a <_vfiprintf_r+0xae>
    5b90:	2353      	movs	r3, #83	; 0x53
    5b92:	aa02      	add	r2, sp, #8
    5b94:	3020      	adds	r0, #32
    5b96:	189b      	adds	r3, r3, r2
    5b98:	7018      	strb	r0, [r3, #0]
    5b9a:	070b      	lsls	r3, r1, #28
    5b9c:	d504      	bpl.n	5ba8 <_vfiprintf_r+0xbc>
    5b9e:	2353      	movs	r3, #83	; 0x53
    5ba0:	202b      	movs	r0, #43	; 0x2b
    5ba2:	aa02      	add	r2, sp, #8
    5ba4:	189b      	adds	r3, r3, r2
    5ba6:	7018      	strb	r0, [r3, #0]
    5ba8:	7823      	ldrb	r3, [r4, #0]
    5baa:	2b2a      	cmp	r3, #42	; 0x2a
    5bac:	d02c      	beq.n	5c08 <_vfiprintf_r+0x11c>
    5bae:	2000      	movs	r0, #0
    5bb0:	210a      	movs	r1, #10
    5bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5bb4:	7822      	ldrb	r2, [r4, #0]
    5bb6:	3a30      	subs	r2, #48	; 0x30
    5bb8:	2a09      	cmp	r2, #9
    5bba:	d800      	bhi.n	5bbe <_vfiprintf_r+0xd2>
    5bbc:	e06b      	b.n	5c96 <_vfiprintf_r+0x1aa>
    5bbe:	2800      	cmp	r0, #0
    5bc0:	d02a      	beq.n	5c18 <_vfiprintf_r+0x12c>
    5bc2:	9309      	str	r3, [sp, #36]	; 0x24
    5bc4:	e028      	b.n	5c18 <_vfiprintf_r+0x12c>
    5bc6:	4b51      	ldr	r3, [pc, #324]	; (5d0c <_vfiprintf_r+0x220>)
    5bc8:	429f      	cmp	r7, r3
    5bca:	d101      	bne.n	5bd0 <_vfiprintf_r+0xe4>
    5bcc:	68b7      	ldr	r7, [r6, #8]
    5bce:	e79e      	b.n	5b0e <_vfiprintf_r+0x22>
    5bd0:	4b4f      	ldr	r3, [pc, #316]	; (5d10 <_vfiprintf_r+0x224>)
    5bd2:	429f      	cmp	r7, r3
    5bd4:	d19b      	bne.n	5b0e <_vfiprintf_r+0x22>
    5bd6:	68f7      	ldr	r7, [r6, #12]
    5bd8:	e799      	b.n	5b0e <_vfiprintf_r+0x22>
    5bda:	0039      	movs	r1, r7
    5bdc:	0030      	movs	r0, r6
    5bde:	f7fe facd 	bl	417c <__swsetup_r>
    5be2:	2800      	cmp	r0, #0
    5be4:	d099      	beq.n	5b1a <_vfiprintf_r+0x2e>
    5be6:	2001      	movs	r0, #1
    5be8:	4240      	negs	r0, r0
    5bea:	b01f      	add	sp, #124	; 0x7c
    5bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bee:	2b25      	cmp	r3, #37	; 0x25
    5bf0:	d09f      	beq.n	5b32 <_vfiprintf_r+0x46>
    5bf2:	3401      	adds	r4, #1
    5bf4:	e79a      	b.n	5b2c <_vfiprintf_r+0x40>
    5bf6:	4b44      	ldr	r3, [pc, #272]	; (5d08 <_vfiprintf_r+0x21c>)
    5bf8:	6829      	ldr	r1, [r5, #0]
    5bfa:	1ac0      	subs	r0, r0, r3
    5bfc:	2301      	movs	r3, #1
    5bfe:	4083      	lsls	r3, r0
    5c00:	430b      	orrs	r3, r1
    5c02:	602b      	str	r3, [r5, #0]
    5c04:	4664      	mov	r4, ip
    5c06:	e7b7      	b.n	5b78 <_vfiprintf_r+0x8c>
    5c08:	9b05      	ldr	r3, [sp, #20]
    5c0a:	1d18      	adds	r0, r3, #4
    5c0c:	681b      	ldr	r3, [r3, #0]
    5c0e:	9005      	str	r0, [sp, #20]
    5c10:	2b00      	cmp	r3, #0
    5c12:	db3a      	blt.n	5c8a <_vfiprintf_r+0x19e>
    5c14:	9309      	str	r3, [sp, #36]	; 0x24
    5c16:	4664      	mov	r4, ip
    5c18:	7823      	ldrb	r3, [r4, #0]
    5c1a:	2b2e      	cmp	r3, #46	; 0x2e
    5c1c:	d10b      	bne.n	5c36 <_vfiprintf_r+0x14a>
    5c1e:	7863      	ldrb	r3, [r4, #1]
    5c20:	1c62      	adds	r2, r4, #1
    5c22:	2b2a      	cmp	r3, #42	; 0x2a
    5c24:	d13f      	bne.n	5ca6 <_vfiprintf_r+0x1ba>
    5c26:	9b05      	ldr	r3, [sp, #20]
    5c28:	3402      	adds	r4, #2
    5c2a:	1d1a      	adds	r2, r3, #4
    5c2c:	681b      	ldr	r3, [r3, #0]
    5c2e:	9205      	str	r2, [sp, #20]
    5c30:	2b00      	cmp	r3, #0
    5c32:	db35      	blt.n	5ca0 <_vfiprintf_r+0x1b4>
    5c34:	9307      	str	r3, [sp, #28]
    5c36:	7821      	ldrb	r1, [r4, #0]
    5c38:	2203      	movs	r2, #3
    5c3a:	4836      	ldr	r0, [pc, #216]	; (5d14 <_vfiprintf_r+0x228>)
    5c3c:	f7ff fb8a 	bl	5354 <memchr>
    5c40:	2800      	cmp	r0, #0
    5c42:	d007      	beq.n	5c54 <_vfiprintf_r+0x168>
    5c44:	4b33      	ldr	r3, [pc, #204]	; (5d14 <_vfiprintf_r+0x228>)
    5c46:	682a      	ldr	r2, [r5, #0]
    5c48:	1ac0      	subs	r0, r0, r3
    5c4a:	2340      	movs	r3, #64	; 0x40
    5c4c:	4083      	lsls	r3, r0
    5c4e:	4313      	orrs	r3, r2
    5c50:	602b      	str	r3, [r5, #0]
    5c52:	3401      	adds	r4, #1
    5c54:	7821      	ldrb	r1, [r4, #0]
    5c56:	1c63      	adds	r3, r4, #1
    5c58:	2206      	movs	r2, #6
    5c5a:	482f      	ldr	r0, [pc, #188]	; (5d18 <_vfiprintf_r+0x22c>)
    5c5c:	9302      	str	r3, [sp, #8]
    5c5e:	7629      	strb	r1, [r5, #24]
    5c60:	f7ff fb78 	bl	5354 <memchr>
    5c64:	2800      	cmp	r0, #0
    5c66:	d044      	beq.n	5cf2 <_vfiprintf_r+0x206>
    5c68:	4b2c      	ldr	r3, [pc, #176]	; (5d1c <_vfiprintf_r+0x230>)
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d12f      	bne.n	5cce <_vfiprintf_r+0x1e2>
    5c6e:	6829      	ldr	r1, [r5, #0]
    5c70:	9b05      	ldr	r3, [sp, #20]
    5c72:	2207      	movs	r2, #7
    5c74:	05c9      	lsls	r1, r1, #23
    5c76:	d528      	bpl.n	5cca <_vfiprintf_r+0x1de>
    5c78:	189b      	adds	r3, r3, r2
    5c7a:	4393      	bics	r3, r2
    5c7c:	3308      	adds	r3, #8
    5c7e:	9305      	str	r3, [sp, #20]
    5c80:	696b      	ldr	r3, [r5, #20]
    5c82:	9a03      	ldr	r2, [sp, #12]
    5c84:	189b      	adds	r3, r3, r2
    5c86:	616b      	str	r3, [r5, #20]
    5c88:	e74f      	b.n	5b2a <_vfiprintf_r+0x3e>
    5c8a:	425b      	negs	r3, r3
    5c8c:	60eb      	str	r3, [r5, #12]
    5c8e:	2302      	movs	r3, #2
    5c90:	430b      	orrs	r3, r1
    5c92:	602b      	str	r3, [r5, #0]
    5c94:	e7bf      	b.n	5c16 <_vfiprintf_r+0x12a>
    5c96:	434b      	muls	r3, r1
    5c98:	3401      	adds	r4, #1
    5c9a:	189b      	adds	r3, r3, r2
    5c9c:	2001      	movs	r0, #1
    5c9e:	e789      	b.n	5bb4 <_vfiprintf_r+0xc8>
    5ca0:	2301      	movs	r3, #1
    5ca2:	425b      	negs	r3, r3
    5ca4:	e7c6      	b.n	5c34 <_vfiprintf_r+0x148>
    5ca6:	2300      	movs	r3, #0
    5ca8:	0014      	movs	r4, r2
    5caa:	200a      	movs	r0, #10
    5cac:	001a      	movs	r2, r3
    5cae:	606b      	str	r3, [r5, #4]
    5cb0:	7821      	ldrb	r1, [r4, #0]
    5cb2:	3930      	subs	r1, #48	; 0x30
    5cb4:	2909      	cmp	r1, #9
    5cb6:	d903      	bls.n	5cc0 <_vfiprintf_r+0x1d4>
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d0bc      	beq.n	5c36 <_vfiprintf_r+0x14a>
    5cbc:	9207      	str	r2, [sp, #28]
    5cbe:	e7ba      	b.n	5c36 <_vfiprintf_r+0x14a>
    5cc0:	4342      	muls	r2, r0
    5cc2:	3401      	adds	r4, #1
    5cc4:	1852      	adds	r2, r2, r1
    5cc6:	2301      	movs	r3, #1
    5cc8:	e7f2      	b.n	5cb0 <_vfiprintf_r+0x1c4>
    5cca:	3307      	adds	r3, #7
    5ccc:	e7d5      	b.n	5c7a <_vfiprintf_r+0x18e>
    5cce:	ab05      	add	r3, sp, #20
    5cd0:	9300      	str	r3, [sp, #0]
    5cd2:	003a      	movs	r2, r7
    5cd4:	4b12      	ldr	r3, [pc, #72]	; (5d20 <_vfiprintf_r+0x234>)
    5cd6:	0029      	movs	r1, r5
    5cd8:	0030      	movs	r0, r6
    5cda:	f7fd fce3 	bl	36a4 <_printf_float>
    5cde:	9003      	str	r0, [sp, #12]
    5ce0:	9b03      	ldr	r3, [sp, #12]
    5ce2:	3301      	adds	r3, #1
    5ce4:	d1cc      	bne.n	5c80 <_vfiprintf_r+0x194>
    5ce6:	89bb      	ldrh	r3, [r7, #12]
    5ce8:	065b      	lsls	r3, r3, #25
    5cea:	d500      	bpl.n	5cee <_vfiprintf_r+0x202>
    5cec:	e77b      	b.n	5be6 <_vfiprintf_r+0xfa>
    5cee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5cf0:	e77b      	b.n	5bea <_vfiprintf_r+0xfe>
    5cf2:	ab05      	add	r3, sp, #20
    5cf4:	9300      	str	r3, [sp, #0]
    5cf6:	003a      	movs	r2, r7
    5cf8:	4b09      	ldr	r3, [pc, #36]	; (5d20 <_vfiprintf_r+0x234>)
    5cfa:	0029      	movs	r1, r5
    5cfc:	0030      	movs	r0, r6
    5cfe:	f7fd ff8b 	bl	3c18 <_printf_i>
    5d02:	e7ec      	b.n	5cde <_vfiprintf_r+0x1f2>
    5d04:	00008c1c 	.word	0x00008c1c
    5d08:	00008d5c 	.word	0x00008d5c
    5d0c:	00008c3c 	.word	0x00008c3c
    5d10:	00008bfc 	.word	0x00008bfc
    5d14:	00008d62 	.word	0x00008d62
    5d18:	00008d66 	.word	0x00008d66
    5d1c:	000036a5 	.word	0x000036a5
    5d20:	00005ac7 	.word	0x00005ac7

00005d24 <_sbrk_r>:
    5d24:	2300      	movs	r3, #0
    5d26:	b570      	push	{r4, r5, r6, lr}
    5d28:	4c06      	ldr	r4, [pc, #24]	; (5d44 <_sbrk_r+0x20>)
    5d2a:	0005      	movs	r5, r0
    5d2c:	0008      	movs	r0, r1
    5d2e:	6023      	str	r3, [r4, #0]
    5d30:	f7fc fe08 	bl	2944 <_sbrk>
    5d34:	1c43      	adds	r3, r0, #1
    5d36:	d103      	bne.n	5d40 <_sbrk_r+0x1c>
    5d38:	6823      	ldr	r3, [r4, #0]
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d000      	beq.n	5d40 <_sbrk_r+0x1c>
    5d3e:	602b      	str	r3, [r5, #0]
    5d40:	bd70      	pop	{r4, r5, r6, pc}
    5d42:	46c0      	nop			; (mov r8, r8)
    5d44:	20001670 	.word	0x20001670

00005d48 <__sread>:
    5d48:	b570      	push	{r4, r5, r6, lr}
    5d4a:	000c      	movs	r4, r1
    5d4c:	250e      	movs	r5, #14
    5d4e:	5f49      	ldrsh	r1, [r1, r5]
    5d50:	f000 f8b8 	bl	5ec4 <_read_r>
    5d54:	2800      	cmp	r0, #0
    5d56:	db03      	blt.n	5d60 <__sread+0x18>
    5d58:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5d5a:	181b      	adds	r3, r3, r0
    5d5c:	6563      	str	r3, [r4, #84]	; 0x54
    5d5e:	bd70      	pop	{r4, r5, r6, pc}
    5d60:	89a3      	ldrh	r3, [r4, #12]
    5d62:	4a02      	ldr	r2, [pc, #8]	; (5d6c <__sread+0x24>)
    5d64:	4013      	ands	r3, r2
    5d66:	81a3      	strh	r3, [r4, #12]
    5d68:	e7f9      	b.n	5d5e <__sread+0x16>
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	ffffefff 	.word	0xffffefff

00005d70 <__swrite>:
    5d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d72:	001f      	movs	r7, r3
    5d74:	898b      	ldrh	r3, [r1, #12]
    5d76:	0005      	movs	r5, r0
    5d78:	000c      	movs	r4, r1
    5d7a:	0016      	movs	r6, r2
    5d7c:	05db      	lsls	r3, r3, #23
    5d7e:	d505      	bpl.n	5d8c <__swrite+0x1c>
    5d80:	230e      	movs	r3, #14
    5d82:	5ec9      	ldrsh	r1, [r1, r3]
    5d84:	2200      	movs	r2, #0
    5d86:	2302      	movs	r3, #2
    5d88:	f000 f874 	bl	5e74 <_lseek_r>
    5d8c:	89a3      	ldrh	r3, [r4, #12]
    5d8e:	4a05      	ldr	r2, [pc, #20]	; (5da4 <__swrite+0x34>)
    5d90:	0028      	movs	r0, r5
    5d92:	4013      	ands	r3, r2
    5d94:	81a3      	strh	r3, [r4, #12]
    5d96:	0032      	movs	r2, r6
    5d98:	230e      	movs	r3, #14
    5d9a:	5ee1      	ldrsh	r1, [r4, r3]
    5d9c:	003b      	movs	r3, r7
    5d9e:	f000 f81f 	bl	5de0 <_write_r>
    5da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5da4:	ffffefff 	.word	0xffffefff

00005da8 <__sseek>:
    5da8:	b570      	push	{r4, r5, r6, lr}
    5daa:	000c      	movs	r4, r1
    5dac:	250e      	movs	r5, #14
    5dae:	5f49      	ldrsh	r1, [r1, r5]
    5db0:	f000 f860 	bl	5e74 <_lseek_r>
    5db4:	89a3      	ldrh	r3, [r4, #12]
    5db6:	1c42      	adds	r2, r0, #1
    5db8:	d103      	bne.n	5dc2 <__sseek+0x1a>
    5dba:	4a05      	ldr	r2, [pc, #20]	; (5dd0 <__sseek+0x28>)
    5dbc:	4013      	ands	r3, r2
    5dbe:	81a3      	strh	r3, [r4, #12]
    5dc0:	bd70      	pop	{r4, r5, r6, pc}
    5dc2:	2280      	movs	r2, #128	; 0x80
    5dc4:	0152      	lsls	r2, r2, #5
    5dc6:	4313      	orrs	r3, r2
    5dc8:	81a3      	strh	r3, [r4, #12]
    5dca:	6560      	str	r0, [r4, #84]	; 0x54
    5dcc:	e7f8      	b.n	5dc0 <__sseek+0x18>
    5dce:	46c0      	nop			; (mov r8, r8)
    5dd0:	ffffefff 	.word	0xffffefff

00005dd4 <__sclose>:
    5dd4:	b510      	push	{r4, lr}
    5dd6:	230e      	movs	r3, #14
    5dd8:	5ec9      	ldrsh	r1, [r1, r3]
    5dda:	f000 f815 	bl	5e08 <_close_r>
    5dde:	bd10      	pop	{r4, pc}

00005de0 <_write_r>:
    5de0:	b570      	push	{r4, r5, r6, lr}
    5de2:	0005      	movs	r5, r0
    5de4:	0008      	movs	r0, r1
    5de6:	0011      	movs	r1, r2
    5de8:	2200      	movs	r2, #0
    5dea:	4c06      	ldr	r4, [pc, #24]	; (5e04 <_write_r+0x24>)
    5dec:	6022      	str	r2, [r4, #0]
    5dee:	001a      	movs	r2, r3
    5df0:	f7fc fd80 	bl	28f4 <_write>
    5df4:	1c43      	adds	r3, r0, #1
    5df6:	d103      	bne.n	5e00 <_write_r+0x20>
    5df8:	6823      	ldr	r3, [r4, #0]
    5dfa:	2b00      	cmp	r3, #0
    5dfc:	d000      	beq.n	5e00 <_write_r+0x20>
    5dfe:	602b      	str	r3, [r5, #0]
    5e00:	bd70      	pop	{r4, r5, r6, pc}
    5e02:	46c0      	nop			; (mov r8, r8)
    5e04:	20001670 	.word	0x20001670

00005e08 <_close_r>:
    5e08:	2300      	movs	r3, #0
    5e0a:	b570      	push	{r4, r5, r6, lr}
    5e0c:	4c06      	ldr	r4, [pc, #24]	; (5e28 <_close_r+0x20>)
    5e0e:	0005      	movs	r5, r0
    5e10:	0008      	movs	r0, r1
    5e12:	6023      	str	r3, [r4, #0]
    5e14:	f7fc fda8 	bl	2968 <_close>
    5e18:	1c43      	adds	r3, r0, #1
    5e1a:	d103      	bne.n	5e24 <_close_r+0x1c>
    5e1c:	6823      	ldr	r3, [r4, #0]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d000      	beq.n	5e24 <_close_r+0x1c>
    5e22:	602b      	str	r3, [r5, #0]
    5e24:	bd70      	pop	{r4, r5, r6, pc}
    5e26:	46c0      	nop			; (mov r8, r8)
    5e28:	20001670 	.word	0x20001670

00005e2c <_fstat_r>:
    5e2c:	2300      	movs	r3, #0
    5e2e:	b570      	push	{r4, r5, r6, lr}
    5e30:	4c06      	ldr	r4, [pc, #24]	; (5e4c <_fstat_r+0x20>)
    5e32:	0005      	movs	r5, r0
    5e34:	0008      	movs	r0, r1
    5e36:	0011      	movs	r1, r2
    5e38:	6023      	str	r3, [r4, #0]
    5e3a:	f7fc fd98 	bl	296e <_fstat>
    5e3e:	1c43      	adds	r3, r0, #1
    5e40:	d103      	bne.n	5e4a <_fstat_r+0x1e>
    5e42:	6823      	ldr	r3, [r4, #0]
    5e44:	2b00      	cmp	r3, #0
    5e46:	d000      	beq.n	5e4a <_fstat_r+0x1e>
    5e48:	602b      	str	r3, [r5, #0]
    5e4a:	bd70      	pop	{r4, r5, r6, pc}
    5e4c:	20001670 	.word	0x20001670

00005e50 <_isatty_r>:
    5e50:	2300      	movs	r3, #0
    5e52:	b570      	push	{r4, r5, r6, lr}
    5e54:	4c06      	ldr	r4, [pc, #24]	; (5e70 <_isatty_r+0x20>)
    5e56:	0005      	movs	r5, r0
    5e58:	0008      	movs	r0, r1
    5e5a:	6023      	str	r3, [r4, #0]
    5e5c:	f7fc fd8c 	bl	2978 <_isatty>
    5e60:	1c43      	adds	r3, r0, #1
    5e62:	d103      	bne.n	5e6c <_isatty_r+0x1c>
    5e64:	6823      	ldr	r3, [r4, #0]
    5e66:	2b00      	cmp	r3, #0
    5e68:	d000      	beq.n	5e6c <_isatty_r+0x1c>
    5e6a:	602b      	str	r3, [r5, #0]
    5e6c:	bd70      	pop	{r4, r5, r6, pc}
    5e6e:	46c0      	nop			; (mov r8, r8)
    5e70:	20001670 	.word	0x20001670

00005e74 <_lseek_r>:
    5e74:	b570      	push	{r4, r5, r6, lr}
    5e76:	0005      	movs	r5, r0
    5e78:	0008      	movs	r0, r1
    5e7a:	0011      	movs	r1, r2
    5e7c:	2200      	movs	r2, #0
    5e7e:	4c06      	ldr	r4, [pc, #24]	; (5e98 <_lseek_r+0x24>)
    5e80:	6022      	str	r2, [r4, #0]
    5e82:	001a      	movs	r2, r3
    5e84:	f7fc fd7a 	bl	297c <_lseek>
    5e88:	1c43      	adds	r3, r0, #1
    5e8a:	d103      	bne.n	5e94 <_lseek_r+0x20>
    5e8c:	6823      	ldr	r3, [r4, #0]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d000      	beq.n	5e94 <_lseek_r+0x20>
    5e92:	602b      	str	r3, [r5, #0]
    5e94:	bd70      	pop	{r4, r5, r6, pc}
    5e96:	46c0      	nop			; (mov r8, r8)
    5e98:	20001670 	.word	0x20001670

00005e9c <__ascii_mbtowc>:
    5e9c:	b082      	sub	sp, #8
    5e9e:	2900      	cmp	r1, #0
    5ea0:	d100      	bne.n	5ea4 <__ascii_mbtowc+0x8>
    5ea2:	a901      	add	r1, sp, #4
    5ea4:	1e10      	subs	r0, r2, #0
    5ea6:	d006      	beq.n	5eb6 <__ascii_mbtowc+0x1a>
    5ea8:	2b00      	cmp	r3, #0
    5eaa:	d006      	beq.n	5eba <__ascii_mbtowc+0x1e>
    5eac:	7813      	ldrb	r3, [r2, #0]
    5eae:	600b      	str	r3, [r1, #0]
    5eb0:	7810      	ldrb	r0, [r2, #0]
    5eb2:	1e43      	subs	r3, r0, #1
    5eb4:	4198      	sbcs	r0, r3
    5eb6:	b002      	add	sp, #8
    5eb8:	4770      	bx	lr
    5eba:	2002      	movs	r0, #2
    5ebc:	4240      	negs	r0, r0
    5ebe:	e7fa      	b.n	5eb6 <__ascii_mbtowc+0x1a>

00005ec0 <__malloc_lock>:
    5ec0:	4770      	bx	lr

00005ec2 <__malloc_unlock>:
    5ec2:	4770      	bx	lr

00005ec4 <_read_r>:
    5ec4:	b570      	push	{r4, r5, r6, lr}
    5ec6:	0005      	movs	r5, r0
    5ec8:	0008      	movs	r0, r1
    5eca:	0011      	movs	r1, r2
    5ecc:	2200      	movs	r2, #0
    5ece:	4c06      	ldr	r4, [pc, #24]	; (5ee8 <_read_r+0x24>)
    5ed0:	6022      	str	r2, [r4, #0]
    5ed2:	001a      	movs	r2, r3
    5ed4:	f7fc fcec 	bl	28b0 <_read>
    5ed8:	1c43      	adds	r3, r0, #1
    5eda:	d103      	bne.n	5ee4 <_read_r+0x20>
    5edc:	6823      	ldr	r3, [r4, #0]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d000      	beq.n	5ee4 <_read_r+0x20>
    5ee2:	602b      	str	r3, [r5, #0]
    5ee4:	bd70      	pop	{r4, r5, r6, pc}
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	20001670 	.word	0x20001670

00005eec <__ascii_wctomb>:
    5eec:	1e0b      	subs	r3, r1, #0
    5eee:	d004      	beq.n	5efa <__ascii_wctomb+0xe>
    5ef0:	2aff      	cmp	r2, #255	; 0xff
    5ef2:	d904      	bls.n	5efe <__ascii_wctomb+0x12>
    5ef4:	238a      	movs	r3, #138	; 0x8a
    5ef6:	6003      	str	r3, [r0, #0]
    5ef8:	3b8b      	subs	r3, #139	; 0x8b
    5efa:	0018      	movs	r0, r3
    5efc:	4770      	bx	lr
    5efe:	700a      	strb	r2, [r1, #0]
    5f00:	2301      	movs	r3, #1
    5f02:	e7fa      	b.n	5efa <__ascii_wctomb+0xe>

00005f04 <__gnu_thumb1_case_uqi>:
    5f04:	b402      	push	{r1}
    5f06:	4671      	mov	r1, lr
    5f08:	0849      	lsrs	r1, r1, #1
    5f0a:	0049      	lsls	r1, r1, #1
    5f0c:	5c09      	ldrb	r1, [r1, r0]
    5f0e:	0049      	lsls	r1, r1, #1
    5f10:	448e      	add	lr, r1
    5f12:	bc02      	pop	{r1}
    5f14:	4770      	bx	lr
    5f16:	46c0      	nop			; (mov r8, r8)

00005f18 <__udivsi3>:
    5f18:	2200      	movs	r2, #0
    5f1a:	0843      	lsrs	r3, r0, #1
    5f1c:	428b      	cmp	r3, r1
    5f1e:	d374      	bcc.n	600a <__udivsi3+0xf2>
    5f20:	0903      	lsrs	r3, r0, #4
    5f22:	428b      	cmp	r3, r1
    5f24:	d35f      	bcc.n	5fe6 <__udivsi3+0xce>
    5f26:	0a03      	lsrs	r3, r0, #8
    5f28:	428b      	cmp	r3, r1
    5f2a:	d344      	bcc.n	5fb6 <__udivsi3+0x9e>
    5f2c:	0b03      	lsrs	r3, r0, #12
    5f2e:	428b      	cmp	r3, r1
    5f30:	d328      	bcc.n	5f84 <__udivsi3+0x6c>
    5f32:	0c03      	lsrs	r3, r0, #16
    5f34:	428b      	cmp	r3, r1
    5f36:	d30d      	bcc.n	5f54 <__udivsi3+0x3c>
    5f38:	22ff      	movs	r2, #255	; 0xff
    5f3a:	0209      	lsls	r1, r1, #8
    5f3c:	ba12      	rev	r2, r2
    5f3e:	0c03      	lsrs	r3, r0, #16
    5f40:	428b      	cmp	r3, r1
    5f42:	d302      	bcc.n	5f4a <__udivsi3+0x32>
    5f44:	1212      	asrs	r2, r2, #8
    5f46:	0209      	lsls	r1, r1, #8
    5f48:	d065      	beq.n	6016 <__udivsi3+0xfe>
    5f4a:	0b03      	lsrs	r3, r0, #12
    5f4c:	428b      	cmp	r3, r1
    5f4e:	d319      	bcc.n	5f84 <__udivsi3+0x6c>
    5f50:	e000      	b.n	5f54 <__udivsi3+0x3c>
    5f52:	0a09      	lsrs	r1, r1, #8
    5f54:	0bc3      	lsrs	r3, r0, #15
    5f56:	428b      	cmp	r3, r1
    5f58:	d301      	bcc.n	5f5e <__udivsi3+0x46>
    5f5a:	03cb      	lsls	r3, r1, #15
    5f5c:	1ac0      	subs	r0, r0, r3
    5f5e:	4152      	adcs	r2, r2
    5f60:	0b83      	lsrs	r3, r0, #14
    5f62:	428b      	cmp	r3, r1
    5f64:	d301      	bcc.n	5f6a <__udivsi3+0x52>
    5f66:	038b      	lsls	r3, r1, #14
    5f68:	1ac0      	subs	r0, r0, r3
    5f6a:	4152      	adcs	r2, r2
    5f6c:	0b43      	lsrs	r3, r0, #13
    5f6e:	428b      	cmp	r3, r1
    5f70:	d301      	bcc.n	5f76 <__udivsi3+0x5e>
    5f72:	034b      	lsls	r3, r1, #13
    5f74:	1ac0      	subs	r0, r0, r3
    5f76:	4152      	adcs	r2, r2
    5f78:	0b03      	lsrs	r3, r0, #12
    5f7a:	428b      	cmp	r3, r1
    5f7c:	d301      	bcc.n	5f82 <__udivsi3+0x6a>
    5f7e:	030b      	lsls	r3, r1, #12
    5f80:	1ac0      	subs	r0, r0, r3
    5f82:	4152      	adcs	r2, r2
    5f84:	0ac3      	lsrs	r3, r0, #11
    5f86:	428b      	cmp	r3, r1
    5f88:	d301      	bcc.n	5f8e <__udivsi3+0x76>
    5f8a:	02cb      	lsls	r3, r1, #11
    5f8c:	1ac0      	subs	r0, r0, r3
    5f8e:	4152      	adcs	r2, r2
    5f90:	0a83      	lsrs	r3, r0, #10
    5f92:	428b      	cmp	r3, r1
    5f94:	d301      	bcc.n	5f9a <__udivsi3+0x82>
    5f96:	028b      	lsls	r3, r1, #10
    5f98:	1ac0      	subs	r0, r0, r3
    5f9a:	4152      	adcs	r2, r2
    5f9c:	0a43      	lsrs	r3, r0, #9
    5f9e:	428b      	cmp	r3, r1
    5fa0:	d301      	bcc.n	5fa6 <__udivsi3+0x8e>
    5fa2:	024b      	lsls	r3, r1, #9
    5fa4:	1ac0      	subs	r0, r0, r3
    5fa6:	4152      	adcs	r2, r2
    5fa8:	0a03      	lsrs	r3, r0, #8
    5faa:	428b      	cmp	r3, r1
    5fac:	d301      	bcc.n	5fb2 <__udivsi3+0x9a>
    5fae:	020b      	lsls	r3, r1, #8
    5fb0:	1ac0      	subs	r0, r0, r3
    5fb2:	4152      	adcs	r2, r2
    5fb4:	d2cd      	bcs.n	5f52 <__udivsi3+0x3a>
    5fb6:	09c3      	lsrs	r3, r0, #7
    5fb8:	428b      	cmp	r3, r1
    5fba:	d301      	bcc.n	5fc0 <__udivsi3+0xa8>
    5fbc:	01cb      	lsls	r3, r1, #7
    5fbe:	1ac0      	subs	r0, r0, r3
    5fc0:	4152      	adcs	r2, r2
    5fc2:	0983      	lsrs	r3, r0, #6
    5fc4:	428b      	cmp	r3, r1
    5fc6:	d301      	bcc.n	5fcc <__udivsi3+0xb4>
    5fc8:	018b      	lsls	r3, r1, #6
    5fca:	1ac0      	subs	r0, r0, r3
    5fcc:	4152      	adcs	r2, r2
    5fce:	0943      	lsrs	r3, r0, #5
    5fd0:	428b      	cmp	r3, r1
    5fd2:	d301      	bcc.n	5fd8 <__udivsi3+0xc0>
    5fd4:	014b      	lsls	r3, r1, #5
    5fd6:	1ac0      	subs	r0, r0, r3
    5fd8:	4152      	adcs	r2, r2
    5fda:	0903      	lsrs	r3, r0, #4
    5fdc:	428b      	cmp	r3, r1
    5fde:	d301      	bcc.n	5fe4 <__udivsi3+0xcc>
    5fe0:	010b      	lsls	r3, r1, #4
    5fe2:	1ac0      	subs	r0, r0, r3
    5fe4:	4152      	adcs	r2, r2
    5fe6:	08c3      	lsrs	r3, r0, #3
    5fe8:	428b      	cmp	r3, r1
    5fea:	d301      	bcc.n	5ff0 <__udivsi3+0xd8>
    5fec:	00cb      	lsls	r3, r1, #3
    5fee:	1ac0      	subs	r0, r0, r3
    5ff0:	4152      	adcs	r2, r2
    5ff2:	0883      	lsrs	r3, r0, #2
    5ff4:	428b      	cmp	r3, r1
    5ff6:	d301      	bcc.n	5ffc <__udivsi3+0xe4>
    5ff8:	008b      	lsls	r3, r1, #2
    5ffa:	1ac0      	subs	r0, r0, r3
    5ffc:	4152      	adcs	r2, r2
    5ffe:	0843      	lsrs	r3, r0, #1
    6000:	428b      	cmp	r3, r1
    6002:	d301      	bcc.n	6008 <__udivsi3+0xf0>
    6004:	004b      	lsls	r3, r1, #1
    6006:	1ac0      	subs	r0, r0, r3
    6008:	4152      	adcs	r2, r2
    600a:	1a41      	subs	r1, r0, r1
    600c:	d200      	bcs.n	6010 <__udivsi3+0xf8>
    600e:	4601      	mov	r1, r0
    6010:	4152      	adcs	r2, r2
    6012:	4610      	mov	r0, r2
    6014:	4770      	bx	lr
    6016:	e7ff      	b.n	6018 <__udivsi3+0x100>
    6018:	b501      	push	{r0, lr}
    601a:	2000      	movs	r0, #0
    601c:	f000 f8f0 	bl	6200 <__aeabi_idiv0>
    6020:	bd02      	pop	{r1, pc}
    6022:	46c0      	nop			; (mov r8, r8)

00006024 <__aeabi_uidivmod>:
    6024:	2900      	cmp	r1, #0
    6026:	d0f7      	beq.n	6018 <__udivsi3+0x100>
    6028:	e776      	b.n	5f18 <__udivsi3>
    602a:	4770      	bx	lr

0000602c <__divsi3>:
    602c:	4603      	mov	r3, r0
    602e:	430b      	orrs	r3, r1
    6030:	d47f      	bmi.n	6132 <__divsi3+0x106>
    6032:	2200      	movs	r2, #0
    6034:	0843      	lsrs	r3, r0, #1
    6036:	428b      	cmp	r3, r1
    6038:	d374      	bcc.n	6124 <__divsi3+0xf8>
    603a:	0903      	lsrs	r3, r0, #4
    603c:	428b      	cmp	r3, r1
    603e:	d35f      	bcc.n	6100 <__divsi3+0xd4>
    6040:	0a03      	lsrs	r3, r0, #8
    6042:	428b      	cmp	r3, r1
    6044:	d344      	bcc.n	60d0 <__divsi3+0xa4>
    6046:	0b03      	lsrs	r3, r0, #12
    6048:	428b      	cmp	r3, r1
    604a:	d328      	bcc.n	609e <__divsi3+0x72>
    604c:	0c03      	lsrs	r3, r0, #16
    604e:	428b      	cmp	r3, r1
    6050:	d30d      	bcc.n	606e <__divsi3+0x42>
    6052:	22ff      	movs	r2, #255	; 0xff
    6054:	0209      	lsls	r1, r1, #8
    6056:	ba12      	rev	r2, r2
    6058:	0c03      	lsrs	r3, r0, #16
    605a:	428b      	cmp	r3, r1
    605c:	d302      	bcc.n	6064 <__divsi3+0x38>
    605e:	1212      	asrs	r2, r2, #8
    6060:	0209      	lsls	r1, r1, #8
    6062:	d065      	beq.n	6130 <__divsi3+0x104>
    6064:	0b03      	lsrs	r3, r0, #12
    6066:	428b      	cmp	r3, r1
    6068:	d319      	bcc.n	609e <__divsi3+0x72>
    606a:	e000      	b.n	606e <__divsi3+0x42>
    606c:	0a09      	lsrs	r1, r1, #8
    606e:	0bc3      	lsrs	r3, r0, #15
    6070:	428b      	cmp	r3, r1
    6072:	d301      	bcc.n	6078 <__divsi3+0x4c>
    6074:	03cb      	lsls	r3, r1, #15
    6076:	1ac0      	subs	r0, r0, r3
    6078:	4152      	adcs	r2, r2
    607a:	0b83      	lsrs	r3, r0, #14
    607c:	428b      	cmp	r3, r1
    607e:	d301      	bcc.n	6084 <__divsi3+0x58>
    6080:	038b      	lsls	r3, r1, #14
    6082:	1ac0      	subs	r0, r0, r3
    6084:	4152      	adcs	r2, r2
    6086:	0b43      	lsrs	r3, r0, #13
    6088:	428b      	cmp	r3, r1
    608a:	d301      	bcc.n	6090 <__divsi3+0x64>
    608c:	034b      	lsls	r3, r1, #13
    608e:	1ac0      	subs	r0, r0, r3
    6090:	4152      	adcs	r2, r2
    6092:	0b03      	lsrs	r3, r0, #12
    6094:	428b      	cmp	r3, r1
    6096:	d301      	bcc.n	609c <__divsi3+0x70>
    6098:	030b      	lsls	r3, r1, #12
    609a:	1ac0      	subs	r0, r0, r3
    609c:	4152      	adcs	r2, r2
    609e:	0ac3      	lsrs	r3, r0, #11
    60a0:	428b      	cmp	r3, r1
    60a2:	d301      	bcc.n	60a8 <__divsi3+0x7c>
    60a4:	02cb      	lsls	r3, r1, #11
    60a6:	1ac0      	subs	r0, r0, r3
    60a8:	4152      	adcs	r2, r2
    60aa:	0a83      	lsrs	r3, r0, #10
    60ac:	428b      	cmp	r3, r1
    60ae:	d301      	bcc.n	60b4 <__divsi3+0x88>
    60b0:	028b      	lsls	r3, r1, #10
    60b2:	1ac0      	subs	r0, r0, r3
    60b4:	4152      	adcs	r2, r2
    60b6:	0a43      	lsrs	r3, r0, #9
    60b8:	428b      	cmp	r3, r1
    60ba:	d301      	bcc.n	60c0 <__divsi3+0x94>
    60bc:	024b      	lsls	r3, r1, #9
    60be:	1ac0      	subs	r0, r0, r3
    60c0:	4152      	adcs	r2, r2
    60c2:	0a03      	lsrs	r3, r0, #8
    60c4:	428b      	cmp	r3, r1
    60c6:	d301      	bcc.n	60cc <__divsi3+0xa0>
    60c8:	020b      	lsls	r3, r1, #8
    60ca:	1ac0      	subs	r0, r0, r3
    60cc:	4152      	adcs	r2, r2
    60ce:	d2cd      	bcs.n	606c <__divsi3+0x40>
    60d0:	09c3      	lsrs	r3, r0, #7
    60d2:	428b      	cmp	r3, r1
    60d4:	d301      	bcc.n	60da <__divsi3+0xae>
    60d6:	01cb      	lsls	r3, r1, #7
    60d8:	1ac0      	subs	r0, r0, r3
    60da:	4152      	adcs	r2, r2
    60dc:	0983      	lsrs	r3, r0, #6
    60de:	428b      	cmp	r3, r1
    60e0:	d301      	bcc.n	60e6 <__divsi3+0xba>
    60e2:	018b      	lsls	r3, r1, #6
    60e4:	1ac0      	subs	r0, r0, r3
    60e6:	4152      	adcs	r2, r2
    60e8:	0943      	lsrs	r3, r0, #5
    60ea:	428b      	cmp	r3, r1
    60ec:	d301      	bcc.n	60f2 <__divsi3+0xc6>
    60ee:	014b      	lsls	r3, r1, #5
    60f0:	1ac0      	subs	r0, r0, r3
    60f2:	4152      	adcs	r2, r2
    60f4:	0903      	lsrs	r3, r0, #4
    60f6:	428b      	cmp	r3, r1
    60f8:	d301      	bcc.n	60fe <__divsi3+0xd2>
    60fa:	010b      	lsls	r3, r1, #4
    60fc:	1ac0      	subs	r0, r0, r3
    60fe:	4152      	adcs	r2, r2
    6100:	08c3      	lsrs	r3, r0, #3
    6102:	428b      	cmp	r3, r1
    6104:	d301      	bcc.n	610a <__divsi3+0xde>
    6106:	00cb      	lsls	r3, r1, #3
    6108:	1ac0      	subs	r0, r0, r3
    610a:	4152      	adcs	r2, r2
    610c:	0883      	lsrs	r3, r0, #2
    610e:	428b      	cmp	r3, r1
    6110:	d301      	bcc.n	6116 <__divsi3+0xea>
    6112:	008b      	lsls	r3, r1, #2
    6114:	1ac0      	subs	r0, r0, r3
    6116:	4152      	adcs	r2, r2
    6118:	0843      	lsrs	r3, r0, #1
    611a:	428b      	cmp	r3, r1
    611c:	d301      	bcc.n	6122 <__divsi3+0xf6>
    611e:	004b      	lsls	r3, r1, #1
    6120:	1ac0      	subs	r0, r0, r3
    6122:	4152      	adcs	r2, r2
    6124:	1a41      	subs	r1, r0, r1
    6126:	d200      	bcs.n	612a <__divsi3+0xfe>
    6128:	4601      	mov	r1, r0
    612a:	4152      	adcs	r2, r2
    612c:	4610      	mov	r0, r2
    612e:	4770      	bx	lr
    6130:	e05d      	b.n	61ee <__divsi3+0x1c2>
    6132:	0fca      	lsrs	r2, r1, #31
    6134:	d000      	beq.n	6138 <__divsi3+0x10c>
    6136:	4249      	negs	r1, r1
    6138:	1003      	asrs	r3, r0, #32
    613a:	d300      	bcc.n	613e <__divsi3+0x112>
    613c:	4240      	negs	r0, r0
    613e:	4053      	eors	r3, r2
    6140:	2200      	movs	r2, #0
    6142:	469c      	mov	ip, r3
    6144:	0903      	lsrs	r3, r0, #4
    6146:	428b      	cmp	r3, r1
    6148:	d32d      	bcc.n	61a6 <__divsi3+0x17a>
    614a:	0a03      	lsrs	r3, r0, #8
    614c:	428b      	cmp	r3, r1
    614e:	d312      	bcc.n	6176 <__divsi3+0x14a>
    6150:	22fc      	movs	r2, #252	; 0xfc
    6152:	0189      	lsls	r1, r1, #6
    6154:	ba12      	rev	r2, r2
    6156:	0a03      	lsrs	r3, r0, #8
    6158:	428b      	cmp	r3, r1
    615a:	d30c      	bcc.n	6176 <__divsi3+0x14a>
    615c:	0189      	lsls	r1, r1, #6
    615e:	1192      	asrs	r2, r2, #6
    6160:	428b      	cmp	r3, r1
    6162:	d308      	bcc.n	6176 <__divsi3+0x14a>
    6164:	0189      	lsls	r1, r1, #6
    6166:	1192      	asrs	r2, r2, #6
    6168:	428b      	cmp	r3, r1
    616a:	d304      	bcc.n	6176 <__divsi3+0x14a>
    616c:	0189      	lsls	r1, r1, #6
    616e:	d03a      	beq.n	61e6 <__divsi3+0x1ba>
    6170:	1192      	asrs	r2, r2, #6
    6172:	e000      	b.n	6176 <__divsi3+0x14a>
    6174:	0989      	lsrs	r1, r1, #6
    6176:	09c3      	lsrs	r3, r0, #7
    6178:	428b      	cmp	r3, r1
    617a:	d301      	bcc.n	6180 <__divsi3+0x154>
    617c:	01cb      	lsls	r3, r1, #7
    617e:	1ac0      	subs	r0, r0, r3
    6180:	4152      	adcs	r2, r2
    6182:	0983      	lsrs	r3, r0, #6
    6184:	428b      	cmp	r3, r1
    6186:	d301      	bcc.n	618c <__divsi3+0x160>
    6188:	018b      	lsls	r3, r1, #6
    618a:	1ac0      	subs	r0, r0, r3
    618c:	4152      	adcs	r2, r2
    618e:	0943      	lsrs	r3, r0, #5
    6190:	428b      	cmp	r3, r1
    6192:	d301      	bcc.n	6198 <__divsi3+0x16c>
    6194:	014b      	lsls	r3, r1, #5
    6196:	1ac0      	subs	r0, r0, r3
    6198:	4152      	adcs	r2, r2
    619a:	0903      	lsrs	r3, r0, #4
    619c:	428b      	cmp	r3, r1
    619e:	d301      	bcc.n	61a4 <__divsi3+0x178>
    61a0:	010b      	lsls	r3, r1, #4
    61a2:	1ac0      	subs	r0, r0, r3
    61a4:	4152      	adcs	r2, r2
    61a6:	08c3      	lsrs	r3, r0, #3
    61a8:	428b      	cmp	r3, r1
    61aa:	d301      	bcc.n	61b0 <__divsi3+0x184>
    61ac:	00cb      	lsls	r3, r1, #3
    61ae:	1ac0      	subs	r0, r0, r3
    61b0:	4152      	adcs	r2, r2
    61b2:	0883      	lsrs	r3, r0, #2
    61b4:	428b      	cmp	r3, r1
    61b6:	d301      	bcc.n	61bc <__divsi3+0x190>
    61b8:	008b      	lsls	r3, r1, #2
    61ba:	1ac0      	subs	r0, r0, r3
    61bc:	4152      	adcs	r2, r2
    61be:	d2d9      	bcs.n	6174 <__divsi3+0x148>
    61c0:	0843      	lsrs	r3, r0, #1
    61c2:	428b      	cmp	r3, r1
    61c4:	d301      	bcc.n	61ca <__divsi3+0x19e>
    61c6:	004b      	lsls	r3, r1, #1
    61c8:	1ac0      	subs	r0, r0, r3
    61ca:	4152      	adcs	r2, r2
    61cc:	1a41      	subs	r1, r0, r1
    61ce:	d200      	bcs.n	61d2 <__divsi3+0x1a6>
    61d0:	4601      	mov	r1, r0
    61d2:	4663      	mov	r3, ip
    61d4:	4152      	adcs	r2, r2
    61d6:	105b      	asrs	r3, r3, #1
    61d8:	4610      	mov	r0, r2
    61da:	d301      	bcc.n	61e0 <__divsi3+0x1b4>
    61dc:	4240      	negs	r0, r0
    61de:	2b00      	cmp	r3, #0
    61e0:	d500      	bpl.n	61e4 <__divsi3+0x1b8>
    61e2:	4249      	negs	r1, r1
    61e4:	4770      	bx	lr
    61e6:	4663      	mov	r3, ip
    61e8:	105b      	asrs	r3, r3, #1
    61ea:	d300      	bcc.n	61ee <__divsi3+0x1c2>
    61ec:	4240      	negs	r0, r0
    61ee:	b501      	push	{r0, lr}
    61f0:	2000      	movs	r0, #0
    61f2:	f000 f805 	bl	6200 <__aeabi_idiv0>
    61f6:	bd02      	pop	{r1, pc}

000061f8 <__aeabi_idivmod>:
    61f8:	2900      	cmp	r1, #0
    61fa:	d0f8      	beq.n	61ee <__divsi3+0x1c2>
    61fc:	e716      	b.n	602c <__divsi3>
    61fe:	4770      	bx	lr

00006200 <__aeabi_idiv0>:
    6200:	4770      	bx	lr
    6202:	46c0      	nop			; (mov r8, r8)

00006204 <__aeabi_cdrcmple>:
    6204:	4684      	mov	ip, r0
    6206:	1c10      	adds	r0, r2, #0
    6208:	4662      	mov	r2, ip
    620a:	468c      	mov	ip, r1
    620c:	1c19      	adds	r1, r3, #0
    620e:	4663      	mov	r3, ip
    6210:	e000      	b.n	6214 <__aeabi_cdcmpeq>
    6212:	46c0      	nop			; (mov r8, r8)

00006214 <__aeabi_cdcmpeq>:
    6214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6216:	f001 fc6b 	bl	7af0 <__ledf2>
    621a:	2800      	cmp	r0, #0
    621c:	d401      	bmi.n	6222 <__aeabi_cdcmpeq+0xe>
    621e:	2100      	movs	r1, #0
    6220:	42c8      	cmn	r0, r1
    6222:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006224 <__aeabi_dcmpeq>:
    6224:	b510      	push	{r4, lr}
    6226:	f001 fbc5 	bl	79b4 <__eqdf2>
    622a:	4240      	negs	r0, r0
    622c:	3001      	adds	r0, #1
    622e:	bd10      	pop	{r4, pc}

00006230 <__aeabi_dcmplt>:
    6230:	b510      	push	{r4, lr}
    6232:	f001 fc5d 	bl	7af0 <__ledf2>
    6236:	2800      	cmp	r0, #0
    6238:	db01      	blt.n	623e <__aeabi_dcmplt+0xe>
    623a:	2000      	movs	r0, #0
    623c:	bd10      	pop	{r4, pc}
    623e:	2001      	movs	r0, #1
    6240:	bd10      	pop	{r4, pc}
    6242:	46c0      	nop			; (mov r8, r8)

00006244 <__aeabi_dcmple>:
    6244:	b510      	push	{r4, lr}
    6246:	f001 fc53 	bl	7af0 <__ledf2>
    624a:	2800      	cmp	r0, #0
    624c:	dd01      	ble.n	6252 <__aeabi_dcmple+0xe>
    624e:	2000      	movs	r0, #0
    6250:	bd10      	pop	{r4, pc}
    6252:	2001      	movs	r0, #1
    6254:	bd10      	pop	{r4, pc}
    6256:	46c0      	nop			; (mov r8, r8)

00006258 <__aeabi_dcmpgt>:
    6258:	b510      	push	{r4, lr}
    625a:	f001 fbe5 	bl	7a28 <__gedf2>
    625e:	2800      	cmp	r0, #0
    6260:	dc01      	bgt.n	6266 <__aeabi_dcmpgt+0xe>
    6262:	2000      	movs	r0, #0
    6264:	bd10      	pop	{r4, pc}
    6266:	2001      	movs	r0, #1
    6268:	bd10      	pop	{r4, pc}
    626a:	46c0      	nop			; (mov r8, r8)

0000626c <__aeabi_dcmpge>:
    626c:	b510      	push	{r4, lr}
    626e:	f001 fbdb 	bl	7a28 <__gedf2>
    6272:	2800      	cmp	r0, #0
    6274:	da01      	bge.n	627a <__aeabi_dcmpge+0xe>
    6276:	2000      	movs	r0, #0
    6278:	bd10      	pop	{r4, pc}
    627a:	2001      	movs	r0, #1
    627c:	bd10      	pop	{r4, pc}
    627e:	46c0      	nop			; (mov r8, r8)

00006280 <__aeabi_cfrcmple>:
    6280:	4684      	mov	ip, r0
    6282:	1c08      	adds	r0, r1, #0
    6284:	4661      	mov	r1, ip
    6286:	e7ff      	b.n	6288 <__aeabi_cfcmpeq>

00006288 <__aeabi_cfcmpeq>:
    6288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    628a:	f000 fb9d 	bl	69c8 <__lesf2>
    628e:	2800      	cmp	r0, #0
    6290:	d401      	bmi.n	6296 <__aeabi_cfcmpeq+0xe>
    6292:	2100      	movs	r1, #0
    6294:	42c8      	cmn	r0, r1
    6296:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006298 <__aeabi_fcmpeq>:
    6298:	b510      	push	{r4, lr}
    629a:	f000 fb2f 	bl	68fc <__eqsf2>
    629e:	4240      	negs	r0, r0
    62a0:	3001      	adds	r0, #1
    62a2:	bd10      	pop	{r4, pc}

000062a4 <__aeabi_fcmplt>:
    62a4:	b510      	push	{r4, lr}
    62a6:	f000 fb8f 	bl	69c8 <__lesf2>
    62aa:	2800      	cmp	r0, #0
    62ac:	db01      	blt.n	62b2 <__aeabi_fcmplt+0xe>
    62ae:	2000      	movs	r0, #0
    62b0:	bd10      	pop	{r4, pc}
    62b2:	2001      	movs	r0, #1
    62b4:	bd10      	pop	{r4, pc}
    62b6:	46c0      	nop			; (mov r8, r8)

000062b8 <__aeabi_fcmple>:
    62b8:	b510      	push	{r4, lr}
    62ba:	f000 fb85 	bl	69c8 <__lesf2>
    62be:	2800      	cmp	r0, #0
    62c0:	dd01      	ble.n	62c6 <__aeabi_fcmple+0xe>
    62c2:	2000      	movs	r0, #0
    62c4:	bd10      	pop	{r4, pc}
    62c6:	2001      	movs	r0, #1
    62c8:	bd10      	pop	{r4, pc}
    62ca:	46c0      	nop			; (mov r8, r8)

000062cc <__aeabi_fcmpgt>:
    62cc:	b510      	push	{r4, lr}
    62ce:	f000 fb3b 	bl	6948 <__gesf2>
    62d2:	2800      	cmp	r0, #0
    62d4:	dc01      	bgt.n	62da <__aeabi_fcmpgt+0xe>
    62d6:	2000      	movs	r0, #0
    62d8:	bd10      	pop	{r4, pc}
    62da:	2001      	movs	r0, #1
    62dc:	bd10      	pop	{r4, pc}
    62de:	46c0      	nop			; (mov r8, r8)

000062e0 <__aeabi_fcmpge>:
    62e0:	b510      	push	{r4, lr}
    62e2:	f000 fb31 	bl	6948 <__gesf2>
    62e6:	2800      	cmp	r0, #0
    62e8:	da01      	bge.n	62ee <__aeabi_fcmpge+0xe>
    62ea:	2000      	movs	r0, #0
    62ec:	bd10      	pop	{r4, pc}
    62ee:	2001      	movs	r0, #1
    62f0:	bd10      	pop	{r4, pc}
    62f2:	46c0      	nop			; (mov r8, r8)

000062f4 <__aeabi_lmul>:
    62f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62f6:	46ce      	mov	lr, r9
    62f8:	4647      	mov	r7, r8
    62fa:	0415      	lsls	r5, r2, #16
    62fc:	0c2d      	lsrs	r5, r5, #16
    62fe:	002e      	movs	r6, r5
    6300:	b580      	push	{r7, lr}
    6302:	0407      	lsls	r7, r0, #16
    6304:	0c14      	lsrs	r4, r2, #16
    6306:	0c3f      	lsrs	r7, r7, #16
    6308:	4699      	mov	r9, r3
    630a:	0c03      	lsrs	r3, r0, #16
    630c:	437e      	muls	r6, r7
    630e:	435d      	muls	r5, r3
    6310:	4367      	muls	r7, r4
    6312:	4363      	muls	r3, r4
    6314:	197f      	adds	r7, r7, r5
    6316:	0c34      	lsrs	r4, r6, #16
    6318:	19e4      	adds	r4, r4, r7
    631a:	469c      	mov	ip, r3
    631c:	42a5      	cmp	r5, r4
    631e:	d903      	bls.n	6328 <__aeabi_lmul+0x34>
    6320:	2380      	movs	r3, #128	; 0x80
    6322:	025b      	lsls	r3, r3, #9
    6324:	4698      	mov	r8, r3
    6326:	44c4      	add	ip, r8
    6328:	464b      	mov	r3, r9
    632a:	4351      	muls	r1, r2
    632c:	4343      	muls	r3, r0
    632e:	0436      	lsls	r6, r6, #16
    6330:	0c36      	lsrs	r6, r6, #16
    6332:	0c25      	lsrs	r5, r4, #16
    6334:	0424      	lsls	r4, r4, #16
    6336:	4465      	add	r5, ip
    6338:	19a4      	adds	r4, r4, r6
    633a:	1859      	adds	r1, r3, r1
    633c:	1949      	adds	r1, r1, r5
    633e:	0020      	movs	r0, r4
    6340:	bc0c      	pop	{r2, r3}
    6342:	4690      	mov	r8, r2
    6344:	4699      	mov	r9, r3
    6346:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006348 <__aeabi_fadd>:
    6348:	b5f0      	push	{r4, r5, r6, r7, lr}
    634a:	46c6      	mov	lr, r8
    634c:	024e      	lsls	r6, r1, #9
    634e:	0247      	lsls	r7, r0, #9
    6350:	0a76      	lsrs	r6, r6, #9
    6352:	0a7b      	lsrs	r3, r7, #9
    6354:	0044      	lsls	r4, r0, #1
    6356:	0fc5      	lsrs	r5, r0, #31
    6358:	00f7      	lsls	r7, r6, #3
    635a:	0048      	lsls	r0, r1, #1
    635c:	4698      	mov	r8, r3
    635e:	b500      	push	{lr}
    6360:	0e24      	lsrs	r4, r4, #24
    6362:	002a      	movs	r2, r5
    6364:	00db      	lsls	r3, r3, #3
    6366:	0e00      	lsrs	r0, r0, #24
    6368:	0fc9      	lsrs	r1, r1, #31
    636a:	46bc      	mov	ip, r7
    636c:	428d      	cmp	r5, r1
    636e:	d067      	beq.n	6440 <__aeabi_fadd+0xf8>
    6370:	1a22      	subs	r2, r4, r0
    6372:	2a00      	cmp	r2, #0
    6374:	dc00      	bgt.n	6378 <__aeabi_fadd+0x30>
    6376:	e0a5      	b.n	64c4 <__aeabi_fadd+0x17c>
    6378:	2800      	cmp	r0, #0
    637a:	d13a      	bne.n	63f2 <__aeabi_fadd+0xaa>
    637c:	2f00      	cmp	r7, #0
    637e:	d100      	bne.n	6382 <__aeabi_fadd+0x3a>
    6380:	e093      	b.n	64aa <__aeabi_fadd+0x162>
    6382:	1e51      	subs	r1, r2, #1
    6384:	2900      	cmp	r1, #0
    6386:	d000      	beq.n	638a <__aeabi_fadd+0x42>
    6388:	e0bc      	b.n	6504 <__aeabi_fadd+0x1bc>
    638a:	2401      	movs	r4, #1
    638c:	1bdb      	subs	r3, r3, r7
    638e:	015a      	lsls	r2, r3, #5
    6390:	d546      	bpl.n	6420 <__aeabi_fadd+0xd8>
    6392:	019b      	lsls	r3, r3, #6
    6394:	099e      	lsrs	r6, r3, #6
    6396:	0030      	movs	r0, r6
    6398:	f002 fb4c 	bl	8a34 <__clzsi2>
    639c:	3805      	subs	r0, #5
    639e:	4086      	lsls	r6, r0
    63a0:	4284      	cmp	r4, r0
    63a2:	dd00      	ble.n	63a6 <__aeabi_fadd+0x5e>
    63a4:	e09d      	b.n	64e2 <__aeabi_fadd+0x19a>
    63a6:	1b04      	subs	r4, r0, r4
    63a8:	0032      	movs	r2, r6
    63aa:	2020      	movs	r0, #32
    63ac:	3401      	adds	r4, #1
    63ae:	40e2      	lsrs	r2, r4
    63b0:	1b04      	subs	r4, r0, r4
    63b2:	40a6      	lsls	r6, r4
    63b4:	0033      	movs	r3, r6
    63b6:	1e5e      	subs	r6, r3, #1
    63b8:	41b3      	sbcs	r3, r6
    63ba:	2400      	movs	r4, #0
    63bc:	4313      	orrs	r3, r2
    63be:	075a      	lsls	r2, r3, #29
    63c0:	d004      	beq.n	63cc <__aeabi_fadd+0x84>
    63c2:	220f      	movs	r2, #15
    63c4:	401a      	ands	r2, r3
    63c6:	2a04      	cmp	r2, #4
    63c8:	d000      	beq.n	63cc <__aeabi_fadd+0x84>
    63ca:	3304      	adds	r3, #4
    63cc:	015a      	lsls	r2, r3, #5
    63ce:	d529      	bpl.n	6424 <__aeabi_fadd+0xdc>
    63d0:	3401      	adds	r4, #1
    63d2:	2cff      	cmp	r4, #255	; 0xff
    63d4:	d100      	bne.n	63d8 <__aeabi_fadd+0x90>
    63d6:	e081      	b.n	64dc <__aeabi_fadd+0x194>
    63d8:	002a      	movs	r2, r5
    63da:	019b      	lsls	r3, r3, #6
    63dc:	0a5b      	lsrs	r3, r3, #9
    63de:	b2e4      	uxtb	r4, r4
    63e0:	025b      	lsls	r3, r3, #9
    63e2:	05e4      	lsls	r4, r4, #23
    63e4:	0a58      	lsrs	r0, r3, #9
    63e6:	07d2      	lsls	r2, r2, #31
    63e8:	4320      	orrs	r0, r4
    63ea:	4310      	orrs	r0, r2
    63ec:	bc04      	pop	{r2}
    63ee:	4690      	mov	r8, r2
    63f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63f2:	2cff      	cmp	r4, #255	; 0xff
    63f4:	d0e3      	beq.n	63be <__aeabi_fadd+0x76>
    63f6:	2180      	movs	r1, #128	; 0x80
    63f8:	0038      	movs	r0, r7
    63fa:	04c9      	lsls	r1, r1, #19
    63fc:	4308      	orrs	r0, r1
    63fe:	4684      	mov	ip, r0
    6400:	2a1b      	cmp	r2, #27
    6402:	dd00      	ble.n	6406 <__aeabi_fadd+0xbe>
    6404:	e082      	b.n	650c <__aeabi_fadd+0x1c4>
    6406:	2020      	movs	r0, #32
    6408:	4661      	mov	r1, ip
    640a:	40d1      	lsrs	r1, r2
    640c:	1a82      	subs	r2, r0, r2
    640e:	4660      	mov	r0, ip
    6410:	4090      	lsls	r0, r2
    6412:	0002      	movs	r2, r0
    6414:	1e50      	subs	r0, r2, #1
    6416:	4182      	sbcs	r2, r0
    6418:	430a      	orrs	r2, r1
    641a:	1a9b      	subs	r3, r3, r2
    641c:	015a      	lsls	r2, r3, #5
    641e:	d4b8      	bmi.n	6392 <__aeabi_fadd+0x4a>
    6420:	075a      	lsls	r2, r3, #29
    6422:	d1ce      	bne.n	63c2 <__aeabi_fadd+0x7a>
    6424:	08de      	lsrs	r6, r3, #3
    6426:	002a      	movs	r2, r5
    6428:	2cff      	cmp	r4, #255	; 0xff
    642a:	d13a      	bne.n	64a2 <__aeabi_fadd+0x15a>
    642c:	2e00      	cmp	r6, #0
    642e:	d100      	bne.n	6432 <__aeabi_fadd+0xea>
    6430:	e0ae      	b.n	6590 <__aeabi_fadd+0x248>
    6432:	2380      	movs	r3, #128	; 0x80
    6434:	03db      	lsls	r3, r3, #15
    6436:	4333      	orrs	r3, r6
    6438:	025b      	lsls	r3, r3, #9
    643a:	0a5b      	lsrs	r3, r3, #9
    643c:	24ff      	movs	r4, #255	; 0xff
    643e:	e7cf      	b.n	63e0 <__aeabi_fadd+0x98>
    6440:	1a21      	subs	r1, r4, r0
    6442:	2900      	cmp	r1, #0
    6444:	dd52      	ble.n	64ec <__aeabi_fadd+0x1a4>
    6446:	2800      	cmp	r0, #0
    6448:	d031      	beq.n	64ae <__aeabi_fadd+0x166>
    644a:	2cff      	cmp	r4, #255	; 0xff
    644c:	d0b7      	beq.n	63be <__aeabi_fadd+0x76>
    644e:	2080      	movs	r0, #128	; 0x80
    6450:	003e      	movs	r6, r7
    6452:	04c0      	lsls	r0, r0, #19
    6454:	4306      	orrs	r6, r0
    6456:	46b4      	mov	ip, r6
    6458:	291b      	cmp	r1, #27
    645a:	dd00      	ble.n	645e <__aeabi_fadd+0x116>
    645c:	e0aa      	b.n	65b4 <__aeabi_fadd+0x26c>
    645e:	2620      	movs	r6, #32
    6460:	4660      	mov	r0, ip
    6462:	40c8      	lsrs	r0, r1
    6464:	1a71      	subs	r1, r6, r1
    6466:	4666      	mov	r6, ip
    6468:	408e      	lsls	r6, r1
    646a:	0031      	movs	r1, r6
    646c:	1e4e      	subs	r6, r1, #1
    646e:	41b1      	sbcs	r1, r6
    6470:	4301      	orrs	r1, r0
    6472:	185b      	adds	r3, r3, r1
    6474:	0159      	lsls	r1, r3, #5
    6476:	d5d3      	bpl.n	6420 <__aeabi_fadd+0xd8>
    6478:	3401      	adds	r4, #1
    647a:	2cff      	cmp	r4, #255	; 0xff
    647c:	d100      	bne.n	6480 <__aeabi_fadd+0x138>
    647e:	e087      	b.n	6590 <__aeabi_fadd+0x248>
    6480:	2201      	movs	r2, #1
    6482:	4978      	ldr	r1, [pc, #480]	; (6664 <__aeabi_fadd+0x31c>)
    6484:	401a      	ands	r2, r3
    6486:	085b      	lsrs	r3, r3, #1
    6488:	400b      	ands	r3, r1
    648a:	4313      	orrs	r3, r2
    648c:	e797      	b.n	63be <__aeabi_fadd+0x76>
    648e:	2c00      	cmp	r4, #0
    6490:	d000      	beq.n	6494 <__aeabi_fadd+0x14c>
    6492:	e0a7      	b.n	65e4 <__aeabi_fadd+0x29c>
    6494:	2b00      	cmp	r3, #0
    6496:	d000      	beq.n	649a <__aeabi_fadd+0x152>
    6498:	e0b6      	b.n	6608 <__aeabi_fadd+0x2c0>
    649a:	1e3b      	subs	r3, r7, #0
    649c:	d162      	bne.n	6564 <__aeabi_fadd+0x21c>
    649e:	2600      	movs	r6, #0
    64a0:	2200      	movs	r2, #0
    64a2:	0273      	lsls	r3, r6, #9
    64a4:	0a5b      	lsrs	r3, r3, #9
    64a6:	b2e4      	uxtb	r4, r4
    64a8:	e79a      	b.n	63e0 <__aeabi_fadd+0x98>
    64aa:	0014      	movs	r4, r2
    64ac:	e787      	b.n	63be <__aeabi_fadd+0x76>
    64ae:	2f00      	cmp	r7, #0
    64b0:	d04d      	beq.n	654e <__aeabi_fadd+0x206>
    64b2:	1e48      	subs	r0, r1, #1
    64b4:	2800      	cmp	r0, #0
    64b6:	d157      	bne.n	6568 <__aeabi_fadd+0x220>
    64b8:	4463      	add	r3, ip
    64ba:	2401      	movs	r4, #1
    64bc:	015a      	lsls	r2, r3, #5
    64be:	d5af      	bpl.n	6420 <__aeabi_fadd+0xd8>
    64c0:	2402      	movs	r4, #2
    64c2:	e7dd      	b.n	6480 <__aeabi_fadd+0x138>
    64c4:	2a00      	cmp	r2, #0
    64c6:	d124      	bne.n	6512 <__aeabi_fadd+0x1ca>
    64c8:	1c62      	adds	r2, r4, #1
    64ca:	b2d2      	uxtb	r2, r2
    64cc:	2a01      	cmp	r2, #1
    64ce:	ddde      	ble.n	648e <__aeabi_fadd+0x146>
    64d0:	1bde      	subs	r6, r3, r7
    64d2:	0172      	lsls	r2, r6, #5
    64d4:	d535      	bpl.n	6542 <__aeabi_fadd+0x1fa>
    64d6:	1afe      	subs	r6, r7, r3
    64d8:	000d      	movs	r5, r1
    64da:	e75c      	b.n	6396 <__aeabi_fadd+0x4e>
    64dc:	002a      	movs	r2, r5
    64de:	2300      	movs	r3, #0
    64e0:	e77e      	b.n	63e0 <__aeabi_fadd+0x98>
    64e2:	0033      	movs	r3, r6
    64e4:	4a60      	ldr	r2, [pc, #384]	; (6668 <__aeabi_fadd+0x320>)
    64e6:	1a24      	subs	r4, r4, r0
    64e8:	4013      	ands	r3, r2
    64ea:	e768      	b.n	63be <__aeabi_fadd+0x76>
    64ec:	2900      	cmp	r1, #0
    64ee:	d163      	bne.n	65b8 <__aeabi_fadd+0x270>
    64f0:	1c61      	adds	r1, r4, #1
    64f2:	b2c8      	uxtb	r0, r1
    64f4:	2801      	cmp	r0, #1
    64f6:	dd4e      	ble.n	6596 <__aeabi_fadd+0x24e>
    64f8:	29ff      	cmp	r1, #255	; 0xff
    64fa:	d049      	beq.n	6590 <__aeabi_fadd+0x248>
    64fc:	4463      	add	r3, ip
    64fe:	085b      	lsrs	r3, r3, #1
    6500:	000c      	movs	r4, r1
    6502:	e75c      	b.n	63be <__aeabi_fadd+0x76>
    6504:	2aff      	cmp	r2, #255	; 0xff
    6506:	d041      	beq.n	658c <__aeabi_fadd+0x244>
    6508:	000a      	movs	r2, r1
    650a:	e779      	b.n	6400 <__aeabi_fadd+0xb8>
    650c:	2201      	movs	r2, #1
    650e:	1a9b      	subs	r3, r3, r2
    6510:	e784      	b.n	641c <__aeabi_fadd+0xd4>
    6512:	2c00      	cmp	r4, #0
    6514:	d01d      	beq.n	6552 <__aeabi_fadd+0x20a>
    6516:	28ff      	cmp	r0, #255	; 0xff
    6518:	d022      	beq.n	6560 <__aeabi_fadd+0x218>
    651a:	2480      	movs	r4, #128	; 0x80
    651c:	04e4      	lsls	r4, r4, #19
    651e:	4252      	negs	r2, r2
    6520:	4323      	orrs	r3, r4
    6522:	2a1b      	cmp	r2, #27
    6524:	dd00      	ble.n	6528 <__aeabi_fadd+0x1e0>
    6526:	e08a      	b.n	663e <__aeabi_fadd+0x2f6>
    6528:	001c      	movs	r4, r3
    652a:	2520      	movs	r5, #32
    652c:	40d4      	lsrs	r4, r2
    652e:	1aaa      	subs	r2, r5, r2
    6530:	4093      	lsls	r3, r2
    6532:	1e5a      	subs	r2, r3, #1
    6534:	4193      	sbcs	r3, r2
    6536:	4323      	orrs	r3, r4
    6538:	4662      	mov	r2, ip
    653a:	0004      	movs	r4, r0
    653c:	1ad3      	subs	r3, r2, r3
    653e:	000d      	movs	r5, r1
    6540:	e725      	b.n	638e <__aeabi_fadd+0x46>
    6542:	2e00      	cmp	r6, #0
    6544:	d000      	beq.n	6548 <__aeabi_fadd+0x200>
    6546:	e726      	b.n	6396 <__aeabi_fadd+0x4e>
    6548:	2200      	movs	r2, #0
    654a:	2400      	movs	r4, #0
    654c:	e7a9      	b.n	64a2 <__aeabi_fadd+0x15a>
    654e:	000c      	movs	r4, r1
    6550:	e735      	b.n	63be <__aeabi_fadd+0x76>
    6552:	2b00      	cmp	r3, #0
    6554:	d04d      	beq.n	65f2 <__aeabi_fadd+0x2aa>
    6556:	43d2      	mvns	r2, r2
    6558:	2a00      	cmp	r2, #0
    655a:	d0ed      	beq.n	6538 <__aeabi_fadd+0x1f0>
    655c:	28ff      	cmp	r0, #255	; 0xff
    655e:	d1e0      	bne.n	6522 <__aeabi_fadd+0x1da>
    6560:	4663      	mov	r3, ip
    6562:	24ff      	movs	r4, #255	; 0xff
    6564:	000d      	movs	r5, r1
    6566:	e72a      	b.n	63be <__aeabi_fadd+0x76>
    6568:	29ff      	cmp	r1, #255	; 0xff
    656a:	d00f      	beq.n	658c <__aeabi_fadd+0x244>
    656c:	0001      	movs	r1, r0
    656e:	e773      	b.n	6458 <__aeabi_fadd+0x110>
    6570:	2b00      	cmp	r3, #0
    6572:	d061      	beq.n	6638 <__aeabi_fadd+0x2f0>
    6574:	24ff      	movs	r4, #255	; 0xff
    6576:	2f00      	cmp	r7, #0
    6578:	d100      	bne.n	657c <__aeabi_fadd+0x234>
    657a:	e720      	b.n	63be <__aeabi_fadd+0x76>
    657c:	2280      	movs	r2, #128	; 0x80
    657e:	4641      	mov	r1, r8
    6580:	03d2      	lsls	r2, r2, #15
    6582:	4211      	tst	r1, r2
    6584:	d002      	beq.n	658c <__aeabi_fadd+0x244>
    6586:	4216      	tst	r6, r2
    6588:	d100      	bne.n	658c <__aeabi_fadd+0x244>
    658a:	003b      	movs	r3, r7
    658c:	24ff      	movs	r4, #255	; 0xff
    658e:	e716      	b.n	63be <__aeabi_fadd+0x76>
    6590:	24ff      	movs	r4, #255	; 0xff
    6592:	2300      	movs	r3, #0
    6594:	e724      	b.n	63e0 <__aeabi_fadd+0x98>
    6596:	2c00      	cmp	r4, #0
    6598:	d1ea      	bne.n	6570 <__aeabi_fadd+0x228>
    659a:	2b00      	cmp	r3, #0
    659c:	d058      	beq.n	6650 <__aeabi_fadd+0x308>
    659e:	2f00      	cmp	r7, #0
    65a0:	d100      	bne.n	65a4 <__aeabi_fadd+0x25c>
    65a2:	e70c      	b.n	63be <__aeabi_fadd+0x76>
    65a4:	4463      	add	r3, ip
    65a6:	015a      	lsls	r2, r3, #5
    65a8:	d400      	bmi.n	65ac <__aeabi_fadd+0x264>
    65aa:	e739      	b.n	6420 <__aeabi_fadd+0xd8>
    65ac:	4a2e      	ldr	r2, [pc, #184]	; (6668 <__aeabi_fadd+0x320>)
    65ae:	000c      	movs	r4, r1
    65b0:	4013      	ands	r3, r2
    65b2:	e704      	b.n	63be <__aeabi_fadd+0x76>
    65b4:	2101      	movs	r1, #1
    65b6:	e75c      	b.n	6472 <__aeabi_fadd+0x12a>
    65b8:	2c00      	cmp	r4, #0
    65ba:	d11e      	bne.n	65fa <__aeabi_fadd+0x2b2>
    65bc:	2b00      	cmp	r3, #0
    65be:	d040      	beq.n	6642 <__aeabi_fadd+0x2fa>
    65c0:	43c9      	mvns	r1, r1
    65c2:	2900      	cmp	r1, #0
    65c4:	d00b      	beq.n	65de <__aeabi_fadd+0x296>
    65c6:	28ff      	cmp	r0, #255	; 0xff
    65c8:	d036      	beq.n	6638 <__aeabi_fadd+0x2f0>
    65ca:	291b      	cmp	r1, #27
    65cc:	dc47      	bgt.n	665e <__aeabi_fadd+0x316>
    65ce:	001c      	movs	r4, r3
    65d0:	2620      	movs	r6, #32
    65d2:	40cc      	lsrs	r4, r1
    65d4:	1a71      	subs	r1, r6, r1
    65d6:	408b      	lsls	r3, r1
    65d8:	1e59      	subs	r1, r3, #1
    65da:	418b      	sbcs	r3, r1
    65dc:	4323      	orrs	r3, r4
    65de:	4463      	add	r3, ip
    65e0:	0004      	movs	r4, r0
    65e2:	e747      	b.n	6474 <__aeabi_fadd+0x12c>
    65e4:	2b00      	cmp	r3, #0
    65e6:	d118      	bne.n	661a <__aeabi_fadd+0x2d2>
    65e8:	1e3b      	subs	r3, r7, #0
    65ea:	d02d      	beq.n	6648 <__aeabi_fadd+0x300>
    65ec:	000d      	movs	r5, r1
    65ee:	24ff      	movs	r4, #255	; 0xff
    65f0:	e6e5      	b.n	63be <__aeabi_fadd+0x76>
    65f2:	003b      	movs	r3, r7
    65f4:	0004      	movs	r4, r0
    65f6:	000d      	movs	r5, r1
    65f8:	e6e1      	b.n	63be <__aeabi_fadd+0x76>
    65fa:	28ff      	cmp	r0, #255	; 0xff
    65fc:	d01c      	beq.n	6638 <__aeabi_fadd+0x2f0>
    65fe:	2480      	movs	r4, #128	; 0x80
    6600:	04e4      	lsls	r4, r4, #19
    6602:	4249      	negs	r1, r1
    6604:	4323      	orrs	r3, r4
    6606:	e7e0      	b.n	65ca <__aeabi_fadd+0x282>
    6608:	2f00      	cmp	r7, #0
    660a:	d100      	bne.n	660e <__aeabi_fadd+0x2c6>
    660c:	e6d7      	b.n	63be <__aeabi_fadd+0x76>
    660e:	1bde      	subs	r6, r3, r7
    6610:	0172      	lsls	r2, r6, #5
    6612:	d51f      	bpl.n	6654 <__aeabi_fadd+0x30c>
    6614:	1afb      	subs	r3, r7, r3
    6616:	000d      	movs	r5, r1
    6618:	e6d1      	b.n	63be <__aeabi_fadd+0x76>
    661a:	24ff      	movs	r4, #255	; 0xff
    661c:	2f00      	cmp	r7, #0
    661e:	d100      	bne.n	6622 <__aeabi_fadd+0x2da>
    6620:	e6cd      	b.n	63be <__aeabi_fadd+0x76>
    6622:	2280      	movs	r2, #128	; 0x80
    6624:	4640      	mov	r0, r8
    6626:	03d2      	lsls	r2, r2, #15
    6628:	4210      	tst	r0, r2
    662a:	d0af      	beq.n	658c <__aeabi_fadd+0x244>
    662c:	4216      	tst	r6, r2
    662e:	d1ad      	bne.n	658c <__aeabi_fadd+0x244>
    6630:	003b      	movs	r3, r7
    6632:	000d      	movs	r5, r1
    6634:	24ff      	movs	r4, #255	; 0xff
    6636:	e6c2      	b.n	63be <__aeabi_fadd+0x76>
    6638:	4663      	mov	r3, ip
    663a:	24ff      	movs	r4, #255	; 0xff
    663c:	e6bf      	b.n	63be <__aeabi_fadd+0x76>
    663e:	2301      	movs	r3, #1
    6640:	e77a      	b.n	6538 <__aeabi_fadd+0x1f0>
    6642:	003b      	movs	r3, r7
    6644:	0004      	movs	r4, r0
    6646:	e6ba      	b.n	63be <__aeabi_fadd+0x76>
    6648:	2680      	movs	r6, #128	; 0x80
    664a:	2200      	movs	r2, #0
    664c:	03f6      	lsls	r6, r6, #15
    664e:	e6f0      	b.n	6432 <__aeabi_fadd+0xea>
    6650:	003b      	movs	r3, r7
    6652:	e6b4      	b.n	63be <__aeabi_fadd+0x76>
    6654:	1e33      	subs	r3, r6, #0
    6656:	d000      	beq.n	665a <__aeabi_fadd+0x312>
    6658:	e6e2      	b.n	6420 <__aeabi_fadd+0xd8>
    665a:	2200      	movs	r2, #0
    665c:	e721      	b.n	64a2 <__aeabi_fadd+0x15a>
    665e:	2301      	movs	r3, #1
    6660:	e7bd      	b.n	65de <__aeabi_fadd+0x296>
    6662:	46c0      	nop			; (mov r8, r8)
    6664:	7dffffff 	.word	0x7dffffff
    6668:	fbffffff 	.word	0xfbffffff

0000666c <__aeabi_fdiv>:
    666c:	b5f0      	push	{r4, r5, r6, r7, lr}
    666e:	4657      	mov	r7, sl
    6670:	464e      	mov	r6, r9
    6672:	46de      	mov	lr, fp
    6674:	4645      	mov	r5, r8
    6676:	b5e0      	push	{r5, r6, r7, lr}
    6678:	0244      	lsls	r4, r0, #9
    667a:	0043      	lsls	r3, r0, #1
    667c:	0fc6      	lsrs	r6, r0, #31
    667e:	b083      	sub	sp, #12
    6680:	1c0f      	adds	r7, r1, #0
    6682:	0a64      	lsrs	r4, r4, #9
    6684:	0e1b      	lsrs	r3, r3, #24
    6686:	46b2      	mov	sl, r6
    6688:	d053      	beq.n	6732 <__aeabi_fdiv+0xc6>
    668a:	2bff      	cmp	r3, #255	; 0xff
    668c:	d027      	beq.n	66de <__aeabi_fdiv+0x72>
    668e:	2280      	movs	r2, #128	; 0x80
    6690:	00e4      	lsls	r4, r4, #3
    6692:	04d2      	lsls	r2, r2, #19
    6694:	4314      	orrs	r4, r2
    6696:	227f      	movs	r2, #127	; 0x7f
    6698:	4252      	negs	r2, r2
    669a:	4690      	mov	r8, r2
    669c:	4498      	add	r8, r3
    669e:	2300      	movs	r3, #0
    66a0:	4699      	mov	r9, r3
    66a2:	469b      	mov	fp, r3
    66a4:	027d      	lsls	r5, r7, #9
    66a6:	0078      	lsls	r0, r7, #1
    66a8:	0ffb      	lsrs	r3, r7, #31
    66aa:	0a6d      	lsrs	r5, r5, #9
    66ac:	0e00      	lsrs	r0, r0, #24
    66ae:	9300      	str	r3, [sp, #0]
    66b0:	d024      	beq.n	66fc <__aeabi_fdiv+0x90>
    66b2:	28ff      	cmp	r0, #255	; 0xff
    66b4:	d046      	beq.n	6744 <__aeabi_fdiv+0xd8>
    66b6:	2380      	movs	r3, #128	; 0x80
    66b8:	2100      	movs	r1, #0
    66ba:	00ed      	lsls	r5, r5, #3
    66bc:	04db      	lsls	r3, r3, #19
    66be:	431d      	orrs	r5, r3
    66c0:	387f      	subs	r0, #127	; 0x7f
    66c2:	4647      	mov	r7, r8
    66c4:	1a38      	subs	r0, r7, r0
    66c6:	464f      	mov	r7, r9
    66c8:	430f      	orrs	r7, r1
    66ca:	00bf      	lsls	r7, r7, #2
    66cc:	46b9      	mov	r9, r7
    66ce:	0033      	movs	r3, r6
    66d0:	9a00      	ldr	r2, [sp, #0]
    66d2:	4f87      	ldr	r7, [pc, #540]	; (68f0 <__aeabi_fdiv+0x284>)
    66d4:	4053      	eors	r3, r2
    66d6:	464a      	mov	r2, r9
    66d8:	58ba      	ldr	r2, [r7, r2]
    66da:	9301      	str	r3, [sp, #4]
    66dc:	4697      	mov	pc, r2
    66de:	2c00      	cmp	r4, #0
    66e0:	d14e      	bne.n	6780 <__aeabi_fdiv+0x114>
    66e2:	2308      	movs	r3, #8
    66e4:	4699      	mov	r9, r3
    66e6:	33f7      	adds	r3, #247	; 0xf7
    66e8:	4698      	mov	r8, r3
    66ea:	3bfd      	subs	r3, #253	; 0xfd
    66ec:	469b      	mov	fp, r3
    66ee:	027d      	lsls	r5, r7, #9
    66f0:	0078      	lsls	r0, r7, #1
    66f2:	0ffb      	lsrs	r3, r7, #31
    66f4:	0a6d      	lsrs	r5, r5, #9
    66f6:	0e00      	lsrs	r0, r0, #24
    66f8:	9300      	str	r3, [sp, #0]
    66fa:	d1da      	bne.n	66b2 <__aeabi_fdiv+0x46>
    66fc:	2d00      	cmp	r5, #0
    66fe:	d126      	bne.n	674e <__aeabi_fdiv+0xe2>
    6700:	2000      	movs	r0, #0
    6702:	2101      	movs	r1, #1
    6704:	0033      	movs	r3, r6
    6706:	9a00      	ldr	r2, [sp, #0]
    6708:	4f7a      	ldr	r7, [pc, #488]	; (68f4 <__aeabi_fdiv+0x288>)
    670a:	4053      	eors	r3, r2
    670c:	4642      	mov	r2, r8
    670e:	1a10      	subs	r0, r2, r0
    6710:	464a      	mov	r2, r9
    6712:	430a      	orrs	r2, r1
    6714:	0092      	lsls	r2, r2, #2
    6716:	58ba      	ldr	r2, [r7, r2]
    6718:	001d      	movs	r5, r3
    671a:	4697      	mov	pc, r2
    671c:	9b00      	ldr	r3, [sp, #0]
    671e:	002c      	movs	r4, r5
    6720:	469a      	mov	sl, r3
    6722:	468b      	mov	fp, r1
    6724:	465b      	mov	r3, fp
    6726:	2b02      	cmp	r3, #2
    6728:	d131      	bne.n	678e <__aeabi_fdiv+0x122>
    672a:	4653      	mov	r3, sl
    672c:	21ff      	movs	r1, #255	; 0xff
    672e:	2400      	movs	r4, #0
    6730:	e038      	b.n	67a4 <__aeabi_fdiv+0x138>
    6732:	2c00      	cmp	r4, #0
    6734:	d117      	bne.n	6766 <__aeabi_fdiv+0xfa>
    6736:	2304      	movs	r3, #4
    6738:	4699      	mov	r9, r3
    673a:	2300      	movs	r3, #0
    673c:	4698      	mov	r8, r3
    673e:	3301      	adds	r3, #1
    6740:	469b      	mov	fp, r3
    6742:	e7af      	b.n	66a4 <__aeabi_fdiv+0x38>
    6744:	20ff      	movs	r0, #255	; 0xff
    6746:	2d00      	cmp	r5, #0
    6748:	d10b      	bne.n	6762 <__aeabi_fdiv+0xf6>
    674a:	2102      	movs	r1, #2
    674c:	e7da      	b.n	6704 <__aeabi_fdiv+0x98>
    674e:	0028      	movs	r0, r5
    6750:	f002 f970 	bl	8a34 <__clzsi2>
    6754:	1f43      	subs	r3, r0, #5
    6756:	409d      	lsls	r5, r3
    6758:	2376      	movs	r3, #118	; 0x76
    675a:	425b      	negs	r3, r3
    675c:	1a18      	subs	r0, r3, r0
    675e:	2100      	movs	r1, #0
    6760:	e7af      	b.n	66c2 <__aeabi_fdiv+0x56>
    6762:	2103      	movs	r1, #3
    6764:	e7ad      	b.n	66c2 <__aeabi_fdiv+0x56>
    6766:	0020      	movs	r0, r4
    6768:	f002 f964 	bl	8a34 <__clzsi2>
    676c:	1f43      	subs	r3, r0, #5
    676e:	409c      	lsls	r4, r3
    6770:	2376      	movs	r3, #118	; 0x76
    6772:	425b      	negs	r3, r3
    6774:	1a1b      	subs	r3, r3, r0
    6776:	4698      	mov	r8, r3
    6778:	2300      	movs	r3, #0
    677a:	4699      	mov	r9, r3
    677c:	469b      	mov	fp, r3
    677e:	e791      	b.n	66a4 <__aeabi_fdiv+0x38>
    6780:	230c      	movs	r3, #12
    6782:	4699      	mov	r9, r3
    6784:	33f3      	adds	r3, #243	; 0xf3
    6786:	4698      	mov	r8, r3
    6788:	3bfc      	subs	r3, #252	; 0xfc
    678a:	469b      	mov	fp, r3
    678c:	e78a      	b.n	66a4 <__aeabi_fdiv+0x38>
    678e:	2b03      	cmp	r3, #3
    6790:	d100      	bne.n	6794 <__aeabi_fdiv+0x128>
    6792:	e0a5      	b.n	68e0 <__aeabi_fdiv+0x274>
    6794:	4655      	mov	r5, sl
    6796:	2b01      	cmp	r3, #1
    6798:	d000      	beq.n	679c <__aeabi_fdiv+0x130>
    679a:	e081      	b.n	68a0 <__aeabi_fdiv+0x234>
    679c:	2301      	movs	r3, #1
    679e:	2100      	movs	r1, #0
    67a0:	2400      	movs	r4, #0
    67a2:	402b      	ands	r3, r5
    67a4:	0264      	lsls	r4, r4, #9
    67a6:	05c9      	lsls	r1, r1, #23
    67a8:	0a60      	lsrs	r0, r4, #9
    67aa:	07db      	lsls	r3, r3, #31
    67ac:	4308      	orrs	r0, r1
    67ae:	4318      	orrs	r0, r3
    67b0:	b003      	add	sp, #12
    67b2:	bc3c      	pop	{r2, r3, r4, r5}
    67b4:	4690      	mov	r8, r2
    67b6:	4699      	mov	r9, r3
    67b8:	46a2      	mov	sl, r4
    67ba:	46ab      	mov	fp, r5
    67bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67be:	2480      	movs	r4, #128	; 0x80
    67c0:	2300      	movs	r3, #0
    67c2:	03e4      	lsls	r4, r4, #15
    67c4:	21ff      	movs	r1, #255	; 0xff
    67c6:	e7ed      	b.n	67a4 <__aeabi_fdiv+0x138>
    67c8:	21ff      	movs	r1, #255	; 0xff
    67ca:	2400      	movs	r4, #0
    67cc:	e7ea      	b.n	67a4 <__aeabi_fdiv+0x138>
    67ce:	2301      	movs	r3, #1
    67d0:	1a59      	subs	r1, r3, r1
    67d2:	291b      	cmp	r1, #27
    67d4:	dd66      	ble.n	68a4 <__aeabi_fdiv+0x238>
    67d6:	9a01      	ldr	r2, [sp, #4]
    67d8:	4013      	ands	r3, r2
    67da:	2100      	movs	r1, #0
    67dc:	2400      	movs	r4, #0
    67de:	e7e1      	b.n	67a4 <__aeabi_fdiv+0x138>
    67e0:	2380      	movs	r3, #128	; 0x80
    67e2:	03db      	lsls	r3, r3, #15
    67e4:	421c      	tst	r4, r3
    67e6:	d038      	beq.n	685a <__aeabi_fdiv+0x1ee>
    67e8:	421d      	tst	r5, r3
    67ea:	d051      	beq.n	6890 <__aeabi_fdiv+0x224>
    67ec:	431c      	orrs	r4, r3
    67ee:	0264      	lsls	r4, r4, #9
    67f0:	0a64      	lsrs	r4, r4, #9
    67f2:	0033      	movs	r3, r6
    67f4:	21ff      	movs	r1, #255	; 0xff
    67f6:	e7d5      	b.n	67a4 <__aeabi_fdiv+0x138>
    67f8:	0163      	lsls	r3, r4, #5
    67fa:	016c      	lsls	r4, r5, #5
    67fc:	42a3      	cmp	r3, r4
    67fe:	d23b      	bcs.n	6878 <__aeabi_fdiv+0x20c>
    6800:	261b      	movs	r6, #27
    6802:	2100      	movs	r1, #0
    6804:	3801      	subs	r0, #1
    6806:	2501      	movs	r5, #1
    6808:	001f      	movs	r7, r3
    680a:	0049      	lsls	r1, r1, #1
    680c:	005b      	lsls	r3, r3, #1
    680e:	2f00      	cmp	r7, #0
    6810:	db01      	blt.n	6816 <__aeabi_fdiv+0x1aa>
    6812:	429c      	cmp	r4, r3
    6814:	d801      	bhi.n	681a <__aeabi_fdiv+0x1ae>
    6816:	1b1b      	subs	r3, r3, r4
    6818:	4329      	orrs	r1, r5
    681a:	3e01      	subs	r6, #1
    681c:	2e00      	cmp	r6, #0
    681e:	d1f3      	bne.n	6808 <__aeabi_fdiv+0x19c>
    6820:	001c      	movs	r4, r3
    6822:	1e63      	subs	r3, r4, #1
    6824:	419c      	sbcs	r4, r3
    6826:	430c      	orrs	r4, r1
    6828:	0001      	movs	r1, r0
    682a:	317f      	adds	r1, #127	; 0x7f
    682c:	2900      	cmp	r1, #0
    682e:	ddce      	ble.n	67ce <__aeabi_fdiv+0x162>
    6830:	0763      	lsls	r3, r4, #29
    6832:	d004      	beq.n	683e <__aeabi_fdiv+0x1d2>
    6834:	230f      	movs	r3, #15
    6836:	4023      	ands	r3, r4
    6838:	2b04      	cmp	r3, #4
    683a:	d000      	beq.n	683e <__aeabi_fdiv+0x1d2>
    683c:	3404      	adds	r4, #4
    683e:	0123      	lsls	r3, r4, #4
    6840:	d503      	bpl.n	684a <__aeabi_fdiv+0x1de>
    6842:	0001      	movs	r1, r0
    6844:	4b2c      	ldr	r3, [pc, #176]	; (68f8 <__aeabi_fdiv+0x28c>)
    6846:	3180      	adds	r1, #128	; 0x80
    6848:	401c      	ands	r4, r3
    684a:	29fe      	cmp	r1, #254	; 0xfe
    684c:	dd0d      	ble.n	686a <__aeabi_fdiv+0x1fe>
    684e:	2301      	movs	r3, #1
    6850:	9a01      	ldr	r2, [sp, #4]
    6852:	21ff      	movs	r1, #255	; 0xff
    6854:	4013      	ands	r3, r2
    6856:	2400      	movs	r4, #0
    6858:	e7a4      	b.n	67a4 <__aeabi_fdiv+0x138>
    685a:	2380      	movs	r3, #128	; 0x80
    685c:	03db      	lsls	r3, r3, #15
    685e:	431c      	orrs	r4, r3
    6860:	0264      	lsls	r4, r4, #9
    6862:	0a64      	lsrs	r4, r4, #9
    6864:	0033      	movs	r3, r6
    6866:	21ff      	movs	r1, #255	; 0xff
    6868:	e79c      	b.n	67a4 <__aeabi_fdiv+0x138>
    686a:	2301      	movs	r3, #1
    686c:	9a01      	ldr	r2, [sp, #4]
    686e:	01a4      	lsls	r4, r4, #6
    6870:	0a64      	lsrs	r4, r4, #9
    6872:	b2c9      	uxtb	r1, r1
    6874:	4013      	ands	r3, r2
    6876:	e795      	b.n	67a4 <__aeabi_fdiv+0x138>
    6878:	1b1b      	subs	r3, r3, r4
    687a:	261a      	movs	r6, #26
    687c:	2101      	movs	r1, #1
    687e:	e7c2      	b.n	6806 <__aeabi_fdiv+0x19a>
    6880:	9b00      	ldr	r3, [sp, #0]
    6882:	468b      	mov	fp, r1
    6884:	469a      	mov	sl, r3
    6886:	2400      	movs	r4, #0
    6888:	e74c      	b.n	6724 <__aeabi_fdiv+0xb8>
    688a:	0263      	lsls	r3, r4, #9
    688c:	d5e5      	bpl.n	685a <__aeabi_fdiv+0x1ee>
    688e:	2500      	movs	r5, #0
    6890:	2480      	movs	r4, #128	; 0x80
    6892:	03e4      	lsls	r4, r4, #15
    6894:	432c      	orrs	r4, r5
    6896:	0264      	lsls	r4, r4, #9
    6898:	0a64      	lsrs	r4, r4, #9
    689a:	9b00      	ldr	r3, [sp, #0]
    689c:	21ff      	movs	r1, #255	; 0xff
    689e:	e781      	b.n	67a4 <__aeabi_fdiv+0x138>
    68a0:	9501      	str	r5, [sp, #4]
    68a2:	e7c1      	b.n	6828 <__aeabi_fdiv+0x1bc>
    68a4:	0023      	movs	r3, r4
    68a6:	2020      	movs	r0, #32
    68a8:	40cb      	lsrs	r3, r1
    68aa:	1a41      	subs	r1, r0, r1
    68ac:	408c      	lsls	r4, r1
    68ae:	1e61      	subs	r1, r4, #1
    68b0:	418c      	sbcs	r4, r1
    68b2:	431c      	orrs	r4, r3
    68b4:	0763      	lsls	r3, r4, #29
    68b6:	d004      	beq.n	68c2 <__aeabi_fdiv+0x256>
    68b8:	230f      	movs	r3, #15
    68ba:	4023      	ands	r3, r4
    68bc:	2b04      	cmp	r3, #4
    68be:	d000      	beq.n	68c2 <__aeabi_fdiv+0x256>
    68c0:	3404      	adds	r4, #4
    68c2:	0163      	lsls	r3, r4, #5
    68c4:	d505      	bpl.n	68d2 <__aeabi_fdiv+0x266>
    68c6:	2301      	movs	r3, #1
    68c8:	9a01      	ldr	r2, [sp, #4]
    68ca:	2101      	movs	r1, #1
    68cc:	4013      	ands	r3, r2
    68ce:	2400      	movs	r4, #0
    68d0:	e768      	b.n	67a4 <__aeabi_fdiv+0x138>
    68d2:	2301      	movs	r3, #1
    68d4:	9a01      	ldr	r2, [sp, #4]
    68d6:	01a4      	lsls	r4, r4, #6
    68d8:	0a64      	lsrs	r4, r4, #9
    68da:	4013      	ands	r3, r2
    68dc:	2100      	movs	r1, #0
    68de:	e761      	b.n	67a4 <__aeabi_fdiv+0x138>
    68e0:	2380      	movs	r3, #128	; 0x80
    68e2:	03db      	lsls	r3, r3, #15
    68e4:	431c      	orrs	r4, r3
    68e6:	0264      	lsls	r4, r4, #9
    68e8:	0a64      	lsrs	r4, r4, #9
    68ea:	4653      	mov	r3, sl
    68ec:	21ff      	movs	r1, #255	; 0xff
    68ee:	e759      	b.n	67a4 <__aeabi_fdiv+0x138>
    68f0:	00008e78 	.word	0x00008e78
    68f4:	00008eb8 	.word	0x00008eb8
    68f8:	f7ffffff 	.word	0xf7ffffff

000068fc <__eqsf2>:
    68fc:	b570      	push	{r4, r5, r6, lr}
    68fe:	0042      	lsls	r2, r0, #1
    6900:	0245      	lsls	r5, r0, #9
    6902:	024e      	lsls	r6, r1, #9
    6904:	004c      	lsls	r4, r1, #1
    6906:	0fc3      	lsrs	r3, r0, #31
    6908:	0a6d      	lsrs	r5, r5, #9
    690a:	0e12      	lsrs	r2, r2, #24
    690c:	0a76      	lsrs	r6, r6, #9
    690e:	0e24      	lsrs	r4, r4, #24
    6910:	0fc9      	lsrs	r1, r1, #31
    6912:	2001      	movs	r0, #1
    6914:	2aff      	cmp	r2, #255	; 0xff
    6916:	d006      	beq.n	6926 <__eqsf2+0x2a>
    6918:	2cff      	cmp	r4, #255	; 0xff
    691a:	d003      	beq.n	6924 <__eqsf2+0x28>
    691c:	42a2      	cmp	r2, r4
    691e:	d101      	bne.n	6924 <__eqsf2+0x28>
    6920:	42b5      	cmp	r5, r6
    6922:	d006      	beq.n	6932 <__eqsf2+0x36>
    6924:	bd70      	pop	{r4, r5, r6, pc}
    6926:	2d00      	cmp	r5, #0
    6928:	d1fc      	bne.n	6924 <__eqsf2+0x28>
    692a:	2cff      	cmp	r4, #255	; 0xff
    692c:	d1fa      	bne.n	6924 <__eqsf2+0x28>
    692e:	2e00      	cmp	r6, #0
    6930:	d1f8      	bne.n	6924 <__eqsf2+0x28>
    6932:	428b      	cmp	r3, r1
    6934:	d006      	beq.n	6944 <__eqsf2+0x48>
    6936:	2001      	movs	r0, #1
    6938:	2a00      	cmp	r2, #0
    693a:	d1f3      	bne.n	6924 <__eqsf2+0x28>
    693c:	0028      	movs	r0, r5
    693e:	1e45      	subs	r5, r0, #1
    6940:	41a8      	sbcs	r0, r5
    6942:	e7ef      	b.n	6924 <__eqsf2+0x28>
    6944:	2000      	movs	r0, #0
    6946:	e7ed      	b.n	6924 <__eqsf2+0x28>

00006948 <__gesf2>:
    6948:	b5f0      	push	{r4, r5, r6, r7, lr}
    694a:	0042      	lsls	r2, r0, #1
    694c:	0245      	lsls	r5, r0, #9
    694e:	024c      	lsls	r4, r1, #9
    6950:	0fc3      	lsrs	r3, r0, #31
    6952:	0048      	lsls	r0, r1, #1
    6954:	0a6d      	lsrs	r5, r5, #9
    6956:	0e12      	lsrs	r2, r2, #24
    6958:	0a64      	lsrs	r4, r4, #9
    695a:	0e00      	lsrs	r0, r0, #24
    695c:	0fc9      	lsrs	r1, r1, #31
    695e:	2aff      	cmp	r2, #255	; 0xff
    6960:	d01e      	beq.n	69a0 <__gesf2+0x58>
    6962:	28ff      	cmp	r0, #255	; 0xff
    6964:	d021      	beq.n	69aa <__gesf2+0x62>
    6966:	2a00      	cmp	r2, #0
    6968:	d10a      	bne.n	6980 <__gesf2+0x38>
    696a:	426e      	negs	r6, r5
    696c:	416e      	adcs	r6, r5
    696e:	b2f6      	uxtb	r6, r6
    6970:	2800      	cmp	r0, #0
    6972:	d10f      	bne.n	6994 <__gesf2+0x4c>
    6974:	2c00      	cmp	r4, #0
    6976:	d10d      	bne.n	6994 <__gesf2+0x4c>
    6978:	2000      	movs	r0, #0
    697a:	2d00      	cmp	r5, #0
    697c:	d009      	beq.n	6992 <__gesf2+0x4a>
    697e:	e005      	b.n	698c <__gesf2+0x44>
    6980:	2800      	cmp	r0, #0
    6982:	d101      	bne.n	6988 <__gesf2+0x40>
    6984:	2c00      	cmp	r4, #0
    6986:	d001      	beq.n	698c <__gesf2+0x44>
    6988:	428b      	cmp	r3, r1
    698a:	d011      	beq.n	69b0 <__gesf2+0x68>
    698c:	2101      	movs	r1, #1
    698e:	4258      	negs	r0, r3
    6990:	4308      	orrs	r0, r1
    6992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6994:	2e00      	cmp	r6, #0
    6996:	d0f7      	beq.n	6988 <__gesf2+0x40>
    6998:	2001      	movs	r0, #1
    699a:	3901      	subs	r1, #1
    699c:	4308      	orrs	r0, r1
    699e:	e7f8      	b.n	6992 <__gesf2+0x4a>
    69a0:	2d00      	cmp	r5, #0
    69a2:	d0de      	beq.n	6962 <__gesf2+0x1a>
    69a4:	2002      	movs	r0, #2
    69a6:	4240      	negs	r0, r0
    69a8:	e7f3      	b.n	6992 <__gesf2+0x4a>
    69aa:	2c00      	cmp	r4, #0
    69ac:	d0db      	beq.n	6966 <__gesf2+0x1e>
    69ae:	e7f9      	b.n	69a4 <__gesf2+0x5c>
    69b0:	4282      	cmp	r2, r0
    69b2:	dceb      	bgt.n	698c <__gesf2+0x44>
    69b4:	db04      	blt.n	69c0 <__gesf2+0x78>
    69b6:	42a5      	cmp	r5, r4
    69b8:	d8e8      	bhi.n	698c <__gesf2+0x44>
    69ba:	2000      	movs	r0, #0
    69bc:	42a5      	cmp	r5, r4
    69be:	d2e8      	bcs.n	6992 <__gesf2+0x4a>
    69c0:	2101      	movs	r1, #1
    69c2:	1e58      	subs	r0, r3, #1
    69c4:	4308      	orrs	r0, r1
    69c6:	e7e4      	b.n	6992 <__gesf2+0x4a>

000069c8 <__lesf2>:
    69c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    69ca:	0042      	lsls	r2, r0, #1
    69cc:	024d      	lsls	r5, r1, #9
    69ce:	004c      	lsls	r4, r1, #1
    69d0:	0246      	lsls	r6, r0, #9
    69d2:	0a76      	lsrs	r6, r6, #9
    69d4:	0e12      	lsrs	r2, r2, #24
    69d6:	0fc3      	lsrs	r3, r0, #31
    69d8:	0a6d      	lsrs	r5, r5, #9
    69da:	0e24      	lsrs	r4, r4, #24
    69dc:	0fc9      	lsrs	r1, r1, #31
    69de:	2aff      	cmp	r2, #255	; 0xff
    69e0:	d016      	beq.n	6a10 <__lesf2+0x48>
    69e2:	2cff      	cmp	r4, #255	; 0xff
    69e4:	d018      	beq.n	6a18 <__lesf2+0x50>
    69e6:	2a00      	cmp	r2, #0
    69e8:	d10a      	bne.n	6a00 <__lesf2+0x38>
    69ea:	4270      	negs	r0, r6
    69ec:	4170      	adcs	r0, r6
    69ee:	b2c0      	uxtb	r0, r0
    69f0:	2c00      	cmp	r4, #0
    69f2:	d015      	beq.n	6a20 <__lesf2+0x58>
    69f4:	2800      	cmp	r0, #0
    69f6:	d005      	beq.n	6a04 <__lesf2+0x3c>
    69f8:	2001      	movs	r0, #1
    69fa:	3901      	subs	r1, #1
    69fc:	4308      	orrs	r0, r1
    69fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a00:	2c00      	cmp	r4, #0
    6a02:	d013      	beq.n	6a2c <__lesf2+0x64>
    6a04:	4299      	cmp	r1, r3
    6a06:	d014      	beq.n	6a32 <__lesf2+0x6a>
    6a08:	2001      	movs	r0, #1
    6a0a:	425b      	negs	r3, r3
    6a0c:	4318      	orrs	r0, r3
    6a0e:	e7f6      	b.n	69fe <__lesf2+0x36>
    6a10:	2002      	movs	r0, #2
    6a12:	2e00      	cmp	r6, #0
    6a14:	d1f3      	bne.n	69fe <__lesf2+0x36>
    6a16:	e7e4      	b.n	69e2 <__lesf2+0x1a>
    6a18:	2002      	movs	r0, #2
    6a1a:	2d00      	cmp	r5, #0
    6a1c:	d1ef      	bne.n	69fe <__lesf2+0x36>
    6a1e:	e7e2      	b.n	69e6 <__lesf2+0x1e>
    6a20:	2d00      	cmp	r5, #0
    6a22:	d1e7      	bne.n	69f4 <__lesf2+0x2c>
    6a24:	2000      	movs	r0, #0
    6a26:	2e00      	cmp	r6, #0
    6a28:	d0e9      	beq.n	69fe <__lesf2+0x36>
    6a2a:	e7ed      	b.n	6a08 <__lesf2+0x40>
    6a2c:	2d00      	cmp	r5, #0
    6a2e:	d1e9      	bne.n	6a04 <__lesf2+0x3c>
    6a30:	e7ea      	b.n	6a08 <__lesf2+0x40>
    6a32:	42a2      	cmp	r2, r4
    6a34:	dc06      	bgt.n	6a44 <__lesf2+0x7c>
    6a36:	dbdf      	blt.n	69f8 <__lesf2+0x30>
    6a38:	42ae      	cmp	r6, r5
    6a3a:	d803      	bhi.n	6a44 <__lesf2+0x7c>
    6a3c:	2000      	movs	r0, #0
    6a3e:	42ae      	cmp	r6, r5
    6a40:	d3da      	bcc.n	69f8 <__lesf2+0x30>
    6a42:	e7dc      	b.n	69fe <__lesf2+0x36>
    6a44:	2001      	movs	r0, #1
    6a46:	4249      	negs	r1, r1
    6a48:	4308      	orrs	r0, r1
    6a4a:	e7d8      	b.n	69fe <__lesf2+0x36>

00006a4c <__aeabi_fmul>:
    6a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a4e:	4657      	mov	r7, sl
    6a50:	464e      	mov	r6, r9
    6a52:	4645      	mov	r5, r8
    6a54:	46de      	mov	lr, fp
    6a56:	b5e0      	push	{r5, r6, r7, lr}
    6a58:	0247      	lsls	r7, r0, #9
    6a5a:	0046      	lsls	r6, r0, #1
    6a5c:	4688      	mov	r8, r1
    6a5e:	0a7f      	lsrs	r7, r7, #9
    6a60:	0e36      	lsrs	r6, r6, #24
    6a62:	0fc4      	lsrs	r4, r0, #31
    6a64:	2e00      	cmp	r6, #0
    6a66:	d047      	beq.n	6af8 <__aeabi_fmul+0xac>
    6a68:	2eff      	cmp	r6, #255	; 0xff
    6a6a:	d024      	beq.n	6ab6 <__aeabi_fmul+0x6a>
    6a6c:	00fb      	lsls	r3, r7, #3
    6a6e:	2780      	movs	r7, #128	; 0x80
    6a70:	04ff      	lsls	r7, r7, #19
    6a72:	431f      	orrs	r7, r3
    6a74:	2300      	movs	r3, #0
    6a76:	4699      	mov	r9, r3
    6a78:	469a      	mov	sl, r3
    6a7a:	3e7f      	subs	r6, #127	; 0x7f
    6a7c:	4643      	mov	r3, r8
    6a7e:	025d      	lsls	r5, r3, #9
    6a80:	0058      	lsls	r0, r3, #1
    6a82:	0fdb      	lsrs	r3, r3, #31
    6a84:	0a6d      	lsrs	r5, r5, #9
    6a86:	0e00      	lsrs	r0, r0, #24
    6a88:	4698      	mov	r8, r3
    6a8a:	d043      	beq.n	6b14 <__aeabi_fmul+0xc8>
    6a8c:	28ff      	cmp	r0, #255	; 0xff
    6a8e:	d03b      	beq.n	6b08 <__aeabi_fmul+0xbc>
    6a90:	00eb      	lsls	r3, r5, #3
    6a92:	2580      	movs	r5, #128	; 0x80
    6a94:	2200      	movs	r2, #0
    6a96:	04ed      	lsls	r5, r5, #19
    6a98:	431d      	orrs	r5, r3
    6a9a:	387f      	subs	r0, #127	; 0x7f
    6a9c:	1836      	adds	r6, r6, r0
    6a9e:	1c73      	adds	r3, r6, #1
    6aa0:	4641      	mov	r1, r8
    6aa2:	469b      	mov	fp, r3
    6aa4:	464b      	mov	r3, r9
    6aa6:	4061      	eors	r1, r4
    6aa8:	4313      	orrs	r3, r2
    6aaa:	2b0f      	cmp	r3, #15
    6aac:	d864      	bhi.n	6b78 <__aeabi_fmul+0x12c>
    6aae:	4875      	ldr	r0, [pc, #468]	; (6c84 <__aeabi_fmul+0x238>)
    6ab0:	009b      	lsls	r3, r3, #2
    6ab2:	58c3      	ldr	r3, [r0, r3]
    6ab4:	469f      	mov	pc, r3
    6ab6:	2f00      	cmp	r7, #0
    6ab8:	d142      	bne.n	6b40 <__aeabi_fmul+0xf4>
    6aba:	2308      	movs	r3, #8
    6abc:	4699      	mov	r9, r3
    6abe:	3b06      	subs	r3, #6
    6ac0:	26ff      	movs	r6, #255	; 0xff
    6ac2:	469a      	mov	sl, r3
    6ac4:	e7da      	b.n	6a7c <__aeabi_fmul+0x30>
    6ac6:	4641      	mov	r1, r8
    6ac8:	2a02      	cmp	r2, #2
    6aca:	d028      	beq.n	6b1e <__aeabi_fmul+0xd2>
    6acc:	2a03      	cmp	r2, #3
    6ace:	d100      	bne.n	6ad2 <__aeabi_fmul+0x86>
    6ad0:	e0ce      	b.n	6c70 <__aeabi_fmul+0x224>
    6ad2:	2a01      	cmp	r2, #1
    6ad4:	d000      	beq.n	6ad8 <__aeabi_fmul+0x8c>
    6ad6:	e0ac      	b.n	6c32 <__aeabi_fmul+0x1e6>
    6ad8:	4011      	ands	r1, r2
    6ada:	2000      	movs	r0, #0
    6adc:	2200      	movs	r2, #0
    6ade:	b2cc      	uxtb	r4, r1
    6ae0:	0240      	lsls	r0, r0, #9
    6ae2:	05d2      	lsls	r2, r2, #23
    6ae4:	0a40      	lsrs	r0, r0, #9
    6ae6:	07e4      	lsls	r4, r4, #31
    6ae8:	4310      	orrs	r0, r2
    6aea:	4320      	orrs	r0, r4
    6aec:	bc3c      	pop	{r2, r3, r4, r5}
    6aee:	4690      	mov	r8, r2
    6af0:	4699      	mov	r9, r3
    6af2:	46a2      	mov	sl, r4
    6af4:	46ab      	mov	fp, r5
    6af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6af8:	2f00      	cmp	r7, #0
    6afa:	d115      	bne.n	6b28 <__aeabi_fmul+0xdc>
    6afc:	2304      	movs	r3, #4
    6afe:	4699      	mov	r9, r3
    6b00:	3b03      	subs	r3, #3
    6b02:	2600      	movs	r6, #0
    6b04:	469a      	mov	sl, r3
    6b06:	e7b9      	b.n	6a7c <__aeabi_fmul+0x30>
    6b08:	20ff      	movs	r0, #255	; 0xff
    6b0a:	2202      	movs	r2, #2
    6b0c:	2d00      	cmp	r5, #0
    6b0e:	d0c5      	beq.n	6a9c <__aeabi_fmul+0x50>
    6b10:	2203      	movs	r2, #3
    6b12:	e7c3      	b.n	6a9c <__aeabi_fmul+0x50>
    6b14:	2d00      	cmp	r5, #0
    6b16:	d119      	bne.n	6b4c <__aeabi_fmul+0x100>
    6b18:	2000      	movs	r0, #0
    6b1a:	2201      	movs	r2, #1
    6b1c:	e7be      	b.n	6a9c <__aeabi_fmul+0x50>
    6b1e:	2401      	movs	r4, #1
    6b20:	22ff      	movs	r2, #255	; 0xff
    6b22:	400c      	ands	r4, r1
    6b24:	2000      	movs	r0, #0
    6b26:	e7db      	b.n	6ae0 <__aeabi_fmul+0x94>
    6b28:	0038      	movs	r0, r7
    6b2a:	f001 ff83 	bl	8a34 <__clzsi2>
    6b2e:	2676      	movs	r6, #118	; 0x76
    6b30:	1f43      	subs	r3, r0, #5
    6b32:	409f      	lsls	r7, r3
    6b34:	2300      	movs	r3, #0
    6b36:	4276      	negs	r6, r6
    6b38:	1a36      	subs	r6, r6, r0
    6b3a:	4699      	mov	r9, r3
    6b3c:	469a      	mov	sl, r3
    6b3e:	e79d      	b.n	6a7c <__aeabi_fmul+0x30>
    6b40:	230c      	movs	r3, #12
    6b42:	4699      	mov	r9, r3
    6b44:	3b09      	subs	r3, #9
    6b46:	26ff      	movs	r6, #255	; 0xff
    6b48:	469a      	mov	sl, r3
    6b4a:	e797      	b.n	6a7c <__aeabi_fmul+0x30>
    6b4c:	0028      	movs	r0, r5
    6b4e:	f001 ff71 	bl	8a34 <__clzsi2>
    6b52:	1f43      	subs	r3, r0, #5
    6b54:	409d      	lsls	r5, r3
    6b56:	2376      	movs	r3, #118	; 0x76
    6b58:	425b      	negs	r3, r3
    6b5a:	1a18      	subs	r0, r3, r0
    6b5c:	2200      	movs	r2, #0
    6b5e:	e79d      	b.n	6a9c <__aeabi_fmul+0x50>
    6b60:	2080      	movs	r0, #128	; 0x80
    6b62:	2400      	movs	r4, #0
    6b64:	03c0      	lsls	r0, r0, #15
    6b66:	22ff      	movs	r2, #255	; 0xff
    6b68:	e7ba      	b.n	6ae0 <__aeabi_fmul+0x94>
    6b6a:	003d      	movs	r5, r7
    6b6c:	4652      	mov	r2, sl
    6b6e:	e7ab      	b.n	6ac8 <__aeabi_fmul+0x7c>
    6b70:	003d      	movs	r5, r7
    6b72:	0021      	movs	r1, r4
    6b74:	4652      	mov	r2, sl
    6b76:	e7a7      	b.n	6ac8 <__aeabi_fmul+0x7c>
    6b78:	0c3b      	lsrs	r3, r7, #16
    6b7a:	469c      	mov	ip, r3
    6b7c:	042a      	lsls	r2, r5, #16
    6b7e:	0c12      	lsrs	r2, r2, #16
    6b80:	0c2b      	lsrs	r3, r5, #16
    6b82:	0014      	movs	r4, r2
    6b84:	4660      	mov	r0, ip
    6b86:	4665      	mov	r5, ip
    6b88:	043f      	lsls	r7, r7, #16
    6b8a:	0c3f      	lsrs	r7, r7, #16
    6b8c:	437c      	muls	r4, r7
    6b8e:	4342      	muls	r2, r0
    6b90:	435d      	muls	r5, r3
    6b92:	437b      	muls	r3, r7
    6b94:	0c27      	lsrs	r7, r4, #16
    6b96:	189b      	adds	r3, r3, r2
    6b98:	18ff      	adds	r7, r7, r3
    6b9a:	42ba      	cmp	r2, r7
    6b9c:	d903      	bls.n	6ba6 <__aeabi_fmul+0x15a>
    6b9e:	2380      	movs	r3, #128	; 0x80
    6ba0:	025b      	lsls	r3, r3, #9
    6ba2:	469c      	mov	ip, r3
    6ba4:	4465      	add	r5, ip
    6ba6:	0424      	lsls	r4, r4, #16
    6ba8:	043a      	lsls	r2, r7, #16
    6baa:	0c24      	lsrs	r4, r4, #16
    6bac:	1912      	adds	r2, r2, r4
    6bae:	0193      	lsls	r3, r2, #6
    6bb0:	1e5c      	subs	r4, r3, #1
    6bb2:	41a3      	sbcs	r3, r4
    6bb4:	0c3f      	lsrs	r7, r7, #16
    6bb6:	0e92      	lsrs	r2, r2, #26
    6bb8:	197d      	adds	r5, r7, r5
    6bba:	431a      	orrs	r2, r3
    6bbc:	01ad      	lsls	r5, r5, #6
    6bbe:	4315      	orrs	r5, r2
    6bc0:	012b      	lsls	r3, r5, #4
    6bc2:	d504      	bpl.n	6bce <__aeabi_fmul+0x182>
    6bc4:	2301      	movs	r3, #1
    6bc6:	465e      	mov	r6, fp
    6bc8:	086a      	lsrs	r2, r5, #1
    6bca:	401d      	ands	r5, r3
    6bcc:	4315      	orrs	r5, r2
    6bce:	0032      	movs	r2, r6
    6bd0:	327f      	adds	r2, #127	; 0x7f
    6bd2:	2a00      	cmp	r2, #0
    6bd4:	dd25      	ble.n	6c22 <__aeabi_fmul+0x1d6>
    6bd6:	076b      	lsls	r3, r5, #29
    6bd8:	d004      	beq.n	6be4 <__aeabi_fmul+0x198>
    6bda:	230f      	movs	r3, #15
    6bdc:	402b      	ands	r3, r5
    6bde:	2b04      	cmp	r3, #4
    6be0:	d000      	beq.n	6be4 <__aeabi_fmul+0x198>
    6be2:	3504      	adds	r5, #4
    6be4:	012b      	lsls	r3, r5, #4
    6be6:	d503      	bpl.n	6bf0 <__aeabi_fmul+0x1a4>
    6be8:	0032      	movs	r2, r6
    6bea:	4b27      	ldr	r3, [pc, #156]	; (6c88 <__aeabi_fmul+0x23c>)
    6bec:	3280      	adds	r2, #128	; 0x80
    6bee:	401d      	ands	r5, r3
    6bf0:	2afe      	cmp	r2, #254	; 0xfe
    6bf2:	dc94      	bgt.n	6b1e <__aeabi_fmul+0xd2>
    6bf4:	2401      	movs	r4, #1
    6bf6:	01a8      	lsls	r0, r5, #6
    6bf8:	0a40      	lsrs	r0, r0, #9
    6bfa:	b2d2      	uxtb	r2, r2
    6bfc:	400c      	ands	r4, r1
    6bfe:	e76f      	b.n	6ae0 <__aeabi_fmul+0x94>
    6c00:	2080      	movs	r0, #128	; 0x80
    6c02:	03c0      	lsls	r0, r0, #15
    6c04:	4207      	tst	r7, r0
    6c06:	d007      	beq.n	6c18 <__aeabi_fmul+0x1cc>
    6c08:	4205      	tst	r5, r0
    6c0a:	d105      	bne.n	6c18 <__aeabi_fmul+0x1cc>
    6c0c:	4328      	orrs	r0, r5
    6c0e:	0240      	lsls	r0, r0, #9
    6c10:	0a40      	lsrs	r0, r0, #9
    6c12:	4644      	mov	r4, r8
    6c14:	22ff      	movs	r2, #255	; 0xff
    6c16:	e763      	b.n	6ae0 <__aeabi_fmul+0x94>
    6c18:	4338      	orrs	r0, r7
    6c1a:	0240      	lsls	r0, r0, #9
    6c1c:	0a40      	lsrs	r0, r0, #9
    6c1e:	22ff      	movs	r2, #255	; 0xff
    6c20:	e75e      	b.n	6ae0 <__aeabi_fmul+0x94>
    6c22:	2401      	movs	r4, #1
    6c24:	1aa3      	subs	r3, r4, r2
    6c26:	2b1b      	cmp	r3, #27
    6c28:	dd05      	ble.n	6c36 <__aeabi_fmul+0x1ea>
    6c2a:	400c      	ands	r4, r1
    6c2c:	2200      	movs	r2, #0
    6c2e:	2000      	movs	r0, #0
    6c30:	e756      	b.n	6ae0 <__aeabi_fmul+0x94>
    6c32:	465e      	mov	r6, fp
    6c34:	e7cb      	b.n	6bce <__aeabi_fmul+0x182>
    6c36:	002a      	movs	r2, r5
    6c38:	2020      	movs	r0, #32
    6c3a:	40da      	lsrs	r2, r3
    6c3c:	1ac3      	subs	r3, r0, r3
    6c3e:	409d      	lsls	r5, r3
    6c40:	002b      	movs	r3, r5
    6c42:	1e5d      	subs	r5, r3, #1
    6c44:	41ab      	sbcs	r3, r5
    6c46:	4313      	orrs	r3, r2
    6c48:	075a      	lsls	r2, r3, #29
    6c4a:	d004      	beq.n	6c56 <__aeabi_fmul+0x20a>
    6c4c:	220f      	movs	r2, #15
    6c4e:	401a      	ands	r2, r3
    6c50:	2a04      	cmp	r2, #4
    6c52:	d000      	beq.n	6c56 <__aeabi_fmul+0x20a>
    6c54:	3304      	adds	r3, #4
    6c56:	015a      	lsls	r2, r3, #5
    6c58:	d504      	bpl.n	6c64 <__aeabi_fmul+0x218>
    6c5a:	2401      	movs	r4, #1
    6c5c:	2201      	movs	r2, #1
    6c5e:	400c      	ands	r4, r1
    6c60:	2000      	movs	r0, #0
    6c62:	e73d      	b.n	6ae0 <__aeabi_fmul+0x94>
    6c64:	2401      	movs	r4, #1
    6c66:	019b      	lsls	r3, r3, #6
    6c68:	0a58      	lsrs	r0, r3, #9
    6c6a:	400c      	ands	r4, r1
    6c6c:	2200      	movs	r2, #0
    6c6e:	e737      	b.n	6ae0 <__aeabi_fmul+0x94>
    6c70:	2080      	movs	r0, #128	; 0x80
    6c72:	2401      	movs	r4, #1
    6c74:	03c0      	lsls	r0, r0, #15
    6c76:	4328      	orrs	r0, r5
    6c78:	0240      	lsls	r0, r0, #9
    6c7a:	0a40      	lsrs	r0, r0, #9
    6c7c:	400c      	ands	r4, r1
    6c7e:	22ff      	movs	r2, #255	; 0xff
    6c80:	e72e      	b.n	6ae0 <__aeabi_fmul+0x94>
    6c82:	46c0      	nop			; (mov r8, r8)
    6c84:	00008ef8 	.word	0x00008ef8
    6c88:	f7ffffff 	.word	0xf7ffffff

00006c8c <__aeabi_i2f>:
    6c8c:	b570      	push	{r4, r5, r6, lr}
    6c8e:	2800      	cmp	r0, #0
    6c90:	d030      	beq.n	6cf4 <__aeabi_i2f+0x68>
    6c92:	17c3      	asrs	r3, r0, #31
    6c94:	18c4      	adds	r4, r0, r3
    6c96:	405c      	eors	r4, r3
    6c98:	0fc5      	lsrs	r5, r0, #31
    6c9a:	0020      	movs	r0, r4
    6c9c:	f001 feca 	bl	8a34 <__clzsi2>
    6ca0:	239e      	movs	r3, #158	; 0x9e
    6ca2:	1a1b      	subs	r3, r3, r0
    6ca4:	2b96      	cmp	r3, #150	; 0x96
    6ca6:	dc0d      	bgt.n	6cc4 <__aeabi_i2f+0x38>
    6ca8:	2296      	movs	r2, #150	; 0x96
    6caa:	1ad2      	subs	r2, r2, r3
    6cac:	4094      	lsls	r4, r2
    6cae:	002a      	movs	r2, r5
    6cb0:	0264      	lsls	r4, r4, #9
    6cb2:	0a64      	lsrs	r4, r4, #9
    6cb4:	b2db      	uxtb	r3, r3
    6cb6:	0264      	lsls	r4, r4, #9
    6cb8:	05db      	lsls	r3, r3, #23
    6cba:	0a60      	lsrs	r0, r4, #9
    6cbc:	07d2      	lsls	r2, r2, #31
    6cbe:	4318      	orrs	r0, r3
    6cc0:	4310      	orrs	r0, r2
    6cc2:	bd70      	pop	{r4, r5, r6, pc}
    6cc4:	2b99      	cmp	r3, #153	; 0x99
    6cc6:	dc19      	bgt.n	6cfc <__aeabi_i2f+0x70>
    6cc8:	2299      	movs	r2, #153	; 0x99
    6cca:	1ad2      	subs	r2, r2, r3
    6ccc:	2a00      	cmp	r2, #0
    6cce:	dd29      	ble.n	6d24 <__aeabi_i2f+0x98>
    6cd0:	4094      	lsls	r4, r2
    6cd2:	0022      	movs	r2, r4
    6cd4:	4c14      	ldr	r4, [pc, #80]	; (6d28 <__aeabi_i2f+0x9c>)
    6cd6:	4014      	ands	r4, r2
    6cd8:	0751      	lsls	r1, r2, #29
    6cda:	d004      	beq.n	6ce6 <__aeabi_i2f+0x5a>
    6cdc:	210f      	movs	r1, #15
    6cde:	400a      	ands	r2, r1
    6ce0:	2a04      	cmp	r2, #4
    6ce2:	d000      	beq.n	6ce6 <__aeabi_i2f+0x5a>
    6ce4:	3404      	adds	r4, #4
    6ce6:	0162      	lsls	r2, r4, #5
    6ce8:	d413      	bmi.n	6d12 <__aeabi_i2f+0x86>
    6cea:	01a4      	lsls	r4, r4, #6
    6cec:	0a64      	lsrs	r4, r4, #9
    6cee:	b2db      	uxtb	r3, r3
    6cf0:	002a      	movs	r2, r5
    6cf2:	e7e0      	b.n	6cb6 <__aeabi_i2f+0x2a>
    6cf4:	2200      	movs	r2, #0
    6cf6:	2300      	movs	r3, #0
    6cf8:	2400      	movs	r4, #0
    6cfa:	e7dc      	b.n	6cb6 <__aeabi_i2f+0x2a>
    6cfc:	2205      	movs	r2, #5
    6cfe:	0021      	movs	r1, r4
    6d00:	1a12      	subs	r2, r2, r0
    6d02:	40d1      	lsrs	r1, r2
    6d04:	22b9      	movs	r2, #185	; 0xb9
    6d06:	1ad2      	subs	r2, r2, r3
    6d08:	4094      	lsls	r4, r2
    6d0a:	1e62      	subs	r2, r4, #1
    6d0c:	4194      	sbcs	r4, r2
    6d0e:	430c      	orrs	r4, r1
    6d10:	e7da      	b.n	6cc8 <__aeabi_i2f+0x3c>
    6d12:	4b05      	ldr	r3, [pc, #20]	; (6d28 <__aeabi_i2f+0x9c>)
    6d14:	002a      	movs	r2, r5
    6d16:	401c      	ands	r4, r3
    6d18:	239f      	movs	r3, #159	; 0x9f
    6d1a:	01a4      	lsls	r4, r4, #6
    6d1c:	1a1b      	subs	r3, r3, r0
    6d1e:	0a64      	lsrs	r4, r4, #9
    6d20:	b2db      	uxtb	r3, r3
    6d22:	e7c8      	b.n	6cb6 <__aeabi_i2f+0x2a>
    6d24:	0022      	movs	r2, r4
    6d26:	e7d5      	b.n	6cd4 <__aeabi_i2f+0x48>
    6d28:	fbffffff 	.word	0xfbffffff

00006d2c <__aeabi_dadd>:
    6d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d2e:	4645      	mov	r5, r8
    6d30:	46de      	mov	lr, fp
    6d32:	4657      	mov	r7, sl
    6d34:	464e      	mov	r6, r9
    6d36:	030c      	lsls	r4, r1, #12
    6d38:	b5e0      	push	{r5, r6, r7, lr}
    6d3a:	004e      	lsls	r6, r1, #1
    6d3c:	0fc9      	lsrs	r1, r1, #31
    6d3e:	4688      	mov	r8, r1
    6d40:	000d      	movs	r5, r1
    6d42:	0a61      	lsrs	r1, r4, #9
    6d44:	0f44      	lsrs	r4, r0, #29
    6d46:	430c      	orrs	r4, r1
    6d48:	00c7      	lsls	r7, r0, #3
    6d4a:	0319      	lsls	r1, r3, #12
    6d4c:	0058      	lsls	r0, r3, #1
    6d4e:	0fdb      	lsrs	r3, r3, #31
    6d50:	469b      	mov	fp, r3
    6d52:	0a4b      	lsrs	r3, r1, #9
    6d54:	0f51      	lsrs	r1, r2, #29
    6d56:	430b      	orrs	r3, r1
    6d58:	0d76      	lsrs	r6, r6, #21
    6d5a:	0d40      	lsrs	r0, r0, #21
    6d5c:	0019      	movs	r1, r3
    6d5e:	00d2      	lsls	r2, r2, #3
    6d60:	45d8      	cmp	r8, fp
    6d62:	d100      	bne.n	6d66 <__aeabi_dadd+0x3a>
    6d64:	e0ae      	b.n	6ec4 <__aeabi_dadd+0x198>
    6d66:	1a35      	subs	r5, r6, r0
    6d68:	2d00      	cmp	r5, #0
    6d6a:	dc00      	bgt.n	6d6e <__aeabi_dadd+0x42>
    6d6c:	e0f6      	b.n	6f5c <__aeabi_dadd+0x230>
    6d6e:	2800      	cmp	r0, #0
    6d70:	d10f      	bne.n	6d92 <__aeabi_dadd+0x66>
    6d72:	4313      	orrs	r3, r2
    6d74:	d100      	bne.n	6d78 <__aeabi_dadd+0x4c>
    6d76:	e0db      	b.n	6f30 <__aeabi_dadd+0x204>
    6d78:	1e6b      	subs	r3, r5, #1
    6d7a:	2b00      	cmp	r3, #0
    6d7c:	d000      	beq.n	6d80 <__aeabi_dadd+0x54>
    6d7e:	e137      	b.n	6ff0 <__aeabi_dadd+0x2c4>
    6d80:	1aba      	subs	r2, r7, r2
    6d82:	4297      	cmp	r7, r2
    6d84:	41bf      	sbcs	r7, r7
    6d86:	1a64      	subs	r4, r4, r1
    6d88:	427f      	negs	r7, r7
    6d8a:	1be4      	subs	r4, r4, r7
    6d8c:	2601      	movs	r6, #1
    6d8e:	0017      	movs	r7, r2
    6d90:	e024      	b.n	6ddc <__aeabi_dadd+0xb0>
    6d92:	4bc6      	ldr	r3, [pc, #792]	; (70ac <__aeabi_dadd+0x380>)
    6d94:	429e      	cmp	r6, r3
    6d96:	d04d      	beq.n	6e34 <__aeabi_dadd+0x108>
    6d98:	2380      	movs	r3, #128	; 0x80
    6d9a:	041b      	lsls	r3, r3, #16
    6d9c:	4319      	orrs	r1, r3
    6d9e:	2d38      	cmp	r5, #56	; 0x38
    6da0:	dd00      	ble.n	6da4 <__aeabi_dadd+0x78>
    6da2:	e107      	b.n	6fb4 <__aeabi_dadd+0x288>
    6da4:	2d1f      	cmp	r5, #31
    6da6:	dd00      	ble.n	6daa <__aeabi_dadd+0x7e>
    6da8:	e138      	b.n	701c <__aeabi_dadd+0x2f0>
    6daa:	2020      	movs	r0, #32
    6dac:	1b43      	subs	r3, r0, r5
    6dae:	469a      	mov	sl, r3
    6db0:	000b      	movs	r3, r1
    6db2:	4650      	mov	r0, sl
    6db4:	4083      	lsls	r3, r0
    6db6:	4699      	mov	r9, r3
    6db8:	0013      	movs	r3, r2
    6dba:	4648      	mov	r0, r9
    6dbc:	40eb      	lsrs	r3, r5
    6dbe:	4318      	orrs	r0, r3
    6dc0:	0003      	movs	r3, r0
    6dc2:	4650      	mov	r0, sl
    6dc4:	4082      	lsls	r2, r0
    6dc6:	1e50      	subs	r0, r2, #1
    6dc8:	4182      	sbcs	r2, r0
    6dca:	40e9      	lsrs	r1, r5
    6dcc:	431a      	orrs	r2, r3
    6dce:	1aba      	subs	r2, r7, r2
    6dd0:	1a61      	subs	r1, r4, r1
    6dd2:	4297      	cmp	r7, r2
    6dd4:	41a4      	sbcs	r4, r4
    6dd6:	0017      	movs	r7, r2
    6dd8:	4264      	negs	r4, r4
    6dda:	1b0c      	subs	r4, r1, r4
    6ddc:	0223      	lsls	r3, r4, #8
    6dde:	d562      	bpl.n	6ea6 <__aeabi_dadd+0x17a>
    6de0:	0264      	lsls	r4, r4, #9
    6de2:	0a65      	lsrs	r5, r4, #9
    6de4:	2d00      	cmp	r5, #0
    6de6:	d100      	bne.n	6dea <__aeabi_dadd+0xbe>
    6de8:	e0df      	b.n	6faa <__aeabi_dadd+0x27e>
    6dea:	0028      	movs	r0, r5
    6dec:	f001 fe22 	bl	8a34 <__clzsi2>
    6df0:	0003      	movs	r3, r0
    6df2:	3b08      	subs	r3, #8
    6df4:	2b1f      	cmp	r3, #31
    6df6:	dd00      	ble.n	6dfa <__aeabi_dadd+0xce>
    6df8:	e0d2      	b.n	6fa0 <__aeabi_dadd+0x274>
    6dfa:	2220      	movs	r2, #32
    6dfc:	003c      	movs	r4, r7
    6dfe:	1ad2      	subs	r2, r2, r3
    6e00:	409d      	lsls	r5, r3
    6e02:	40d4      	lsrs	r4, r2
    6e04:	409f      	lsls	r7, r3
    6e06:	4325      	orrs	r5, r4
    6e08:	429e      	cmp	r6, r3
    6e0a:	dd00      	ble.n	6e0e <__aeabi_dadd+0xe2>
    6e0c:	e0c4      	b.n	6f98 <__aeabi_dadd+0x26c>
    6e0e:	1b9e      	subs	r6, r3, r6
    6e10:	1c73      	adds	r3, r6, #1
    6e12:	2b1f      	cmp	r3, #31
    6e14:	dd00      	ble.n	6e18 <__aeabi_dadd+0xec>
    6e16:	e0f1      	b.n	6ffc <__aeabi_dadd+0x2d0>
    6e18:	2220      	movs	r2, #32
    6e1a:	0038      	movs	r0, r7
    6e1c:	0029      	movs	r1, r5
    6e1e:	1ad2      	subs	r2, r2, r3
    6e20:	40d8      	lsrs	r0, r3
    6e22:	4091      	lsls	r1, r2
    6e24:	4097      	lsls	r7, r2
    6e26:	002c      	movs	r4, r5
    6e28:	4301      	orrs	r1, r0
    6e2a:	1e78      	subs	r0, r7, #1
    6e2c:	4187      	sbcs	r7, r0
    6e2e:	40dc      	lsrs	r4, r3
    6e30:	2600      	movs	r6, #0
    6e32:	430f      	orrs	r7, r1
    6e34:	077b      	lsls	r3, r7, #29
    6e36:	d009      	beq.n	6e4c <__aeabi_dadd+0x120>
    6e38:	230f      	movs	r3, #15
    6e3a:	403b      	ands	r3, r7
    6e3c:	2b04      	cmp	r3, #4
    6e3e:	d005      	beq.n	6e4c <__aeabi_dadd+0x120>
    6e40:	1d3b      	adds	r3, r7, #4
    6e42:	42bb      	cmp	r3, r7
    6e44:	41bf      	sbcs	r7, r7
    6e46:	427f      	negs	r7, r7
    6e48:	19e4      	adds	r4, r4, r7
    6e4a:	001f      	movs	r7, r3
    6e4c:	0223      	lsls	r3, r4, #8
    6e4e:	d52c      	bpl.n	6eaa <__aeabi_dadd+0x17e>
    6e50:	4b96      	ldr	r3, [pc, #600]	; (70ac <__aeabi_dadd+0x380>)
    6e52:	3601      	adds	r6, #1
    6e54:	429e      	cmp	r6, r3
    6e56:	d100      	bne.n	6e5a <__aeabi_dadd+0x12e>
    6e58:	e09a      	b.n	6f90 <__aeabi_dadd+0x264>
    6e5a:	4645      	mov	r5, r8
    6e5c:	4b94      	ldr	r3, [pc, #592]	; (70b0 <__aeabi_dadd+0x384>)
    6e5e:	08ff      	lsrs	r7, r7, #3
    6e60:	401c      	ands	r4, r3
    6e62:	0760      	lsls	r0, r4, #29
    6e64:	0576      	lsls	r6, r6, #21
    6e66:	0264      	lsls	r4, r4, #9
    6e68:	4307      	orrs	r7, r0
    6e6a:	0b24      	lsrs	r4, r4, #12
    6e6c:	0d76      	lsrs	r6, r6, #21
    6e6e:	2100      	movs	r1, #0
    6e70:	0324      	lsls	r4, r4, #12
    6e72:	0b23      	lsrs	r3, r4, #12
    6e74:	0d0c      	lsrs	r4, r1, #20
    6e76:	4a8f      	ldr	r2, [pc, #572]	; (70b4 <__aeabi_dadd+0x388>)
    6e78:	0524      	lsls	r4, r4, #20
    6e7a:	431c      	orrs	r4, r3
    6e7c:	4014      	ands	r4, r2
    6e7e:	0533      	lsls	r3, r6, #20
    6e80:	4323      	orrs	r3, r4
    6e82:	005b      	lsls	r3, r3, #1
    6e84:	07ed      	lsls	r5, r5, #31
    6e86:	085b      	lsrs	r3, r3, #1
    6e88:	432b      	orrs	r3, r5
    6e8a:	0038      	movs	r0, r7
    6e8c:	0019      	movs	r1, r3
    6e8e:	bc3c      	pop	{r2, r3, r4, r5}
    6e90:	4690      	mov	r8, r2
    6e92:	4699      	mov	r9, r3
    6e94:	46a2      	mov	sl, r4
    6e96:	46ab      	mov	fp, r5
    6e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e9a:	4664      	mov	r4, ip
    6e9c:	4304      	orrs	r4, r0
    6e9e:	d100      	bne.n	6ea2 <__aeabi_dadd+0x176>
    6ea0:	e211      	b.n	72c6 <__aeabi_dadd+0x59a>
    6ea2:	0004      	movs	r4, r0
    6ea4:	4667      	mov	r7, ip
    6ea6:	077b      	lsls	r3, r7, #29
    6ea8:	d1c6      	bne.n	6e38 <__aeabi_dadd+0x10c>
    6eaa:	4645      	mov	r5, r8
    6eac:	0760      	lsls	r0, r4, #29
    6eae:	08ff      	lsrs	r7, r7, #3
    6eb0:	4307      	orrs	r7, r0
    6eb2:	08e4      	lsrs	r4, r4, #3
    6eb4:	4b7d      	ldr	r3, [pc, #500]	; (70ac <__aeabi_dadd+0x380>)
    6eb6:	429e      	cmp	r6, r3
    6eb8:	d030      	beq.n	6f1c <__aeabi_dadd+0x1f0>
    6eba:	0324      	lsls	r4, r4, #12
    6ebc:	0576      	lsls	r6, r6, #21
    6ebe:	0b24      	lsrs	r4, r4, #12
    6ec0:	0d76      	lsrs	r6, r6, #21
    6ec2:	e7d4      	b.n	6e6e <__aeabi_dadd+0x142>
    6ec4:	1a33      	subs	r3, r6, r0
    6ec6:	469a      	mov	sl, r3
    6ec8:	2b00      	cmp	r3, #0
    6eca:	dd78      	ble.n	6fbe <__aeabi_dadd+0x292>
    6ecc:	2800      	cmp	r0, #0
    6ece:	d031      	beq.n	6f34 <__aeabi_dadd+0x208>
    6ed0:	4876      	ldr	r0, [pc, #472]	; (70ac <__aeabi_dadd+0x380>)
    6ed2:	4286      	cmp	r6, r0
    6ed4:	d0ae      	beq.n	6e34 <__aeabi_dadd+0x108>
    6ed6:	2080      	movs	r0, #128	; 0x80
    6ed8:	0400      	lsls	r0, r0, #16
    6eda:	4301      	orrs	r1, r0
    6edc:	4653      	mov	r3, sl
    6ede:	2b38      	cmp	r3, #56	; 0x38
    6ee0:	dc00      	bgt.n	6ee4 <__aeabi_dadd+0x1b8>
    6ee2:	e0e9      	b.n	70b8 <__aeabi_dadd+0x38c>
    6ee4:	430a      	orrs	r2, r1
    6ee6:	1e51      	subs	r1, r2, #1
    6ee8:	418a      	sbcs	r2, r1
    6eea:	2100      	movs	r1, #0
    6eec:	19d2      	adds	r2, r2, r7
    6eee:	42ba      	cmp	r2, r7
    6ef0:	41bf      	sbcs	r7, r7
    6ef2:	1909      	adds	r1, r1, r4
    6ef4:	427c      	negs	r4, r7
    6ef6:	0017      	movs	r7, r2
    6ef8:	190c      	adds	r4, r1, r4
    6efa:	0223      	lsls	r3, r4, #8
    6efc:	d5d3      	bpl.n	6ea6 <__aeabi_dadd+0x17a>
    6efe:	4b6b      	ldr	r3, [pc, #428]	; (70ac <__aeabi_dadd+0x380>)
    6f00:	3601      	adds	r6, #1
    6f02:	429e      	cmp	r6, r3
    6f04:	d100      	bne.n	6f08 <__aeabi_dadd+0x1dc>
    6f06:	e13a      	b.n	717e <__aeabi_dadd+0x452>
    6f08:	2001      	movs	r0, #1
    6f0a:	4b69      	ldr	r3, [pc, #420]	; (70b0 <__aeabi_dadd+0x384>)
    6f0c:	401c      	ands	r4, r3
    6f0e:	087b      	lsrs	r3, r7, #1
    6f10:	4007      	ands	r7, r0
    6f12:	431f      	orrs	r7, r3
    6f14:	07e0      	lsls	r0, r4, #31
    6f16:	4307      	orrs	r7, r0
    6f18:	0864      	lsrs	r4, r4, #1
    6f1a:	e78b      	b.n	6e34 <__aeabi_dadd+0x108>
    6f1c:	0023      	movs	r3, r4
    6f1e:	433b      	orrs	r3, r7
    6f20:	d100      	bne.n	6f24 <__aeabi_dadd+0x1f8>
    6f22:	e1cb      	b.n	72bc <__aeabi_dadd+0x590>
    6f24:	2280      	movs	r2, #128	; 0x80
    6f26:	0312      	lsls	r2, r2, #12
    6f28:	4314      	orrs	r4, r2
    6f2a:	0324      	lsls	r4, r4, #12
    6f2c:	0b24      	lsrs	r4, r4, #12
    6f2e:	e79e      	b.n	6e6e <__aeabi_dadd+0x142>
    6f30:	002e      	movs	r6, r5
    6f32:	e77f      	b.n	6e34 <__aeabi_dadd+0x108>
    6f34:	0008      	movs	r0, r1
    6f36:	4310      	orrs	r0, r2
    6f38:	d100      	bne.n	6f3c <__aeabi_dadd+0x210>
    6f3a:	e0b4      	b.n	70a6 <__aeabi_dadd+0x37a>
    6f3c:	1e58      	subs	r0, r3, #1
    6f3e:	2800      	cmp	r0, #0
    6f40:	d000      	beq.n	6f44 <__aeabi_dadd+0x218>
    6f42:	e0de      	b.n	7102 <__aeabi_dadd+0x3d6>
    6f44:	18ba      	adds	r2, r7, r2
    6f46:	42ba      	cmp	r2, r7
    6f48:	419b      	sbcs	r3, r3
    6f4a:	1864      	adds	r4, r4, r1
    6f4c:	425b      	negs	r3, r3
    6f4e:	18e4      	adds	r4, r4, r3
    6f50:	0017      	movs	r7, r2
    6f52:	2601      	movs	r6, #1
    6f54:	0223      	lsls	r3, r4, #8
    6f56:	d5a6      	bpl.n	6ea6 <__aeabi_dadd+0x17a>
    6f58:	2602      	movs	r6, #2
    6f5a:	e7d5      	b.n	6f08 <__aeabi_dadd+0x1dc>
    6f5c:	2d00      	cmp	r5, #0
    6f5e:	d16e      	bne.n	703e <__aeabi_dadd+0x312>
    6f60:	1c70      	adds	r0, r6, #1
    6f62:	0540      	lsls	r0, r0, #21
    6f64:	0d40      	lsrs	r0, r0, #21
    6f66:	2801      	cmp	r0, #1
    6f68:	dc00      	bgt.n	6f6c <__aeabi_dadd+0x240>
    6f6a:	e0f9      	b.n	7160 <__aeabi_dadd+0x434>
    6f6c:	1ab8      	subs	r0, r7, r2
    6f6e:	4684      	mov	ip, r0
    6f70:	4287      	cmp	r7, r0
    6f72:	4180      	sbcs	r0, r0
    6f74:	1ae5      	subs	r5, r4, r3
    6f76:	4240      	negs	r0, r0
    6f78:	1a2d      	subs	r5, r5, r0
    6f7a:	0228      	lsls	r0, r5, #8
    6f7c:	d400      	bmi.n	6f80 <__aeabi_dadd+0x254>
    6f7e:	e089      	b.n	7094 <__aeabi_dadd+0x368>
    6f80:	1bd7      	subs	r7, r2, r7
    6f82:	42ba      	cmp	r2, r7
    6f84:	4192      	sbcs	r2, r2
    6f86:	1b1c      	subs	r4, r3, r4
    6f88:	4252      	negs	r2, r2
    6f8a:	1aa5      	subs	r5, r4, r2
    6f8c:	46d8      	mov	r8, fp
    6f8e:	e729      	b.n	6de4 <__aeabi_dadd+0xb8>
    6f90:	4645      	mov	r5, r8
    6f92:	2400      	movs	r4, #0
    6f94:	2700      	movs	r7, #0
    6f96:	e76a      	b.n	6e6e <__aeabi_dadd+0x142>
    6f98:	4c45      	ldr	r4, [pc, #276]	; (70b0 <__aeabi_dadd+0x384>)
    6f9a:	1af6      	subs	r6, r6, r3
    6f9c:	402c      	ands	r4, r5
    6f9e:	e749      	b.n	6e34 <__aeabi_dadd+0x108>
    6fa0:	003d      	movs	r5, r7
    6fa2:	3828      	subs	r0, #40	; 0x28
    6fa4:	4085      	lsls	r5, r0
    6fa6:	2700      	movs	r7, #0
    6fa8:	e72e      	b.n	6e08 <__aeabi_dadd+0xdc>
    6faa:	0038      	movs	r0, r7
    6fac:	f001 fd42 	bl	8a34 <__clzsi2>
    6fb0:	3020      	adds	r0, #32
    6fb2:	e71d      	b.n	6df0 <__aeabi_dadd+0xc4>
    6fb4:	430a      	orrs	r2, r1
    6fb6:	1e51      	subs	r1, r2, #1
    6fb8:	418a      	sbcs	r2, r1
    6fba:	2100      	movs	r1, #0
    6fbc:	e707      	b.n	6dce <__aeabi_dadd+0xa2>
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d000      	beq.n	6fc4 <__aeabi_dadd+0x298>
    6fc2:	e0f3      	b.n	71ac <__aeabi_dadd+0x480>
    6fc4:	1c70      	adds	r0, r6, #1
    6fc6:	0543      	lsls	r3, r0, #21
    6fc8:	0d5b      	lsrs	r3, r3, #21
    6fca:	2b01      	cmp	r3, #1
    6fcc:	dc00      	bgt.n	6fd0 <__aeabi_dadd+0x2a4>
    6fce:	e0ad      	b.n	712c <__aeabi_dadd+0x400>
    6fd0:	4b36      	ldr	r3, [pc, #216]	; (70ac <__aeabi_dadd+0x380>)
    6fd2:	4298      	cmp	r0, r3
    6fd4:	d100      	bne.n	6fd8 <__aeabi_dadd+0x2ac>
    6fd6:	e0d1      	b.n	717c <__aeabi_dadd+0x450>
    6fd8:	18ba      	adds	r2, r7, r2
    6fda:	42ba      	cmp	r2, r7
    6fdc:	41bf      	sbcs	r7, r7
    6fde:	1864      	adds	r4, r4, r1
    6fe0:	427f      	negs	r7, r7
    6fe2:	19e4      	adds	r4, r4, r7
    6fe4:	07e7      	lsls	r7, r4, #31
    6fe6:	0852      	lsrs	r2, r2, #1
    6fe8:	4317      	orrs	r7, r2
    6fea:	0864      	lsrs	r4, r4, #1
    6fec:	0006      	movs	r6, r0
    6fee:	e721      	b.n	6e34 <__aeabi_dadd+0x108>
    6ff0:	482e      	ldr	r0, [pc, #184]	; (70ac <__aeabi_dadd+0x380>)
    6ff2:	4285      	cmp	r5, r0
    6ff4:	d100      	bne.n	6ff8 <__aeabi_dadd+0x2cc>
    6ff6:	e093      	b.n	7120 <__aeabi_dadd+0x3f4>
    6ff8:	001d      	movs	r5, r3
    6ffa:	e6d0      	b.n	6d9e <__aeabi_dadd+0x72>
    6ffc:	0029      	movs	r1, r5
    6ffe:	3e1f      	subs	r6, #31
    7000:	40f1      	lsrs	r1, r6
    7002:	2b20      	cmp	r3, #32
    7004:	d100      	bne.n	7008 <__aeabi_dadd+0x2dc>
    7006:	e08d      	b.n	7124 <__aeabi_dadd+0x3f8>
    7008:	2240      	movs	r2, #64	; 0x40
    700a:	1ad3      	subs	r3, r2, r3
    700c:	409d      	lsls	r5, r3
    700e:	432f      	orrs	r7, r5
    7010:	1e7d      	subs	r5, r7, #1
    7012:	41af      	sbcs	r7, r5
    7014:	2400      	movs	r4, #0
    7016:	430f      	orrs	r7, r1
    7018:	2600      	movs	r6, #0
    701a:	e744      	b.n	6ea6 <__aeabi_dadd+0x17a>
    701c:	002b      	movs	r3, r5
    701e:	0008      	movs	r0, r1
    7020:	3b20      	subs	r3, #32
    7022:	40d8      	lsrs	r0, r3
    7024:	0003      	movs	r3, r0
    7026:	2d20      	cmp	r5, #32
    7028:	d100      	bne.n	702c <__aeabi_dadd+0x300>
    702a:	e07d      	b.n	7128 <__aeabi_dadd+0x3fc>
    702c:	2040      	movs	r0, #64	; 0x40
    702e:	1b45      	subs	r5, r0, r5
    7030:	40a9      	lsls	r1, r5
    7032:	430a      	orrs	r2, r1
    7034:	1e51      	subs	r1, r2, #1
    7036:	418a      	sbcs	r2, r1
    7038:	2100      	movs	r1, #0
    703a:	431a      	orrs	r2, r3
    703c:	e6c7      	b.n	6dce <__aeabi_dadd+0xa2>
    703e:	2e00      	cmp	r6, #0
    7040:	d050      	beq.n	70e4 <__aeabi_dadd+0x3b8>
    7042:	4e1a      	ldr	r6, [pc, #104]	; (70ac <__aeabi_dadd+0x380>)
    7044:	42b0      	cmp	r0, r6
    7046:	d057      	beq.n	70f8 <__aeabi_dadd+0x3cc>
    7048:	2680      	movs	r6, #128	; 0x80
    704a:	426b      	negs	r3, r5
    704c:	4699      	mov	r9, r3
    704e:	0436      	lsls	r6, r6, #16
    7050:	4334      	orrs	r4, r6
    7052:	464b      	mov	r3, r9
    7054:	2b38      	cmp	r3, #56	; 0x38
    7056:	dd00      	ble.n	705a <__aeabi_dadd+0x32e>
    7058:	e0d6      	b.n	7208 <__aeabi_dadd+0x4dc>
    705a:	2b1f      	cmp	r3, #31
    705c:	dd00      	ble.n	7060 <__aeabi_dadd+0x334>
    705e:	e135      	b.n	72cc <__aeabi_dadd+0x5a0>
    7060:	2620      	movs	r6, #32
    7062:	1af5      	subs	r5, r6, r3
    7064:	0026      	movs	r6, r4
    7066:	40ae      	lsls	r6, r5
    7068:	46b2      	mov	sl, r6
    706a:	003e      	movs	r6, r7
    706c:	40de      	lsrs	r6, r3
    706e:	46ac      	mov	ip, r5
    7070:	0035      	movs	r5, r6
    7072:	4656      	mov	r6, sl
    7074:	432e      	orrs	r6, r5
    7076:	4665      	mov	r5, ip
    7078:	40af      	lsls	r7, r5
    707a:	1e7d      	subs	r5, r7, #1
    707c:	41af      	sbcs	r7, r5
    707e:	40dc      	lsrs	r4, r3
    7080:	4337      	orrs	r7, r6
    7082:	1bd7      	subs	r7, r2, r7
    7084:	42ba      	cmp	r2, r7
    7086:	4192      	sbcs	r2, r2
    7088:	1b0c      	subs	r4, r1, r4
    708a:	4252      	negs	r2, r2
    708c:	1aa4      	subs	r4, r4, r2
    708e:	0006      	movs	r6, r0
    7090:	46d8      	mov	r8, fp
    7092:	e6a3      	b.n	6ddc <__aeabi_dadd+0xb0>
    7094:	4664      	mov	r4, ip
    7096:	4667      	mov	r7, ip
    7098:	432c      	orrs	r4, r5
    709a:	d000      	beq.n	709e <__aeabi_dadd+0x372>
    709c:	e6a2      	b.n	6de4 <__aeabi_dadd+0xb8>
    709e:	2500      	movs	r5, #0
    70a0:	2600      	movs	r6, #0
    70a2:	2700      	movs	r7, #0
    70a4:	e706      	b.n	6eb4 <__aeabi_dadd+0x188>
    70a6:	001e      	movs	r6, r3
    70a8:	e6c4      	b.n	6e34 <__aeabi_dadd+0x108>
    70aa:	46c0      	nop			; (mov r8, r8)
    70ac:	000007ff 	.word	0x000007ff
    70b0:	ff7fffff 	.word	0xff7fffff
    70b4:	800fffff 	.word	0x800fffff
    70b8:	2b1f      	cmp	r3, #31
    70ba:	dc63      	bgt.n	7184 <__aeabi_dadd+0x458>
    70bc:	2020      	movs	r0, #32
    70be:	1ac3      	subs	r3, r0, r3
    70c0:	0008      	movs	r0, r1
    70c2:	4098      	lsls	r0, r3
    70c4:	469c      	mov	ip, r3
    70c6:	4683      	mov	fp, r0
    70c8:	4653      	mov	r3, sl
    70ca:	0010      	movs	r0, r2
    70cc:	40d8      	lsrs	r0, r3
    70ce:	0003      	movs	r3, r0
    70d0:	4658      	mov	r0, fp
    70d2:	4318      	orrs	r0, r3
    70d4:	4663      	mov	r3, ip
    70d6:	409a      	lsls	r2, r3
    70d8:	1e53      	subs	r3, r2, #1
    70da:	419a      	sbcs	r2, r3
    70dc:	4653      	mov	r3, sl
    70de:	4302      	orrs	r2, r0
    70e0:	40d9      	lsrs	r1, r3
    70e2:	e703      	b.n	6eec <__aeabi_dadd+0x1c0>
    70e4:	0026      	movs	r6, r4
    70e6:	433e      	orrs	r6, r7
    70e8:	d006      	beq.n	70f8 <__aeabi_dadd+0x3cc>
    70ea:	43eb      	mvns	r3, r5
    70ec:	4699      	mov	r9, r3
    70ee:	2b00      	cmp	r3, #0
    70f0:	d0c7      	beq.n	7082 <__aeabi_dadd+0x356>
    70f2:	4e94      	ldr	r6, [pc, #592]	; (7344 <__aeabi_dadd+0x618>)
    70f4:	42b0      	cmp	r0, r6
    70f6:	d1ac      	bne.n	7052 <__aeabi_dadd+0x326>
    70f8:	000c      	movs	r4, r1
    70fa:	0017      	movs	r7, r2
    70fc:	0006      	movs	r6, r0
    70fe:	46d8      	mov	r8, fp
    7100:	e698      	b.n	6e34 <__aeabi_dadd+0x108>
    7102:	4b90      	ldr	r3, [pc, #576]	; (7344 <__aeabi_dadd+0x618>)
    7104:	459a      	cmp	sl, r3
    7106:	d00b      	beq.n	7120 <__aeabi_dadd+0x3f4>
    7108:	4682      	mov	sl, r0
    710a:	e6e7      	b.n	6edc <__aeabi_dadd+0x1b0>
    710c:	2800      	cmp	r0, #0
    710e:	d000      	beq.n	7112 <__aeabi_dadd+0x3e6>
    7110:	e09e      	b.n	7250 <__aeabi_dadd+0x524>
    7112:	0018      	movs	r0, r3
    7114:	4310      	orrs	r0, r2
    7116:	d100      	bne.n	711a <__aeabi_dadd+0x3ee>
    7118:	e0e9      	b.n	72ee <__aeabi_dadd+0x5c2>
    711a:	001c      	movs	r4, r3
    711c:	0017      	movs	r7, r2
    711e:	46d8      	mov	r8, fp
    7120:	4e88      	ldr	r6, [pc, #544]	; (7344 <__aeabi_dadd+0x618>)
    7122:	e687      	b.n	6e34 <__aeabi_dadd+0x108>
    7124:	2500      	movs	r5, #0
    7126:	e772      	b.n	700e <__aeabi_dadd+0x2e2>
    7128:	2100      	movs	r1, #0
    712a:	e782      	b.n	7032 <__aeabi_dadd+0x306>
    712c:	0023      	movs	r3, r4
    712e:	433b      	orrs	r3, r7
    7130:	2e00      	cmp	r6, #0
    7132:	d000      	beq.n	7136 <__aeabi_dadd+0x40a>
    7134:	e0ab      	b.n	728e <__aeabi_dadd+0x562>
    7136:	2b00      	cmp	r3, #0
    7138:	d100      	bne.n	713c <__aeabi_dadd+0x410>
    713a:	e0e7      	b.n	730c <__aeabi_dadd+0x5e0>
    713c:	000b      	movs	r3, r1
    713e:	4313      	orrs	r3, r2
    7140:	d100      	bne.n	7144 <__aeabi_dadd+0x418>
    7142:	e677      	b.n	6e34 <__aeabi_dadd+0x108>
    7144:	18ba      	adds	r2, r7, r2
    7146:	42ba      	cmp	r2, r7
    7148:	41bf      	sbcs	r7, r7
    714a:	1864      	adds	r4, r4, r1
    714c:	427f      	negs	r7, r7
    714e:	19e4      	adds	r4, r4, r7
    7150:	0223      	lsls	r3, r4, #8
    7152:	d400      	bmi.n	7156 <__aeabi_dadd+0x42a>
    7154:	e0f2      	b.n	733c <__aeabi_dadd+0x610>
    7156:	4b7c      	ldr	r3, [pc, #496]	; (7348 <__aeabi_dadd+0x61c>)
    7158:	0017      	movs	r7, r2
    715a:	401c      	ands	r4, r3
    715c:	0006      	movs	r6, r0
    715e:	e669      	b.n	6e34 <__aeabi_dadd+0x108>
    7160:	0020      	movs	r0, r4
    7162:	4338      	orrs	r0, r7
    7164:	2e00      	cmp	r6, #0
    7166:	d1d1      	bne.n	710c <__aeabi_dadd+0x3e0>
    7168:	2800      	cmp	r0, #0
    716a:	d15b      	bne.n	7224 <__aeabi_dadd+0x4f8>
    716c:	001c      	movs	r4, r3
    716e:	4314      	orrs	r4, r2
    7170:	d100      	bne.n	7174 <__aeabi_dadd+0x448>
    7172:	e0a8      	b.n	72c6 <__aeabi_dadd+0x59a>
    7174:	001c      	movs	r4, r3
    7176:	0017      	movs	r7, r2
    7178:	46d8      	mov	r8, fp
    717a:	e65b      	b.n	6e34 <__aeabi_dadd+0x108>
    717c:	0006      	movs	r6, r0
    717e:	2400      	movs	r4, #0
    7180:	2700      	movs	r7, #0
    7182:	e697      	b.n	6eb4 <__aeabi_dadd+0x188>
    7184:	4650      	mov	r0, sl
    7186:	000b      	movs	r3, r1
    7188:	3820      	subs	r0, #32
    718a:	40c3      	lsrs	r3, r0
    718c:	4699      	mov	r9, r3
    718e:	4653      	mov	r3, sl
    7190:	2b20      	cmp	r3, #32
    7192:	d100      	bne.n	7196 <__aeabi_dadd+0x46a>
    7194:	e095      	b.n	72c2 <__aeabi_dadd+0x596>
    7196:	2340      	movs	r3, #64	; 0x40
    7198:	4650      	mov	r0, sl
    719a:	1a1b      	subs	r3, r3, r0
    719c:	4099      	lsls	r1, r3
    719e:	430a      	orrs	r2, r1
    71a0:	1e51      	subs	r1, r2, #1
    71a2:	418a      	sbcs	r2, r1
    71a4:	464b      	mov	r3, r9
    71a6:	2100      	movs	r1, #0
    71a8:	431a      	orrs	r2, r3
    71aa:	e69f      	b.n	6eec <__aeabi_dadd+0x1c0>
    71ac:	2e00      	cmp	r6, #0
    71ae:	d130      	bne.n	7212 <__aeabi_dadd+0x4e6>
    71b0:	0026      	movs	r6, r4
    71b2:	433e      	orrs	r6, r7
    71b4:	d067      	beq.n	7286 <__aeabi_dadd+0x55a>
    71b6:	43db      	mvns	r3, r3
    71b8:	469a      	mov	sl, r3
    71ba:	2b00      	cmp	r3, #0
    71bc:	d01c      	beq.n	71f8 <__aeabi_dadd+0x4cc>
    71be:	4e61      	ldr	r6, [pc, #388]	; (7344 <__aeabi_dadd+0x618>)
    71c0:	42b0      	cmp	r0, r6
    71c2:	d060      	beq.n	7286 <__aeabi_dadd+0x55a>
    71c4:	4653      	mov	r3, sl
    71c6:	2b38      	cmp	r3, #56	; 0x38
    71c8:	dd00      	ble.n	71cc <__aeabi_dadd+0x4a0>
    71ca:	e096      	b.n	72fa <__aeabi_dadd+0x5ce>
    71cc:	2b1f      	cmp	r3, #31
    71ce:	dd00      	ble.n	71d2 <__aeabi_dadd+0x4a6>
    71d0:	e09f      	b.n	7312 <__aeabi_dadd+0x5e6>
    71d2:	2620      	movs	r6, #32
    71d4:	1af3      	subs	r3, r6, r3
    71d6:	0026      	movs	r6, r4
    71d8:	409e      	lsls	r6, r3
    71da:	469c      	mov	ip, r3
    71dc:	46b3      	mov	fp, r6
    71de:	4653      	mov	r3, sl
    71e0:	003e      	movs	r6, r7
    71e2:	40de      	lsrs	r6, r3
    71e4:	0033      	movs	r3, r6
    71e6:	465e      	mov	r6, fp
    71e8:	431e      	orrs	r6, r3
    71ea:	4663      	mov	r3, ip
    71ec:	409f      	lsls	r7, r3
    71ee:	1e7b      	subs	r3, r7, #1
    71f0:	419f      	sbcs	r7, r3
    71f2:	4653      	mov	r3, sl
    71f4:	40dc      	lsrs	r4, r3
    71f6:	4337      	orrs	r7, r6
    71f8:	18bf      	adds	r7, r7, r2
    71fa:	4297      	cmp	r7, r2
    71fc:	4192      	sbcs	r2, r2
    71fe:	1864      	adds	r4, r4, r1
    7200:	4252      	negs	r2, r2
    7202:	18a4      	adds	r4, r4, r2
    7204:	0006      	movs	r6, r0
    7206:	e678      	b.n	6efa <__aeabi_dadd+0x1ce>
    7208:	4327      	orrs	r7, r4
    720a:	1e7c      	subs	r4, r7, #1
    720c:	41a7      	sbcs	r7, r4
    720e:	2400      	movs	r4, #0
    7210:	e737      	b.n	7082 <__aeabi_dadd+0x356>
    7212:	4e4c      	ldr	r6, [pc, #304]	; (7344 <__aeabi_dadd+0x618>)
    7214:	42b0      	cmp	r0, r6
    7216:	d036      	beq.n	7286 <__aeabi_dadd+0x55a>
    7218:	2680      	movs	r6, #128	; 0x80
    721a:	425b      	negs	r3, r3
    721c:	0436      	lsls	r6, r6, #16
    721e:	469a      	mov	sl, r3
    7220:	4334      	orrs	r4, r6
    7222:	e7cf      	b.n	71c4 <__aeabi_dadd+0x498>
    7224:	0018      	movs	r0, r3
    7226:	4310      	orrs	r0, r2
    7228:	d100      	bne.n	722c <__aeabi_dadd+0x500>
    722a:	e603      	b.n	6e34 <__aeabi_dadd+0x108>
    722c:	1ab8      	subs	r0, r7, r2
    722e:	4684      	mov	ip, r0
    7230:	4567      	cmp	r7, ip
    7232:	41ad      	sbcs	r5, r5
    7234:	1ae0      	subs	r0, r4, r3
    7236:	426d      	negs	r5, r5
    7238:	1b40      	subs	r0, r0, r5
    723a:	0205      	lsls	r5, r0, #8
    723c:	d400      	bmi.n	7240 <__aeabi_dadd+0x514>
    723e:	e62c      	b.n	6e9a <__aeabi_dadd+0x16e>
    7240:	1bd7      	subs	r7, r2, r7
    7242:	42ba      	cmp	r2, r7
    7244:	4192      	sbcs	r2, r2
    7246:	1b1c      	subs	r4, r3, r4
    7248:	4252      	negs	r2, r2
    724a:	1aa4      	subs	r4, r4, r2
    724c:	46d8      	mov	r8, fp
    724e:	e5f1      	b.n	6e34 <__aeabi_dadd+0x108>
    7250:	0018      	movs	r0, r3
    7252:	4310      	orrs	r0, r2
    7254:	d100      	bne.n	7258 <__aeabi_dadd+0x52c>
    7256:	e763      	b.n	7120 <__aeabi_dadd+0x3f4>
    7258:	08f8      	lsrs	r0, r7, #3
    725a:	0767      	lsls	r7, r4, #29
    725c:	4307      	orrs	r7, r0
    725e:	2080      	movs	r0, #128	; 0x80
    7260:	08e4      	lsrs	r4, r4, #3
    7262:	0300      	lsls	r0, r0, #12
    7264:	4204      	tst	r4, r0
    7266:	d008      	beq.n	727a <__aeabi_dadd+0x54e>
    7268:	08dd      	lsrs	r5, r3, #3
    726a:	4205      	tst	r5, r0
    726c:	d105      	bne.n	727a <__aeabi_dadd+0x54e>
    726e:	08d2      	lsrs	r2, r2, #3
    7270:	0759      	lsls	r1, r3, #29
    7272:	4311      	orrs	r1, r2
    7274:	000f      	movs	r7, r1
    7276:	002c      	movs	r4, r5
    7278:	46d8      	mov	r8, fp
    727a:	0f7b      	lsrs	r3, r7, #29
    727c:	00e4      	lsls	r4, r4, #3
    727e:	431c      	orrs	r4, r3
    7280:	00ff      	lsls	r7, r7, #3
    7282:	4e30      	ldr	r6, [pc, #192]	; (7344 <__aeabi_dadd+0x618>)
    7284:	e5d6      	b.n	6e34 <__aeabi_dadd+0x108>
    7286:	000c      	movs	r4, r1
    7288:	0017      	movs	r7, r2
    728a:	0006      	movs	r6, r0
    728c:	e5d2      	b.n	6e34 <__aeabi_dadd+0x108>
    728e:	2b00      	cmp	r3, #0
    7290:	d038      	beq.n	7304 <__aeabi_dadd+0x5d8>
    7292:	000b      	movs	r3, r1
    7294:	4313      	orrs	r3, r2
    7296:	d100      	bne.n	729a <__aeabi_dadd+0x56e>
    7298:	e742      	b.n	7120 <__aeabi_dadd+0x3f4>
    729a:	08f8      	lsrs	r0, r7, #3
    729c:	0767      	lsls	r7, r4, #29
    729e:	4307      	orrs	r7, r0
    72a0:	2080      	movs	r0, #128	; 0x80
    72a2:	08e4      	lsrs	r4, r4, #3
    72a4:	0300      	lsls	r0, r0, #12
    72a6:	4204      	tst	r4, r0
    72a8:	d0e7      	beq.n	727a <__aeabi_dadd+0x54e>
    72aa:	08cb      	lsrs	r3, r1, #3
    72ac:	4203      	tst	r3, r0
    72ae:	d1e4      	bne.n	727a <__aeabi_dadd+0x54e>
    72b0:	08d2      	lsrs	r2, r2, #3
    72b2:	0749      	lsls	r1, r1, #29
    72b4:	4311      	orrs	r1, r2
    72b6:	000f      	movs	r7, r1
    72b8:	001c      	movs	r4, r3
    72ba:	e7de      	b.n	727a <__aeabi_dadd+0x54e>
    72bc:	2700      	movs	r7, #0
    72be:	2400      	movs	r4, #0
    72c0:	e5d5      	b.n	6e6e <__aeabi_dadd+0x142>
    72c2:	2100      	movs	r1, #0
    72c4:	e76b      	b.n	719e <__aeabi_dadd+0x472>
    72c6:	2500      	movs	r5, #0
    72c8:	2700      	movs	r7, #0
    72ca:	e5f3      	b.n	6eb4 <__aeabi_dadd+0x188>
    72cc:	464e      	mov	r6, r9
    72ce:	0025      	movs	r5, r4
    72d0:	3e20      	subs	r6, #32
    72d2:	40f5      	lsrs	r5, r6
    72d4:	464b      	mov	r3, r9
    72d6:	002e      	movs	r6, r5
    72d8:	2b20      	cmp	r3, #32
    72da:	d02d      	beq.n	7338 <__aeabi_dadd+0x60c>
    72dc:	2540      	movs	r5, #64	; 0x40
    72de:	1aed      	subs	r5, r5, r3
    72e0:	40ac      	lsls	r4, r5
    72e2:	4327      	orrs	r7, r4
    72e4:	1e7c      	subs	r4, r7, #1
    72e6:	41a7      	sbcs	r7, r4
    72e8:	2400      	movs	r4, #0
    72ea:	4337      	orrs	r7, r6
    72ec:	e6c9      	b.n	7082 <__aeabi_dadd+0x356>
    72ee:	2480      	movs	r4, #128	; 0x80
    72f0:	2500      	movs	r5, #0
    72f2:	0324      	lsls	r4, r4, #12
    72f4:	4e13      	ldr	r6, [pc, #76]	; (7344 <__aeabi_dadd+0x618>)
    72f6:	2700      	movs	r7, #0
    72f8:	e5dc      	b.n	6eb4 <__aeabi_dadd+0x188>
    72fa:	4327      	orrs	r7, r4
    72fc:	1e7c      	subs	r4, r7, #1
    72fe:	41a7      	sbcs	r7, r4
    7300:	2400      	movs	r4, #0
    7302:	e779      	b.n	71f8 <__aeabi_dadd+0x4cc>
    7304:	000c      	movs	r4, r1
    7306:	0017      	movs	r7, r2
    7308:	4e0e      	ldr	r6, [pc, #56]	; (7344 <__aeabi_dadd+0x618>)
    730a:	e593      	b.n	6e34 <__aeabi_dadd+0x108>
    730c:	000c      	movs	r4, r1
    730e:	0017      	movs	r7, r2
    7310:	e590      	b.n	6e34 <__aeabi_dadd+0x108>
    7312:	4656      	mov	r6, sl
    7314:	0023      	movs	r3, r4
    7316:	3e20      	subs	r6, #32
    7318:	40f3      	lsrs	r3, r6
    731a:	4699      	mov	r9, r3
    731c:	4653      	mov	r3, sl
    731e:	2b20      	cmp	r3, #32
    7320:	d00e      	beq.n	7340 <__aeabi_dadd+0x614>
    7322:	2340      	movs	r3, #64	; 0x40
    7324:	4656      	mov	r6, sl
    7326:	1b9b      	subs	r3, r3, r6
    7328:	409c      	lsls	r4, r3
    732a:	4327      	orrs	r7, r4
    732c:	1e7c      	subs	r4, r7, #1
    732e:	41a7      	sbcs	r7, r4
    7330:	464b      	mov	r3, r9
    7332:	2400      	movs	r4, #0
    7334:	431f      	orrs	r7, r3
    7336:	e75f      	b.n	71f8 <__aeabi_dadd+0x4cc>
    7338:	2400      	movs	r4, #0
    733a:	e7d2      	b.n	72e2 <__aeabi_dadd+0x5b6>
    733c:	0017      	movs	r7, r2
    733e:	e5b2      	b.n	6ea6 <__aeabi_dadd+0x17a>
    7340:	2400      	movs	r4, #0
    7342:	e7f2      	b.n	732a <__aeabi_dadd+0x5fe>
    7344:	000007ff 	.word	0x000007ff
    7348:	ff7fffff 	.word	0xff7fffff

0000734c <__aeabi_ddiv>:
    734c:	b5f0      	push	{r4, r5, r6, r7, lr}
    734e:	4657      	mov	r7, sl
    7350:	4645      	mov	r5, r8
    7352:	46de      	mov	lr, fp
    7354:	464e      	mov	r6, r9
    7356:	b5e0      	push	{r5, r6, r7, lr}
    7358:	004c      	lsls	r4, r1, #1
    735a:	030e      	lsls	r6, r1, #12
    735c:	b087      	sub	sp, #28
    735e:	4683      	mov	fp, r0
    7360:	4692      	mov	sl, r2
    7362:	001d      	movs	r5, r3
    7364:	4680      	mov	r8, r0
    7366:	0b36      	lsrs	r6, r6, #12
    7368:	0d64      	lsrs	r4, r4, #21
    736a:	0fcf      	lsrs	r7, r1, #31
    736c:	2c00      	cmp	r4, #0
    736e:	d04f      	beq.n	7410 <__aeabi_ddiv+0xc4>
    7370:	4b6f      	ldr	r3, [pc, #444]	; (7530 <__aeabi_ddiv+0x1e4>)
    7372:	429c      	cmp	r4, r3
    7374:	d035      	beq.n	73e2 <__aeabi_ddiv+0x96>
    7376:	2380      	movs	r3, #128	; 0x80
    7378:	0f42      	lsrs	r2, r0, #29
    737a:	041b      	lsls	r3, r3, #16
    737c:	00f6      	lsls	r6, r6, #3
    737e:	4313      	orrs	r3, r2
    7380:	4333      	orrs	r3, r6
    7382:	4699      	mov	r9, r3
    7384:	00c3      	lsls	r3, r0, #3
    7386:	4698      	mov	r8, r3
    7388:	4b6a      	ldr	r3, [pc, #424]	; (7534 <__aeabi_ddiv+0x1e8>)
    738a:	2600      	movs	r6, #0
    738c:	469c      	mov	ip, r3
    738e:	2300      	movs	r3, #0
    7390:	4464      	add	r4, ip
    7392:	9303      	str	r3, [sp, #12]
    7394:	032b      	lsls	r3, r5, #12
    7396:	0b1b      	lsrs	r3, r3, #12
    7398:	469b      	mov	fp, r3
    739a:	006b      	lsls	r3, r5, #1
    739c:	0fed      	lsrs	r5, r5, #31
    739e:	4650      	mov	r0, sl
    73a0:	0d5b      	lsrs	r3, r3, #21
    73a2:	9501      	str	r5, [sp, #4]
    73a4:	d05e      	beq.n	7464 <__aeabi_ddiv+0x118>
    73a6:	4a62      	ldr	r2, [pc, #392]	; (7530 <__aeabi_ddiv+0x1e4>)
    73a8:	4293      	cmp	r3, r2
    73aa:	d053      	beq.n	7454 <__aeabi_ddiv+0x108>
    73ac:	465a      	mov	r2, fp
    73ae:	00d1      	lsls	r1, r2, #3
    73b0:	2280      	movs	r2, #128	; 0x80
    73b2:	0f40      	lsrs	r0, r0, #29
    73b4:	0412      	lsls	r2, r2, #16
    73b6:	4302      	orrs	r2, r0
    73b8:	430a      	orrs	r2, r1
    73ba:	4693      	mov	fp, r2
    73bc:	4652      	mov	r2, sl
    73be:	00d1      	lsls	r1, r2, #3
    73c0:	4a5c      	ldr	r2, [pc, #368]	; (7534 <__aeabi_ddiv+0x1e8>)
    73c2:	4694      	mov	ip, r2
    73c4:	2200      	movs	r2, #0
    73c6:	4463      	add	r3, ip
    73c8:	0038      	movs	r0, r7
    73ca:	4068      	eors	r0, r5
    73cc:	4684      	mov	ip, r0
    73ce:	9002      	str	r0, [sp, #8]
    73d0:	1ae4      	subs	r4, r4, r3
    73d2:	4316      	orrs	r6, r2
    73d4:	2e0f      	cmp	r6, #15
    73d6:	d900      	bls.n	73da <__aeabi_ddiv+0x8e>
    73d8:	e0b4      	b.n	7544 <__aeabi_ddiv+0x1f8>
    73da:	4b57      	ldr	r3, [pc, #348]	; (7538 <__aeabi_ddiv+0x1ec>)
    73dc:	00b6      	lsls	r6, r6, #2
    73de:	599b      	ldr	r3, [r3, r6]
    73e0:	469f      	mov	pc, r3
    73e2:	0003      	movs	r3, r0
    73e4:	4333      	orrs	r3, r6
    73e6:	4699      	mov	r9, r3
    73e8:	d16c      	bne.n	74c4 <__aeabi_ddiv+0x178>
    73ea:	2300      	movs	r3, #0
    73ec:	4698      	mov	r8, r3
    73ee:	3302      	adds	r3, #2
    73f0:	2608      	movs	r6, #8
    73f2:	9303      	str	r3, [sp, #12]
    73f4:	e7ce      	b.n	7394 <__aeabi_ddiv+0x48>
    73f6:	46cb      	mov	fp, r9
    73f8:	4641      	mov	r1, r8
    73fa:	9a03      	ldr	r2, [sp, #12]
    73fc:	9701      	str	r7, [sp, #4]
    73fe:	2a02      	cmp	r2, #2
    7400:	d165      	bne.n	74ce <__aeabi_ddiv+0x182>
    7402:	9b01      	ldr	r3, [sp, #4]
    7404:	4c4a      	ldr	r4, [pc, #296]	; (7530 <__aeabi_ddiv+0x1e4>)
    7406:	469c      	mov	ip, r3
    7408:	2300      	movs	r3, #0
    740a:	2200      	movs	r2, #0
    740c:	4698      	mov	r8, r3
    740e:	e06b      	b.n	74e8 <__aeabi_ddiv+0x19c>
    7410:	0003      	movs	r3, r0
    7412:	4333      	orrs	r3, r6
    7414:	4699      	mov	r9, r3
    7416:	d04e      	beq.n	74b6 <__aeabi_ddiv+0x16a>
    7418:	2e00      	cmp	r6, #0
    741a:	d100      	bne.n	741e <__aeabi_ddiv+0xd2>
    741c:	e1bc      	b.n	7798 <__aeabi_ddiv+0x44c>
    741e:	0030      	movs	r0, r6
    7420:	f001 fb08 	bl	8a34 <__clzsi2>
    7424:	0003      	movs	r3, r0
    7426:	3b0b      	subs	r3, #11
    7428:	2b1c      	cmp	r3, #28
    742a:	dd00      	ble.n	742e <__aeabi_ddiv+0xe2>
    742c:	e1ac      	b.n	7788 <__aeabi_ddiv+0x43c>
    742e:	221d      	movs	r2, #29
    7430:	1ad3      	subs	r3, r2, r3
    7432:	465a      	mov	r2, fp
    7434:	0001      	movs	r1, r0
    7436:	40da      	lsrs	r2, r3
    7438:	3908      	subs	r1, #8
    743a:	408e      	lsls	r6, r1
    743c:	0013      	movs	r3, r2
    743e:	4333      	orrs	r3, r6
    7440:	4699      	mov	r9, r3
    7442:	465b      	mov	r3, fp
    7444:	408b      	lsls	r3, r1
    7446:	4698      	mov	r8, r3
    7448:	2300      	movs	r3, #0
    744a:	4c3c      	ldr	r4, [pc, #240]	; (753c <__aeabi_ddiv+0x1f0>)
    744c:	2600      	movs	r6, #0
    744e:	1a24      	subs	r4, r4, r0
    7450:	9303      	str	r3, [sp, #12]
    7452:	e79f      	b.n	7394 <__aeabi_ddiv+0x48>
    7454:	4651      	mov	r1, sl
    7456:	465a      	mov	r2, fp
    7458:	4311      	orrs	r1, r2
    745a:	d129      	bne.n	74b0 <__aeabi_ddiv+0x164>
    745c:	2200      	movs	r2, #0
    745e:	4693      	mov	fp, r2
    7460:	3202      	adds	r2, #2
    7462:	e7b1      	b.n	73c8 <__aeabi_ddiv+0x7c>
    7464:	4659      	mov	r1, fp
    7466:	4301      	orrs	r1, r0
    7468:	d01e      	beq.n	74a8 <__aeabi_ddiv+0x15c>
    746a:	465b      	mov	r3, fp
    746c:	2b00      	cmp	r3, #0
    746e:	d100      	bne.n	7472 <__aeabi_ddiv+0x126>
    7470:	e19e      	b.n	77b0 <__aeabi_ddiv+0x464>
    7472:	4658      	mov	r0, fp
    7474:	f001 fade 	bl	8a34 <__clzsi2>
    7478:	0003      	movs	r3, r0
    747a:	3b0b      	subs	r3, #11
    747c:	2b1c      	cmp	r3, #28
    747e:	dd00      	ble.n	7482 <__aeabi_ddiv+0x136>
    7480:	e18f      	b.n	77a2 <__aeabi_ddiv+0x456>
    7482:	0002      	movs	r2, r0
    7484:	4659      	mov	r1, fp
    7486:	3a08      	subs	r2, #8
    7488:	4091      	lsls	r1, r2
    748a:	468b      	mov	fp, r1
    748c:	211d      	movs	r1, #29
    748e:	1acb      	subs	r3, r1, r3
    7490:	4651      	mov	r1, sl
    7492:	40d9      	lsrs	r1, r3
    7494:	000b      	movs	r3, r1
    7496:	4659      	mov	r1, fp
    7498:	430b      	orrs	r3, r1
    749a:	4651      	mov	r1, sl
    749c:	469b      	mov	fp, r3
    749e:	4091      	lsls	r1, r2
    74a0:	4b26      	ldr	r3, [pc, #152]	; (753c <__aeabi_ddiv+0x1f0>)
    74a2:	2200      	movs	r2, #0
    74a4:	1a1b      	subs	r3, r3, r0
    74a6:	e78f      	b.n	73c8 <__aeabi_ddiv+0x7c>
    74a8:	2300      	movs	r3, #0
    74aa:	2201      	movs	r2, #1
    74ac:	469b      	mov	fp, r3
    74ae:	e78b      	b.n	73c8 <__aeabi_ddiv+0x7c>
    74b0:	4651      	mov	r1, sl
    74b2:	2203      	movs	r2, #3
    74b4:	e788      	b.n	73c8 <__aeabi_ddiv+0x7c>
    74b6:	2300      	movs	r3, #0
    74b8:	4698      	mov	r8, r3
    74ba:	3301      	adds	r3, #1
    74bc:	2604      	movs	r6, #4
    74be:	2400      	movs	r4, #0
    74c0:	9303      	str	r3, [sp, #12]
    74c2:	e767      	b.n	7394 <__aeabi_ddiv+0x48>
    74c4:	2303      	movs	r3, #3
    74c6:	46b1      	mov	r9, r6
    74c8:	9303      	str	r3, [sp, #12]
    74ca:	260c      	movs	r6, #12
    74cc:	e762      	b.n	7394 <__aeabi_ddiv+0x48>
    74ce:	2a03      	cmp	r2, #3
    74d0:	d100      	bne.n	74d4 <__aeabi_ddiv+0x188>
    74d2:	e25c      	b.n	798e <__aeabi_ddiv+0x642>
    74d4:	9b01      	ldr	r3, [sp, #4]
    74d6:	2a01      	cmp	r2, #1
    74d8:	d000      	beq.n	74dc <__aeabi_ddiv+0x190>
    74da:	e1e4      	b.n	78a6 <__aeabi_ddiv+0x55a>
    74dc:	4013      	ands	r3, r2
    74de:	469c      	mov	ip, r3
    74e0:	2300      	movs	r3, #0
    74e2:	2400      	movs	r4, #0
    74e4:	2200      	movs	r2, #0
    74e6:	4698      	mov	r8, r3
    74e8:	2100      	movs	r1, #0
    74ea:	0312      	lsls	r2, r2, #12
    74ec:	0b13      	lsrs	r3, r2, #12
    74ee:	0d0a      	lsrs	r2, r1, #20
    74f0:	0512      	lsls	r2, r2, #20
    74f2:	431a      	orrs	r2, r3
    74f4:	0523      	lsls	r3, r4, #20
    74f6:	4c12      	ldr	r4, [pc, #72]	; (7540 <__aeabi_ddiv+0x1f4>)
    74f8:	4640      	mov	r0, r8
    74fa:	4022      	ands	r2, r4
    74fc:	4313      	orrs	r3, r2
    74fe:	4662      	mov	r2, ip
    7500:	005b      	lsls	r3, r3, #1
    7502:	07d2      	lsls	r2, r2, #31
    7504:	085b      	lsrs	r3, r3, #1
    7506:	4313      	orrs	r3, r2
    7508:	0019      	movs	r1, r3
    750a:	b007      	add	sp, #28
    750c:	bc3c      	pop	{r2, r3, r4, r5}
    750e:	4690      	mov	r8, r2
    7510:	4699      	mov	r9, r3
    7512:	46a2      	mov	sl, r4
    7514:	46ab      	mov	fp, r5
    7516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7518:	2300      	movs	r3, #0
    751a:	2280      	movs	r2, #128	; 0x80
    751c:	469c      	mov	ip, r3
    751e:	0312      	lsls	r2, r2, #12
    7520:	4698      	mov	r8, r3
    7522:	4c03      	ldr	r4, [pc, #12]	; (7530 <__aeabi_ddiv+0x1e4>)
    7524:	e7e0      	b.n	74e8 <__aeabi_ddiv+0x19c>
    7526:	2300      	movs	r3, #0
    7528:	4c01      	ldr	r4, [pc, #4]	; (7530 <__aeabi_ddiv+0x1e4>)
    752a:	2200      	movs	r2, #0
    752c:	4698      	mov	r8, r3
    752e:	e7db      	b.n	74e8 <__aeabi_ddiv+0x19c>
    7530:	000007ff 	.word	0x000007ff
    7534:	fffffc01 	.word	0xfffffc01
    7538:	00008f38 	.word	0x00008f38
    753c:	fffffc0d 	.word	0xfffffc0d
    7540:	800fffff 	.word	0x800fffff
    7544:	45d9      	cmp	r9, fp
    7546:	d900      	bls.n	754a <__aeabi_ddiv+0x1fe>
    7548:	e139      	b.n	77be <__aeabi_ddiv+0x472>
    754a:	d100      	bne.n	754e <__aeabi_ddiv+0x202>
    754c:	e134      	b.n	77b8 <__aeabi_ddiv+0x46c>
    754e:	2300      	movs	r3, #0
    7550:	4646      	mov	r6, r8
    7552:	464d      	mov	r5, r9
    7554:	469a      	mov	sl, r3
    7556:	3c01      	subs	r4, #1
    7558:	465b      	mov	r3, fp
    755a:	0e0a      	lsrs	r2, r1, #24
    755c:	021b      	lsls	r3, r3, #8
    755e:	431a      	orrs	r2, r3
    7560:	020b      	lsls	r3, r1, #8
    7562:	0c17      	lsrs	r7, r2, #16
    7564:	9303      	str	r3, [sp, #12]
    7566:	0413      	lsls	r3, r2, #16
    7568:	0c1b      	lsrs	r3, r3, #16
    756a:	0039      	movs	r1, r7
    756c:	0028      	movs	r0, r5
    756e:	4690      	mov	r8, r2
    7570:	9301      	str	r3, [sp, #4]
    7572:	f7fe fcd1 	bl	5f18 <__udivsi3>
    7576:	0002      	movs	r2, r0
    7578:	9b01      	ldr	r3, [sp, #4]
    757a:	4683      	mov	fp, r0
    757c:	435a      	muls	r2, r3
    757e:	0028      	movs	r0, r5
    7580:	0039      	movs	r1, r7
    7582:	4691      	mov	r9, r2
    7584:	f7fe fd4e 	bl	6024 <__aeabi_uidivmod>
    7588:	0c35      	lsrs	r5, r6, #16
    758a:	0409      	lsls	r1, r1, #16
    758c:	430d      	orrs	r5, r1
    758e:	45a9      	cmp	r9, r5
    7590:	d90d      	bls.n	75ae <__aeabi_ddiv+0x262>
    7592:	465b      	mov	r3, fp
    7594:	4445      	add	r5, r8
    7596:	3b01      	subs	r3, #1
    7598:	45a8      	cmp	r8, r5
    759a:	d900      	bls.n	759e <__aeabi_ddiv+0x252>
    759c:	e13a      	b.n	7814 <__aeabi_ddiv+0x4c8>
    759e:	45a9      	cmp	r9, r5
    75a0:	d800      	bhi.n	75a4 <__aeabi_ddiv+0x258>
    75a2:	e137      	b.n	7814 <__aeabi_ddiv+0x4c8>
    75a4:	2302      	movs	r3, #2
    75a6:	425b      	negs	r3, r3
    75a8:	469c      	mov	ip, r3
    75aa:	4445      	add	r5, r8
    75ac:	44e3      	add	fp, ip
    75ae:	464b      	mov	r3, r9
    75b0:	1aeb      	subs	r3, r5, r3
    75b2:	0039      	movs	r1, r7
    75b4:	0018      	movs	r0, r3
    75b6:	9304      	str	r3, [sp, #16]
    75b8:	f7fe fcae 	bl	5f18 <__udivsi3>
    75bc:	9b01      	ldr	r3, [sp, #4]
    75be:	0005      	movs	r5, r0
    75c0:	4343      	muls	r3, r0
    75c2:	0039      	movs	r1, r7
    75c4:	9804      	ldr	r0, [sp, #16]
    75c6:	4699      	mov	r9, r3
    75c8:	f7fe fd2c 	bl	6024 <__aeabi_uidivmod>
    75cc:	0433      	lsls	r3, r6, #16
    75ce:	0409      	lsls	r1, r1, #16
    75d0:	0c1b      	lsrs	r3, r3, #16
    75d2:	430b      	orrs	r3, r1
    75d4:	4599      	cmp	r9, r3
    75d6:	d909      	bls.n	75ec <__aeabi_ddiv+0x2a0>
    75d8:	4443      	add	r3, r8
    75da:	1e6a      	subs	r2, r5, #1
    75dc:	4598      	cmp	r8, r3
    75de:	d900      	bls.n	75e2 <__aeabi_ddiv+0x296>
    75e0:	e11a      	b.n	7818 <__aeabi_ddiv+0x4cc>
    75e2:	4599      	cmp	r9, r3
    75e4:	d800      	bhi.n	75e8 <__aeabi_ddiv+0x29c>
    75e6:	e117      	b.n	7818 <__aeabi_ddiv+0x4cc>
    75e8:	3d02      	subs	r5, #2
    75ea:	4443      	add	r3, r8
    75ec:	464a      	mov	r2, r9
    75ee:	1a9b      	subs	r3, r3, r2
    75f0:	465a      	mov	r2, fp
    75f2:	0412      	lsls	r2, r2, #16
    75f4:	432a      	orrs	r2, r5
    75f6:	9903      	ldr	r1, [sp, #12]
    75f8:	4693      	mov	fp, r2
    75fa:	0c10      	lsrs	r0, r2, #16
    75fc:	0c0a      	lsrs	r2, r1, #16
    75fe:	4691      	mov	r9, r2
    7600:	0409      	lsls	r1, r1, #16
    7602:	465a      	mov	r2, fp
    7604:	0c09      	lsrs	r1, r1, #16
    7606:	464e      	mov	r6, r9
    7608:	000d      	movs	r5, r1
    760a:	0412      	lsls	r2, r2, #16
    760c:	0c12      	lsrs	r2, r2, #16
    760e:	4345      	muls	r5, r0
    7610:	9105      	str	r1, [sp, #20]
    7612:	4351      	muls	r1, r2
    7614:	4372      	muls	r2, r6
    7616:	4370      	muls	r0, r6
    7618:	1952      	adds	r2, r2, r5
    761a:	0c0e      	lsrs	r6, r1, #16
    761c:	18b2      	adds	r2, r6, r2
    761e:	4295      	cmp	r5, r2
    7620:	d903      	bls.n	762a <__aeabi_ddiv+0x2de>
    7622:	2580      	movs	r5, #128	; 0x80
    7624:	026d      	lsls	r5, r5, #9
    7626:	46ac      	mov	ip, r5
    7628:	4460      	add	r0, ip
    762a:	0c15      	lsrs	r5, r2, #16
    762c:	0409      	lsls	r1, r1, #16
    762e:	0412      	lsls	r2, r2, #16
    7630:	0c09      	lsrs	r1, r1, #16
    7632:	1828      	adds	r0, r5, r0
    7634:	1852      	adds	r2, r2, r1
    7636:	4283      	cmp	r3, r0
    7638:	d200      	bcs.n	763c <__aeabi_ddiv+0x2f0>
    763a:	e0ce      	b.n	77da <__aeabi_ddiv+0x48e>
    763c:	d100      	bne.n	7640 <__aeabi_ddiv+0x2f4>
    763e:	e0c8      	b.n	77d2 <__aeabi_ddiv+0x486>
    7640:	1a1d      	subs	r5, r3, r0
    7642:	4653      	mov	r3, sl
    7644:	1a9e      	subs	r6, r3, r2
    7646:	45b2      	cmp	sl, r6
    7648:	4192      	sbcs	r2, r2
    764a:	4252      	negs	r2, r2
    764c:	1aab      	subs	r3, r5, r2
    764e:	469a      	mov	sl, r3
    7650:	4598      	cmp	r8, r3
    7652:	d100      	bne.n	7656 <__aeabi_ddiv+0x30a>
    7654:	e117      	b.n	7886 <__aeabi_ddiv+0x53a>
    7656:	0039      	movs	r1, r7
    7658:	0018      	movs	r0, r3
    765a:	f7fe fc5d 	bl	5f18 <__udivsi3>
    765e:	9b01      	ldr	r3, [sp, #4]
    7660:	0005      	movs	r5, r0
    7662:	4343      	muls	r3, r0
    7664:	0039      	movs	r1, r7
    7666:	4650      	mov	r0, sl
    7668:	9304      	str	r3, [sp, #16]
    766a:	f7fe fcdb 	bl	6024 <__aeabi_uidivmod>
    766e:	9804      	ldr	r0, [sp, #16]
    7670:	040b      	lsls	r3, r1, #16
    7672:	0c31      	lsrs	r1, r6, #16
    7674:	4319      	orrs	r1, r3
    7676:	4288      	cmp	r0, r1
    7678:	d909      	bls.n	768e <__aeabi_ddiv+0x342>
    767a:	4441      	add	r1, r8
    767c:	1e6b      	subs	r3, r5, #1
    767e:	4588      	cmp	r8, r1
    7680:	d900      	bls.n	7684 <__aeabi_ddiv+0x338>
    7682:	e107      	b.n	7894 <__aeabi_ddiv+0x548>
    7684:	4288      	cmp	r0, r1
    7686:	d800      	bhi.n	768a <__aeabi_ddiv+0x33e>
    7688:	e104      	b.n	7894 <__aeabi_ddiv+0x548>
    768a:	3d02      	subs	r5, #2
    768c:	4441      	add	r1, r8
    768e:	9b04      	ldr	r3, [sp, #16]
    7690:	1acb      	subs	r3, r1, r3
    7692:	0018      	movs	r0, r3
    7694:	0039      	movs	r1, r7
    7696:	9304      	str	r3, [sp, #16]
    7698:	f7fe fc3e 	bl	5f18 <__udivsi3>
    769c:	9b01      	ldr	r3, [sp, #4]
    769e:	4682      	mov	sl, r0
    76a0:	4343      	muls	r3, r0
    76a2:	0039      	movs	r1, r7
    76a4:	9804      	ldr	r0, [sp, #16]
    76a6:	9301      	str	r3, [sp, #4]
    76a8:	f7fe fcbc 	bl	6024 <__aeabi_uidivmod>
    76ac:	9801      	ldr	r0, [sp, #4]
    76ae:	040b      	lsls	r3, r1, #16
    76b0:	0431      	lsls	r1, r6, #16
    76b2:	0c09      	lsrs	r1, r1, #16
    76b4:	4319      	orrs	r1, r3
    76b6:	4288      	cmp	r0, r1
    76b8:	d90d      	bls.n	76d6 <__aeabi_ddiv+0x38a>
    76ba:	4653      	mov	r3, sl
    76bc:	4441      	add	r1, r8
    76be:	3b01      	subs	r3, #1
    76c0:	4588      	cmp	r8, r1
    76c2:	d900      	bls.n	76c6 <__aeabi_ddiv+0x37a>
    76c4:	e0e8      	b.n	7898 <__aeabi_ddiv+0x54c>
    76c6:	4288      	cmp	r0, r1
    76c8:	d800      	bhi.n	76cc <__aeabi_ddiv+0x380>
    76ca:	e0e5      	b.n	7898 <__aeabi_ddiv+0x54c>
    76cc:	2302      	movs	r3, #2
    76ce:	425b      	negs	r3, r3
    76d0:	469c      	mov	ip, r3
    76d2:	4441      	add	r1, r8
    76d4:	44e2      	add	sl, ip
    76d6:	9b01      	ldr	r3, [sp, #4]
    76d8:	042d      	lsls	r5, r5, #16
    76da:	1ace      	subs	r6, r1, r3
    76dc:	4651      	mov	r1, sl
    76de:	4329      	orrs	r1, r5
    76e0:	9d05      	ldr	r5, [sp, #20]
    76e2:	464f      	mov	r7, r9
    76e4:	002a      	movs	r2, r5
    76e6:	040b      	lsls	r3, r1, #16
    76e8:	0c08      	lsrs	r0, r1, #16
    76ea:	0c1b      	lsrs	r3, r3, #16
    76ec:	435a      	muls	r2, r3
    76ee:	4345      	muls	r5, r0
    76f0:	437b      	muls	r3, r7
    76f2:	4378      	muls	r0, r7
    76f4:	195b      	adds	r3, r3, r5
    76f6:	0c17      	lsrs	r7, r2, #16
    76f8:	18fb      	adds	r3, r7, r3
    76fa:	429d      	cmp	r5, r3
    76fc:	d903      	bls.n	7706 <__aeabi_ddiv+0x3ba>
    76fe:	2580      	movs	r5, #128	; 0x80
    7700:	026d      	lsls	r5, r5, #9
    7702:	46ac      	mov	ip, r5
    7704:	4460      	add	r0, ip
    7706:	0c1d      	lsrs	r5, r3, #16
    7708:	0412      	lsls	r2, r2, #16
    770a:	041b      	lsls	r3, r3, #16
    770c:	0c12      	lsrs	r2, r2, #16
    770e:	1828      	adds	r0, r5, r0
    7710:	189b      	adds	r3, r3, r2
    7712:	4286      	cmp	r6, r0
    7714:	d200      	bcs.n	7718 <__aeabi_ddiv+0x3cc>
    7716:	e093      	b.n	7840 <__aeabi_ddiv+0x4f4>
    7718:	d100      	bne.n	771c <__aeabi_ddiv+0x3d0>
    771a:	e08e      	b.n	783a <__aeabi_ddiv+0x4ee>
    771c:	2301      	movs	r3, #1
    771e:	4319      	orrs	r1, r3
    7720:	4ba0      	ldr	r3, [pc, #640]	; (79a4 <__aeabi_ddiv+0x658>)
    7722:	18e3      	adds	r3, r4, r3
    7724:	2b00      	cmp	r3, #0
    7726:	dc00      	bgt.n	772a <__aeabi_ddiv+0x3de>
    7728:	e099      	b.n	785e <__aeabi_ddiv+0x512>
    772a:	074a      	lsls	r2, r1, #29
    772c:	d000      	beq.n	7730 <__aeabi_ddiv+0x3e4>
    772e:	e09e      	b.n	786e <__aeabi_ddiv+0x522>
    7730:	465a      	mov	r2, fp
    7732:	01d2      	lsls	r2, r2, #7
    7734:	d506      	bpl.n	7744 <__aeabi_ddiv+0x3f8>
    7736:	465a      	mov	r2, fp
    7738:	4b9b      	ldr	r3, [pc, #620]	; (79a8 <__aeabi_ddiv+0x65c>)
    773a:	401a      	ands	r2, r3
    773c:	2380      	movs	r3, #128	; 0x80
    773e:	4693      	mov	fp, r2
    7740:	00db      	lsls	r3, r3, #3
    7742:	18e3      	adds	r3, r4, r3
    7744:	4a99      	ldr	r2, [pc, #612]	; (79ac <__aeabi_ddiv+0x660>)
    7746:	4293      	cmp	r3, r2
    7748:	dd68      	ble.n	781c <__aeabi_ddiv+0x4d0>
    774a:	2301      	movs	r3, #1
    774c:	9a02      	ldr	r2, [sp, #8]
    774e:	4c98      	ldr	r4, [pc, #608]	; (79b0 <__aeabi_ddiv+0x664>)
    7750:	401a      	ands	r2, r3
    7752:	2300      	movs	r3, #0
    7754:	4694      	mov	ip, r2
    7756:	4698      	mov	r8, r3
    7758:	2200      	movs	r2, #0
    775a:	e6c5      	b.n	74e8 <__aeabi_ddiv+0x19c>
    775c:	2280      	movs	r2, #128	; 0x80
    775e:	464b      	mov	r3, r9
    7760:	0312      	lsls	r2, r2, #12
    7762:	4213      	tst	r3, r2
    7764:	d00a      	beq.n	777c <__aeabi_ddiv+0x430>
    7766:	465b      	mov	r3, fp
    7768:	4213      	tst	r3, r2
    776a:	d106      	bne.n	777a <__aeabi_ddiv+0x42e>
    776c:	431a      	orrs	r2, r3
    776e:	0312      	lsls	r2, r2, #12
    7770:	0b12      	lsrs	r2, r2, #12
    7772:	46ac      	mov	ip, r5
    7774:	4688      	mov	r8, r1
    7776:	4c8e      	ldr	r4, [pc, #568]	; (79b0 <__aeabi_ddiv+0x664>)
    7778:	e6b6      	b.n	74e8 <__aeabi_ddiv+0x19c>
    777a:	464b      	mov	r3, r9
    777c:	431a      	orrs	r2, r3
    777e:	0312      	lsls	r2, r2, #12
    7780:	0b12      	lsrs	r2, r2, #12
    7782:	46bc      	mov	ip, r7
    7784:	4c8a      	ldr	r4, [pc, #552]	; (79b0 <__aeabi_ddiv+0x664>)
    7786:	e6af      	b.n	74e8 <__aeabi_ddiv+0x19c>
    7788:	0003      	movs	r3, r0
    778a:	465a      	mov	r2, fp
    778c:	3b28      	subs	r3, #40	; 0x28
    778e:	409a      	lsls	r2, r3
    7790:	2300      	movs	r3, #0
    7792:	4691      	mov	r9, r2
    7794:	4698      	mov	r8, r3
    7796:	e657      	b.n	7448 <__aeabi_ddiv+0xfc>
    7798:	4658      	mov	r0, fp
    779a:	f001 f94b 	bl	8a34 <__clzsi2>
    779e:	3020      	adds	r0, #32
    77a0:	e640      	b.n	7424 <__aeabi_ddiv+0xd8>
    77a2:	0003      	movs	r3, r0
    77a4:	4652      	mov	r2, sl
    77a6:	3b28      	subs	r3, #40	; 0x28
    77a8:	409a      	lsls	r2, r3
    77aa:	2100      	movs	r1, #0
    77ac:	4693      	mov	fp, r2
    77ae:	e677      	b.n	74a0 <__aeabi_ddiv+0x154>
    77b0:	f001 f940 	bl	8a34 <__clzsi2>
    77b4:	3020      	adds	r0, #32
    77b6:	e65f      	b.n	7478 <__aeabi_ddiv+0x12c>
    77b8:	4588      	cmp	r8, r1
    77ba:	d200      	bcs.n	77be <__aeabi_ddiv+0x472>
    77bc:	e6c7      	b.n	754e <__aeabi_ddiv+0x202>
    77be:	464b      	mov	r3, r9
    77c0:	07de      	lsls	r6, r3, #31
    77c2:	085d      	lsrs	r5, r3, #1
    77c4:	4643      	mov	r3, r8
    77c6:	085b      	lsrs	r3, r3, #1
    77c8:	431e      	orrs	r6, r3
    77ca:	4643      	mov	r3, r8
    77cc:	07db      	lsls	r3, r3, #31
    77ce:	469a      	mov	sl, r3
    77d0:	e6c2      	b.n	7558 <__aeabi_ddiv+0x20c>
    77d2:	2500      	movs	r5, #0
    77d4:	4592      	cmp	sl, r2
    77d6:	d300      	bcc.n	77da <__aeabi_ddiv+0x48e>
    77d8:	e733      	b.n	7642 <__aeabi_ddiv+0x2f6>
    77da:	9e03      	ldr	r6, [sp, #12]
    77dc:	4659      	mov	r1, fp
    77de:	46b4      	mov	ip, r6
    77e0:	44e2      	add	sl, ip
    77e2:	45b2      	cmp	sl, r6
    77e4:	41ad      	sbcs	r5, r5
    77e6:	426d      	negs	r5, r5
    77e8:	4445      	add	r5, r8
    77ea:	18eb      	adds	r3, r5, r3
    77ec:	3901      	subs	r1, #1
    77ee:	4598      	cmp	r8, r3
    77f0:	d207      	bcs.n	7802 <__aeabi_ddiv+0x4b6>
    77f2:	4298      	cmp	r0, r3
    77f4:	d900      	bls.n	77f8 <__aeabi_ddiv+0x4ac>
    77f6:	e07f      	b.n	78f8 <__aeabi_ddiv+0x5ac>
    77f8:	d100      	bne.n	77fc <__aeabi_ddiv+0x4b0>
    77fa:	e0bc      	b.n	7976 <__aeabi_ddiv+0x62a>
    77fc:	1a1d      	subs	r5, r3, r0
    77fe:	468b      	mov	fp, r1
    7800:	e71f      	b.n	7642 <__aeabi_ddiv+0x2f6>
    7802:	4598      	cmp	r8, r3
    7804:	d1fa      	bne.n	77fc <__aeabi_ddiv+0x4b0>
    7806:	9d03      	ldr	r5, [sp, #12]
    7808:	4555      	cmp	r5, sl
    780a:	d9f2      	bls.n	77f2 <__aeabi_ddiv+0x4a6>
    780c:	4643      	mov	r3, r8
    780e:	468b      	mov	fp, r1
    7810:	1a1d      	subs	r5, r3, r0
    7812:	e716      	b.n	7642 <__aeabi_ddiv+0x2f6>
    7814:	469b      	mov	fp, r3
    7816:	e6ca      	b.n	75ae <__aeabi_ddiv+0x262>
    7818:	0015      	movs	r5, r2
    781a:	e6e7      	b.n	75ec <__aeabi_ddiv+0x2a0>
    781c:	465a      	mov	r2, fp
    781e:	08c9      	lsrs	r1, r1, #3
    7820:	0752      	lsls	r2, r2, #29
    7822:	430a      	orrs	r2, r1
    7824:	055b      	lsls	r3, r3, #21
    7826:	4690      	mov	r8, r2
    7828:	0d5c      	lsrs	r4, r3, #21
    782a:	465a      	mov	r2, fp
    782c:	2301      	movs	r3, #1
    782e:	9902      	ldr	r1, [sp, #8]
    7830:	0252      	lsls	r2, r2, #9
    7832:	4019      	ands	r1, r3
    7834:	0b12      	lsrs	r2, r2, #12
    7836:	468c      	mov	ip, r1
    7838:	e656      	b.n	74e8 <__aeabi_ddiv+0x19c>
    783a:	2b00      	cmp	r3, #0
    783c:	d100      	bne.n	7840 <__aeabi_ddiv+0x4f4>
    783e:	e76f      	b.n	7720 <__aeabi_ddiv+0x3d4>
    7840:	4446      	add	r6, r8
    7842:	1e4a      	subs	r2, r1, #1
    7844:	45b0      	cmp	r8, r6
    7846:	d929      	bls.n	789c <__aeabi_ddiv+0x550>
    7848:	0011      	movs	r1, r2
    784a:	4286      	cmp	r6, r0
    784c:	d000      	beq.n	7850 <__aeabi_ddiv+0x504>
    784e:	e765      	b.n	771c <__aeabi_ddiv+0x3d0>
    7850:	9a03      	ldr	r2, [sp, #12]
    7852:	4293      	cmp	r3, r2
    7854:	d000      	beq.n	7858 <__aeabi_ddiv+0x50c>
    7856:	e761      	b.n	771c <__aeabi_ddiv+0x3d0>
    7858:	e762      	b.n	7720 <__aeabi_ddiv+0x3d4>
    785a:	2101      	movs	r1, #1
    785c:	4249      	negs	r1, r1
    785e:	2001      	movs	r0, #1
    7860:	1ac2      	subs	r2, r0, r3
    7862:	2a38      	cmp	r2, #56	; 0x38
    7864:	dd21      	ble.n	78aa <__aeabi_ddiv+0x55e>
    7866:	9b02      	ldr	r3, [sp, #8]
    7868:	4003      	ands	r3, r0
    786a:	469c      	mov	ip, r3
    786c:	e638      	b.n	74e0 <__aeabi_ddiv+0x194>
    786e:	220f      	movs	r2, #15
    7870:	400a      	ands	r2, r1
    7872:	2a04      	cmp	r2, #4
    7874:	d100      	bne.n	7878 <__aeabi_ddiv+0x52c>
    7876:	e75b      	b.n	7730 <__aeabi_ddiv+0x3e4>
    7878:	000a      	movs	r2, r1
    787a:	1d11      	adds	r1, r2, #4
    787c:	4291      	cmp	r1, r2
    787e:	4192      	sbcs	r2, r2
    7880:	4252      	negs	r2, r2
    7882:	4493      	add	fp, r2
    7884:	e754      	b.n	7730 <__aeabi_ddiv+0x3e4>
    7886:	4b47      	ldr	r3, [pc, #284]	; (79a4 <__aeabi_ddiv+0x658>)
    7888:	18e3      	adds	r3, r4, r3
    788a:	2b00      	cmp	r3, #0
    788c:	dde5      	ble.n	785a <__aeabi_ddiv+0x50e>
    788e:	2201      	movs	r2, #1
    7890:	4252      	negs	r2, r2
    7892:	e7f2      	b.n	787a <__aeabi_ddiv+0x52e>
    7894:	001d      	movs	r5, r3
    7896:	e6fa      	b.n	768e <__aeabi_ddiv+0x342>
    7898:	469a      	mov	sl, r3
    789a:	e71c      	b.n	76d6 <__aeabi_ddiv+0x38a>
    789c:	42b0      	cmp	r0, r6
    789e:	d839      	bhi.n	7914 <__aeabi_ddiv+0x5c8>
    78a0:	d06e      	beq.n	7980 <__aeabi_ddiv+0x634>
    78a2:	0011      	movs	r1, r2
    78a4:	e73a      	b.n	771c <__aeabi_ddiv+0x3d0>
    78a6:	9302      	str	r3, [sp, #8]
    78a8:	e73a      	b.n	7720 <__aeabi_ddiv+0x3d4>
    78aa:	2a1f      	cmp	r2, #31
    78ac:	dc3c      	bgt.n	7928 <__aeabi_ddiv+0x5dc>
    78ae:	2320      	movs	r3, #32
    78b0:	1a9b      	subs	r3, r3, r2
    78b2:	000c      	movs	r4, r1
    78b4:	4658      	mov	r0, fp
    78b6:	4099      	lsls	r1, r3
    78b8:	4098      	lsls	r0, r3
    78ba:	1e4b      	subs	r3, r1, #1
    78bc:	4199      	sbcs	r1, r3
    78be:	465b      	mov	r3, fp
    78c0:	40d4      	lsrs	r4, r2
    78c2:	40d3      	lsrs	r3, r2
    78c4:	4320      	orrs	r0, r4
    78c6:	4308      	orrs	r0, r1
    78c8:	001a      	movs	r2, r3
    78ca:	0743      	lsls	r3, r0, #29
    78cc:	d009      	beq.n	78e2 <__aeabi_ddiv+0x596>
    78ce:	230f      	movs	r3, #15
    78d0:	4003      	ands	r3, r0
    78d2:	2b04      	cmp	r3, #4
    78d4:	d005      	beq.n	78e2 <__aeabi_ddiv+0x596>
    78d6:	0001      	movs	r1, r0
    78d8:	1d08      	adds	r0, r1, #4
    78da:	4288      	cmp	r0, r1
    78dc:	419b      	sbcs	r3, r3
    78de:	425b      	negs	r3, r3
    78e0:	18d2      	adds	r2, r2, r3
    78e2:	0213      	lsls	r3, r2, #8
    78e4:	d53a      	bpl.n	795c <__aeabi_ddiv+0x610>
    78e6:	2301      	movs	r3, #1
    78e8:	9a02      	ldr	r2, [sp, #8]
    78ea:	2401      	movs	r4, #1
    78ec:	401a      	ands	r2, r3
    78ee:	2300      	movs	r3, #0
    78f0:	4694      	mov	ip, r2
    78f2:	4698      	mov	r8, r3
    78f4:	2200      	movs	r2, #0
    78f6:	e5f7      	b.n	74e8 <__aeabi_ddiv+0x19c>
    78f8:	2102      	movs	r1, #2
    78fa:	4249      	negs	r1, r1
    78fc:	468c      	mov	ip, r1
    78fe:	9d03      	ldr	r5, [sp, #12]
    7900:	44e3      	add	fp, ip
    7902:	46ac      	mov	ip, r5
    7904:	44e2      	add	sl, ip
    7906:	45aa      	cmp	sl, r5
    7908:	41ad      	sbcs	r5, r5
    790a:	426d      	negs	r5, r5
    790c:	4445      	add	r5, r8
    790e:	18ed      	adds	r5, r5, r3
    7910:	1a2d      	subs	r5, r5, r0
    7912:	e696      	b.n	7642 <__aeabi_ddiv+0x2f6>
    7914:	1e8a      	subs	r2, r1, #2
    7916:	9903      	ldr	r1, [sp, #12]
    7918:	004d      	lsls	r5, r1, #1
    791a:	428d      	cmp	r5, r1
    791c:	4189      	sbcs	r1, r1
    791e:	4249      	negs	r1, r1
    7920:	4441      	add	r1, r8
    7922:	1876      	adds	r6, r6, r1
    7924:	9503      	str	r5, [sp, #12]
    7926:	e78f      	b.n	7848 <__aeabi_ddiv+0x4fc>
    7928:	201f      	movs	r0, #31
    792a:	4240      	negs	r0, r0
    792c:	1ac3      	subs	r3, r0, r3
    792e:	4658      	mov	r0, fp
    7930:	40d8      	lsrs	r0, r3
    7932:	0003      	movs	r3, r0
    7934:	2a20      	cmp	r2, #32
    7936:	d028      	beq.n	798a <__aeabi_ddiv+0x63e>
    7938:	2040      	movs	r0, #64	; 0x40
    793a:	465d      	mov	r5, fp
    793c:	1a82      	subs	r2, r0, r2
    793e:	4095      	lsls	r5, r2
    7940:	4329      	orrs	r1, r5
    7942:	1e4a      	subs	r2, r1, #1
    7944:	4191      	sbcs	r1, r2
    7946:	4319      	orrs	r1, r3
    7948:	2307      	movs	r3, #7
    794a:	2200      	movs	r2, #0
    794c:	400b      	ands	r3, r1
    794e:	d009      	beq.n	7964 <__aeabi_ddiv+0x618>
    7950:	230f      	movs	r3, #15
    7952:	2200      	movs	r2, #0
    7954:	400b      	ands	r3, r1
    7956:	0008      	movs	r0, r1
    7958:	2b04      	cmp	r3, #4
    795a:	d1bd      	bne.n	78d8 <__aeabi_ddiv+0x58c>
    795c:	0001      	movs	r1, r0
    795e:	0753      	lsls	r3, r2, #29
    7960:	0252      	lsls	r2, r2, #9
    7962:	0b12      	lsrs	r2, r2, #12
    7964:	08c9      	lsrs	r1, r1, #3
    7966:	4319      	orrs	r1, r3
    7968:	2301      	movs	r3, #1
    796a:	4688      	mov	r8, r1
    796c:	9902      	ldr	r1, [sp, #8]
    796e:	2400      	movs	r4, #0
    7970:	4019      	ands	r1, r3
    7972:	468c      	mov	ip, r1
    7974:	e5b8      	b.n	74e8 <__aeabi_ddiv+0x19c>
    7976:	4552      	cmp	r2, sl
    7978:	d8be      	bhi.n	78f8 <__aeabi_ddiv+0x5ac>
    797a:	468b      	mov	fp, r1
    797c:	2500      	movs	r5, #0
    797e:	e660      	b.n	7642 <__aeabi_ddiv+0x2f6>
    7980:	9d03      	ldr	r5, [sp, #12]
    7982:	429d      	cmp	r5, r3
    7984:	d3c6      	bcc.n	7914 <__aeabi_ddiv+0x5c8>
    7986:	0011      	movs	r1, r2
    7988:	e762      	b.n	7850 <__aeabi_ddiv+0x504>
    798a:	2500      	movs	r5, #0
    798c:	e7d8      	b.n	7940 <__aeabi_ddiv+0x5f4>
    798e:	2280      	movs	r2, #128	; 0x80
    7990:	465b      	mov	r3, fp
    7992:	0312      	lsls	r2, r2, #12
    7994:	431a      	orrs	r2, r3
    7996:	9b01      	ldr	r3, [sp, #4]
    7998:	0312      	lsls	r2, r2, #12
    799a:	0b12      	lsrs	r2, r2, #12
    799c:	469c      	mov	ip, r3
    799e:	4688      	mov	r8, r1
    79a0:	4c03      	ldr	r4, [pc, #12]	; (79b0 <__aeabi_ddiv+0x664>)
    79a2:	e5a1      	b.n	74e8 <__aeabi_ddiv+0x19c>
    79a4:	000003ff 	.word	0x000003ff
    79a8:	feffffff 	.word	0xfeffffff
    79ac:	000007fe 	.word	0x000007fe
    79b0:	000007ff 	.word	0x000007ff

000079b4 <__eqdf2>:
    79b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    79b6:	464f      	mov	r7, r9
    79b8:	4646      	mov	r6, r8
    79ba:	46d6      	mov	lr, sl
    79bc:	005c      	lsls	r4, r3, #1
    79be:	b5c0      	push	{r6, r7, lr}
    79c0:	031f      	lsls	r7, r3, #12
    79c2:	0fdb      	lsrs	r3, r3, #31
    79c4:	469a      	mov	sl, r3
    79c6:	4b17      	ldr	r3, [pc, #92]	; (7a24 <__eqdf2+0x70>)
    79c8:	030e      	lsls	r6, r1, #12
    79ca:	004d      	lsls	r5, r1, #1
    79cc:	4684      	mov	ip, r0
    79ce:	4680      	mov	r8, r0
    79d0:	0b36      	lsrs	r6, r6, #12
    79d2:	0d6d      	lsrs	r5, r5, #21
    79d4:	0fc9      	lsrs	r1, r1, #31
    79d6:	4691      	mov	r9, r2
    79d8:	0b3f      	lsrs	r7, r7, #12
    79da:	0d64      	lsrs	r4, r4, #21
    79dc:	2001      	movs	r0, #1
    79de:	429d      	cmp	r5, r3
    79e0:	d008      	beq.n	79f4 <__eqdf2+0x40>
    79e2:	429c      	cmp	r4, r3
    79e4:	d001      	beq.n	79ea <__eqdf2+0x36>
    79e6:	42a5      	cmp	r5, r4
    79e8:	d00b      	beq.n	7a02 <__eqdf2+0x4e>
    79ea:	bc1c      	pop	{r2, r3, r4}
    79ec:	4690      	mov	r8, r2
    79ee:	4699      	mov	r9, r3
    79f0:	46a2      	mov	sl, r4
    79f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79f4:	4663      	mov	r3, ip
    79f6:	4333      	orrs	r3, r6
    79f8:	d1f7      	bne.n	79ea <__eqdf2+0x36>
    79fa:	42ac      	cmp	r4, r5
    79fc:	d1f5      	bne.n	79ea <__eqdf2+0x36>
    79fe:	433a      	orrs	r2, r7
    7a00:	d1f3      	bne.n	79ea <__eqdf2+0x36>
    7a02:	2001      	movs	r0, #1
    7a04:	42be      	cmp	r6, r7
    7a06:	d1f0      	bne.n	79ea <__eqdf2+0x36>
    7a08:	45c8      	cmp	r8, r9
    7a0a:	d1ee      	bne.n	79ea <__eqdf2+0x36>
    7a0c:	4551      	cmp	r1, sl
    7a0e:	d007      	beq.n	7a20 <__eqdf2+0x6c>
    7a10:	2d00      	cmp	r5, #0
    7a12:	d1ea      	bne.n	79ea <__eqdf2+0x36>
    7a14:	4663      	mov	r3, ip
    7a16:	431e      	orrs	r6, r3
    7a18:	0030      	movs	r0, r6
    7a1a:	1e46      	subs	r6, r0, #1
    7a1c:	41b0      	sbcs	r0, r6
    7a1e:	e7e4      	b.n	79ea <__eqdf2+0x36>
    7a20:	2000      	movs	r0, #0
    7a22:	e7e2      	b.n	79ea <__eqdf2+0x36>
    7a24:	000007ff 	.word	0x000007ff

00007a28 <__gedf2>:
    7a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a2a:	4645      	mov	r5, r8
    7a2c:	46de      	mov	lr, fp
    7a2e:	4657      	mov	r7, sl
    7a30:	464e      	mov	r6, r9
    7a32:	b5e0      	push	{r5, r6, r7, lr}
    7a34:	031f      	lsls	r7, r3, #12
    7a36:	0b3d      	lsrs	r5, r7, #12
    7a38:	4f2c      	ldr	r7, [pc, #176]	; (7aec <__gedf2+0xc4>)
    7a3a:	030e      	lsls	r6, r1, #12
    7a3c:	004c      	lsls	r4, r1, #1
    7a3e:	46ab      	mov	fp, r5
    7a40:	005d      	lsls	r5, r3, #1
    7a42:	4684      	mov	ip, r0
    7a44:	0b36      	lsrs	r6, r6, #12
    7a46:	0d64      	lsrs	r4, r4, #21
    7a48:	0fc9      	lsrs	r1, r1, #31
    7a4a:	4690      	mov	r8, r2
    7a4c:	0d6d      	lsrs	r5, r5, #21
    7a4e:	0fdb      	lsrs	r3, r3, #31
    7a50:	42bc      	cmp	r4, r7
    7a52:	d02a      	beq.n	7aaa <__gedf2+0x82>
    7a54:	4f25      	ldr	r7, [pc, #148]	; (7aec <__gedf2+0xc4>)
    7a56:	42bd      	cmp	r5, r7
    7a58:	d02d      	beq.n	7ab6 <__gedf2+0x8e>
    7a5a:	2c00      	cmp	r4, #0
    7a5c:	d10f      	bne.n	7a7e <__gedf2+0x56>
    7a5e:	4330      	orrs	r0, r6
    7a60:	0007      	movs	r7, r0
    7a62:	4681      	mov	r9, r0
    7a64:	4278      	negs	r0, r7
    7a66:	4178      	adcs	r0, r7
    7a68:	b2c0      	uxtb	r0, r0
    7a6a:	2d00      	cmp	r5, #0
    7a6c:	d117      	bne.n	7a9e <__gedf2+0x76>
    7a6e:	465f      	mov	r7, fp
    7a70:	433a      	orrs	r2, r7
    7a72:	d114      	bne.n	7a9e <__gedf2+0x76>
    7a74:	464b      	mov	r3, r9
    7a76:	2000      	movs	r0, #0
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d00a      	beq.n	7a92 <__gedf2+0x6a>
    7a7c:	e006      	b.n	7a8c <__gedf2+0x64>
    7a7e:	2d00      	cmp	r5, #0
    7a80:	d102      	bne.n	7a88 <__gedf2+0x60>
    7a82:	4658      	mov	r0, fp
    7a84:	4302      	orrs	r2, r0
    7a86:	d001      	beq.n	7a8c <__gedf2+0x64>
    7a88:	4299      	cmp	r1, r3
    7a8a:	d018      	beq.n	7abe <__gedf2+0x96>
    7a8c:	4248      	negs	r0, r1
    7a8e:	2101      	movs	r1, #1
    7a90:	4308      	orrs	r0, r1
    7a92:	bc3c      	pop	{r2, r3, r4, r5}
    7a94:	4690      	mov	r8, r2
    7a96:	4699      	mov	r9, r3
    7a98:	46a2      	mov	sl, r4
    7a9a:	46ab      	mov	fp, r5
    7a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a9e:	2800      	cmp	r0, #0
    7aa0:	d0f2      	beq.n	7a88 <__gedf2+0x60>
    7aa2:	2001      	movs	r0, #1
    7aa4:	3b01      	subs	r3, #1
    7aa6:	4318      	orrs	r0, r3
    7aa8:	e7f3      	b.n	7a92 <__gedf2+0x6a>
    7aaa:	0037      	movs	r7, r6
    7aac:	4307      	orrs	r7, r0
    7aae:	d0d1      	beq.n	7a54 <__gedf2+0x2c>
    7ab0:	2002      	movs	r0, #2
    7ab2:	4240      	negs	r0, r0
    7ab4:	e7ed      	b.n	7a92 <__gedf2+0x6a>
    7ab6:	465f      	mov	r7, fp
    7ab8:	4317      	orrs	r7, r2
    7aba:	d0ce      	beq.n	7a5a <__gedf2+0x32>
    7abc:	e7f8      	b.n	7ab0 <__gedf2+0x88>
    7abe:	42ac      	cmp	r4, r5
    7ac0:	dce4      	bgt.n	7a8c <__gedf2+0x64>
    7ac2:	da03      	bge.n	7acc <__gedf2+0xa4>
    7ac4:	1e48      	subs	r0, r1, #1
    7ac6:	2101      	movs	r1, #1
    7ac8:	4308      	orrs	r0, r1
    7aca:	e7e2      	b.n	7a92 <__gedf2+0x6a>
    7acc:	455e      	cmp	r6, fp
    7ace:	d8dd      	bhi.n	7a8c <__gedf2+0x64>
    7ad0:	d006      	beq.n	7ae0 <__gedf2+0xb8>
    7ad2:	2000      	movs	r0, #0
    7ad4:	455e      	cmp	r6, fp
    7ad6:	d2dc      	bcs.n	7a92 <__gedf2+0x6a>
    7ad8:	2301      	movs	r3, #1
    7ada:	1e48      	subs	r0, r1, #1
    7adc:	4318      	orrs	r0, r3
    7ade:	e7d8      	b.n	7a92 <__gedf2+0x6a>
    7ae0:	45c4      	cmp	ip, r8
    7ae2:	d8d3      	bhi.n	7a8c <__gedf2+0x64>
    7ae4:	2000      	movs	r0, #0
    7ae6:	45c4      	cmp	ip, r8
    7ae8:	d3f6      	bcc.n	7ad8 <__gedf2+0xb0>
    7aea:	e7d2      	b.n	7a92 <__gedf2+0x6a>
    7aec:	000007ff 	.word	0x000007ff

00007af0 <__ledf2>:
    7af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7af2:	464e      	mov	r6, r9
    7af4:	4645      	mov	r5, r8
    7af6:	46de      	mov	lr, fp
    7af8:	4657      	mov	r7, sl
    7afa:	005c      	lsls	r4, r3, #1
    7afc:	b5e0      	push	{r5, r6, r7, lr}
    7afe:	031f      	lsls	r7, r3, #12
    7b00:	0fdb      	lsrs	r3, r3, #31
    7b02:	4699      	mov	r9, r3
    7b04:	4b2a      	ldr	r3, [pc, #168]	; (7bb0 <__ledf2+0xc0>)
    7b06:	030e      	lsls	r6, r1, #12
    7b08:	004d      	lsls	r5, r1, #1
    7b0a:	0fc9      	lsrs	r1, r1, #31
    7b0c:	4684      	mov	ip, r0
    7b0e:	0b36      	lsrs	r6, r6, #12
    7b10:	0d6d      	lsrs	r5, r5, #21
    7b12:	468b      	mov	fp, r1
    7b14:	4690      	mov	r8, r2
    7b16:	0b3f      	lsrs	r7, r7, #12
    7b18:	0d64      	lsrs	r4, r4, #21
    7b1a:	429d      	cmp	r5, r3
    7b1c:	d020      	beq.n	7b60 <__ledf2+0x70>
    7b1e:	4b24      	ldr	r3, [pc, #144]	; (7bb0 <__ledf2+0xc0>)
    7b20:	429c      	cmp	r4, r3
    7b22:	d022      	beq.n	7b6a <__ledf2+0x7a>
    7b24:	2d00      	cmp	r5, #0
    7b26:	d112      	bne.n	7b4e <__ledf2+0x5e>
    7b28:	4330      	orrs	r0, r6
    7b2a:	4243      	negs	r3, r0
    7b2c:	4143      	adcs	r3, r0
    7b2e:	b2db      	uxtb	r3, r3
    7b30:	2c00      	cmp	r4, #0
    7b32:	d01f      	beq.n	7b74 <__ledf2+0x84>
    7b34:	2b00      	cmp	r3, #0
    7b36:	d00c      	beq.n	7b52 <__ledf2+0x62>
    7b38:	464b      	mov	r3, r9
    7b3a:	2001      	movs	r0, #1
    7b3c:	3b01      	subs	r3, #1
    7b3e:	4303      	orrs	r3, r0
    7b40:	0018      	movs	r0, r3
    7b42:	bc3c      	pop	{r2, r3, r4, r5}
    7b44:	4690      	mov	r8, r2
    7b46:	4699      	mov	r9, r3
    7b48:	46a2      	mov	sl, r4
    7b4a:	46ab      	mov	fp, r5
    7b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b4e:	2c00      	cmp	r4, #0
    7b50:	d016      	beq.n	7b80 <__ledf2+0x90>
    7b52:	45cb      	cmp	fp, r9
    7b54:	d017      	beq.n	7b86 <__ledf2+0x96>
    7b56:	465b      	mov	r3, fp
    7b58:	4259      	negs	r1, r3
    7b5a:	2301      	movs	r3, #1
    7b5c:	430b      	orrs	r3, r1
    7b5e:	e7ef      	b.n	7b40 <__ledf2+0x50>
    7b60:	0031      	movs	r1, r6
    7b62:	2302      	movs	r3, #2
    7b64:	4301      	orrs	r1, r0
    7b66:	d1eb      	bne.n	7b40 <__ledf2+0x50>
    7b68:	e7d9      	b.n	7b1e <__ledf2+0x2e>
    7b6a:	0039      	movs	r1, r7
    7b6c:	2302      	movs	r3, #2
    7b6e:	4311      	orrs	r1, r2
    7b70:	d1e6      	bne.n	7b40 <__ledf2+0x50>
    7b72:	e7d7      	b.n	7b24 <__ledf2+0x34>
    7b74:	433a      	orrs	r2, r7
    7b76:	d1dd      	bne.n	7b34 <__ledf2+0x44>
    7b78:	2300      	movs	r3, #0
    7b7a:	2800      	cmp	r0, #0
    7b7c:	d0e0      	beq.n	7b40 <__ledf2+0x50>
    7b7e:	e7ea      	b.n	7b56 <__ledf2+0x66>
    7b80:	433a      	orrs	r2, r7
    7b82:	d1e6      	bne.n	7b52 <__ledf2+0x62>
    7b84:	e7e7      	b.n	7b56 <__ledf2+0x66>
    7b86:	42a5      	cmp	r5, r4
    7b88:	dce5      	bgt.n	7b56 <__ledf2+0x66>
    7b8a:	db05      	blt.n	7b98 <__ledf2+0xa8>
    7b8c:	42be      	cmp	r6, r7
    7b8e:	d8e2      	bhi.n	7b56 <__ledf2+0x66>
    7b90:	d007      	beq.n	7ba2 <__ledf2+0xb2>
    7b92:	2300      	movs	r3, #0
    7b94:	42be      	cmp	r6, r7
    7b96:	d2d3      	bcs.n	7b40 <__ledf2+0x50>
    7b98:	4659      	mov	r1, fp
    7b9a:	2301      	movs	r3, #1
    7b9c:	3901      	subs	r1, #1
    7b9e:	430b      	orrs	r3, r1
    7ba0:	e7ce      	b.n	7b40 <__ledf2+0x50>
    7ba2:	45c4      	cmp	ip, r8
    7ba4:	d8d7      	bhi.n	7b56 <__ledf2+0x66>
    7ba6:	2300      	movs	r3, #0
    7ba8:	45c4      	cmp	ip, r8
    7baa:	d3f5      	bcc.n	7b98 <__ledf2+0xa8>
    7bac:	e7c8      	b.n	7b40 <__ledf2+0x50>
    7bae:	46c0      	nop			; (mov r8, r8)
    7bb0:	000007ff 	.word	0x000007ff

00007bb4 <__aeabi_dmul>:
    7bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bb6:	4657      	mov	r7, sl
    7bb8:	4645      	mov	r5, r8
    7bba:	46de      	mov	lr, fp
    7bbc:	464e      	mov	r6, r9
    7bbe:	b5e0      	push	{r5, r6, r7, lr}
    7bc0:	030c      	lsls	r4, r1, #12
    7bc2:	4698      	mov	r8, r3
    7bc4:	004e      	lsls	r6, r1, #1
    7bc6:	0b23      	lsrs	r3, r4, #12
    7bc8:	b087      	sub	sp, #28
    7bca:	0007      	movs	r7, r0
    7bcc:	4692      	mov	sl, r2
    7bce:	469b      	mov	fp, r3
    7bd0:	0d76      	lsrs	r6, r6, #21
    7bd2:	0fcd      	lsrs	r5, r1, #31
    7bd4:	2e00      	cmp	r6, #0
    7bd6:	d06b      	beq.n	7cb0 <__aeabi_dmul+0xfc>
    7bd8:	4b6d      	ldr	r3, [pc, #436]	; (7d90 <__aeabi_dmul+0x1dc>)
    7bda:	429e      	cmp	r6, r3
    7bdc:	d035      	beq.n	7c4a <__aeabi_dmul+0x96>
    7bde:	2480      	movs	r4, #128	; 0x80
    7be0:	465b      	mov	r3, fp
    7be2:	0f42      	lsrs	r2, r0, #29
    7be4:	0424      	lsls	r4, r4, #16
    7be6:	00db      	lsls	r3, r3, #3
    7be8:	4314      	orrs	r4, r2
    7bea:	431c      	orrs	r4, r3
    7bec:	00c3      	lsls	r3, r0, #3
    7bee:	4699      	mov	r9, r3
    7bf0:	4b68      	ldr	r3, [pc, #416]	; (7d94 <__aeabi_dmul+0x1e0>)
    7bf2:	46a3      	mov	fp, r4
    7bf4:	469c      	mov	ip, r3
    7bf6:	2300      	movs	r3, #0
    7bf8:	2700      	movs	r7, #0
    7bfa:	4466      	add	r6, ip
    7bfc:	9302      	str	r3, [sp, #8]
    7bfe:	4643      	mov	r3, r8
    7c00:	031c      	lsls	r4, r3, #12
    7c02:	005a      	lsls	r2, r3, #1
    7c04:	0fdb      	lsrs	r3, r3, #31
    7c06:	4650      	mov	r0, sl
    7c08:	0b24      	lsrs	r4, r4, #12
    7c0a:	0d52      	lsrs	r2, r2, #21
    7c0c:	4698      	mov	r8, r3
    7c0e:	d100      	bne.n	7c12 <__aeabi_dmul+0x5e>
    7c10:	e076      	b.n	7d00 <__aeabi_dmul+0x14c>
    7c12:	4b5f      	ldr	r3, [pc, #380]	; (7d90 <__aeabi_dmul+0x1dc>)
    7c14:	429a      	cmp	r2, r3
    7c16:	d06d      	beq.n	7cf4 <__aeabi_dmul+0x140>
    7c18:	2380      	movs	r3, #128	; 0x80
    7c1a:	0f41      	lsrs	r1, r0, #29
    7c1c:	041b      	lsls	r3, r3, #16
    7c1e:	430b      	orrs	r3, r1
    7c20:	495c      	ldr	r1, [pc, #368]	; (7d94 <__aeabi_dmul+0x1e0>)
    7c22:	00e4      	lsls	r4, r4, #3
    7c24:	468c      	mov	ip, r1
    7c26:	431c      	orrs	r4, r3
    7c28:	00c3      	lsls	r3, r0, #3
    7c2a:	2000      	movs	r0, #0
    7c2c:	4462      	add	r2, ip
    7c2e:	4641      	mov	r1, r8
    7c30:	18b6      	adds	r6, r6, r2
    7c32:	4069      	eors	r1, r5
    7c34:	1c72      	adds	r2, r6, #1
    7c36:	9101      	str	r1, [sp, #4]
    7c38:	4694      	mov	ip, r2
    7c3a:	4307      	orrs	r7, r0
    7c3c:	2f0f      	cmp	r7, #15
    7c3e:	d900      	bls.n	7c42 <__aeabi_dmul+0x8e>
    7c40:	e0b0      	b.n	7da4 <__aeabi_dmul+0x1f0>
    7c42:	4a55      	ldr	r2, [pc, #340]	; (7d98 <__aeabi_dmul+0x1e4>)
    7c44:	00bf      	lsls	r7, r7, #2
    7c46:	59d2      	ldr	r2, [r2, r7]
    7c48:	4697      	mov	pc, r2
    7c4a:	465b      	mov	r3, fp
    7c4c:	4303      	orrs	r3, r0
    7c4e:	4699      	mov	r9, r3
    7c50:	d000      	beq.n	7c54 <__aeabi_dmul+0xa0>
    7c52:	e087      	b.n	7d64 <__aeabi_dmul+0x1b0>
    7c54:	2300      	movs	r3, #0
    7c56:	469b      	mov	fp, r3
    7c58:	3302      	adds	r3, #2
    7c5a:	2708      	movs	r7, #8
    7c5c:	9302      	str	r3, [sp, #8]
    7c5e:	e7ce      	b.n	7bfe <__aeabi_dmul+0x4a>
    7c60:	4642      	mov	r2, r8
    7c62:	9201      	str	r2, [sp, #4]
    7c64:	2802      	cmp	r0, #2
    7c66:	d067      	beq.n	7d38 <__aeabi_dmul+0x184>
    7c68:	2803      	cmp	r0, #3
    7c6a:	d100      	bne.n	7c6e <__aeabi_dmul+0xba>
    7c6c:	e20e      	b.n	808c <__aeabi_dmul+0x4d8>
    7c6e:	2801      	cmp	r0, #1
    7c70:	d000      	beq.n	7c74 <__aeabi_dmul+0xc0>
    7c72:	e162      	b.n	7f3a <__aeabi_dmul+0x386>
    7c74:	2300      	movs	r3, #0
    7c76:	2400      	movs	r4, #0
    7c78:	2200      	movs	r2, #0
    7c7a:	4699      	mov	r9, r3
    7c7c:	9901      	ldr	r1, [sp, #4]
    7c7e:	4001      	ands	r1, r0
    7c80:	b2cd      	uxtb	r5, r1
    7c82:	2100      	movs	r1, #0
    7c84:	0312      	lsls	r2, r2, #12
    7c86:	0d0b      	lsrs	r3, r1, #20
    7c88:	0b12      	lsrs	r2, r2, #12
    7c8a:	051b      	lsls	r3, r3, #20
    7c8c:	4313      	orrs	r3, r2
    7c8e:	4a43      	ldr	r2, [pc, #268]	; (7d9c <__aeabi_dmul+0x1e8>)
    7c90:	0524      	lsls	r4, r4, #20
    7c92:	4013      	ands	r3, r2
    7c94:	431c      	orrs	r4, r3
    7c96:	0064      	lsls	r4, r4, #1
    7c98:	07ed      	lsls	r5, r5, #31
    7c9a:	0864      	lsrs	r4, r4, #1
    7c9c:	432c      	orrs	r4, r5
    7c9e:	4648      	mov	r0, r9
    7ca0:	0021      	movs	r1, r4
    7ca2:	b007      	add	sp, #28
    7ca4:	bc3c      	pop	{r2, r3, r4, r5}
    7ca6:	4690      	mov	r8, r2
    7ca8:	4699      	mov	r9, r3
    7caa:	46a2      	mov	sl, r4
    7cac:	46ab      	mov	fp, r5
    7cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cb0:	4303      	orrs	r3, r0
    7cb2:	4699      	mov	r9, r3
    7cb4:	d04f      	beq.n	7d56 <__aeabi_dmul+0x1a2>
    7cb6:	465b      	mov	r3, fp
    7cb8:	2b00      	cmp	r3, #0
    7cba:	d100      	bne.n	7cbe <__aeabi_dmul+0x10a>
    7cbc:	e189      	b.n	7fd2 <__aeabi_dmul+0x41e>
    7cbe:	4658      	mov	r0, fp
    7cc0:	f000 feb8 	bl	8a34 <__clzsi2>
    7cc4:	0003      	movs	r3, r0
    7cc6:	3b0b      	subs	r3, #11
    7cc8:	2b1c      	cmp	r3, #28
    7cca:	dd00      	ble.n	7cce <__aeabi_dmul+0x11a>
    7ccc:	e17a      	b.n	7fc4 <__aeabi_dmul+0x410>
    7cce:	221d      	movs	r2, #29
    7cd0:	1ad3      	subs	r3, r2, r3
    7cd2:	003a      	movs	r2, r7
    7cd4:	0001      	movs	r1, r0
    7cd6:	465c      	mov	r4, fp
    7cd8:	40da      	lsrs	r2, r3
    7cda:	3908      	subs	r1, #8
    7cdc:	408c      	lsls	r4, r1
    7cde:	0013      	movs	r3, r2
    7ce0:	408f      	lsls	r7, r1
    7ce2:	4323      	orrs	r3, r4
    7ce4:	469b      	mov	fp, r3
    7ce6:	46b9      	mov	r9, r7
    7ce8:	2300      	movs	r3, #0
    7cea:	4e2d      	ldr	r6, [pc, #180]	; (7da0 <__aeabi_dmul+0x1ec>)
    7cec:	2700      	movs	r7, #0
    7cee:	1a36      	subs	r6, r6, r0
    7cf0:	9302      	str	r3, [sp, #8]
    7cf2:	e784      	b.n	7bfe <__aeabi_dmul+0x4a>
    7cf4:	4653      	mov	r3, sl
    7cf6:	4323      	orrs	r3, r4
    7cf8:	d12a      	bne.n	7d50 <__aeabi_dmul+0x19c>
    7cfa:	2400      	movs	r4, #0
    7cfc:	2002      	movs	r0, #2
    7cfe:	e796      	b.n	7c2e <__aeabi_dmul+0x7a>
    7d00:	4653      	mov	r3, sl
    7d02:	4323      	orrs	r3, r4
    7d04:	d020      	beq.n	7d48 <__aeabi_dmul+0x194>
    7d06:	2c00      	cmp	r4, #0
    7d08:	d100      	bne.n	7d0c <__aeabi_dmul+0x158>
    7d0a:	e157      	b.n	7fbc <__aeabi_dmul+0x408>
    7d0c:	0020      	movs	r0, r4
    7d0e:	f000 fe91 	bl	8a34 <__clzsi2>
    7d12:	0003      	movs	r3, r0
    7d14:	3b0b      	subs	r3, #11
    7d16:	2b1c      	cmp	r3, #28
    7d18:	dd00      	ble.n	7d1c <__aeabi_dmul+0x168>
    7d1a:	e149      	b.n	7fb0 <__aeabi_dmul+0x3fc>
    7d1c:	211d      	movs	r1, #29
    7d1e:	1acb      	subs	r3, r1, r3
    7d20:	4651      	mov	r1, sl
    7d22:	0002      	movs	r2, r0
    7d24:	40d9      	lsrs	r1, r3
    7d26:	4653      	mov	r3, sl
    7d28:	3a08      	subs	r2, #8
    7d2a:	4094      	lsls	r4, r2
    7d2c:	4093      	lsls	r3, r2
    7d2e:	430c      	orrs	r4, r1
    7d30:	4a1b      	ldr	r2, [pc, #108]	; (7da0 <__aeabi_dmul+0x1ec>)
    7d32:	1a12      	subs	r2, r2, r0
    7d34:	2000      	movs	r0, #0
    7d36:	e77a      	b.n	7c2e <__aeabi_dmul+0x7a>
    7d38:	2501      	movs	r5, #1
    7d3a:	9b01      	ldr	r3, [sp, #4]
    7d3c:	4c14      	ldr	r4, [pc, #80]	; (7d90 <__aeabi_dmul+0x1dc>)
    7d3e:	401d      	ands	r5, r3
    7d40:	2300      	movs	r3, #0
    7d42:	2200      	movs	r2, #0
    7d44:	4699      	mov	r9, r3
    7d46:	e79c      	b.n	7c82 <__aeabi_dmul+0xce>
    7d48:	2400      	movs	r4, #0
    7d4a:	2200      	movs	r2, #0
    7d4c:	2001      	movs	r0, #1
    7d4e:	e76e      	b.n	7c2e <__aeabi_dmul+0x7a>
    7d50:	4653      	mov	r3, sl
    7d52:	2003      	movs	r0, #3
    7d54:	e76b      	b.n	7c2e <__aeabi_dmul+0x7a>
    7d56:	2300      	movs	r3, #0
    7d58:	469b      	mov	fp, r3
    7d5a:	3301      	adds	r3, #1
    7d5c:	2704      	movs	r7, #4
    7d5e:	2600      	movs	r6, #0
    7d60:	9302      	str	r3, [sp, #8]
    7d62:	e74c      	b.n	7bfe <__aeabi_dmul+0x4a>
    7d64:	2303      	movs	r3, #3
    7d66:	4681      	mov	r9, r0
    7d68:	270c      	movs	r7, #12
    7d6a:	9302      	str	r3, [sp, #8]
    7d6c:	e747      	b.n	7bfe <__aeabi_dmul+0x4a>
    7d6e:	2280      	movs	r2, #128	; 0x80
    7d70:	2300      	movs	r3, #0
    7d72:	2500      	movs	r5, #0
    7d74:	0312      	lsls	r2, r2, #12
    7d76:	4699      	mov	r9, r3
    7d78:	4c05      	ldr	r4, [pc, #20]	; (7d90 <__aeabi_dmul+0x1dc>)
    7d7a:	e782      	b.n	7c82 <__aeabi_dmul+0xce>
    7d7c:	465c      	mov	r4, fp
    7d7e:	464b      	mov	r3, r9
    7d80:	9802      	ldr	r0, [sp, #8]
    7d82:	e76f      	b.n	7c64 <__aeabi_dmul+0xb0>
    7d84:	465c      	mov	r4, fp
    7d86:	464b      	mov	r3, r9
    7d88:	9501      	str	r5, [sp, #4]
    7d8a:	9802      	ldr	r0, [sp, #8]
    7d8c:	e76a      	b.n	7c64 <__aeabi_dmul+0xb0>
    7d8e:	46c0      	nop			; (mov r8, r8)
    7d90:	000007ff 	.word	0x000007ff
    7d94:	fffffc01 	.word	0xfffffc01
    7d98:	00008f78 	.word	0x00008f78
    7d9c:	800fffff 	.word	0x800fffff
    7da0:	fffffc0d 	.word	0xfffffc0d
    7da4:	464a      	mov	r2, r9
    7da6:	4649      	mov	r1, r9
    7da8:	0c17      	lsrs	r7, r2, #16
    7daa:	0c1a      	lsrs	r2, r3, #16
    7dac:	041b      	lsls	r3, r3, #16
    7dae:	0c1b      	lsrs	r3, r3, #16
    7db0:	0408      	lsls	r0, r1, #16
    7db2:	0019      	movs	r1, r3
    7db4:	0c00      	lsrs	r0, r0, #16
    7db6:	4341      	muls	r1, r0
    7db8:	0015      	movs	r5, r2
    7dba:	4688      	mov	r8, r1
    7dbc:	0019      	movs	r1, r3
    7dbe:	437d      	muls	r5, r7
    7dc0:	4379      	muls	r1, r7
    7dc2:	9503      	str	r5, [sp, #12]
    7dc4:	4689      	mov	r9, r1
    7dc6:	0029      	movs	r1, r5
    7dc8:	0015      	movs	r5, r2
    7dca:	4345      	muls	r5, r0
    7dcc:	444d      	add	r5, r9
    7dce:	9502      	str	r5, [sp, #8]
    7dd0:	4645      	mov	r5, r8
    7dd2:	0c2d      	lsrs	r5, r5, #16
    7dd4:	46aa      	mov	sl, r5
    7dd6:	9d02      	ldr	r5, [sp, #8]
    7dd8:	4455      	add	r5, sl
    7dda:	45a9      	cmp	r9, r5
    7ddc:	d906      	bls.n	7dec <__aeabi_dmul+0x238>
    7dde:	468a      	mov	sl, r1
    7de0:	2180      	movs	r1, #128	; 0x80
    7de2:	0249      	lsls	r1, r1, #9
    7de4:	4689      	mov	r9, r1
    7de6:	44ca      	add	sl, r9
    7de8:	4651      	mov	r1, sl
    7dea:	9103      	str	r1, [sp, #12]
    7dec:	0c29      	lsrs	r1, r5, #16
    7dee:	9104      	str	r1, [sp, #16]
    7df0:	4641      	mov	r1, r8
    7df2:	0409      	lsls	r1, r1, #16
    7df4:	042d      	lsls	r5, r5, #16
    7df6:	0c09      	lsrs	r1, r1, #16
    7df8:	4688      	mov	r8, r1
    7dfa:	0029      	movs	r1, r5
    7dfc:	0c25      	lsrs	r5, r4, #16
    7dfe:	0424      	lsls	r4, r4, #16
    7e00:	4441      	add	r1, r8
    7e02:	0c24      	lsrs	r4, r4, #16
    7e04:	9105      	str	r1, [sp, #20]
    7e06:	0021      	movs	r1, r4
    7e08:	4341      	muls	r1, r0
    7e0a:	4688      	mov	r8, r1
    7e0c:	0021      	movs	r1, r4
    7e0e:	4379      	muls	r1, r7
    7e10:	468a      	mov	sl, r1
    7e12:	4368      	muls	r0, r5
    7e14:	4641      	mov	r1, r8
    7e16:	4450      	add	r0, sl
    7e18:	4681      	mov	r9, r0
    7e1a:	0c08      	lsrs	r0, r1, #16
    7e1c:	4448      	add	r0, r9
    7e1e:	436f      	muls	r7, r5
    7e20:	4582      	cmp	sl, r0
    7e22:	d903      	bls.n	7e2c <__aeabi_dmul+0x278>
    7e24:	2180      	movs	r1, #128	; 0x80
    7e26:	0249      	lsls	r1, r1, #9
    7e28:	4689      	mov	r9, r1
    7e2a:	444f      	add	r7, r9
    7e2c:	0c01      	lsrs	r1, r0, #16
    7e2e:	4689      	mov	r9, r1
    7e30:	0039      	movs	r1, r7
    7e32:	4449      	add	r1, r9
    7e34:	9102      	str	r1, [sp, #8]
    7e36:	4641      	mov	r1, r8
    7e38:	040f      	lsls	r7, r1, #16
    7e3a:	9904      	ldr	r1, [sp, #16]
    7e3c:	0c3f      	lsrs	r7, r7, #16
    7e3e:	4688      	mov	r8, r1
    7e40:	0400      	lsls	r0, r0, #16
    7e42:	19c0      	adds	r0, r0, r7
    7e44:	4480      	add	r8, r0
    7e46:	4641      	mov	r1, r8
    7e48:	9104      	str	r1, [sp, #16]
    7e4a:	4659      	mov	r1, fp
    7e4c:	0c0f      	lsrs	r7, r1, #16
    7e4e:	0409      	lsls	r1, r1, #16
    7e50:	0c09      	lsrs	r1, r1, #16
    7e52:	4688      	mov	r8, r1
    7e54:	4359      	muls	r1, r3
    7e56:	468a      	mov	sl, r1
    7e58:	0039      	movs	r1, r7
    7e5a:	4351      	muls	r1, r2
    7e5c:	4689      	mov	r9, r1
    7e5e:	4641      	mov	r1, r8
    7e60:	434a      	muls	r2, r1
    7e62:	4651      	mov	r1, sl
    7e64:	0c09      	lsrs	r1, r1, #16
    7e66:	468b      	mov	fp, r1
    7e68:	437b      	muls	r3, r7
    7e6a:	18d2      	adds	r2, r2, r3
    7e6c:	445a      	add	r2, fp
    7e6e:	4293      	cmp	r3, r2
    7e70:	d903      	bls.n	7e7a <__aeabi_dmul+0x2c6>
    7e72:	2380      	movs	r3, #128	; 0x80
    7e74:	025b      	lsls	r3, r3, #9
    7e76:	469b      	mov	fp, r3
    7e78:	44d9      	add	r9, fp
    7e7a:	4651      	mov	r1, sl
    7e7c:	0409      	lsls	r1, r1, #16
    7e7e:	0c09      	lsrs	r1, r1, #16
    7e80:	468a      	mov	sl, r1
    7e82:	4641      	mov	r1, r8
    7e84:	4361      	muls	r1, r4
    7e86:	437c      	muls	r4, r7
    7e88:	0c13      	lsrs	r3, r2, #16
    7e8a:	0412      	lsls	r2, r2, #16
    7e8c:	444b      	add	r3, r9
    7e8e:	4452      	add	r2, sl
    7e90:	46a1      	mov	r9, r4
    7e92:	468a      	mov	sl, r1
    7e94:	003c      	movs	r4, r7
    7e96:	4641      	mov	r1, r8
    7e98:	436c      	muls	r4, r5
    7e9a:	434d      	muls	r5, r1
    7e9c:	4651      	mov	r1, sl
    7e9e:	444d      	add	r5, r9
    7ea0:	0c0f      	lsrs	r7, r1, #16
    7ea2:	197d      	adds	r5, r7, r5
    7ea4:	45a9      	cmp	r9, r5
    7ea6:	d903      	bls.n	7eb0 <__aeabi_dmul+0x2fc>
    7ea8:	2180      	movs	r1, #128	; 0x80
    7eaa:	0249      	lsls	r1, r1, #9
    7eac:	4688      	mov	r8, r1
    7eae:	4444      	add	r4, r8
    7eb0:	9f04      	ldr	r7, [sp, #16]
    7eb2:	9903      	ldr	r1, [sp, #12]
    7eb4:	46b8      	mov	r8, r7
    7eb6:	4441      	add	r1, r8
    7eb8:	468b      	mov	fp, r1
    7eba:	4583      	cmp	fp, r0
    7ebc:	4180      	sbcs	r0, r0
    7ebe:	4241      	negs	r1, r0
    7ec0:	4688      	mov	r8, r1
    7ec2:	4651      	mov	r1, sl
    7ec4:	0408      	lsls	r0, r1, #16
    7ec6:	042f      	lsls	r7, r5, #16
    7ec8:	0c00      	lsrs	r0, r0, #16
    7eca:	183f      	adds	r7, r7, r0
    7ecc:	4658      	mov	r0, fp
    7ece:	9902      	ldr	r1, [sp, #8]
    7ed0:	1810      	adds	r0, r2, r0
    7ed2:	4689      	mov	r9, r1
    7ed4:	4290      	cmp	r0, r2
    7ed6:	4192      	sbcs	r2, r2
    7ed8:	444f      	add	r7, r9
    7eda:	46ba      	mov	sl, r7
    7edc:	4252      	negs	r2, r2
    7ede:	4699      	mov	r9, r3
    7ee0:	4693      	mov	fp, r2
    7ee2:	44c2      	add	sl, r8
    7ee4:	44d1      	add	r9, sl
    7ee6:	44cb      	add	fp, r9
    7ee8:	428f      	cmp	r7, r1
    7eea:	41bf      	sbcs	r7, r7
    7eec:	45c2      	cmp	sl, r8
    7eee:	4189      	sbcs	r1, r1
    7ef0:	4599      	cmp	r9, r3
    7ef2:	419b      	sbcs	r3, r3
    7ef4:	4593      	cmp	fp, r2
    7ef6:	4192      	sbcs	r2, r2
    7ef8:	427f      	negs	r7, r7
    7efa:	4249      	negs	r1, r1
    7efc:	0c2d      	lsrs	r5, r5, #16
    7efe:	4252      	negs	r2, r2
    7f00:	430f      	orrs	r7, r1
    7f02:	425b      	negs	r3, r3
    7f04:	4313      	orrs	r3, r2
    7f06:	197f      	adds	r7, r7, r5
    7f08:	18ff      	adds	r7, r7, r3
    7f0a:	465b      	mov	r3, fp
    7f0c:	193c      	adds	r4, r7, r4
    7f0e:	0ddb      	lsrs	r3, r3, #23
    7f10:	9a05      	ldr	r2, [sp, #20]
    7f12:	0264      	lsls	r4, r4, #9
    7f14:	431c      	orrs	r4, r3
    7f16:	0243      	lsls	r3, r0, #9
    7f18:	4313      	orrs	r3, r2
    7f1a:	1e5d      	subs	r5, r3, #1
    7f1c:	41ab      	sbcs	r3, r5
    7f1e:	465a      	mov	r2, fp
    7f20:	0dc0      	lsrs	r0, r0, #23
    7f22:	4303      	orrs	r3, r0
    7f24:	0252      	lsls	r2, r2, #9
    7f26:	4313      	orrs	r3, r2
    7f28:	01e2      	lsls	r2, r4, #7
    7f2a:	d556      	bpl.n	7fda <__aeabi_dmul+0x426>
    7f2c:	2001      	movs	r0, #1
    7f2e:	085a      	lsrs	r2, r3, #1
    7f30:	4003      	ands	r3, r0
    7f32:	4313      	orrs	r3, r2
    7f34:	07e2      	lsls	r2, r4, #31
    7f36:	4313      	orrs	r3, r2
    7f38:	0864      	lsrs	r4, r4, #1
    7f3a:	485a      	ldr	r0, [pc, #360]	; (80a4 <__aeabi_dmul+0x4f0>)
    7f3c:	4460      	add	r0, ip
    7f3e:	2800      	cmp	r0, #0
    7f40:	dd4d      	ble.n	7fde <__aeabi_dmul+0x42a>
    7f42:	075a      	lsls	r2, r3, #29
    7f44:	d009      	beq.n	7f5a <__aeabi_dmul+0x3a6>
    7f46:	220f      	movs	r2, #15
    7f48:	401a      	ands	r2, r3
    7f4a:	2a04      	cmp	r2, #4
    7f4c:	d005      	beq.n	7f5a <__aeabi_dmul+0x3a6>
    7f4e:	1d1a      	adds	r2, r3, #4
    7f50:	429a      	cmp	r2, r3
    7f52:	419b      	sbcs	r3, r3
    7f54:	425b      	negs	r3, r3
    7f56:	18e4      	adds	r4, r4, r3
    7f58:	0013      	movs	r3, r2
    7f5a:	01e2      	lsls	r2, r4, #7
    7f5c:	d504      	bpl.n	7f68 <__aeabi_dmul+0x3b4>
    7f5e:	2080      	movs	r0, #128	; 0x80
    7f60:	4a51      	ldr	r2, [pc, #324]	; (80a8 <__aeabi_dmul+0x4f4>)
    7f62:	00c0      	lsls	r0, r0, #3
    7f64:	4014      	ands	r4, r2
    7f66:	4460      	add	r0, ip
    7f68:	4a50      	ldr	r2, [pc, #320]	; (80ac <__aeabi_dmul+0x4f8>)
    7f6a:	4290      	cmp	r0, r2
    7f6c:	dd00      	ble.n	7f70 <__aeabi_dmul+0x3bc>
    7f6e:	e6e3      	b.n	7d38 <__aeabi_dmul+0x184>
    7f70:	2501      	movs	r5, #1
    7f72:	08db      	lsrs	r3, r3, #3
    7f74:	0762      	lsls	r2, r4, #29
    7f76:	431a      	orrs	r2, r3
    7f78:	0264      	lsls	r4, r4, #9
    7f7a:	9b01      	ldr	r3, [sp, #4]
    7f7c:	4691      	mov	r9, r2
    7f7e:	0b22      	lsrs	r2, r4, #12
    7f80:	0544      	lsls	r4, r0, #21
    7f82:	0d64      	lsrs	r4, r4, #21
    7f84:	401d      	ands	r5, r3
    7f86:	e67c      	b.n	7c82 <__aeabi_dmul+0xce>
    7f88:	2280      	movs	r2, #128	; 0x80
    7f8a:	4659      	mov	r1, fp
    7f8c:	0312      	lsls	r2, r2, #12
    7f8e:	4211      	tst	r1, r2
    7f90:	d008      	beq.n	7fa4 <__aeabi_dmul+0x3f0>
    7f92:	4214      	tst	r4, r2
    7f94:	d106      	bne.n	7fa4 <__aeabi_dmul+0x3f0>
    7f96:	4322      	orrs	r2, r4
    7f98:	0312      	lsls	r2, r2, #12
    7f9a:	0b12      	lsrs	r2, r2, #12
    7f9c:	4645      	mov	r5, r8
    7f9e:	4699      	mov	r9, r3
    7fa0:	4c43      	ldr	r4, [pc, #268]	; (80b0 <__aeabi_dmul+0x4fc>)
    7fa2:	e66e      	b.n	7c82 <__aeabi_dmul+0xce>
    7fa4:	465b      	mov	r3, fp
    7fa6:	431a      	orrs	r2, r3
    7fa8:	0312      	lsls	r2, r2, #12
    7faa:	0b12      	lsrs	r2, r2, #12
    7fac:	4c40      	ldr	r4, [pc, #256]	; (80b0 <__aeabi_dmul+0x4fc>)
    7fae:	e668      	b.n	7c82 <__aeabi_dmul+0xce>
    7fb0:	0003      	movs	r3, r0
    7fb2:	4654      	mov	r4, sl
    7fb4:	3b28      	subs	r3, #40	; 0x28
    7fb6:	409c      	lsls	r4, r3
    7fb8:	2300      	movs	r3, #0
    7fba:	e6b9      	b.n	7d30 <__aeabi_dmul+0x17c>
    7fbc:	f000 fd3a 	bl	8a34 <__clzsi2>
    7fc0:	3020      	adds	r0, #32
    7fc2:	e6a6      	b.n	7d12 <__aeabi_dmul+0x15e>
    7fc4:	0003      	movs	r3, r0
    7fc6:	3b28      	subs	r3, #40	; 0x28
    7fc8:	409f      	lsls	r7, r3
    7fca:	2300      	movs	r3, #0
    7fcc:	46bb      	mov	fp, r7
    7fce:	4699      	mov	r9, r3
    7fd0:	e68a      	b.n	7ce8 <__aeabi_dmul+0x134>
    7fd2:	f000 fd2f 	bl	8a34 <__clzsi2>
    7fd6:	3020      	adds	r0, #32
    7fd8:	e674      	b.n	7cc4 <__aeabi_dmul+0x110>
    7fda:	46b4      	mov	ip, r6
    7fdc:	e7ad      	b.n	7f3a <__aeabi_dmul+0x386>
    7fde:	2501      	movs	r5, #1
    7fe0:	1a2a      	subs	r2, r5, r0
    7fe2:	2a38      	cmp	r2, #56	; 0x38
    7fe4:	dd06      	ble.n	7ff4 <__aeabi_dmul+0x440>
    7fe6:	9b01      	ldr	r3, [sp, #4]
    7fe8:	2400      	movs	r4, #0
    7fea:	401d      	ands	r5, r3
    7fec:	2300      	movs	r3, #0
    7fee:	2200      	movs	r2, #0
    7ff0:	4699      	mov	r9, r3
    7ff2:	e646      	b.n	7c82 <__aeabi_dmul+0xce>
    7ff4:	2a1f      	cmp	r2, #31
    7ff6:	dc21      	bgt.n	803c <__aeabi_dmul+0x488>
    7ff8:	2520      	movs	r5, #32
    7ffa:	0020      	movs	r0, r4
    7ffc:	1aad      	subs	r5, r5, r2
    7ffe:	001e      	movs	r6, r3
    8000:	40ab      	lsls	r3, r5
    8002:	40a8      	lsls	r0, r5
    8004:	40d6      	lsrs	r6, r2
    8006:	1e5d      	subs	r5, r3, #1
    8008:	41ab      	sbcs	r3, r5
    800a:	4330      	orrs	r0, r6
    800c:	4318      	orrs	r0, r3
    800e:	40d4      	lsrs	r4, r2
    8010:	0743      	lsls	r3, r0, #29
    8012:	d009      	beq.n	8028 <__aeabi_dmul+0x474>
    8014:	230f      	movs	r3, #15
    8016:	4003      	ands	r3, r0
    8018:	2b04      	cmp	r3, #4
    801a:	d005      	beq.n	8028 <__aeabi_dmul+0x474>
    801c:	0003      	movs	r3, r0
    801e:	1d18      	adds	r0, r3, #4
    8020:	4298      	cmp	r0, r3
    8022:	419b      	sbcs	r3, r3
    8024:	425b      	negs	r3, r3
    8026:	18e4      	adds	r4, r4, r3
    8028:	0223      	lsls	r3, r4, #8
    802a:	d521      	bpl.n	8070 <__aeabi_dmul+0x4bc>
    802c:	2501      	movs	r5, #1
    802e:	9b01      	ldr	r3, [sp, #4]
    8030:	2401      	movs	r4, #1
    8032:	401d      	ands	r5, r3
    8034:	2300      	movs	r3, #0
    8036:	2200      	movs	r2, #0
    8038:	4699      	mov	r9, r3
    803a:	e622      	b.n	7c82 <__aeabi_dmul+0xce>
    803c:	251f      	movs	r5, #31
    803e:	0021      	movs	r1, r4
    8040:	426d      	negs	r5, r5
    8042:	1a28      	subs	r0, r5, r0
    8044:	40c1      	lsrs	r1, r0
    8046:	0008      	movs	r0, r1
    8048:	2a20      	cmp	r2, #32
    804a:	d01d      	beq.n	8088 <__aeabi_dmul+0x4d4>
    804c:	355f      	adds	r5, #95	; 0x5f
    804e:	1aaa      	subs	r2, r5, r2
    8050:	4094      	lsls	r4, r2
    8052:	4323      	orrs	r3, r4
    8054:	1e5c      	subs	r4, r3, #1
    8056:	41a3      	sbcs	r3, r4
    8058:	2507      	movs	r5, #7
    805a:	4303      	orrs	r3, r0
    805c:	401d      	ands	r5, r3
    805e:	2200      	movs	r2, #0
    8060:	2d00      	cmp	r5, #0
    8062:	d009      	beq.n	8078 <__aeabi_dmul+0x4c4>
    8064:	220f      	movs	r2, #15
    8066:	2400      	movs	r4, #0
    8068:	401a      	ands	r2, r3
    806a:	0018      	movs	r0, r3
    806c:	2a04      	cmp	r2, #4
    806e:	d1d6      	bne.n	801e <__aeabi_dmul+0x46a>
    8070:	0003      	movs	r3, r0
    8072:	0765      	lsls	r5, r4, #29
    8074:	0264      	lsls	r4, r4, #9
    8076:	0b22      	lsrs	r2, r4, #12
    8078:	08db      	lsrs	r3, r3, #3
    807a:	432b      	orrs	r3, r5
    807c:	2501      	movs	r5, #1
    807e:	4699      	mov	r9, r3
    8080:	9b01      	ldr	r3, [sp, #4]
    8082:	2400      	movs	r4, #0
    8084:	401d      	ands	r5, r3
    8086:	e5fc      	b.n	7c82 <__aeabi_dmul+0xce>
    8088:	2400      	movs	r4, #0
    808a:	e7e2      	b.n	8052 <__aeabi_dmul+0x49e>
    808c:	2280      	movs	r2, #128	; 0x80
    808e:	2501      	movs	r5, #1
    8090:	0312      	lsls	r2, r2, #12
    8092:	4322      	orrs	r2, r4
    8094:	9901      	ldr	r1, [sp, #4]
    8096:	0312      	lsls	r2, r2, #12
    8098:	0b12      	lsrs	r2, r2, #12
    809a:	400d      	ands	r5, r1
    809c:	4699      	mov	r9, r3
    809e:	4c04      	ldr	r4, [pc, #16]	; (80b0 <__aeabi_dmul+0x4fc>)
    80a0:	e5ef      	b.n	7c82 <__aeabi_dmul+0xce>
    80a2:	46c0      	nop			; (mov r8, r8)
    80a4:	000003ff 	.word	0x000003ff
    80a8:	feffffff 	.word	0xfeffffff
    80ac:	000007fe 	.word	0x000007fe
    80b0:	000007ff 	.word	0x000007ff

000080b4 <__aeabi_dsub>:
    80b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80b6:	4646      	mov	r6, r8
    80b8:	46d6      	mov	lr, sl
    80ba:	464f      	mov	r7, r9
    80bc:	030c      	lsls	r4, r1, #12
    80be:	b5c0      	push	{r6, r7, lr}
    80c0:	0fcd      	lsrs	r5, r1, #31
    80c2:	004e      	lsls	r6, r1, #1
    80c4:	0a61      	lsrs	r1, r4, #9
    80c6:	0f44      	lsrs	r4, r0, #29
    80c8:	430c      	orrs	r4, r1
    80ca:	00c1      	lsls	r1, r0, #3
    80cc:	0058      	lsls	r0, r3, #1
    80ce:	0d40      	lsrs	r0, r0, #21
    80d0:	4684      	mov	ip, r0
    80d2:	468a      	mov	sl, r1
    80d4:	000f      	movs	r7, r1
    80d6:	0319      	lsls	r1, r3, #12
    80d8:	0f50      	lsrs	r0, r2, #29
    80da:	0a49      	lsrs	r1, r1, #9
    80dc:	4301      	orrs	r1, r0
    80de:	48c6      	ldr	r0, [pc, #792]	; (83f8 <__aeabi_dsub+0x344>)
    80e0:	0d76      	lsrs	r6, r6, #21
    80e2:	46a8      	mov	r8, r5
    80e4:	0fdb      	lsrs	r3, r3, #31
    80e6:	00d2      	lsls	r2, r2, #3
    80e8:	4584      	cmp	ip, r0
    80ea:	d100      	bne.n	80ee <__aeabi_dsub+0x3a>
    80ec:	e0d8      	b.n	82a0 <__aeabi_dsub+0x1ec>
    80ee:	2001      	movs	r0, #1
    80f0:	4043      	eors	r3, r0
    80f2:	42ab      	cmp	r3, r5
    80f4:	d100      	bne.n	80f8 <__aeabi_dsub+0x44>
    80f6:	e0a6      	b.n	8246 <__aeabi_dsub+0x192>
    80f8:	4660      	mov	r0, ip
    80fa:	1a35      	subs	r5, r6, r0
    80fc:	2d00      	cmp	r5, #0
    80fe:	dc00      	bgt.n	8102 <__aeabi_dsub+0x4e>
    8100:	e105      	b.n	830e <__aeabi_dsub+0x25a>
    8102:	2800      	cmp	r0, #0
    8104:	d110      	bne.n	8128 <__aeabi_dsub+0x74>
    8106:	000b      	movs	r3, r1
    8108:	4313      	orrs	r3, r2
    810a:	d100      	bne.n	810e <__aeabi_dsub+0x5a>
    810c:	e0d7      	b.n	82be <__aeabi_dsub+0x20a>
    810e:	1e6b      	subs	r3, r5, #1
    8110:	2b00      	cmp	r3, #0
    8112:	d000      	beq.n	8116 <__aeabi_dsub+0x62>
    8114:	e14b      	b.n	83ae <__aeabi_dsub+0x2fa>
    8116:	4653      	mov	r3, sl
    8118:	1a9f      	subs	r7, r3, r2
    811a:	45ba      	cmp	sl, r7
    811c:	4180      	sbcs	r0, r0
    811e:	1a64      	subs	r4, r4, r1
    8120:	4240      	negs	r0, r0
    8122:	1a24      	subs	r4, r4, r0
    8124:	2601      	movs	r6, #1
    8126:	e01e      	b.n	8166 <__aeabi_dsub+0xb2>
    8128:	4bb3      	ldr	r3, [pc, #716]	; (83f8 <__aeabi_dsub+0x344>)
    812a:	429e      	cmp	r6, r3
    812c:	d048      	beq.n	81c0 <__aeabi_dsub+0x10c>
    812e:	2380      	movs	r3, #128	; 0x80
    8130:	041b      	lsls	r3, r3, #16
    8132:	4319      	orrs	r1, r3
    8134:	2d38      	cmp	r5, #56	; 0x38
    8136:	dd00      	ble.n	813a <__aeabi_dsub+0x86>
    8138:	e119      	b.n	836e <__aeabi_dsub+0x2ba>
    813a:	2d1f      	cmp	r5, #31
    813c:	dd00      	ble.n	8140 <__aeabi_dsub+0x8c>
    813e:	e14c      	b.n	83da <__aeabi_dsub+0x326>
    8140:	2320      	movs	r3, #32
    8142:	000f      	movs	r7, r1
    8144:	1b5b      	subs	r3, r3, r5
    8146:	0010      	movs	r0, r2
    8148:	409a      	lsls	r2, r3
    814a:	409f      	lsls	r7, r3
    814c:	40e8      	lsrs	r0, r5
    814e:	1e53      	subs	r3, r2, #1
    8150:	419a      	sbcs	r2, r3
    8152:	40e9      	lsrs	r1, r5
    8154:	4307      	orrs	r7, r0
    8156:	4317      	orrs	r7, r2
    8158:	4653      	mov	r3, sl
    815a:	1bdf      	subs	r7, r3, r7
    815c:	1a61      	subs	r1, r4, r1
    815e:	45ba      	cmp	sl, r7
    8160:	41a4      	sbcs	r4, r4
    8162:	4264      	negs	r4, r4
    8164:	1b0c      	subs	r4, r1, r4
    8166:	0223      	lsls	r3, r4, #8
    8168:	d400      	bmi.n	816c <__aeabi_dsub+0xb8>
    816a:	e0c5      	b.n	82f8 <__aeabi_dsub+0x244>
    816c:	0264      	lsls	r4, r4, #9
    816e:	0a65      	lsrs	r5, r4, #9
    8170:	2d00      	cmp	r5, #0
    8172:	d100      	bne.n	8176 <__aeabi_dsub+0xc2>
    8174:	e0f6      	b.n	8364 <__aeabi_dsub+0x2b0>
    8176:	0028      	movs	r0, r5
    8178:	f000 fc5c 	bl	8a34 <__clzsi2>
    817c:	0003      	movs	r3, r0
    817e:	3b08      	subs	r3, #8
    8180:	2b1f      	cmp	r3, #31
    8182:	dd00      	ble.n	8186 <__aeabi_dsub+0xd2>
    8184:	e0e9      	b.n	835a <__aeabi_dsub+0x2a6>
    8186:	2220      	movs	r2, #32
    8188:	003c      	movs	r4, r7
    818a:	1ad2      	subs	r2, r2, r3
    818c:	409d      	lsls	r5, r3
    818e:	40d4      	lsrs	r4, r2
    8190:	409f      	lsls	r7, r3
    8192:	4325      	orrs	r5, r4
    8194:	429e      	cmp	r6, r3
    8196:	dd00      	ble.n	819a <__aeabi_dsub+0xe6>
    8198:	e0db      	b.n	8352 <__aeabi_dsub+0x29e>
    819a:	1b9e      	subs	r6, r3, r6
    819c:	1c73      	adds	r3, r6, #1
    819e:	2b1f      	cmp	r3, #31
    81a0:	dd00      	ble.n	81a4 <__aeabi_dsub+0xf0>
    81a2:	e10a      	b.n	83ba <__aeabi_dsub+0x306>
    81a4:	2220      	movs	r2, #32
    81a6:	0038      	movs	r0, r7
    81a8:	1ad2      	subs	r2, r2, r3
    81aa:	0029      	movs	r1, r5
    81ac:	4097      	lsls	r7, r2
    81ae:	002c      	movs	r4, r5
    81b0:	4091      	lsls	r1, r2
    81b2:	40d8      	lsrs	r0, r3
    81b4:	1e7a      	subs	r2, r7, #1
    81b6:	4197      	sbcs	r7, r2
    81b8:	40dc      	lsrs	r4, r3
    81ba:	2600      	movs	r6, #0
    81bc:	4301      	orrs	r1, r0
    81be:	430f      	orrs	r7, r1
    81c0:	077b      	lsls	r3, r7, #29
    81c2:	d009      	beq.n	81d8 <__aeabi_dsub+0x124>
    81c4:	230f      	movs	r3, #15
    81c6:	403b      	ands	r3, r7
    81c8:	2b04      	cmp	r3, #4
    81ca:	d005      	beq.n	81d8 <__aeabi_dsub+0x124>
    81cc:	1d3b      	adds	r3, r7, #4
    81ce:	42bb      	cmp	r3, r7
    81d0:	41bf      	sbcs	r7, r7
    81d2:	427f      	negs	r7, r7
    81d4:	19e4      	adds	r4, r4, r7
    81d6:	001f      	movs	r7, r3
    81d8:	0223      	lsls	r3, r4, #8
    81da:	d525      	bpl.n	8228 <__aeabi_dsub+0x174>
    81dc:	4b86      	ldr	r3, [pc, #536]	; (83f8 <__aeabi_dsub+0x344>)
    81de:	3601      	adds	r6, #1
    81e0:	429e      	cmp	r6, r3
    81e2:	d100      	bne.n	81e6 <__aeabi_dsub+0x132>
    81e4:	e0af      	b.n	8346 <__aeabi_dsub+0x292>
    81e6:	4b85      	ldr	r3, [pc, #532]	; (83fc <__aeabi_dsub+0x348>)
    81e8:	2501      	movs	r5, #1
    81ea:	401c      	ands	r4, r3
    81ec:	4643      	mov	r3, r8
    81ee:	0762      	lsls	r2, r4, #29
    81f0:	08ff      	lsrs	r7, r7, #3
    81f2:	0264      	lsls	r4, r4, #9
    81f4:	0576      	lsls	r6, r6, #21
    81f6:	4317      	orrs	r7, r2
    81f8:	0b24      	lsrs	r4, r4, #12
    81fa:	0d76      	lsrs	r6, r6, #21
    81fc:	401d      	ands	r5, r3
    81fe:	2100      	movs	r1, #0
    8200:	0324      	lsls	r4, r4, #12
    8202:	0b23      	lsrs	r3, r4, #12
    8204:	0d0c      	lsrs	r4, r1, #20
    8206:	4a7e      	ldr	r2, [pc, #504]	; (8400 <__aeabi_dsub+0x34c>)
    8208:	0524      	lsls	r4, r4, #20
    820a:	431c      	orrs	r4, r3
    820c:	4014      	ands	r4, r2
    820e:	0533      	lsls	r3, r6, #20
    8210:	4323      	orrs	r3, r4
    8212:	005b      	lsls	r3, r3, #1
    8214:	07ed      	lsls	r5, r5, #31
    8216:	085b      	lsrs	r3, r3, #1
    8218:	432b      	orrs	r3, r5
    821a:	0038      	movs	r0, r7
    821c:	0019      	movs	r1, r3
    821e:	bc1c      	pop	{r2, r3, r4}
    8220:	4690      	mov	r8, r2
    8222:	4699      	mov	r9, r3
    8224:	46a2      	mov	sl, r4
    8226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8228:	2501      	movs	r5, #1
    822a:	4643      	mov	r3, r8
    822c:	0762      	lsls	r2, r4, #29
    822e:	08ff      	lsrs	r7, r7, #3
    8230:	4317      	orrs	r7, r2
    8232:	08e4      	lsrs	r4, r4, #3
    8234:	401d      	ands	r5, r3
    8236:	4b70      	ldr	r3, [pc, #448]	; (83f8 <__aeabi_dsub+0x344>)
    8238:	429e      	cmp	r6, r3
    823a:	d036      	beq.n	82aa <__aeabi_dsub+0x1f6>
    823c:	0324      	lsls	r4, r4, #12
    823e:	0576      	lsls	r6, r6, #21
    8240:	0b24      	lsrs	r4, r4, #12
    8242:	0d76      	lsrs	r6, r6, #21
    8244:	e7db      	b.n	81fe <__aeabi_dsub+0x14a>
    8246:	4663      	mov	r3, ip
    8248:	1af3      	subs	r3, r6, r3
    824a:	2b00      	cmp	r3, #0
    824c:	dc00      	bgt.n	8250 <__aeabi_dsub+0x19c>
    824e:	e094      	b.n	837a <__aeabi_dsub+0x2c6>
    8250:	4660      	mov	r0, ip
    8252:	2800      	cmp	r0, #0
    8254:	d035      	beq.n	82c2 <__aeabi_dsub+0x20e>
    8256:	4868      	ldr	r0, [pc, #416]	; (83f8 <__aeabi_dsub+0x344>)
    8258:	4286      	cmp	r6, r0
    825a:	d0b1      	beq.n	81c0 <__aeabi_dsub+0x10c>
    825c:	2780      	movs	r7, #128	; 0x80
    825e:	043f      	lsls	r7, r7, #16
    8260:	4339      	orrs	r1, r7
    8262:	2b38      	cmp	r3, #56	; 0x38
    8264:	dc00      	bgt.n	8268 <__aeabi_dsub+0x1b4>
    8266:	e0fd      	b.n	8464 <__aeabi_dsub+0x3b0>
    8268:	430a      	orrs	r2, r1
    826a:	0017      	movs	r7, r2
    826c:	2100      	movs	r1, #0
    826e:	1e7a      	subs	r2, r7, #1
    8270:	4197      	sbcs	r7, r2
    8272:	4457      	add	r7, sl
    8274:	4557      	cmp	r7, sl
    8276:	4180      	sbcs	r0, r0
    8278:	1909      	adds	r1, r1, r4
    827a:	4244      	negs	r4, r0
    827c:	190c      	adds	r4, r1, r4
    827e:	0223      	lsls	r3, r4, #8
    8280:	d53a      	bpl.n	82f8 <__aeabi_dsub+0x244>
    8282:	4b5d      	ldr	r3, [pc, #372]	; (83f8 <__aeabi_dsub+0x344>)
    8284:	3601      	adds	r6, #1
    8286:	429e      	cmp	r6, r3
    8288:	d100      	bne.n	828c <__aeabi_dsub+0x1d8>
    828a:	e14b      	b.n	8524 <__aeabi_dsub+0x470>
    828c:	2201      	movs	r2, #1
    828e:	4b5b      	ldr	r3, [pc, #364]	; (83fc <__aeabi_dsub+0x348>)
    8290:	401c      	ands	r4, r3
    8292:	087b      	lsrs	r3, r7, #1
    8294:	4017      	ands	r7, r2
    8296:	431f      	orrs	r7, r3
    8298:	07e2      	lsls	r2, r4, #31
    829a:	4317      	orrs	r7, r2
    829c:	0864      	lsrs	r4, r4, #1
    829e:	e78f      	b.n	81c0 <__aeabi_dsub+0x10c>
    82a0:	0008      	movs	r0, r1
    82a2:	4310      	orrs	r0, r2
    82a4:	d000      	beq.n	82a8 <__aeabi_dsub+0x1f4>
    82a6:	e724      	b.n	80f2 <__aeabi_dsub+0x3e>
    82a8:	e721      	b.n	80ee <__aeabi_dsub+0x3a>
    82aa:	0023      	movs	r3, r4
    82ac:	433b      	orrs	r3, r7
    82ae:	d100      	bne.n	82b2 <__aeabi_dsub+0x1fe>
    82b0:	e1b9      	b.n	8626 <__aeabi_dsub+0x572>
    82b2:	2280      	movs	r2, #128	; 0x80
    82b4:	0312      	lsls	r2, r2, #12
    82b6:	4314      	orrs	r4, r2
    82b8:	0324      	lsls	r4, r4, #12
    82ba:	0b24      	lsrs	r4, r4, #12
    82bc:	e79f      	b.n	81fe <__aeabi_dsub+0x14a>
    82be:	002e      	movs	r6, r5
    82c0:	e77e      	b.n	81c0 <__aeabi_dsub+0x10c>
    82c2:	0008      	movs	r0, r1
    82c4:	4310      	orrs	r0, r2
    82c6:	d100      	bne.n	82ca <__aeabi_dsub+0x216>
    82c8:	e0ca      	b.n	8460 <__aeabi_dsub+0x3ac>
    82ca:	1e58      	subs	r0, r3, #1
    82cc:	4684      	mov	ip, r0
    82ce:	2800      	cmp	r0, #0
    82d0:	d000      	beq.n	82d4 <__aeabi_dsub+0x220>
    82d2:	e0e7      	b.n	84a4 <__aeabi_dsub+0x3f0>
    82d4:	4452      	add	r2, sl
    82d6:	4552      	cmp	r2, sl
    82d8:	4180      	sbcs	r0, r0
    82da:	1864      	adds	r4, r4, r1
    82dc:	4240      	negs	r0, r0
    82de:	1824      	adds	r4, r4, r0
    82e0:	0017      	movs	r7, r2
    82e2:	2601      	movs	r6, #1
    82e4:	0223      	lsls	r3, r4, #8
    82e6:	d507      	bpl.n	82f8 <__aeabi_dsub+0x244>
    82e8:	2602      	movs	r6, #2
    82ea:	e7cf      	b.n	828c <__aeabi_dsub+0x1d8>
    82ec:	4664      	mov	r4, ip
    82ee:	432c      	orrs	r4, r5
    82f0:	d100      	bne.n	82f4 <__aeabi_dsub+0x240>
    82f2:	e1b3      	b.n	865c <__aeabi_dsub+0x5a8>
    82f4:	002c      	movs	r4, r5
    82f6:	4667      	mov	r7, ip
    82f8:	077b      	lsls	r3, r7, #29
    82fa:	d000      	beq.n	82fe <__aeabi_dsub+0x24a>
    82fc:	e762      	b.n	81c4 <__aeabi_dsub+0x110>
    82fe:	0763      	lsls	r3, r4, #29
    8300:	08ff      	lsrs	r7, r7, #3
    8302:	431f      	orrs	r7, r3
    8304:	2501      	movs	r5, #1
    8306:	4643      	mov	r3, r8
    8308:	08e4      	lsrs	r4, r4, #3
    830a:	401d      	ands	r5, r3
    830c:	e793      	b.n	8236 <__aeabi_dsub+0x182>
    830e:	2d00      	cmp	r5, #0
    8310:	d178      	bne.n	8404 <__aeabi_dsub+0x350>
    8312:	1c75      	adds	r5, r6, #1
    8314:	056d      	lsls	r5, r5, #21
    8316:	0d6d      	lsrs	r5, r5, #21
    8318:	2d01      	cmp	r5, #1
    831a:	dc00      	bgt.n	831e <__aeabi_dsub+0x26a>
    831c:	e0f2      	b.n	8504 <__aeabi_dsub+0x450>
    831e:	4650      	mov	r0, sl
    8320:	1a80      	subs	r0, r0, r2
    8322:	4582      	cmp	sl, r0
    8324:	41bf      	sbcs	r7, r7
    8326:	1a65      	subs	r5, r4, r1
    8328:	427f      	negs	r7, r7
    832a:	1bed      	subs	r5, r5, r7
    832c:	4684      	mov	ip, r0
    832e:	0228      	lsls	r0, r5, #8
    8330:	d400      	bmi.n	8334 <__aeabi_dsub+0x280>
    8332:	e08c      	b.n	844e <__aeabi_dsub+0x39a>
    8334:	4650      	mov	r0, sl
    8336:	1a17      	subs	r7, r2, r0
    8338:	42ba      	cmp	r2, r7
    833a:	4192      	sbcs	r2, r2
    833c:	1b0c      	subs	r4, r1, r4
    833e:	4255      	negs	r5, r2
    8340:	1b65      	subs	r5, r4, r5
    8342:	4698      	mov	r8, r3
    8344:	e714      	b.n	8170 <__aeabi_dsub+0xbc>
    8346:	2501      	movs	r5, #1
    8348:	4643      	mov	r3, r8
    834a:	2400      	movs	r4, #0
    834c:	401d      	ands	r5, r3
    834e:	2700      	movs	r7, #0
    8350:	e755      	b.n	81fe <__aeabi_dsub+0x14a>
    8352:	4c2a      	ldr	r4, [pc, #168]	; (83fc <__aeabi_dsub+0x348>)
    8354:	1af6      	subs	r6, r6, r3
    8356:	402c      	ands	r4, r5
    8358:	e732      	b.n	81c0 <__aeabi_dsub+0x10c>
    835a:	003d      	movs	r5, r7
    835c:	3828      	subs	r0, #40	; 0x28
    835e:	4085      	lsls	r5, r0
    8360:	2700      	movs	r7, #0
    8362:	e717      	b.n	8194 <__aeabi_dsub+0xe0>
    8364:	0038      	movs	r0, r7
    8366:	f000 fb65 	bl	8a34 <__clzsi2>
    836a:	3020      	adds	r0, #32
    836c:	e706      	b.n	817c <__aeabi_dsub+0xc8>
    836e:	430a      	orrs	r2, r1
    8370:	0017      	movs	r7, r2
    8372:	2100      	movs	r1, #0
    8374:	1e7a      	subs	r2, r7, #1
    8376:	4197      	sbcs	r7, r2
    8378:	e6ee      	b.n	8158 <__aeabi_dsub+0xa4>
    837a:	2b00      	cmp	r3, #0
    837c:	d000      	beq.n	8380 <__aeabi_dsub+0x2cc>
    837e:	e0e5      	b.n	854c <__aeabi_dsub+0x498>
    8380:	1c73      	adds	r3, r6, #1
    8382:	469c      	mov	ip, r3
    8384:	055b      	lsls	r3, r3, #21
    8386:	0d5b      	lsrs	r3, r3, #21
    8388:	2b01      	cmp	r3, #1
    838a:	dc00      	bgt.n	838e <__aeabi_dsub+0x2da>
    838c:	e09f      	b.n	84ce <__aeabi_dsub+0x41a>
    838e:	4b1a      	ldr	r3, [pc, #104]	; (83f8 <__aeabi_dsub+0x344>)
    8390:	459c      	cmp	ip, r3
    8392:	d100      	bne.n	8396 <__aeabi_dsub+0x2e2>
    8394:	e0c5      	b.n	8522 <__aeabi_dsub+0x46e>
    8396:	4452      	add	r2, sl
    8398:	4552      	cmp	r2, sl
    839a:	4180      	sbcs	r0, r0
    839c:	1864      	adds	r4, r4, r1
    839e:	4240      	negs	r0, r0
    83a0:	1824      	adds	r4, r4, r0
    83a2:	07e7      	lsls	r7, r4, #31
    83a4:	0852      	lsrs	r2, r2, #1
    83a6:	4317      	orrs	r7, r2
    83a8:	0864      	lsrs	r4, r4, #1
    83aa:	4666      	mov	r6, ip
    83ac:	e708      	b.n	81c0 <__aeabi_dsub+0x10c>
    83ae:	4812      	ldr	r0, [pc, #72]	; (83f8 <__aeabi_dsub+0x344>)
    83b0:	4285      	cmp	r5, r0
    83b2:	d100      	bne.n	83b6 <__aeabi_dsub+0x302>
    83b4:	e085      	b.n	84c2 <__aeabi_dsub+0x40e>
    83b6:	001d      	movs	r5, r3
    83b8:	e6bc      	b.n	8134 <__aeabi_dsub+0x80>
    83ba:	0029      	movs	r1, r5
    83bc:	3e1f      	subs	r6, #31
    83be:	40f1      	lsrs	r1, r6
    83c0:	2b20      	cmp	r3, #32
    83c2:	d100      	bne.n	83c6 <__aeabi_dsub+0x312>
    83c4:	e07f      	b.n	84c6 <__aeabi_dsub+0x412>
    83c6:	2240      	movs	r2, #64	; 0x40
    83c8:	1ad3      	subs	r3, r2, r3
    83ca:	409d      	lsls	r5, r3
    83cc:	432f      	orrs	r7, r5
    83ce:	1e7d      	subs	r5, r7, #1
    83d0:	41af      	sbcs	r7, r5
    83d2:	2400      	movs	r4, #0
    83d4:	430f      	orrs	r7, r1
    83d6:	2600      	movs	r6, #0
    83d8:	e78e      	b.n	82f8 <__aeabi_dsub+0x244>
    83da:	002b      	movs	r3, r5
    83dc:	000f      	movs	r7, r1
    83de:	3b20      	subs	r3, #32
    83e0:	40df      	lsrs	r7, r3
    83e2:	2d20      	cmp	r5, #32
    83e4:	d071      	beq.n	84ca <__aeabi_dsub+0x416>
    83e6:	2340      	movs	r3, #64	; 0x40
    83e8:	1b5d      	subs	r5, r3, r5
    83ea:	40a9      	lsls	r1, r5
    83ec:	430a      	orrs	r2, r1
    83ee:	1e51      	subs	r1, r2, #1
    83f0:	418a      	sbcs	r2, r1
    83f2:	2100      	movs	r1, #0
    83f4:	4317      	orrs	r7, r2
    83f6:	e6af      	b.n	8158 <__aeabi_dsub+0xa4>
    83f8:	000007ff 	.word	0x000007ff
    83fc:	ff7fffff 	.word	0xff7fffff
    8400:	800fffff 	.word	0x800fffff
    8404:	2e00      	cmp	r6, #0
    8406:	d03e      	beq.n	8486 <__aeabi_dsub+0x3d2>
    8408:	4eb3      	ldr	r6, [pc, #716]	; (86d8 <__aeabi_dsub+0x624>)
    840a:	45b4      	cmp	ip, r6
    840c:	d045      	beq.n	849a <__aeabi_dsub+0x3e6>
    840e:	2680      	movs	r6, #128	; 0x80
    8410:	0436      	lsls	r6, r6, #16
    8412:	426d      	negs	r5, r5
    8414:	4334      	orrs	r4, r6
    8416:	2d38      	cmp	r5, #56	; 0x38
    8418:	dd00      	ble.n	841c <__aeabi_dsub+0x368>
    841a:	e0a8      	b.n	856e <__aeabi_dsub+0x4ba>
    841c:	2d1f      	cmp	r5, #31
    841e:	dd00      	ble.n	8422 <__aeabi_dsub+0x36e>
    8420:	e11f      	b.n	8662 <__aeabi_dsub+0x5ae>
    8422:	2620      	movs	r6, #32
    8424:	0027      	movs	r7, r4
    8426:	4650      	mov	r0, sl
    8428:	1b76      	subs	r6, r6, r5
    842a:	40b7      	lsls	r7, r6
    842c:	40e8      	lsrs	r0, r5
    842e:	4307      	orrs	r7, r0
    8430:	4650      	mov	r0, sl
    8432:	40b0      	lsls	r0, r6
    8434:	1e46      	subs	r6, r0, #1
    8436:	41b0      	sbcs	r0, r6
    8438:	40ec      	lsrs	r4, r5
    843a:	4338      	orrs	r0, r7
    843c:	1a17      	subs	r7, r2, r0
    843e:	42ba      	cmp	r2, r7
    8440:	4192      	sbcs	r2, r2
    8442:	1b0c      	subs	r4, r1, r4
    8444:	4252      	negs	r2, r2
    8446:	1aa4      	subs	r4, r4, r2
    8448:	4666      	mov	r6, ip
    844a:	4698      	mov	r8, r3
    844c:	e68b      	b.n	8166 <__aeabi_dsub+0xb2>
    844e:	4664      	mov	r4, ip
    8450:	4667      	mov	r7, ip
    8452:	432c      	orrs	r4, r5
    8454:	d000      	beq.n	8458 <__aeabi_dsub+0x3a4>
    8456:	e68b      	b.n	8170 <__aeabi_dsub+0xbc>
    8458:	2500      	movs	r5, #0
    845a:	2600      	movs	r6, #0
    845c:	2700      	movs	r7, #0
    845e:	e6ea      	b.n	8236 <__aeabi_dsub+0x182>
    8460:	001e      	movs	r6, r3
    8462:	e6ad      	b.n	81c0 <__aeabi_dsub+0x10c>
    8464:	2b1f      	cmp	r3, #31
    8466:	dc60      	bgt.n	852a <__aeabi_dsub+0x476>
    8468:	2720      	movs	r7, #32
    846a:	1af8      	subs	r0, r7, r3
    846c:	000f      	movs	r7, r1
    846e:	4684      	mov	ip, r0
    8470:	4087      	lsls	r7, r0
    8472:	0010      	movs	r0, r2
    8474:	40d8      	lsrs	r0, r3
    8476:	4307      	orrs	r7, r0
    8478:	4660      	mov	r0, ip
    847a:	4082      	lsls	r2, r0
    847c:	1e50      	subs	r0, r2, #1
    847e:	4182      	sbcs	r2, r0
    8480:	40d9      	lsrs	r1, r3
    8482:	4317      	orrs	r7, r2
    8484:	e6f5      	b.n	8272 <__aeabi_dsub+0x1be>
    8486:	0026      	movs	r6, r4
    8488:	4650      	mov	r0, sl
    848a:	4306      	orrs	r6, r0
    848c:	d005      	beq.n	849a <__aeabi_dsub+0x3e6>
    848e:	43ed      	mvns	r5, r5
    8490:	2d00      	cmp	r5, #0
    8492:	d0d3      	beq.n	843c <__aeabi_dsub+0x388>
    8494:	4e90      	ldr	r6, [pc, #576]	; (86d8 <__aeabi_dsub+0x624>)
    8496:	45b4      	cmp	ip, r6
    8498:	d1bd      	bne.n	8416 <__aeabi_dsub+0x362>
    849a:	000c      	movs	r4, r1
    849c:	0017      	movs	r7, r2
    849e:	4666      	mov	r6, ip
    84a0:	4698      	mov	r8, r3
    84a2:	e68d      	b.n	81c0 <__aeabi_dsub+0x10c>
    84a4:	488c      	ldr	r0, [pc, #560]	; (86d8 <__aeabi_dsub+0x624>)
    84a6:	4283      	cmp	r3, r0
    84a8:	d00b      	beq.n	84c2 <__aeabi_dsub+0x40e>
    84aa:	4663      	mov	r3, ip
    84ac:	e6d9      	b.n	8262 <__aeabi_dsub+0x1ae>
    84ae:	2d00      	cmp	r5, #0
    84b0:	d000      	beq.n	84b4 <__aeabi_dsub+0x400>
    84b2:	e096      	b.n	85e2 <__aeabi_dsub+0x52e>
    84b4:	0008      	movs	r0, r1
    84b6:	4310      	orrs	r0, r2
    84b8:	d100      	bne.n	84bc <__aeabi_dsub+0x408>
    84ba:	e0e2      	b.n	8682 <__aeabi_dsub+0x5ce>
    84bc:	000c      	movs	r4, r1
    84be:	0017      	movs	r7, r2
    84c0:	4698      	mov	r8, r3
    84c2:	4e85      	ldr	r6, [pc, #532]	; (86d8 <__aeabi_dsub+0x624>)
    84c4:	e67c      	b.n	81c0 <__aeabi_dsub+0x10c>
    84c6:	2500      	movs	r5, #0
    84c8:	e780      	b.n	83cc <__aeabi_dsub+0x318>
    84ca:	2100      	movs	r1, #0
    84cc:	e78e      	b.n	83ec <__aeabi_dsub+0x338>
    84ce:	0023      	movs	r3, r4
    84d0:	4650      	mov	r0, sl
    84d2:	4303      	orrs	r3, r0
    84d4:	2e00      	cmp	r6, #0
    84d6:	d000      	beq.n	84da <__aeabi_dsub+0x426>
    84d8:	e0a8      	b.n	862c <__aeabi_dsub+0x578>
    84da:	2b00      	cmp	r3, #0
    84dc:	d100      	bne.n	84e0 <__aeabi_dsub+0x42c>
    84de:	e0de      	b.n	869e <__aeabi_dsub+0x5ea>
    84e0:	000b      	movs	r3, r1
    84e2:	4313      	orrs	r3, r2
    84e4:	d100      	bne.n	84e8 <__aeabi_dsub+0x434>
    84e6:	e66b      	b.n	81c0 <__aeabi_dsub+0x10c>
    84e8:	4452      	add	r2, sl
    84ea:	4552      	cmp	r2, sl
    84ec:	4180      	sbcs	r0, r0
    84ee:	1864      	adds	r4, r4, r1
    84f0:	4240      	negs	r0, r0
    84f2:	1824      	adds	r4, r4, r0
    84f4:	0017      	movs	r7, r2
    84f6:	0223      	lsls	r3, r4, #8
    84f8:	d400      	bmi.n	84fc <__aeabi_dsub+0x448>
    84fa:	e6fd      	b.n	82f8 <__aeabi_dsub+0x244>
    84fc:	4b77      	ldr	r3, [pc, #476]	; (86dc <__aeabi_dsub+0x628>)
    84fe:	4666      	mov	r6, ip
    8500:	401c      	ands	r4, r3
    8502:	e65d      	b.n	81c0 <__aeabi_dsub+0x10c>
    8504:	0025      	movs	r5, r4
    8506:	4650      	mov	r0, sl
    8508:	4305      	orrs	r5, r0
    850a:	2e00      	cmp	r6, #0
    850c:	d1cf      	bne.n	84ae <__aeabi_dsub+0x3fa>
    850e:	2d00      	cmp	r5, #0
    8510:	d14f      	bne.n	85b2 <__aeabi_dsub+0x4fe>
    8512:	000c      	movs	r4, r1
    8514:	4314      	orrs	r4, r2
    8516:	d100      	bne.n	851a <__aeabi_dsub+0x466>
    8518:	e0a0      	b.n	865c <__aeabi_dsub+0x5a8>
    851a:	000c      	movs	r4, r1
    851c:	0017      	movs	r7, r2
    851e:	4698      	mov	r8, r3
    8520:	e64e      	b.n	81c0 <__aeabi_dsub+0x10c>
    8522:	4666      	mov	r6, ip
    8524:	2400      	movs	r4, #0
    8526:	2700      	movs	r7, #0
    8528:	e685      	b.n	8236 <__aeabi_dsub+0x182>
    852a:	001f      	movs	r7, r3
    852c:	0008      	movs	r0, r1
    852e:	3f20      	subs	r7, #32
    8530:	40f8      	lsrs	r0, r7
    8532:	0007      	movs	r7, r0
    8534:	2b20      	cmp	r3, #32
    8536:	d100      	bne.n	853a <__aeabi_dsub+0x486>
    8538:	e08e      	b.n	8658 <__aeabi_dsub+0x5a4>
    853a:	2040      	movs	r0, #64	; 0x40
    853c:	1ac3      	subs	r3, r0, r3
    853e:	4099      	lsls	r1, r3
    8540:	430a      	orrs	r2, r1
    8542:	1e51      	subs	r1, r2, #1
    8544:	418a      	sbcs	r2, r1
    8546:	2100      	movs	r1, #0
    8548:	4317      	orrs	r7, r2
    854a:	e692      	b.n	8272 <__aeabi_dsub+0x1be>
    854c:	2e00      	cmp	r6, #0
    854e:	d114      	bne.n	857a <__aeabi_dsub+0x4c6>
    8550:	0026      	movs	r6, r4
    8552:	4650      	mov	r0, sl
    8554:	4306      	orrs	r6, r0
    8556:	d062      	beq.n	861e <__aeabi_dsub+0x56a>
    8558:	43db      	mvns	r3, r3
    855a:	2b00      	cmp	r3, #0
    855c:	d15c      	bne.n	8618 <__aeabi_dsub+0x564>
    855e:	1887      	adds	r7, r0, r2
    8560:	4297      	cmp	r7, r2
    8562:	4192      	sbcs	r2, r2
    8564:	1864      	adds	r4, r4, r1
    8566:	4252      	negs	r2, r2
    8568:	18a4      	adds	r4, r4, r2
    856a:	4666      	mov	r6, ip
    856c:	e687      	b.n	827e <__aeabi_dsub+0x1ca>
    856e:	4650      	mov	r0, sl
    8570:	4320      	orrs	r0, r4
    8572:	1e44      	subs	r4, r0, #1
    8574:	41a0      	sbcs	r0, r4
    8576:	2400      	movs	r4, #0
    8578:	e760      	b.n	843c <__aeabi_dsub+0x388>
    857a:	4e57      	ldr	r6, [pc, #348]	; (86d8 <__aeabi_dsub+0x624>)
    857c:	45b4      	cmp	ip, r6
    857e:	d04e      	beq.n	861e <__aeabi_dsub+0x56a>
    8580:	2680      	movs	r6, #128	; 0x80
    8582:	0436      	lsls	r6, r6, #16
    8584:	425b      	negs	r3, r3
    8586:	4334      	orrs	r4, r6
    8588:	2b38      	cmp	r3, #56	; 0x38
    858a:	dd00      	ble.n	858e <__aeabi_dsub+0x4da>
    858c:	e07f      	b.n	868e <__aeabi_dsub+0x5da>
    858e:	2b1f      	cmp	r3, #31
    8590:	dd00      	ble.n	8594 <__aeabi_dsub+0x4e0>
    8592:	e08b      	b.n	86ac <__aeabi_dsub+0x5f8>
    8594:	2620      	movs	r6, #32
    8596:	0027      	movs	r7, r4
    8598:	4650      	mov	r0, sl
    859a:	1af6      	subs	r6, r6, r3
    859c:	40b7      	lsls	r7, r6
    859e:	40d8      	lsrs	r0, r3
    85a0:	4307      	orrs	r7, r0
    85a2:	4650      	mov	r0, sl
    85a4:	40b0      	lsls	r0, r6
    85a6:	1e46      	subs	r6, r0, #1
    85a8:	41b0      	sbcs	r0, r6
    85aa:	4307      	orrs	r7, r0
    85ac:	40dc      	lsrs	r4, r3
    85ae:	18bf      	adds	r7, r7, r2
    85b0:	e7d6      	b.n	8560 <__aeabi_dsub+0x4ac>
    85b2:	000d      	movs	r5, r1
    85b4:	4315      	orrs	r5, r2
    85b6:	d100      	bne.n	85ba <__aeabi_dsub+0x506>
    85b8:	e602      	b.n	81c0 <__aeabi_dsub+0x10c>
    85ba:	4650      	mov	r0, sl
    85bc:	1a80      	subs	r0, r0, r2
    85be:	4582      	cmp	sl, r0
    85c0:	41bf      	sbcs	r7, r7
    85c2:	1a65      	subs	r5, r4, r1
    85c4:	427f      	negs	r7, r7
    85c6:	1bed      	subs	r5, r5, r7
    85c8:	4684      	mov	ip, r0
    85ca:	0228      	lsls	r0, r5, #8
    85cc:	d400      	bmi.n	85d0 <__aeabi_dsub+0x51c>
    85ce:	e68d      	b.n	82ec <__aeabi_dsub+0x238>
    85d0:	4650      	mov	r0, sl
    85d2:	1a17      	subs	r7, r2, r0
    85d4:	42ba      	cmp	r2, r7
    85d6:	4192      	sbcs	r2, r2
    85d8:	1b0c      	subs	r4, r1, r4
    85da:	4252      	negs	r2, r2
    85dc:	1aa4      	subs	r4, r4, r2
    85de:	4698      	mov	r8, r3
    85e0:	e5ee      	b.n	81c0 <__aeabi_dsub+0x10c>
    85e2:	000d      	movs	r5, r1
    85e4:	4315      	orrs	r5, r2
    85e6:	d100      	bne.n	85ea <__aeabi_dsub+0x536>
    85e8:	e76b      	b.n	84c2 <__aeabi_dsub+0x40e>
    85ea:	4650      	mov	r0, sl
    85ec:	0767      	lsls	r7, r4, #29
    85ee:	08c0      	lsrs	r0, r0, #3
    85f0:	4307      	orrs	r7, r0
    85f2:	2080      	movs	r0, #128	; 0x80
    85f4:	08e4      	lsrs	r4, r4, #3
    85f6:	0300      	lsls	r0, r0, #12
    85f8:	4204      	tst	r4, r0
    85fa:	d007      	beq.n	860c <__aeabi_dsub+0x558>
    85fc:	08cd      	lsrs	r5, r1, #3
    85fe:	4205      	tst	r5, r0
    8600:	d104      	bne.n	860c <__aeabi_dsub+0x558>
    8602:	002c      	movs	r4, r5
    8604:	4698      	mov	r8, r3
    8606:	08d7      	lsrs	r7, r2, #3
    8608:	0749      	lsls	r1, r1, #29
    860a:	430f      	orrs	r7, r1
    860c:	0f7b      	lsrs	r3, r7, #29
    860e:	00e4      	lsls	r4, r4, #3
    8610:	431c      	orrs	r4, r3
    8612:	00ff      	lsls	r7, r7, #3
    8614:	4e30      	ldr	r6, [pc, #192]	; (86d8 <__aeabi_dsub+0x624>)
    8616:	e5d3      	b.n	81c0 <__aeabi_dsub+0x10c>
    8618:	4e2f      	ldr	r6, [pc, #188]	; (86d8 <__aeabi_dsub+0x624>)
    861a:	45b4      	cmp	ip, r6
    861c:	d1b4      	bne.n	8588 <__aeabi_dsub+0x4d4>
    861e:	000c      	movs	r4, r1
    8620:	0017      	movs	r7, r2
    8622:	4666      	mov	r6, ip
    8624:	e5cc      	b.n	81c0 <__aeabi_dsub+0x10c>
    8626:	2700      	movs	r7, #0
    8628:	2400      	movs	r4, #0
    862a:	e5e8      	b.n	81fe <__aeabi_dsub+0x14a>
    862c:	2b00      	cmp	r3, #0
    862e:	d039      	beq.n	86a4 <__aeabi_dsub+0x5f0>
    8630:	000b      	movs	r3, r1
    8632:	4313      	orrs	r3, r2
    8634:	d100      	bne.n	8638 <__aeabi_dsub+0x584>
    8636:	e744      	b.n	84c2 <__aeabi_dsub+0x40e>
    8638:	08c0      	lsrs	r0, r0, #3
    863a:	0767      	lsls	r7, r4, #29
    863c:	4307      	orrs	r7, r0
    863e:	2080      	movs	r0, #128	; 0x80
    8640:	08e4      	lsrs	r4, r4, #3
    8642:	0300      	lsls	r0, r0, #12
    8644:	4204      	tst	r4, r0
    8646:	d0e1      	beq.n	860c <__aeabi_dsub+0x558>
    8648:	08cb      	lsrs	r3, r1, #3
    864a:	4203      	tst	r3, r0
    864c:	d1de      	bne.n	860c <__aeabi_dsub+0x558>
    864e:	08d7      	lsrs	r7, r2, #3
    8650:	0749      	lsls	r1, r1, #29
    8652:	430f      	orrs	r7, r1
    8654:	001c      	movs	r4, r3
    8656:	e7d9      	b.n	860c <__aeabi_dsub+0x558>
    8658:	2100      	movs	r1, #0
    865a:	e771      	b.n	8540 <__aeabi_dsub+0x48c>
    865c:	2500      	movs	r5, #0
    865e:	2700      	movs	r7, #0
    8660:	e5e9      	b.n	8236 <__aeabi_dsub+0x182>
    8662:	002e      	movs	r6, r5
    8664:	0027      	movs	r7, r4
    8666:	3e20      	subs	r6, #32
    8668:	40f7      	lsrs	r7, r6
    866a:	2d20      	cmp	r5, #32
    866c:	d02f      	beq.n	86ce <__aeabi_dsub+0x61a>
    866e:	2640      	movs	r6, #64	; 0x40
    8670:	1b75      	subs	r5, r6, r5
    8672:	40ac      	lsls	r4, r5
    8674:	4650      	mov	r0, sl
    8676:	4320      	orrs	r0, r4
    8678:	1e44      	subs	r4, r0, #1
    867a:	41a0      	sbcs	r0, r4
    867c:	2400      	movs	r4, #0
    867e:	4338      	orrs	r0, r7
    8680:	e6dc      	b.n	843c <__aeabi_dsub+0x388>
    8682:	2480      	movs	r4, #128	; 0x80
    8684:	2500      	movs	r5, #0
    8686:	0324      	lsls	r4, r4, #12
    8688:	4e13      	ldr	r6, [pc, #76]	; (86d8 <__aeabi_dsub+0x624>)
    868a:	2700      	movs	r7, #0
    868c:	e5d3      	b.n	8236 <__aeabi_dsub+0x182>
    868e:	4650      	mov	r0, sl
    8690:	4320      	orrs	r0, r4
    8692:	0007      	movs	r7, r0
    8694:	1e78      	subs	r0, r7, #1
    8696:	4187      	sbcs	r7, r0
    8698:	2400      	movs	r4, #0
    869a:	18bf      	adds	r7, r7, r2
    869c:	e760      	b.n	8560 <__aeabi_dsub+0x4ac>
    869e:	000c      	movs	r4, r1
    86a0:	0017      	movs	r7, r2
    86a2:	e58d      	b.n	81c0 <__aeabi_dsub+0x10c>
    86a4:	000c      	movs	r4, r1
    86a6:	0017      	movs	r7, r2
    86a8:	4e0b      	ldr	r6, [pc, #44]	; (86d8 <__aeabi_dsub+0x624>)
    86aa:	e589      	b.n	81c0 <__aeabi_dsub+0x10c>
    86ac:	001e      	movs	r6, r3
    86ae:	0027      	movs	r7, r4
    86b0:	3e20      	subs	r6, #32
    86b2:	40f7      	lsrs	r7, r6
    86b4:	2b20      	cmp	r3, #32
    86b6:	d00c      	beq.n	86d2 <__aeabi_dsub+0x61e>
    86b8:	2640      	movs	r6, #64	; 0x40
    86ba:	1af3      	subs	r3, r6, r3
    86bc:	409c      	lsls	r4, r3
    86be:	4650      	mov	r0, sl
    86c0:	4320      	orrs	r0, r4
    86c2:	1e44      	subs	r4, r0, #1
    86c4:	41a0      	sbcs	r0, r4
    86c6:	4307      	orrs	r7, r0
    86c8:	2400      	movs	r4, #0
    86ca:	18bf      	adds	r7, r7, r2
    86cc:	e748      	b.n	8560 <__aeabi_dsub+0x4ac>
    86ce:	2400      	movs	r4, #0
    86d0:	e7d0      	b.n	8674 <__aeabi_dsub+0x5c0>
    86d2:	2400      	movs	r4, #0
    86d4:	e7f3      	b.n	86be <__aeabi_dsub+0x60a>
    86d6:	46c0      	nop			; (mov r8, r8)
    86d8:	000007ff 	.word	0x000007ff
    86dc:	ff7fffff 	.word	0xff7fffff

000086e0 <__aeabi_dcmpun>:
    86e0:	b570      	push	{r4, r5, r6, lr}
    86e2:	4e0e      	ldr	r6, [pc, #56]	; (871c <__aeabi_dcmpun+0x3c>)
    86e4:	030d      	lsls	r5, r1, #12
    86e6:	031c      	lsls	r4, r3, #12
    86e8:	0049      	lsls	r1, r1, #1
    86ea:	005b      	lsls	r3, r3, #1
    86ec:	0b2d      	lsrs	r5, r5, #12
    86ee:	0d49      	lsrs	r1, r1, #21
    86f0:	0b24      	lsrs	r4, r4, #12
    86f2:	0d5b      	lsrs	r3, r3, #21
    86f4:	42b1      	cmp	r1, r6
    86f6:	d004      	beq.n	8702 <__aeabi_dcmpun+0x22>
    86f8:	4908      	ldr	r1, [pc, #32]	; (871c <__aeabi_dcmpun+0x3c>)
    86fa:	2000      	movs	r0, #0
    86fc:	428b      	cmp	r3, r1
    86fe:	d008      	beq.n	8712 <__aeabi_dcmpun+0x32>
    8700:	bd70      	pop	{r4, r5, r6, pc}
    8702:	4305      	orrs	r5, r0
    8704:	2001      	movs	r0, #1
    8706:	2d00      	cmp	r5, #0
    8708:	d1fa      	bne.n	8700 <__aeabi_dcmpun+0x20>
    870a:	4904      	ldr	r1, [pc, #16]	; (871c <__aeabi_dcmpun+0x3c>)
    870c:	2000      	movs	r0, #0
    870e:	428b      	cmp	r3, r1
    8710:	d1f6      	bne.n	8700 <__aeabi_dcmpun+0x20>
    8712:	4314      	orrs	r4, r2
    8714:	0020      	movs	r0, r4
    8716:	1e44      	subs	r4, r0, #1
    8718:	41a0      	sbcs	r0, r4
    871a:	e7f1      	b.n	8700 <__aeabi_dcmpun+0x20>
    871c:	000007ff 	.word	0x000007ff

00008720 <__aeabi_d2iz>:
    8720:	b530      	push	{r4, r5, lr}
    8722:	4d13      	ldr	r5, [pc, #76]	; (8770 <__aeabi_d2iz+0x50>)
    8724:	030a      	lsls	r2, r1, #12
    8726:	004b      	lsls	r3, r1, #1
    8728:	0b12      	lsrs	r2, r2, #12
    872a:	0d5b      	lsrs	r3, r3, #21
    872c:	0fc9      	lsrs	r1, r1, #31
    872e:	2400      	movs	r4, #0
    8730:	42ab      	cmp	r3, r5
    8732:	dd10      	ble.n	8756 <__aeabi_d2iz+0x36>
    8734:	4c0f      	ldr	r4, [pc, #60]	; (8774 <__aeabi_d2iz+0x54>)
    8736:	42a3      	cmp	r3, r4
    8738:	dc0f      	bgt.n	875a <__aeabi_d2iz+0x3a>
    873a:	2480      	movs	r4, #128	; 0x80
    873c:	4d0e      	ldr	r5, [pc, #56]	; (8778 <__aeabi_d2iz+0x58>)
    873e:	0364      	lsls	r4, r4, #13
    8740:	4322      	orrs	r2, r4
    8742:	1aed      	subs	r5, r5, r3
    8744:	2d1f      	cmp	r5, #31
    8746:	dd0b      	ble.n	8760 <__aeabi_d2iz+0x40>
    8748:	480c      	ldr	r0, [pc, #48]	; (877c <__aeabi_d2iz+0x5c>)
    874a:	1ac3      	subs	r3, r0, r3
    874c:	40da      	lsrs	r2, r3
    874e:	4254      	negs	r4, r2
    8750:	2900      	cmp	r1, #0
    8752:	d100      	bne.n	8756 <__aeabi_d2iz+0x36>
    8754:	0014      	movs	r4, r2
    8756:	0020      	movs	r0, r4
    8758:	bd30      	pop	{r4, r5, pc}
    875a:	4b09      	ldr	r3, [pc, #36]	; (8780 <__aeabi_d2iz+0x60>)
    875c:	18cc      	adds	r4, r1, r3
    875e:	e7fa      	b.n	8756 <__aeabi_d2iz+0x36>
    8760:	4c08      	ldr	r4, [pc, #32]	; (8784 <__aeabi_d2iz+0x64>)
    8762:	40e8      	lsrs	r0, r5
    8764:	46a4      	mov	ip, r4
    8766:	4463      	add	r3, ip
    8768:	409a      	lsls	r2, r3
    876a:	4302      	orrs	r2, r0
    876c:	e7ef      	b.n	874e <__aeabi_d2iz+0x2e>
    876e:	46c0      	nop			; (mov r8, r8)
    8770:	000003fe 	.word	0x000003fe
    8774:	0000041d 	.word	0x0000041d
    8778:	00000433 	.word	0x00000433
    877c:	00000413 	.word	0x00000413
    8780:	7fffffff 	.word	0x7fffffff
    8784:	fffffbed 	.word	0xfffffbed

00008788 <__aeabi_i2d>:
    8788:	b570      	push	{r4, r5, r6, lr}
    878a:	2800      	cmp	r0, #0
    878c:	d030      	beq.n	87f0 <__aeabi_i2d+0x68>
    878e:	17c3      	asrs	r3, r0, #31
    8790:	18c4      	adds	r4, r0, r3
    8792:	405c      	eors	r4, r3
    8794:	0fc5      	lsrs	r5, r0, #31
    8796:	0020      	movs	r0, r4
    8798:	f000 f94c 	bl	8a34 <__clzsi2>
    879c:	4b17      	ldr	r3, [pc, #92]	; (87fc <__aeabi_i2d+0x74>)
    879e:	4a18      	ldr	r2, [pc, #96]	; (8800 <__aeabi_i2d+0x78>)
    87a0:	1a1b      	subs	r3, r3, r0
    87a2:	1ad2      	subs	r2, r2, r3
    87a4:	2a1f      	cmp	r2, #31
    87a6:	dd18      	ble.n	87da <__aeabi_i2d+0x52>
    87a8:	4a16      	ldr	r2, [pc, #88]	; (8804 <__aeabi_i2d+0x7c>)
    87aa:	1ad2      	subs	r2, r2, r3
    87ac:	4094      	lsls	r4, r2
    87ae:	2200      	movs	r2, #0
    87b0:	0324      	lsls	r4, r4, #12
    87b2:	055b      	lsls	r3, r3, #21
    87b4:	0b24      	lsrs	r4, r4, #12
    87b6:	0d5b      	lsrs	r3, r3, #21
    87b8:	2100      	movs	r1, #0
    87ba:	0010      	movs	r0, r2
    87bc:	0324      	lsls	r4, r4, #12
    87be:	0d0a      	lsrs	r2, r1, #20
    87c0:	0b24      	lsrs	r4, r4, #12
    87c2:	0512      	lsls	r2, r2, #20
    87c4:	4322      	orrs	r2, r4
    87c6:	4c10      	ldr	r4, [pc, #64]	; (8808 <__aeabi_i2d+0x80>)
    87c8:	051b      	lsls	r3, r3, #20
    87ca:	4022      	ands	r2, r4
    87cc:	4313      	orrs	r3, r2
    87ce:	005b      	lsls	r3, r3, #1
    87d0:	07ed      	lsls	r5, r5, #31
    87d2:	085b      	lsrs	r3, r3, #1
    87d4:	432b      	orrs	r3, r5
    87d6:	0019      	movs	r1, r3
    87d8:	bd70      	pop	{r4, r5, r6, pc}
    87da:	0021      	movs	r1, r4
    87dc:	4091      	lsls	r1, r2
    87de:	000a      	movs	r2, r1
    87e0:	210b      	movs	r1, #11
    87e2:	1a08      	subs	r0, r1, r0
    87e4:	40c4      	lsrs	r4, r0
    87e6:	055b      	lsls	r3, r3, #21
    87e8:	0324      	lsls	r4, r4, #12
    87ea:	0b24      	lsrs	r4, r4, #12
    87ec:	0d5b      	lsrs	r3, r3, #21
    87ee:	e7e3      	b.n	87b8 <__aeabi_i2d+0x30>
    87f0:	2500      	movs	r5, #0
    87f2:	2300      	movs	r3, #0
    87f4:	2400      	movs	r4, #0
    87f6:	2200      	movs	r2, #0
    87f8:	e7de      	b.n	87b8 <__aeabi_i2d+0x30>
    87fa:	46c0      	nop			; (mov r8, r8)
    87fc:	0000041e 	.word	0x0000041e
    8800:	00000433 	.word	0x00000433
    8804:	00000413 	.word	0x00000413
    8808:	800fffff 	.word	0x800fffff

0000880c <__aeabi_ui2d>:
    880c:	b510      	push	{r4, lr}
    880e:	1e04      	subs	r4, r0, #0
    8810:	d028      	beq.n	8864 <__aeabi_ui2d+0x58>
    8812:	f000 f90f 	bl	8a34 <__clzsi2>
    8816:	4b15      	ldr	r3, [pc, #84]	; (886c <__aeabi_ui2d+0x60>)
    8818:	4a15      	ldr	r2, [pc, #84]	; (8870 <__aeabi_ui2d+0x64>)
    881a:	1a1b      	subs	r3, r3, r0
    881c:	1ad2      	subs	r2, r2, r3
    881e:	2a1f      	cmp	r2, #31
    8820:	dd15      	ble.n	884e <__aeabi_ui2d+0x42>
    8822:	4a14      	ldr	r2, [pc, #80]	; (8874 <__aeabi_ui2d+0x68>)
    8824:	1ad2      	subs	r2, r2, r3
    8826:	4094      	lsls	r4, r2
    8828:	2200      	movs	r2, #0
    882a:	0324      	lsls	r4, r4, #12
    882c:	055b      	lsls	r3, r3, #21
    882e:	0b24      	lsrs	r4, r4, #12
    8830:	0d5b      	lsrs	r3, r3, #21
    8832:	2100      	movs	r1, #0
    8834:	0010      	movs	r0, r2
    8836:	0324      	lsls	r4, r4, #12
    8838:	0d0a      	lsrs	r2, r1, #20
    883a:	0b24      	lsrs	r4, r4, #12
    883c:	0512      	lsls	r2, r2, #20
    883e:	4322      	orrs	r2, r4
    8840:	4c0d      	ldr	r4, [pc, #52]	; (8878 <__aeabi_ui2d+0x6c>)
    8842:	051b      	lsls	r3, r3, #20
    8844:	4022      	ands	r2, r4
    8846:	4313      	orrs	r3, r2
    8848:	005b      	lsls	r3, r3, #1
    884a:	0859      	lsrs	r1, r3, #1
    884c:	bd10      	pop	{r4, pc}
    884e:	0021      	movs	r1, r4
    8850:	4091      	lsls	r1, r2
    8852:	000a      	movs	r2, r1
    8854:	210b      	movs	r1, #11
    8856:	1a08      	subs	r0, r1, r0
    8858:	40c4      	lsrs	r4, r0
    885a:	055b      	lsls	r3, r3, #21
    885c:	0324      	lsls	r4, r4, #12
    885e:	0b24      	lsrs	r4, r4, #12
    8860:	0d5b      	lsrs	r3, r3, #21
    8862:	e7e6      	b.n	8832 <__aeabi_ui2d+0x26>
    8864:	2300      	movs	r3, #0
    8866:	2400      	movs	r4, #0
    8868:	2200      	movs	r2, #0
    886a:	e7e2      	b.n	8832 <__aeabi_ui2d+0x26>
    886c:	0000041e 	.word	0x0000041e
    8870:	00000433 	.word	0x00000433
    8874:	00000413 	.word	0x00000413
    8878:	800fffff 	.word	0x800fffff

0000887c <__aeabi_f2d>:
    887c:	0041      	lsls	r1, r0, #1
    887e:	0e09      	lsrs	r1, r1, #24
    8880:	1c4b      	adds	r3, r1, #1
    8882:	b570      	push	{r4, r5, r6, lr}
    8884:	b2db      	uxtb	r3, r3
    8886:	0246      	lsls	r6, r0, #9
    8888:	0a75      	lsrs	r5, r6, #9
    888a:	0fc4      	lsrs	r4, r0, #31
    888c:	2b01      	cmp	r3, #1
    888e:	dd14      	ble.n	88ba <__aeabi_f2d+0x3e>
    8890:	23e0      	movs	r3, #224	; 0xe0
    8892:	009b      	lsls	r3, r3, #2
    8894:	076d      	lsls	r5, r5, #29
    8896:	0b36      	lsrs	r6, r6, #12
    8898:	18cb      	adds	r3, r1, r3
    889a:	2100      	movs	r1, #0
    889c:	0d0a      	lsrs	r2, r1, #20
    889e:	0028      	movs	r0, r5
    88a0:	0512      	lsls	r2, r2, #20
    88a2:	4d1c      	ldr	r5, [pc, #112]	; (8914 <__aeabi_f2d+0x98>)
    88a4:	4332      	orrs	r2, r6
    88a6:	055b      	lsls	r3, r3, #21
    88a8:	402a      	ands	r2, r5
    88aa:	085b      	lsrs	r3, r3, #1
    88ac:	4313      	orrs	r3, r2
    88ae:	005b      	lsls	r3, r3, #1
    88b0:	07e4      	lsls	r4, r4, #31
    88b2:	085b      	lsrs	r3, r3, #1
    88b4:	4323      	orrs	r3, r4
    88b6:	0019      	movs	r1, r3
    88b8:	bd70      	pop	{r4, r5, r6, pc}
    88ba:	2900      	cmp	r1, #0
    88bc:	d114      	bne.n	88e8 <__aeabi_f2d+0x6c>
    88be:	2d00      	cmp	r5, #0
    88c0:	d01e      	beq.n	8900 <__aeabi_f2d+0x84>
    88c2:	0028      	movs	r0, r5
    88c4:	f000 f8b6 	bl	8a34 <__clzsi2>
    88c8:	280a      	cmp	r0, #10
    88ca:	dc1c      	bgt.n	8906 <__aeabi_f2d+0x8a>
    88cc:	230b      	movs	r3, #11
    88ce:	002a      	movs	r2, r5
    88d0:	1a1b      	subs	r3, r3, r0
    88d2:	40da      	lsrs	r2, r3
    88d4:	0003      	movs	r3, r0
    88d6:	3315      	adds	r3, #21
    88d8:	409d      	lsls	r5, r3
    88da:	4b0f      	ldr	r3, [pc, #60]	; (8918 <__aeabi_f2d+0x9c>)
    88dc:	0312      	lsls	r2, r2, #12
    88de:	1a1b      	subs	r3, r3, r0
    88e0:	055b      	lsls	r3, r3, #21
    88e2:	0b16      	lsrs	r6, r2, #12
    88e4:	0d5b      	lsrs	r3, r3, #21
    88e6:	e7d8      	b.n	889a <__aeabi_f2d+0x1e>
    88e8:	2d00      	cmp	r5, #0
    88ea:	d006      	beq.n	88fa <__aeabi_f2d+0x7e>
    88ec:	0b32      	lsrs	r2, r6, #12
    88ee:	2680      	movs	r6, #128	; 0x80
    88f0:	0336      	lsls	r6, r6, #12
    88f2:	076d      	lsls	r5, r5, #29
    88f4:	4316      	orrs	r6, r2
    88f6:	4b09      	ldr	r3, [pc, #36]	; (891c <__aeabi_f2d+0xa0>)
    88f8:	e7cf      	b.n	889a <__aeabi_f2d+0x1e>
    88fa:	4b08      	ldr	r3, [pc, #32]	; (891c <__aeabi_f2d+0xa0>)
    88fc:	2600      	movs	r6, #0
    88fe:	e7cc      	b.n	889a <__aeabi_f2d+0x1e>
    8900:	2300      	movs	r3, #0
    8902:	2600      	movs	r6, #0
    8904:	e7c9      	b.n	889a <__aeabi_f2d+0x1e>
    8906:	0003      	movs	r3, r0
    8908:	002a      	movs	r2, r5
    890a:	3b0b      	subs	r3, #11
    890c:	409a      	lsls	r2, r3
    890e:	2500      	movs	r5, #0
    8910:	e7e3      	b.n	88da <__aeabi_f2d+0x5e>
    8912:	46c0      	nop			; (mov r8, r8)
    8914:	800fffff 	.word	0x800fffff
    8918:	00000389 	.word	0x00000389
    891c:	000007ff 	.word	0x000007ff

00008920 <__aeabi_d2f>:
    8920:	b5f0      	push	{r4, r5, r6, r7, lr}
    8922:	004c      	lsls	r4, r1, #1
    8924:	0d64      	lsrs	r4, r4, #21
    8926:	030b      	lsls	r3, r1, #12
    8928:	1c62      	adds	r2, r4, #1
    892a:	0f45      	lsrs	r5, r0, #29
    892c:	0a5b      	lsrs	r3, r3, #9
    892e:	0552      	lsls	r2, r2, #21
    8930:	432b      	orrs	r3, r5
    8932:	0fc9      	lsrs	r1, r1, #31
    8934:	00c5      	lsls	r5, r0, #3
    8936:	0d52      	lsrs	r2, r2, #21
    8938:	2a01      	cmp	r2, #1
    893a:	dd28      	ble.n	898e <__aeabi_d2f+0x6e>
    893c:	4a3a      	ldr	r2, [pc, #232]	; (8a28 <__aeabi_d2f+0x108>)
    893e:	18a6      	adds	r6, r4, r2
    8940:	2efe      	cmp	r6, #254	; 0xfe
    8942:	dc1b      	bgt.n	897c <__aeabi_d2f+0x5c>
    8944:	2e00      	cmp	r6, #0
    8946:	dd3e      	ble.n	89c6 <__aeabi_d2f+0xa6>
    8948:	0180      	lsls	r0, r0, #6
    894a:	0002      	movs	r2, r0
    894c:	1e50      	subs	r0, r2, #1
    894e:	4182      	sbcs	r2, r0
    8950:	0f6d      	lsrs	r5, r5, #29
    8952:	432a      	orrs	r2, r5
    8954:	00db      	lsls	r3, r3, #3
    8956:	4313      	orrs	r3, r2
    8958:	075a      	lsls	r2, r3, #29
    895a:	d004      	beq.n	8966 <__aeabi_d2f+0x46>
    895c:	220f      	movs	r2, #15
    895e:	401a      	ands	r2, r3
    8960:	2a04      	cmp	r2, #4
    8962:	d000      	beq.n	8966 <__aeabi_d2f+0x46>
    8964:	3304      	adds	r3, #4
    8966:	2280      	movs	r2, #128	; 0x80
    8968:	04d2      	lsls	r2, r2, #19
    896a:	401a      	ands	r2, r3
    896c:	d05a      	beq.n	8a24 <__aeabi_d2f+0x104>
    896e:	3601      	adds	r6, #1
    8970:	2eff      	cmp	r6, #255	; 0xff
    8972:	d003      	beq.n	897c <__aeabi_d2f+0x5c>
    8974:	019b      	lsls	r3, r3, #6
    8976:	0a5b      	lsrs	r3, r3, #9
    8978:	b2f4      	uxtb	r4, r6
    897a:	e001      	b.n	8980 <__aeabi_d2f+0x60>
    897c:	24ff      	movs	r4, #255	; 0xff
    897e:	2300      	movs	r3, #0
    8980:	0258      	lsls	r0, r3, #9
    8982:	05e4      	lsls	r4, r4, #23
    8984:	0a40      	lsrs	r0, r0, #9
    8986:	07c9      	lsls	r1, r1, #31
    8988:	4320      	orrs	r0, r4
    898a:	4308      	orrs	r0, r1
    898c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    898e:	2c00      	cmp	r4, #0
    8990:	d007      	beq.n	89a2 <__aeabi_d2f+0x82>
    8992:	431d      	orrs	r5, r3
    8994:	d0f2      	beq.n	897c <__aeabi_d2f+0x5c>
    8996:	2080      	movs	r0, #128	; 0x80
    8998:	00db      	lsls	r3, r3, #3
    899a:	0480      	lsls	r0, r0, #18
    899c:	4303      	orrs	r3, r0
    899e:	26ff      	movs	r6, #255	; 0xff
    89a0:	e7da      	b.n	8958 <__aeabi_d2f+0x38>
    89a2:	432b      	orrs	r3, r5
    89a4:	d003      	beq.n	89ae <__aeabi_d2f+0x8e>
    89a6:	2305      	movs	r3, #5
    89a8:	08db      	lsrs	r3, r3, #3
    89aa:	2cff      	cmp	r4, #255	; 0xff
    89ac:	d003      	beq.n	89b6 <__aeabi_d2f+0x96>
    89ae:	025b      	lsls	r3, r3, #9
    89b0:	0a5b      	lsrs	r3, r3, #9
    89b2:	b2e4      	uxtb	r4, r4
    89b4:	e7e4      	b.n	8980 <__aeabi_d2f+0x60>
    89b6:	2b00      	cmp	r3, #0
    89b8:	d032      	beq.n	8a20 <__aeabi_d2f+0x100>
    89ba:	2080      	movs	r0, #128	; 0x80
    89bc:	03c0      	lsls	r0, r0, #15
    89be:	4303      	orrs	r3, r0
    89c0:	025b      	lsls	r3, r3, #9
    89c2:	0a5b      	lsrs	r3, r3, #9
    89c4:	e7dc      	b.n	8980 <__aeabi_d2f+0x60>
    89c6:	0032      	movs	r2, r6
    89c8:	3217      	adds	r2, #23
    89ca:	db14      	blt.n	89f6 <__aeabi_d2f+0xd6>
    89cc:	2280      	movs	r2, #128	; 0x80
    89ce:	271e      	movs	r7, #30
    89d0:	0412      	lsls	r2, r2, #16
    89d2:	4313      	orrs	r3, r2
    89d4:	1bbf      	subs	r7, r7, r6
    89d6:	2f1f      	cmp	r7, #31
    89d8:	dc0f      	bgt.n	89fa <__aeabi_d2f+0xda>
    89da:	4a14      	ldr	r2, [pc, #80]	; (8a2c <__aeabi_d2f+0x10c>)
    89dc:	4694      	mov	ip, r2
    89de:	4464      	add	r4, ip
    89e0:	002a      	movs	r2, r5
    89e2:	40a5      	lsls	r5, r4
    89e4:	002e      	movs	r6, r5
    89e6:	40a3      	lsls	r3, r4
    89e8:	1e75      	subs	r5, r6, #1
    89ea:	41ae      	sbcs	r6, r5
    89ec:	40fa      	lsrs	r2, r7
    89ee:	4333      	orrs	r3, r6
    89f0:	4313      	orrs	r3, r2
    89f2:	2600      	movs	r6, #0
    89f4:	e7b0      	b.n	8958 <__aeabi_d2f+0x38>
    89f6:	2400      	movs	r4, #0
    89f8:	e7d5      	b.n	89a6 <__aeabi_d2f+0x86>
    89fa:	2202      	movs	r2, #2
    89fc:	4252      	negs	r2, r2
    89fe:	1b96      	subs	r6, r2, r6
    8a00:	001a      	movs	r2, r3
    8a02:	40f2      	lsrs	r2, r6
    8a04:	2f20      	cmp	r7, #32
    8a06:	d009      	beq.n	8a1c <__aeabi_d2f+0xfc>
    8a08:	4809      	ldr	r0, [pc, #36]	; (8a30 <__aeabi_d2f+0x110>)
    8a0a:	4684      	mov	ip, r0
    8a0c:	4464      	add	r4, ip
    8a0e:	40a3      	lsls	r3, r4
    8a10:	432b      	orrs	r3, r5
    8a12:	1e5d      	subs	r5, r3, #1
    8a14:	41ab      	sbcs	r3, r5
    8a16:	2600      	movs	r6, #0
    8a18:	4313      	orrs	r3, r2
    8a1a:	e79d      	b.n	8958 <__aeabi_d2f+0x38>
    8a1c:	2300      	movs	r3, #0
    8a1e:	e7f7      	b.n	8a10 <__aeabi_d2f+0xf0>
    8a20:	2300      	movs	r3, #0
    8a22:	e7ad      	b.n	8980 <__aeabi_d2f+0x60>
    8a24:	0034      	movs	r4, r6
    8a26:	e7bf      	b.n	89a8 <__aeabi_d2f+0x88>
    8a28:	fffffc80 	.word	0xfffffc80
    8a2c:	fffffc82 	.word	0xfffffc82
    8a30:	fffffca2 	.word	0xfffffca2

00008a34 <__clzsi2>:
    8a34:	211c      	movs	r1, #28
    8a36:	2301      	movs	r3, #1
    8a38:	041b      	lsls	r3, r3, #16
    8a3a:	4298      	cmp	r0, r3
    8a3c:	d301      	bcc.n	8a42 <__clzsi2+0xe>
    8a3e:	0c00      	lsrs	r0, r0, #16
    8a40:	3910      	subs	r1, #16
    8a42:	0a1b      	lsrs	r3, r3, #8
    8a44:	4298      	cmp	r0, r3
    8a46:	d301      	bcc.n	8a4c <__clzsi2+0x18>
    8a48:	0a00      	lsrs	r0, r0, #8
    8a4a:	3908      	subs	r1, #8
    8a4c:	091b      	lsrs	r3, r3, #4
    8a4e:	4298      	cmp	r0, r3
    8a50:	d301      	bcc.n	8a56 <__clzsi2+0x22>
    8a52:	0900      	lsrs	r0, r0, #4
    8a54:	3904      	subs	r1, #4
    8a56:	a202      	add	r2, pc, #8	; (adr r2, 8a60 <__clzsi2+0x2c>)
    8a58:	5c10      	ldrb	r0, [r2, r0]
    8a5a:	1840      	adds	r0, r0, r1
    8a5c:	4770      	bx	lr
    8a5e:	46c0      	nop			; (mov r8, r8)
    8a60:	02020304 	.word	0x02020304
    8a64:	01010101 	.word	0x01010101
	...
    8a70:	0000023e 	.word	0x0000023e
    8a74:	0000024c 	.word	0x0000024c
    8a78:	0000025a 	.word	0x0000025a
    8a7c:	00000276 	.word	0x00000276
    8a80:	00000268 	.word	0x00000268
    8a84:	41525453 	.word	0x41525453
    8a88:	00000000 	.word	0x00000000
    8a8c:	5446454c 	.word	0x5446454c
    8a90:	00000000 	.word	0x00000000
    8a94:	48474952 	.word	0x48474952
    8a98:	00000000 	.word	0x00000000
    8a9c:	4b434142 	.word	0x4b434142
    8aa0:	00000000 	.word	0x00000000
    8aa4:	0000776d 	.word	0x0000776d
    8aa8:	00000000 	.word	0x00000000
    8aac:	0000616d 	.word	0x0000616d
    8ab0:	0000000a 	.word	0x0000000a
    8ab4:	0000646d 	.word	0x0000646d
    8ab8:	0000000a 	.word	0x0000000a
    8abc:	0000736d 	.word	0x0000736d
    8ac0:	0000000a 	.word	0x0000000a
    8ac4:	0000206d 	.word	0x0000206d
    8ac8:	00000000 	.word	0x00000000
    8acc:	322e3525 	.word	0x322e3525
    8ad0:	25202c66 	.word	0x25202c66
    8ad4:	66322e35 	.word	0x66322e35
    8ad8:	3525202c 	.word	0x3525202c
    8adc:	0a66322e 	.word	0x0a66322e
    8ae0:	00000000 	.word	0x00000000

00008ae4 <_tcc_intflag>:
    8ae4:	00000001 00000002 00000004 00000008     ................
    8af4:	00001000 00002000 00004000 00008000     ..... ...@......
    8b04:	00010000 00020000 00040000 00080000     ................
    8b14:	0000776d 00000000 0000206d 00000000     mw......m ......

00008b24 <tc_interrupt_vectors.12756>:
    8b24:	00141312 42000800 42000c00 42001000     .......B...B...B
    8b34:	42001400 42001800 42001c00 00001b76     ...B...B...Bv...
    8b44:	00001b72 00001b72 00001bd4 00001bd4     r...r...........
    8b54:	00001b8a 00001b7c 00001b90 00001bc2     ....|...........
    8b64:	00001e10 00001df0 00001df0 00001e7c     ............|...
    8b74:	00001e02 00001e1e 00001df4 00001e2c     ............,...
    8b84:	00001e6c 42002c00 42003000 42003400     l....,.B.0.B.4.B

00008b94 <tc_interrupt_vectors.11884>:
    8b94:	00141312 6e6f7266 6f6e2074 73206564     ....front node s
    8ba4:	70757465 6d6f6320 74656c70 00000065     etup complete...

00008bb4 <_global_impure_ptr>:
    8bb4:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
    8bc4:	006e616e 31300030 35343332 39383736     nan.0.0123456789
    8bd4:	44434241 30004645 34333231 38373635     ABCDEF.012345678
    8be4:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
    8bf4:	4e614e00 00000000                       .NaN....

00008bfc <__sf_fake_stderr>:
	...

00008c1c <__sf_fake_stdin>:
	...

00008c3c <__sf_fake_stdout>:
	...

00008c60 <__mprec_bigtens>:
    8c60:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8c70:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8c80:	7f73bf3c 75154fdd                       <.s..O.u

00008c88 <__mprec_tens>:
    8c88:	00000000 3ff00000 00000000 40240000     .......?......$@
    8c98:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8ca8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8cb8:	00000000 412e8480 00000000 416312d0     .......A......cA
    8cc8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8cd8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8ce8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8cf8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8d08:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8d18:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8d28:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8d38:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8d48:	79d99db4 44ea7843                       ...yCx.D

00008d50 <p05.6052>:
    8d50:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
    8d60:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
    8d70:	5849534f 00002e00                                OSIX...

00008d77 <_ctype_>:
    8d77:	20202000 20202020 28282020 20282828     .         ((((( 
    8d87:	20202020 20202020 20202020 20202020                     
    8d97:	10108820 10101010 10101010 10101010      ...............
    8da7:	04040410 04040404 10040404 10101010     ................
    8db7:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8dc7:	01010101 01010101 01010101 10101010     ................
    8dd7:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8de7:	02020202 02020202 02020202 10101010     ................
    8df7:	00000020 00000000 00000000 00000000      ...............
	...
    8e77:	0067f800 0067c800 0067da00 00671c00     ..g...g...g...g.
    8e87:	0067da00 0067be00 0067da00 00671c00     ..g...g...g...g.
    8e97:	0067c800 0067c800 0067be00 00671c00     ..g...g...g...g.
    8ea7:	00672400 00672400 00672400 0067e000     .$g..$g..$g...g.
    8eb7:	0067c800 0067c800 00679c00 00688000     ..g...g...g...h.
    8ec7:	00679c00 0067be00 00679c00 00688000     ..g...g...g...h.
    8ed7:	0067c800 0067c800 0067be00 00688000     ..g...g...g...h.
    8ee7:	00672400 00672400 00672400 00688a00     .$g..$g..$g...h.
    8ef7:	006b7800 006ac800 006ac800 006ac600     .xk...j...j...j.
    8f07:	006b6a00 006b6a00 006b6000 006ac600     .jk..jk..`k...j.
    8f17:	006b6a00 006b6000 006b6a00 006ac600     .jk..`k..jk...j.
    8f27:	006b7000 006b7000 006b7000 006c0000     .pk..pk..pk...l.
    8f37:	00754400 00752600 0074e000 0073fe00     .Du..&u...t...s.
    8f47:	0074e000 00751800 0074e000 0073fe00     ..t...u...t...s.
    8f57:	00752600 00752600 00751800 0073fe00     .&u..&u...u...s.
    8f67:	0073f600 0073f600 0073f600 00775c00     ..s...s...s..\w.
    8f77:	007da400 007c6400 007c6400 007c6000     ..}..d|..d|..`|.
    8f87:	007d7c00 007d7c00 007d6e00 007c6000     .|}..|}..n}..`|.
    8f97:	007d7c00 007d6e00 007d7c00 007c6000     .|}..n}..|}..`|.
    8fa7:	007d8400 007d8400 007d8400 007f8800     ..}...}...}.....
	...

00008fb8 <_init>:
    8fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fba:	46c0      	nop			; (mov r8, r8)
    8fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8fbe:	bc08      	pop	{r3}
    8fc0:	469e      	mov	lr, r3
    8fc2:	4770      	bx	lr

00008fc4 <__init_array_start>:
    8fc4:	000000dd 	.word	0x000000dd

00008fc8 <_fini>:
    8fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fca:	46c0      	nop			; (mov r8, r8)
    8fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8fce:	bc08      	pop	{r3}
    8fd0:	469e      	mov	lr, r3
    8fd2:	4770      	bx	lr

00008fd4 <__fini_array_start>:
    8fd4:	000000b5 	.word	0x000000b5
